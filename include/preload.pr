import map
import ffi
import std
import vector
import symbol

const RTLD_LAZY = 1

export type DLL = struct {
    handle: *
}

export def destruct(dll: *DLL) {
    #if defined WIN32 {
        windows::FreeLibrary(dll.handle !*windows::s_HINSTANCE__)
    } else {
        linux::dlclose(dll.handle)
    }
}

export let symbols = map::make(type &symbol::Symbol)
export let dlls = map::make(DLL)

export def load_ffi(syms: [symbol::Symbol]) {
    for var i in 0..symbols.size {
        let sym = syms[i]
        symbols[sym.name] = sym
    }
}

export def load_library(name: string) {
    if dlls.contains(name) { return }
    #if defined WIN32 {
        dlls[name] = { windows::LoadLibraryA(name.value) !* } !DLL
    } else {
        dlls[name] = { linux::dlopen(name.value, RTLD_LAZY) } !DLL
    }
}

export def get_function(sym: &symbol::Symbol) -> () -> () {
    assert sym.kind == symbol::SymbolKind::FUNCTION
    let name = sym.name
    if sym.function { return sym.function }
    if sym.dllimport {
        let keys = dlls.keys
        for var i in 0..keys.size {
            let dll = dlls[keys[i]]
            var proc: *
            #if defined WIN32 {
                proc = windows::GetProcAddress(dll.handle !*windows::s_HINSTANCE__, name.value)
            } else {
                proc = linux::dlsym(dll.handle, name.value)
            }
            if proc {
                sym.function = proc !() -> ()
                break
            }
        }
    }
    return sym.function
}

import cstd
load_ffi(cstd::__SYMBOLS)
import ffi
load_ffi(ffi::__SYMBOLS)

#if defined WIN32 {
    import windows
    load_ffi(windows::__SYMBOLS)
    load_library("Kernel32.dll")
    load_library("User32.dll")
} else {
    import linux
    load_ffi(linux::__SYMBOLS)
}