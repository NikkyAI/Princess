import map
import ffi
import std

export type FfiFunction = struct {
    name: string
    ptr: ->
    initialized: bool
    ffi_cif: ffi::ffi_cif
}

export type FfiGlobal = struct {
    name: string
    ptr: *
}

// Map of FfiVariable
export var FFI_GLOBALS: &SMap(&FfiGlobal)
// Map of FfiFunction
export var FFI_FUNCTIONS: &SMap(&FfiFunction)

export def load_ffi(def_names: [string], defs: [type () -> ()], var_names: [string], vars: [*]) {
    // We are getting called from before the module's main function so
    // we must do some setup here
    if not FFI_GLOBALS {
        FFI_GLOBALS = map::make(type &FfiGlobal)
    }
    if not FFI_FUNCTIONS {
        FFI_FUNCTIONS = map::make(type &FfiFunction)
    }

    assert(def_names.size == defs.size)
    for var i in 0..def_names.size {
        let name = def_names[i]
        let value = defs[i]
        let ffi_function = {
            name = name,
            ptr = value,
            initialized = false
        } !&FfiFunction
        FFI_FUNCTIONS[name] = ffi_function

        let ffi_global = {
            name = name,
            ptr = value !*
        } !&FfiGlobal
        FFI_GLOBALS[name] = ffi_global
    }

    assert(var_names.size == vars.size)
    for var i in 0..var_names.size {
        let name = var_names[i]
        let value = vars[i]
        let ffi_global = {
            name = name,
            ptr = value
        } !&FfiGlobal
        FFI_GLOBALS[name] = ffi_global
    }
}

import cstd
load_ffi(cstd::__DEF_NAMES, cstd::__DEFS, cstd::__VAR_NAMES, cstd::__VARS)
import ffi
load_ffi(ffi::__DEF_NAMES, ffi::__DEFS, ffi::__VAR_NAMES, ffi::__VARS)

#if defined WIN32 {
    import windows
    load_ffi(windows::__DEF_NAMES, windows::__DEFS, windows::__VAR_NAMES, windows::__VARS)
} else {
    import linux
    load_ffi(linux::__DEF_NAMES, linux::__DEFS, linux::__VAR_NAMES, linux::__VARS)
}