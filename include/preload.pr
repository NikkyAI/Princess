import map
import ffi

export type FfiFunction = struct {
    name: string
    ptr: ->
    initialized: bool
    ffi_cif: ffi::ffi_cif
}

export type FfiGlobal = struct {
    name: string
    ptr: *
}

// Map of FfiVariable
export var FFI_GLOBALS: *map::Map
// Map of FfiFunction
export var FFI_FUNCTIONS: *map::Map

export def load_ffi(def_names: [string], defs: [type () -> ()], var_names: [string], vars: [*]) {
    // We are getting called from before the module's main function so
    // we must do some setup here
    if not FFI_GLOBALS {
        FFI_GLOBALS = map::make()
    }
    if not FFI_FUNCTIONS {
        FFI_FUNCTIONS = map::make()
    }

    assert(def_names.size == defs.size)
    for var i in 0..def_names.size {
        let name = def_names[i]
        let value = defs[i]
        let ffi_function = allocate(FfiFunction)
        @ffi_function = {
            name = name,
            ptr = value,
            initialized = false
        } !FfiFunction
        map::put(FFI_FUNCTIONS, name, ffi_function)

        let ffi_global = allocate(FfiGlobal)
        @ffi_global = {
            name = name,
            ptr = value !*
        } !FfiGlobal
        map::put(FFI_GLOBALS, name, ffi_global)
    }

    assert(var_names.size == vars.size)
    for var i in 0..var_names.size {
        let name = var_names[i]
        let value = vars[i]
        let ffi_global = allocate(FfiGlobal)
        @ffi_global = {
            name = name,
            ptr = value
        } !FfiGlobal
        map::put(FFI_GLOBALS, name, ffi_global)
    }
}