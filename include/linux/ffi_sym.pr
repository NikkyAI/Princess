import ffi
import symbol
export var __SYMBOLS: [36; symbol::Symbol]
__SYMBOLS[0] = { kind = symbol::SymbolKind::FUNCTION, dllimport = false, name = "ffi_raw_call", function = *ffi_raw_call !def () -> ()} !symbol::Symbol
__SYMBOLS[1] = { kind = symbol::SymbolKind::FUNCTION, dllimport = false, name = "ffi_ptrarray_to_raw", function = *ffi_ptrarray_to_raw !def () -> ()} !symbol::Symbol
__SYMBOLS[2] = { kind = symbol::SymbolKind::FUNCTION, dllimport = false, name = "ffi_raw_to_ptrarray", function = *ffi_raw_to_ptrarray !def () -> ()} !symbol::Symbol
__SYMBOLS[3] = { kind = symbol::SymbolKind::FUNCTION, dllimport = false, name = "ffi_raw_size", function = *ffi_raw_size !def () -> ()} !symbol::Symbol
__SYMBOLS[4] = { kind = symbol::SymbolKind::FUNCTION, dllimport = false, name = "ffi_java_raw_call", function = *ffi_java_raw_call !def () -> ()} !symbol::Symbol
__SYMBOLS[5] = { kind = symbol::SymbolKind::FUNCTION, dllimport = false, name = "ffi_java_ptrarray_to_raw", function = *ffi_java_ptrarray_to_raw !def () -> ()} !symbol::Symbol
__SYMBOLS[6] = { kind = symbol::SymbolKind::FUNCTION, dllimport = false, name = "ffi_java_raw_to_ptrarray", function = *ffi_java_raw_to_ptrarray !def () -> ()} !symbol::Symbol
__SYMBOLS[7] = { kind = symbol::SymbolKind::FUNCTION, dllimport = false, name = "ffi_java_raw_size", function = *ffi_java_raw_size !def () -> ()} !symbol::Symbol
__SYMBOLS[8] = { kind = symbol::SymbolKind::FUNCTION, dllimport = false, name = "ffi_closure_alloc", function = *ffi_closure_alloc !def () -> ()} !symbol::Symbol
__SYMBOLS[9] = { kind = symbol::SymbolKind::FUNCTION, dllimport = false, name = "ffi_closure_free", function = *ffi_closure_free !def () -> ()} !symbol::Symbol
__SYMBOLS[10] = { kind = symbol::SymbolKind::FUNCTION, dllimport = false, name = "ffi_prep_closure", function = *ffi_prep_closure !def () -> ()} !symbol::Symbol
__SYMBOLS[11] = { kind = symbol::SymbolKind::FUNCTION, dllimport = false, name = "ffi_prep_closure_loc", function = *ffi_prep_closure_loc !def () -> ()} !symbol::Symbol
__SYMBOLS[12] = { kind = symbol::SymbolKind::FUNCTION, dllimport = false, name = "ffi_prep_raw_closure", function = *ffi_prep_raw_closure !def () -> ()} !symbol::Symbol
__SYMBOLS[13] = { kind = symbol::SymbolKind::FUNCTION, dllimport = false, name = "ffi_prep_raw_closure_loc", function = *ffi_prep_raw_closure_loc !def () -> ()} !symbol::Symbol
__SYMBOLS[14] = { kind = symbol::SymbolKind::FUNCTION, dllimport = false, name = "ffi_prep_java_raw_closure", function = *ffi_prep_java_raw_closure !def () -> ()} !symbol::Symbol
__SYMBOLS[15] = { kind = symbol::SymbolKind::FUNCTION, dllimport = false, name = "ffi_prep_java_raw_closure_loc", function = *ffi_prep_java_raw_closure_loc !def () -> ()} !symbol::Symbol
__SYMBOLS[16] = { kind = symbol::SymbolKind::FUNCTION, dllimport = false, name = "ffi_prep_go_closure", function = *ffi_prep_go_closure !def () -> ()} !symbol::Symbol
__SYMBOLS[17] = { kind = symbol::SymbolKind::FUNCTION, dllimport = false, name = "ffi_call_go", function = *ffi_call_go !def () -> ()} !symbol::Symbol
__SYMBOLS[18] = { kind = symbol::SymbolKind::FUNCTION, dllimport = false, name = "ffi_prep_cif", function = *ffi_prep_cif !def () -> ()} !symbol::Symbol
__SYMBOLS[19] = { kind = symbol::SymbolKind::FUNCTION, dllimport = false, name = "ffi_prep_cif_var", function = *ffi_prep_cif_var !def () -> ()} !symbol::Symbol
__SYMBOLS[20] = { kind = symbol::SymbolKind::FUNCTION, dllimport = false, name = "ffi_call", function = *ffi_call !def () -> ()} !symbol::Symbol
__SYMBOLS[21] = { kind = symbol::SymbolKind::FUNCTION, dllimport = false, name = "ffi_get_struct_offsets", function = *ffi_get_struct_offsets !def () -> ()} !symbol::Symbol
__SYMBOLS[22] = { kind = symbol::SymbolKind::VARIABLE, dllimport = false, name = "ffi_type_void", variable = *ffi_type_void !*} !symbol::Symbol
__SYMBOLS[23] = { kind = symbol::SymbolKind::VARIABLE, dllimport = false, name = "ffi_type_uint8", variable = *ffi_type_uint8 !*} !symbol::Symbol
__SYMBOLS[24] = { kind = symbol::SymbolKind::VARIABLE, dllimport = false, name = "ffi_type_sint8", variable = *ffi_type_sint8 !*} !symbol::Symbol
__SYMBOLS[25] = { kind = symbol::SymbolKind::VARIABLE, dllimport = false, name = "ffi_type_uint16", variable = *ffi_type_uint16 !*} !symbol::Symbol
__SYMBOLS[26] = { kind = symbol::SymbolKind::VARIABLE, dllimport = false, name = "ffi_type_sint16", variable = *ffi_type_sint16 !*} !symbol::Symbol
__SYMBOLS[27] = { kind = symbol::SymbolKind::VARIABLE, dllimport = false, name = "ffi_type_uint32", variable = *ffi_type_uint32 !*} !symbol::Symbol
__SYMBOLS[28] = { kind = symbol::SymbolKind::VARIABLE, dllimport = false, name = "ffi_type_sint32", variable = *ffi_type_sint32 !*} !symbol::Symbol
__SYMBOLS[29] = { kind = symbol::SymbolKind::VARIABLE, dllimport = false, name = "ffi_type_uint64", variable = *ffi_type_uint64 !*} !symbol::Symbol
__SYMBOLS[30] = { kind = symbol::SymbolKind::VARIABLE, dllimport = false, name = "ffi_type_sint64", variable = *ffi_type_sint64 !*} !symbol::Symbol
__SYMBOLS[31] = { kind = symbol::SymbolKind::VARIABLE, dllimport = false, name = "ffi_type_float", variable = *ffi_type_float !*} !symbol::Symbol
__SYMBOLS[32] = { kind = symbol::SymbolKind::VARIABLE, dllimport = false, name = "ffi_type_double", variable = *ffi_type_double !*} !symbol::Symbol
__SYMBOLS[33] = { kind = symbol::SymbolKind::VARIABLE, dllimport = false, name = "ffi_type_pointer", variable = *ffi_type_pointer !*} !symbol::Symbol
__SYMBOLS[34] = { kind = symbol::SymbolKind::VARIABLE, dllimport = false, name = "ffi_type_complex_float", variable = *ffi_type_complex_float !*} !symbol::Symbol
__SYMBOLS[35] = { kind = symbol::SymbolKind::VARIABLE, dllimport = false, name = "ffi_type_complex_double", variable = *ffi_type_complex_double !*} !symbol::Symbol
