export const FP_NAN: int = 0
export const FP_INFINITE: int = 1
export const FP_ZERO: int = 2
export const FP_SUBNORMAL: int = 3
export const FP_NORMAL: int = 4
export const _ISupper: int = (((((1 << (0))) << 8)) if ((0) < 8) else ((((1 << (0))) >> 8)))
export const _ISlower: int = (((((1 << (1))) << 8)) if ((1) < 8) else ((((1 << (1))) >> 8)))
export const _ISalpha: int = (((((1 << (2))) << 8)) if ((2) < 8) else ((((1 << (2))) >> 8)))
export const _ISdigit: int = (((((1 << (3))) << 8)) if ((3) < 8) else ((((1 << (3))) >> 8)))
export const _ISxdigit: int = (((((1 << (4))) << 8)) if ((4) < 8) else ((((1 << (4))) >> 8)))
export const _ISspace: int = (((((1 << (5))) << 8)) if ((5) < 8) else ((((1 << (5))) >> 8)))
export const _ISprint: int = (((((1 << (6))) << 8)) if ((6) < 8) else ((((1 << (6))) >> 8)))
export const _ISgraph: int = (((((1 << (7))) << 8)) if ((7) < 8) else ((((1 << (7))) >> 8)))
export const _ISblank: int = (((((1 << (8))) << 8)) if ((8) < 8) else ((((1 << (8))) >> 8)))
export const _IScntrl: int = (((((1 << (9))) << 8)) if ((9) < 8) else ((((1 << (9))) >> 8)))
export const _ISpunct: int = (((((1 << (10))) << 8)) if ((10) < 8) else ((((1 << (10))) >> 8)))
export const _ISalnum: int = (((((1 << (11))) << 8)) if ((11) < 8) else ((((1 << (11))) >> 8)))
export type idtype_t = enum { P_ALL; P_PID; P_PGID; }
export type div_t = struct { quot: int; rem: int; }
export type ldiv_t = struct { quot: long; rem: long; }
export type lldiv_t = struct { quot: int64; rem: int64; }
export type __fsid_t = struct { __val: [2; int]; }
export type __sigset_t = struct { __val: [16; ulong]; }
export type fd_set = struct { __fds_bits: [16; long]; }
export type __pthread_list_t = struct { __prev: *__pthread_list_t; __next: *__pthread_list_t; }
export type __pthread_slist_t = struct { __next: *__pthread_slist_t; }
export type pthread_mutexattr_t = struct #union { __size: [4; char]; __align: int; }
export type pthread_condattr_t = struct #union { __size: [4; char]; __align: int; }
export type u_pthread_attr_t = struct #union { __size: [56; char]; __align: long; }
export type s___pthread_mutex_s = struct { __lock: int; __count: uint; __owner: int; __nusers: uint; __kind: int; __spins: short; __elision: short; __list: __pthread_list_t; }
export type pthread_mutex_t = struct #union { __data: s___pthread_mutex_s; __size: [40; char]; __align: long; }
export type s___pthread_cond_s = struct { _1: struct #union { __wseq: uint64; __wseq32: struct { __low: uint; __high: uint; }; }; _5: struct #union { __g1_start: uint64; __g1_start32: struct { __low: uint; __high: uint; }; }; __g_refs: [2; uint]; __g_size: [2; uint]; __g1_orig_size: uint; __wrefs: uint; __g_signals: [2; uint]; }
export type pthread_cond_t = struct #union { __data: s___pthread_cond_s; __size: [48; char]; __align: int64; }
export type s___pthread_rwlock_arch_t = struct { __readers: uint; __writers: uint; __wrphase_futex: uint; __writers_futex: uint; __pad3: uint; __pad4: uint; __cur_writer: int; __shared: int; __rwelision: char; __pad1: [7; char]; __pad2: ulong; __flags: uint; }
export type pthread_rwlock_t = struct #union { __data: s___pthread_rwlock_arch_t; __size: [56; char]; __align: long; }
export type pthread_rwlockattr_t = struct #union { __size: [8; char]; __align: long; }
export type pthread_barrier_t = struct #union { __size: [32; char]; __align: long; }
export type pthread_barrierattr_t = struct #union { __size: [4; char]; __align: int; }
export type __mbstate_t = struct { __count: int; __value: struct #union { __wch: uint; __wchb: [4; char]; }; }
export type __fpos_t = struct { __pos: long; __state: __mbstate_t; }
export type __fpos64_t = struct { __pos: long; __state: __mbstate_t; }
export type s__IO_FILE = struct { _flags: int; _IO_read_ptr: *char; _IO_read_end: *char; _IO_read_base: *char; _IO_write_base: *char; _IO_write_ptr: *char; _IO_write_end: *char; _IO_buf_base: *char; _IO_buf_end: *char; _IO_save_base: *char; _IO_backup_base: *char; _IO_save_end: *char; _markers: *s__IO_marker; _chain: *s__IO_FILE; _fileno: int; _flags2: int; _old_offset: long; _cur_column: ushort; _vtable_offset: char; _shortbuf: [1; char]; _lock: *; _offset: long; _codecvt: *s__IO_codecvt; _wide_data: *s__IO_wide_data; _freeres_list: *s__IO_FILE; _freeres_buf: *; __pad5: ulong; _mode: int; _unused2: [20; char]; }
export type max_align_t = struct { __clang_max_align_nonce1: int64; __clang_max_align_nonce2: float80; }
export type u_sigval = struct #union { sival_int: int; sival_ptr: *; }
export type siginfo_t = struct { si_signo: int; si_errno: int; si_code: int; __pad0: int; _sifields: struct #union { _pad: [28; int]; _kill: struct { si_pid: int; si_uid: uint; }; _timer: struct { si_tid: int; si_overrun: int; si_sigval: u_sigval; }; _rt: struct { si_pid: int; si_uid: uint; si_sigval: u_sigval; }; _sigchld: struct { si_pid: int; si_uid: uint; si_status: int; si_utime: long; si_stime: long; }; _sigfault: struct { si_addr: *; si_addr_lsb: short; _bounds: struct #union { _addr_bnd: struct { _lower: *; _upper: *; }; _pkey: uint; }; }; _sigpoll: struct { si_band: long; si_fd: int; }; _sigsys: struct { _call_addr: *; _syscall: int; _arch: uint; }; }; }
export type sigevent_t = struct { sigev_value: u_sigval; sigev_signo: int; sigev_notify: int; _sigev_un: struct #union { _pad: [12; int]; _tid: int; _sigev_thread: struct { _function: def (u_sigval) -> (); _attribute: *u_pthread_attr_t; }; }; }
export type stack_t = struct { ss_sp: *; ss_flags: int; ss_size: ulong; }
export type mcontext_t = struct { gregs: [23; int64]; fpregs: *s__libc_fpstate; __reserved1: [8; uint64]; }
export type s__libc_fpstate = struct { cwd: ushort; swd: ushort; ftw: ushort; fop: ushort; rip: ulong; rdp: ulong; mxcsr: uint; mxcr_mask: uint; _st: [8; s__libc_fpxreg]; _xmm: [16; s__libc_xmmreg]; __glibc_reserved1: [24; uint]; }
export type ucontext_t = struct { uc_flags: ulong; uc_link: *ucontext_t; uc_stack: stack_t; uc_mcontext: mcontext_t; uc_sigmask: __sigset_t; __fpregs_mem: s__libc_fpstate; __ssp: [4; uint64]; }
export type s_timeval = struct { tv_sec: long; tv_usec: long; }
export type s_timespec = struct { tv_sec: long; tv_nsec: long; }
export type s_random_data = struct { fptr: *int; rptr: *int; state: *int; rand_type: int; rand_deg: int; rand_sep: int; end_ptr: *int; }
export type s_drand48_data = struct { __x: [3; ushort]; __old_x: [3; ushort]; __c: ushort; __init: ushort; __a: uint64; }
export type s__IO_marker
export type s__IO_codecvt
export type s__IO_wide_data
export type s___locale_data
export type s___locale_struct = struct { __locales: [13; *s___locale_data]; __ctype_b: *ushort; __ctype_tolower: *int; __ctype_toupper: *int; __names: [13; *char]; }
export type s_tm = struct { tm_sec: int; tm_min: int; tm_hour: int; tm_mday: int; tm_mon: int; tm_year: int; tm_wday: int; tm_yday: int; tm_isdst: int; tm_gmtoff: long; tm_zone: *char; }
export type s_itimerspec = struct { it_interval: s_timespec; it_value: s_timespec; }
export type s_sigaction = struct { __sigaction_handler: struct #union { sa_handler: def (int) -> (); sa_sigaction: def (int, *siginfo_t, *) -> (); }; sa_mask: __sigset_t; sa_flags: int; sa_restorer: def () -> (); }
export type s__fpx_sw_bytes = struct { magic1: uint; extended_size: uint; xstate_bv: ulong; xstate_size: uint; __glibc_reserved1: [7; uint]; }
export type s__fpreg = struct { significand: [4; ushort]; exponent: ushort; }
export type s__fpxreg = struct { significand: [4; ushort]; exponent: ushort; __glibc_reserved1: [3; ushort]; }
export type s__xmmreg = struct { element: [4; uint]; }
export type s__fpstate = struct { cwd: ushort; swd: ushort; ftw: ushort; fop: ushort; rip: ulong; rdp: ulong; mxcsr: uint; mxcr_mask: uint; _st: [8; s__fpxreg]; _xmm: [16; s__xmmreg]; __glibc_reserved1: [24; uint]; }
export type s_sigcontext = struct { r8: ulong; r9: ulong; r10: ulong; r11: ulong; r12: ulong; r13: ulong; r14: ulong; r15: ulong; rdi: ulong; rsi: ulong; rbp: ulong; rbx: ulong; rdx: ulong; rax: ulong; rcx: ulong; rsp: ulong; rip: ulong; eflags: ulong; cs: ushort; gs: ushort; fs: ushort; __pad0: ushort; err: ulong; trapno: ulong; oldmask: ulong; cr2: ulong; _27: struct #union { fpstate: *s__fpstate; __fpstate_word: ulong; }; __reserved1: [8; ulong]; }
export type s__xsave_hdr = struct { xstate_bv: ulong; __glibc_reserved1: [2; ulong]; __glibc_reserved2: [5; ulong]; }
export type s__ymmh_state = struct { ymmh_space: [64; uint]; }
export type s__xstate = struct { fpstate: s__fpstate; xstate_hdr: s__xsave_hdr; ymmh: s__ymmh_state; }
export type s__libc_fpxreg = struct { significand: [4; ushort]; exponent: ushort; __glibc_reserved1: [3; ushort]; }
export type s__libc_xmmreg = struct { element: [4; uint]; }
export type s_sigstack = struct { ss_sp: *; ss_onstack: int; }
export type s_lconv = struct { decimal_point: *char; thousands_sep: *char; grouping: *char; int_curr_symbol: *char; currency_symbol: *char; mon_decimal_point: *char; mon_thousands_sep: *char; mon_grouping: *char; positive_sign: *char; negative_sign: *char; int_frac_digits: char; frac_digits: char; p_cs_precedes: char; p_sep_by_space: char; n_cs_precedes: char; n_sep_by_space: char; p_sign_posn: char; n_sign_posn: char; int_p_cs_precedes: char; int_p_sep_by_space: char; int_n_cs_precedes: char; int_n_sep_by_space: char; int_p_sign_posn: char; int_n_sign_posn: char; }
export type s___jmp_buf_tag = struct { __jmpbuf: [8; long]; __mask_was_saved: int; __saved_mask: __sigset_t; }
export import def #extern atof(__nptr: *char) -> double
export import def #extern atoi(__nptr: *char) -> int
export import def #extern atol(__nptr: *char) -> long
export import def #extern strtod(__nptr: *char, __endptr: **char) -> double
export import def #extern strtol(__nptr: *char, __endptr: **char, __base: int) -> long
export import def #extern strtoul(__nptr: *char, __endptr: **char, __base: int) -> ulong
export import def #extern rand() -> int
export import def #extern srand(__seed: uint)
export import def #extern malloc(__size: ulong) -> *
export import def #extern calloc(__nmemb: ulong, __size: ulong) -> *
export import def #extern realloc(__ptr: *, __size: ulong) -> *
export import def #extern free(__ptr: *)
export import def #extern abort()
export import def #extern atexit(__func: def () -> ()) -> int
export import def #extern exit(__status: int)
export import def #extern getenv(__name: *char) -> *char
export import def #extern system(__command: *char) -> int
export import def #extern bsearch(__key: *, __base: *, __nmemb: ulong, __size: ulong, __compar: def (*, *) -> (int)) -> *
export import def #extern qsort(__base: *, __nmemb: ulong, __size: ulong, __compar: def (*, *) -> (int))
export import def #extern abs(__x: int) -> int
export import def #extern labs(__x: long) -> long
export import def #extern div(__numer: int, __denom: int) -> div_t
export import def #extern ldiv(__numer: long, __denom: long) -> ldiv_t
export import def #extern mblen(__s: *char, __n: ulong) -> int
export import def #extern mbtowc(__pwc: *int, __s: *char, __n: ulong) -> int
export import def #extern wctomb(__s: *char, __wchar: int) -> int
export import def #extern mbstowcs(__pwcs: *int, __s: *char, __n: ulong) -> ulong
export import def #extern wcstombs(__s: *char, __pwcs: *int, __n: ulong) -> ulong
export import def #extern remove(__filename: *char) -> int
export import def #extern rename(__old: *char, __new: *char) -> int
export import def #extern renameat(__oldfd: int, __old: *char, __newfd: int, __new: *char) -> int
export import def #extern tmpfile() -> *s__IO_FILE
export import def #extern fclose(__stream: *s__IO_FILE) -> int
export import def #extern fflush(__stream: *s__IO_FILE) -> int
export import def #extern fflush_unlocked(__stream: *s__IO_FILE) -> int
export import def #extern fopen(__filename: *char, __modes: *char) -> *s__IO_FILE
export import def #extern freopen(__filename: *char, __modes: *char, __stream: *s__IO_FILE) -> *s__IO_FILE
export import def #extern fdopen(__fd: int, __modes: *char) -> *s__IO_FILE
export import def #extern fmemopen(__s: *, __len: ulong, __modes: *char) -> *s__IO_FILE
export import def #extern open_memstream(__bufloc: **char, __sizeloc: *ulong) -> *s__IO_FILE
export import def #extern setbuf(__stream: *s__IO_FILE, __buf: *char)
export import def #extern setvbuf(__stream: *s__IO_FILE, __buf: *char, __modes: int, __n: ulong) -> int
export import def #extern setbuffer(__stream: *s__IO_FILE, __buf: *char, __size: ulong)
export import def #extern setlinebuf(__stream: *s__IO_FILE)
export import def #extern fprintf(__stream: *s__IO_FILE, __format: *char, ...) -> int
export import def #extern printf(__format: *char, ...) -> int
export import def #extern sprintf(__s: *char, __format: *char, ...) -> int
export import def #extern vfprintf(__s: *s__IO_FILE, __format: *char, __arg: *__va_list_tag) -> int
export import def #extern vprintf(__format: *char, __arg: *__va_list_tag) -> int
export import def #extern vsprintf(__s: *char, __format: *char, __arg: *__va_list_tag) -> int
export import def #extern snprintf(__s: *char, __maxlen: ulong, __format: *char, ...) -> int
export import def #extern vsnprintf(__s: *char, __maxlen: ulong, __format: *char, __arg: *__va_list_tag) -> int
export import def #extern vdprintf(__fd: int, __fmt: *char, __arg: *__va_list_tag) -> int
export import def #extern dprintf(__fd: int, __fmt: *char, ...) -> int
export import def #extern fscanf(__stream: *s__IO_FILE, __format: *char, ...) -> int
export import def #extern scanf(__format: *char, ...) -> int
export import def #extern sscanf(__s: *char, __format: *char, ...) -> int
export import def #extern vfscanf(__s: *s__IO_FILE, __format: *char, __arg: *__va_list_tag) -> int
export import def #extern vscanf(__format: *char, __arg: *__va_list_tag) -> int
export import def #extern vsscanf(__s: *char, __format: *char, __arg: *__va_list_tag) -> int
export import def #extern fgetc(__stream: *s__IO_FILE) -> int
export import def #extern getc(__stream: *s__IO_FILE) -> int
export import def #extern getchar() -> int
export import def #extern getc_unlocked(__stream: *s__IO_FILE) -> int
export import def #extern getchar_unlocked() -> int
export import def #extern fgetc_unlocked(__stream: *s__IO_FILE) -> int
export import def #extern fputc(__c: int, __stream: *s__IO_FILE) -> int
export import def #extern putc(__c: int, __stream: *s__IO_FILE) -> int
export import def #extern putchar(__c: int) -> int
export import def #extern fputc_unlocked(__c: int, __stream: *s__IO_FILE) -> int
export import def #extern putc_unlocked(__c: int, __stream: *s__IO_FILE) -> int
export import def #extern putchar_unlocked(__c: int) -> int
export import def #extern getw(__stream: *s__IO_FILE) -> int
export import def #extern putw(__w: int, __stream: *s__IO_FILE) -> int
export import def #extern fgets(__s: *char, __n: int, __stream: *s__IO_FILE) -> *char
export import def #extern __getdelim(__lineptr: **char, __n: *ulong, __delimiter: int, __stream: *s__IO_FILE) -> long
export import def #extern getdelim(__lineptr: **char, __n: *ulong, __delimiter: int, __stream: *s__IO_FILE) -> long
export import def #extern getline(__lineptr: **char, __n: *ulong, __stream: *s__IO_FILE) -> long
export import def #extern fputs(__s: *char, __stream: *s__IO_FILE) -> int
export import def #extern puts(__s: *char) -> int
export import def #extern ungetc(__c: int, __stream: *s__IO_FILE) -> int
export import def #extern fread(__ptr: *, __size: ulong, __n: ulong, __stream: *s__IO_FILE) -> ulong
export import def #extern fwrite(__ptr: *, __size: ulong, __n: ulong, __s: *s__IO_FILE) -> ulong
export import def #extern fread_unlocked(__ptr: *, __size: ulong, __n: ulong, __stream: *s__IO_FILE) -> ulong
export import def #extern fwrite_unlocked(__ptr: *, __size: ulong, __n: ulong, __stream: *s__IO_FILE) -> ulong
export import def #extern fseek(__stream: *s__IO_FILE, __off: long, __whence: int) -> int
export import def #extern ftell(__stream: *s__IO_FILE) -> long
export import def #extern rewind(__stream: *s__IO_FILE)
export import def #extern fseeko(__stream: *s__IO_FILE, __off: long, __whence: int) -> int
export import def #extern ftello(__stream: *s__IO_FILE) -> long
export import def #extern fgetpos(__stream: *s__IO_FILE, __pos: *__fpos_t) -> int
export import def #extern fsetpos(__stream: *s__IO_FILE, __pos: *__fpos_t) -> int
export import def #extern clearerr(__stream: *s__IO_FILE)
export import def #extern feof(__stream: *s__IO_FILE) -> int
export import def #extern ferror(__stream: *s__IO_FILE) -> int
export import def #extern clearerr_unlocked(__stream: *s__IO_FILE)
export import def #extern feof_unlocked(__stream: *s__IO_FILE) -> int
export import def #extern ferror_unlocked(__stream: *s__IO_FILE) -> int
export import def #extern perror(__s: *char)
export import def #extern fileno(__stream: *s__IO_FILE) -> int
export import def #extern fileno_unlocked(__stream: *s__IO_FILE) -> int
export import def #extern popen(__command: *char, __modes: *char) -> *s__IO_FILE
export import def #extern pclose(__stream: *s__IO_FILE) -> int
export import def #extern ctermid(__s: *char) -> *char
export import def #extern flockfile(__stream: *s__IO_FILE)
export import def #extern ftrylockfile(__stream: *s__IO_FILE) -> int
export import def #extern funlockfile(__stream: *s__IO_FILE)
export import def #extern __uflow(_0: *s__IO_FILE) -> int
export import def #extern __overflow(_0: *s__IO_FILE, _1: int) -> int
export import def #extern memcpy(__dest: *, __src: *, __n: ulong) -> *
export import def #extern memmove(__dest: *, __src: *, __n: ulong) -> *
export import def #extern memccpy(__dest: *, __src: *, __c: int, __n: ulong) -> *
export import def #extern memset(__s: *, __c: int, __n: ulong) -> *
export import def #extern memcmp(__s1: *, __s2: *, __n: ulong) -> int
export import def #extern memchr(__s: *, __c: int, __n: ulong) -> *
export import def #extern strcpy(__dest: *char, __src: *char) -> *char
export import def #extern strncpy(__dest: *char, __src: *char, __n: ulong) -> *char
export import def #extern strcat(__dest: *char, __src: *char) -> *char
export import def #extern strncat(__dest: *char, __src: *char, __n: ulong) -> *char
export import def #extern strcmp(__s1: *char, __s2: *char) -> int
export import def #extern strncmp(__s1: *char, __s2: *char, __n: ulong) -> int
export import def #extern strcoll(__s1: *char, __s2: *char) -> int
export import def #extern strxfrm(__dest: *char, __src: *char, __n: ulong) -> ulong
export import def #extern strcoll_l(__s1: *char, __s2: *char, __l: *s___locale_struct) -> int
export import def #extern strxfrm_l(__dest: *char, __src: *char, __n: ulong, __l: *s___locale_struct) -> ulong
export import def #extern strdup(__s: *char) -> *char
export import def #extern strndup(__string: *char, __n: ulong) -> *char
export import def #extern strchr(__s: *char, __c: int) -> *char
export import def #extern strrchr(__s: *char, __c: int) -> *char
export import def #extern strcspn(__s: *char, __reject: *char) -> ulong
export import def #extern strspn(__s: *char, __accept: *char) -> ulong
export import def #extern strpbrk(__s: *char, __accept: *char) -> *char
export import def #extern strstr(__haystack: *char, __needle: *char) -> *char
export import def #extern strtok(__s: *char, __delim: *char) -> *char
export import def #extern __strtok_r(__s: *char, __delim: *char, __save_ptr: **char) -> *char
export import def #extern strtok_r(__s: *char, __delim: *char, __save_ptr: **char) -> *char
export import def #extern strlen(__s: *char) -> ulong
export import def #extern strnlen(__string: *char, __maxlen: ulong) -> ulong
export import def #extern strerror(__errnum: int) -> *char
export import def #extern strerror_r(__errnum: int, __buf: *char, __buflen: ulong) -> int
export import def #extern strerror_l(__errnum: int, __l: *s___locale_struct) -> *char
export import def #extern bcmp(__s1: *, __s2: *, __n: ulong) -> int
export import def #extern bcopy(__src: *, __dest: *, __n: ulong)
export import def #extern bzero(__s: *, __n: ulong)
export import def #extern index(__s: *char, __c: int) -> *char
export import def #extern rindex(__s: *char, __c: int) -> *char
export import def #extern ffs(__i: int) -> int
export import def #extern ffsl(__l: long) -> int
export import def #extern ffsll(__ll: int64) -> int
export import def #extern strcasecmp(__s1: *char, __s2: *char) -> int
export import def #extern strncasecmp(__s1: *char, __s2: *char, __n: ulong) -> int
export import def #extern strcasecmp_l(__s1: *char, __s2: *char, __loc: *s___locale_struct) -> int
export import def #extern strncasecmp_l(__s1: *char, __s2: *char, __n: ulong, __loc: *s___locale_struct) -> int
export import def #extern explicit_bzero(__s: *, __n: ulong)
export import def #extern strsep(__stringp: **char, __delim: *char) -> *char
export import def #extern strsignal(__sig: int) -> *char
export import def #extern __stpcpy(__dest: *char, __src: *char) -> *char
export import def #extern stpcpy(__dest: *char, __src: *char) -> *char
export import def #extern __stpncpy(__dest: *char, __src: *char, __n: ulong) -> *char
export import def #extern stpncpy(__dest: *char, __src: *char, __n: ulong) -> *char
export import def #extern clock() -> long
export import def #extern time(__timer: *long) -> long
export import def #extern difftime(__time1: long, __time0: long) -> double
export import def #extern mktime(__tp: *s_tm) -> long
export import def #extern strftime(__s: *char, __maxsize: ulong, __format: *char, __tp: *s_tm) -> ulong
export import def #extern strftime_l(__s: *char, __maxsize: ulong, __format: *char, __tp: *s_tm, __loc: *s___locale_struct) -> ulong
export import def #extern gmtime(__timer: *long) -> *s_tm
export import def #extern localtime(__timer: *long) -> *s_tm
export import def #extern gmtime_r(__timer: *long, __tp: *s_tm) -> *s_tm
export import def #extern localtime_r(__timer: *long, __tp: *s_tm) -> *s_tm
export import def #extern asctime(__tp: *s_tm) -> *char
export import def #extern ctime(__timer: *long) -> *char
export import def #extern asctime_r(__tp: *s_tm, __buf: *char) -> *char
export import def #extern ctime_r(__timer: *long, __buf: *char) -> *char
export import def #extern tzset()
export import def #extern timegm(__tp: *s_tm) -> long
export import def #extern timelocal(__tp: *s_tm) -> long
export import def #extern dysize(__year: int) -> int
export import def #extern nanosleep(__requested_time: *s_timespec, __remaining: *s_timespec) -> int
export import def #extern clock_getres(__clock_id: int, __res: *s_timespec) -> int
export import def #extern clock_gettime(__clock_id: int, __tp: *s_timespec) -> int
export import def #extern clock_settime(__clock_id: int, __tp: *s_timespec) -> int
export import def #extern clock_nanosleep(__clock_id: int, __flags: int, __req: *s_timespec, __rem: *s_timespec) -> int
export import def #extern clock_getcpuclockid(__pid: int, __clock_id: *int) -> int
export import def #extern timer_create(__clock_id: int, __evp: *sigevent_t, __timerid: **) -> int
export import def #extern timer_delete(__timerid: *) -> int
export import def #extern timer_settime(__timerid: *, __flags: int, __value: *s_itimerspec, __ovalue: *s_itimerspec) -> int
export import def #extern timer_gettime(__timerid: *, __value: *s_itimerspec) -> int
export import def #extern timer_getoverrun(__timerid: *) -> int
export import def #extern timespec_get(__ts: *s_timespec, __base: int) -> int
export import def #extern __fpclassify(__value: double) -> int
export import def #extern __signbit(__value: double) -> int
export import def #extern __isinf(__value: double) -> int
export import def #extern __finite(__value: double) -> int
export import def #extern __isnan(__value: double) -> int
export import def #extern __iseqsig(__x: double, __y: double) -> int
export import def #extern __issignaling(__value: double) -> int
export import def #extern acos(__x: double) -> double
export import def #extern asin(__x: double) -> double
export import def #extern atan(__x: double) -> double
export import def #extern atan2(__y: double, __x: double) -> double
export import def #extern cos(__x: double) -> double
export import def #extern sin(__x: double) -> double
export import def #extern tan(__x: double) -> double
export import def #extern cosh(__x: double) -> double
export import def #extern sinh(__x: double) -> double
export import def #extern tanh(__x: double) -> double
export import def #extern acosh(__x: double) -> double
export import def #extern asinh(__x: double) -> double
export import def #extern atanh(__x: double) -> double
export import def #extern exp(__x: double) -> double
export import def #extern frexp(__x: double, __exponent: *int) -> double
export import def #extern ldexp(__x: double, __exponent: int) -> double
export import def #extern log(__x: double) -> double
export import def #extern log10(__x: double) -> double
export import def #extern modf(__x: double, __iptr: *double) -> double
export import def #extern expm1(__x: double) -> double
export import def #extern log1p(__x: double) -> double
export import def #extern logb(__x: double) -> double
export import def #extern exp2(__x: double) -> double
export import def #extern log2(__x: double) -> double
export import def #extern pow(__x: double, __y: double) -> double
export import def #extern sqrt(__x: double) -> double
export import def #extern hypot(__x: double, __y: double) -> double
export import def #extern cbrt(__x: double) -> double
export import def #extern ceil(__x: double) -> double
export import def #extern fabs(__x: double) -> double
export import def #extern floor(__x: double) -> double
export import def #extern fmod(__x: double, __y: double) -> double
export import def #extern isinf(__value: double) -> int
export import def #extern finite(__value: double) -> int
export import def #extern drem(__x: double, __y: double) -> double
export import def #extern significand(__x: double) -> double
export import def #extern copysign(__x: double, __y: double) -> double
export import def #extern nan(__tagb: *char) -> double
export import def #extern isnan(__value: double) -> int
export import def #extern j0(_0: double) -> double
export import def #extern j1(_0: double) -> double
export import def #extern jn(_0: int, _1: double) -> double
export import def #extern y0(_0: double) -> double
export import def #extern y1(_0: double) -> double
export import def #extern yn(_0: int, _1: double) -> double
export import def #extern erf(_0: double) -> double
export import def #extern erfc(_0: double) -> double
export import def #extern lgamma(_0: double) -> double
export import def #extern tgamma(_0: double) -> double
export import def #extern gamma(_0: double) -> double
export import def #extern lgamma_r(_0: double, __signgamp: *int) -> double
export import def #extern rint(__x: double) -> double
export import def #extern nextafter(__x: double, __y: double) -> double
export import def #extern nexttoward(__x: double, __y: float80) -> double
export import def #extern remainder(__x: double, __y: double) -> double
export import def #extern scalbn(__x: double, __n: int) -> double
export import def #extern ilogb(__x: double) -> int
export import def #extern scalbln(__x: double, __n: long) -> double
export import def #extern nearbyint(__x: double) -> double
export import def #extern round(__x: double) -> double
export import def #extern trunc(__x: double) -> double
export import def #extern remquo(__x: double, __y: double, __quo: *int) -> double
export import def #extern lrint(__x: double) -> long
export import def #extern llrint(__x: double) -> int64
export import def #extern lround(__x: double) -> long
export import def #extern llround(__x: double) -> int64
export import def #extern fdim(__x: double, __y: double) -> double
export import def #extern fmax(__x: double, __y: double) -> double
export import def #extern fmin(__x: double, __y: double) -> double
export import def #extern fma(__x: double, __y: double, __z: double) -> double
export import def #extern scalb(__x: double, __n: double) -> double
export import def #extern __fpclassifyf(__value: float) -> int
export import def #extern __signbitf(__value: float) -> int
export import def #extern __isinff(__value: float) -> int
export import def #extern __finitef(__value: float) -> int
export import def #extern __isnanf(__value: float) -> int
export import def #extern __iseqsigf(__x: float, __y: float) -> int
export import def #extern __issignalingf(__value: float) -> int
export import def #extern acosf(__x: float) -> float
export import def #extern asinf(__x: float) -> float
export import def #extern atanf(__x: float) -> float
export import def #extern atan2f(__y: float, __x: float) -> float
export import def #extern cosf(__x: float) -> float
export import def #extern sinf(__x: float) -> float
export import def #extern tanf(__x: float) -> float
export import def #extern coshf(__x: float) -> float
export import def #extern sinhf(__x: float) -> float
export import def #extern tanhf(__x: float) -> float
export import def #extern acoshf(__x: float) -> float
export import def #extern asinhf(__x: float) -> float
export import def #extern atanhf(__x: float) -> float
export import def #extern expf(__x: float) -> float
export import def #extern frexpf(__x: float, __exponent: *int) -> float
export import def #extern ldexpf(__x: float, __exponent: int) -> float
export import def #extern logf(__x: float) -> float
export import def #extern log10f(__x: float) -> float
export import def #extern modff(__x: float, __iptr: *float) -> float
export import def #extern expm1f(__x: float) -> float
export import def #extern log1pf(__x: float) -> float
export import def #extern logbf(__x: float) -> float
export import def #extern exp2f(__x: float) -> float
export import def #extern log2f(__x: float) -> float
export import def #extern powf(__x: float, __y: float) -> float
export import def #extern sqrtf(__x: float) -> float
export import def #extern hypotf(__x: float, __y: float) -> float
export import def #extern cbrtf(__x: float) -> float
export import def #extern ceilf(__x: float) -> float
export import def #extern fabsf(__x: float) -> float
export import def #extern floorf(__x: float) -> float
export import def #extern fmodf(__x: float, __y: float) -> float
export import def #extern isinff(__value: float) -> int
export import def #extern finitef(__value: float) -> int
export import def #extern dremf(__x: float, __y: float) -> float
export import def #extern significandf(__x: float) -> float
export import def #extern copysignf(__x: float, __y: float) -> float
export import def #extern nanf(__tagb: *char) -> float
export import def #extern isnanf(__value: float) -> int
export import def #extern j0f(_0: float) -> float
export import def #extern j1f(_0: float) -> float
export import def #extern jnf(_0: int, _1: float) -> float
export import def #extern y0f(_0: float) -> float
export import def #extern y1f(_0: float) -> float
export import def #extern ynf(_0: int, _1: float) -> float
export import def #extern erff(_0: float) -> float
export import def #extern erfcf(_0: float) -> float
export import def #extern lgammaf(_0: float) -> float
export import def #extern tgammaf(_0: float) -> float
export import def #extern gammaf(_0: float) -> float
export import def #extern lgammaf_r(_0: float, __signgamp: *int) -> float
export import def #extern rintf(__x: float) -> float
export import def #extern nextafterf(__x: float, __y: float) -> float
export import def #extern nexttowardf(__x: float, __y: float80) -> float
export import def #extern remainderf(__x: float, __y: float) -> float
export import def #extern scalbnf(__x: float, __n: int) -> float
export import def #extern ilogbf(__x: float) -> int
export import def #extern scalblnf(__x: float, __n: long) -> float
export import def #extern nearbyintf(__x: float) -> float
export import def #extern roundf(__x: float) -> float
export import def #extern truncf(__x: float) -> float
export import def #extern remquof(__x: float, __y: float, __quo: *int) -> float
export import def #extern lrintf(__x: float) -> long
export import def #extern llrintf(__x: float) -> int64
export import def #extern lroundf(__x: float) -> long
export import def #extern llroundf(__x: float) -> int64
export import def #extern fdimf(__x: float, __y: float) -> float
export import def #extern fmaxf(__x: float, __y: float) -> float
export import def #extern fminf(__x: float, __y: float) -> float
export import def #extern fmaf(__x: float, __y: float, __z: float) -> float
export import def #extern scalbf(__x: float, __n: float) -> float
export import def #extern __fpclassifyl(__value: float80) -> int
export import def #extern __signbitl(__value: float80) -> int
export import def #extern __isinfl(__value: float80) -> int
export import def #extern __finitel(__value: float80) -> int
export import def #extern __isnanl(__value: float80) -> int
export import def #extern __iseqsigl(__x: float80, __y: float80) -> int
export import def #extern __issignalingl(__value: float80) -> int
export import def #extern acosl(__x: float80) -> float80
export import def #extern asinl(__x: float80) -> float80
export import def #extern atanl(__x: float80) -> float80
export import def #extern atan2l(__y: float80, __x: float80) -> float80
export import def #extern cosl(__x: float80) -> float80
export import def #extern sinl(__x: float80) -> float80
export import def #extern tanl(__x: float80) -> float80
export import def #extern coshl(__x: float80) -> float80
export import def #extern sinhl(__x: float80) -> float80
export import def #extern tanhl(__x: float80) -> float80
export import def #extern acoshl(__x: float80) -> float80
export import def #extern asinhl(__x: float80) -> float80
export import def #extern atanhl(__x: float80) -> float80
export import def #extern expl(__x: float80) -> float80
export import def #extern frexpl(__x: float80, __exponent: *int) -> float80
export import def #extern ldexpl(__x: float80, __exponent: int) -> float80
export import def #extern logl(__x: float80) -> float80
export import def #extern log10l(__x: float80) -> float80
export import def #extern modfl(__x: float80, __iptr: *float80) -> float80
export import def #extern expm1l(__x: float80) -> float80
export import def #extern log1pl(__x: float80) -> float80
export import def #extern logbl(__x: float80) -> float80
export import def #extern exp2l(__x: float80) -> float80
export import def #extern log2l(__x: float80) -> float80
export import def #extern powl(__x: float80, __y: float80) -> float80
export import def #extern sqrtl(__x: float80) -> float80
export import def #extern hypotl(__x: float80, __y: float80) -> float80
export import def #extern cbrtl(__x: float80) -> float80
export import def #extern ceill(__x: float80) -> float80
export import def #extern fabsl(__x: float80) -> float80
export import def #extern floorl(__x: float80) -> float80
export import def #extern fmodl(__x: float80, __y: float80) -> float80
export import def #extern isinfl(__value: float80) -> int
export import def #extern finitel(__value: float80) -> int
export import def #extern dreml(__x: float80, __y: float80) -> float80
export import def #extern significandl(__x: float80) -> float80
export import def #extern copysignl(__x: float80, __y: float80) -> float80
export import def #extern nanl(__tagb: *char) -> float80
export import def #extern isnanl(__value: float80) -> int
export import def #extern j0l(_0: float80) -> float80
export import def #extern j1l(_0: float80) -> float80
export import def #extern jnl(_0: int, _1: float80) -> float80
export import def #extern y0l(_0: float80) -> float80
export import def #extern y1l(_0: float80) -> float80
export import def #extern ynl(_0: int, _1: float80) -> float80
export import def #extern erfl(_0: float80) -> float80
export import def #extern erfcl(_0: float80) -> float80
export import def #extern lgammal(_0: float80) -> float80
export import def #extern tgammal(_0: float80) -> float80
export import def #extern gammal(_0: float80) -> float80
export import def #extern lgammal_r(_0: float80, __signgamp: *int) -> float80
export import def #extern rintl(__x: float80) -> float80
export import def #extern nextafterl(__x: float80, __y: float80) -> float80
export import def #extern nexttowardl(__x: float80, __y: float80) -> float80
export import def #extern remainderl(__x: float80, __y: float80) -> float80
export import def #extern scalbnl(__x: float80, __n: int) -> float80
export import def #extern ilogbl(__x: float80) -> int
export import def #extern scalblnl(__x: float80, __n: long) -> float80
export import def #extern nearbyintl(__x: float80) -> float80
export import def #extern roundl(__x: float80) -> float80
export import def #extern truncl(__x: float80) -> float80
export import def #extern remquol(__x: float80, __y: float80, __quo: *int) -> float80
export import def #extern lrintl(__x: float80) -> long
export import def #extern llrintl(__x: float80) -> int64
export import def #extern lroundl(__x: float80) -> long
export import def #extern llroundl(__x: float80) -> int64
export import def #extern fdiml(__x: float80, __y: float80) -> float80
export import def #extern fmaxl(__x: float80, __y: float80) -> float80
export import def #extern fminl(__x: float80, __y: float80) -> float80
export import def #extern fmal(__x: float80, __y: float80, __z: float80) -> float80
export import def #extern scalbl(__x: float80, __n: float80) -> float80
export import def #extern __assert_fail(__assertion: *char, __file: *char, __line: uint, __function: *char)
export import def #extern __assert_perror_fail(__errnum: int, __file: *char, __line: uint, __function: *char)
export import def #extern __assert(__assertion: *char, __file: *char, __line: int)
export import def #extern __ctype_b_loc() -> **ushort
export import def #extern __ctype_tolower_loc() -> **int
export import def #extern __ctype_toupper_loc() -> **int
export import def #extern isalnum(_0: int) -> int
export import def #extern isalpha(_0: int) -> int
export import def #extern iscntrl(_0: int) -> int
export import def #extern isdigit(_0: int) -> int
export import def #extern islower(_0: int) -> int
export import def #extern isgraph(_0: int) -> int
export import def #extern isprint(_0: int) -> int
export import def #extern ispunct(_0: int) -> int
export import def #extern isspace(_0: int) -> int
export import def #extern isupper(_0: int) -> int
export import def #extern isxdigit(_0: int) -> int
export import def #extern tolower(__c: int) -> int
export import def #extern toupper(__c: int) -> int
export import def #extern isblank(_0: int) -> int
export import def #extern isascii(__c: int) -> int
export import def #extern toascii(__c: int) -> int
export import def #extern _toupper(_0: int) -> int
export import def #extern _tolower(_0: int) -> int
export import def #extern isalnum_l(_0: int, _1: *s___locale_struct) -> int
export import def #extern isalpha_l(_0: int, _1: *s___locale_struct) -> int
export import def #extern iscntrl_l(_0: int, _1: *s___locale_struct) -> int
export import def #extern isdigit_l(_0: int, _1: *s___locale_struct) -> int
export import def #extern islower_l(_0: int, _1: *s___locale_struct) -> int
export import def #extern isgraph_l(_0: int, _1: *s___locale_struct) -> int
export import def #extern isprint_l(_0: int, _1: *s___locale_struct) -> int
export import def #extern ispunct_l(_0: int, _1: *s___locale_struct) -> int
export import def #extern isspace_l(_0: int, _1: *s___locale_struct) -> int
export import def #extern isupper_l(_0: int, _1: *s___locale_struct) -> int
export import def #extern isxdigit_l(_0: int, _1: *s___locale_struct) -> int
export import def #extern isblank_l(_0: int, _1: *s___locale_struct) -> int
export import def #extern __tolower_l(__c: int, __l: *s___locale_struct) -> int
export import def #extern tolower_l(__c: int, __l: *s___locale_struct) -> int
export import def #extern __toupper_l(__c: int, __l: *s___locale_struct) -> int
export import def #extern toupper_l(__c: int, __l: *s___locale_struct) -> int
export import def #extern setlocale(__category: int, __locale: *char) -> *char
export import def #extern localeconv() -> *s_lconv
export import def #extern newlocale(__category_mask: int, __locale: *char, __base: *s___locale_struct) -> *s___locale_struct
export import def #extern duplocale(__dataset: *s___locale_struct) -> *s___locale_struct
export import def #extern freelocale(__dataset: *s___locale_struct)
export import def #extern uselocale(__dataset: *s___locale_struct) -> *s___locale_struct
export import def #extern setjmp(__env: *s___jmp_buf_tag) -> int
export import def #extern __sigsetjmp(__env: *s___jmp_buf_tag, __savemask: int) -> int
export import def #extern _setjmp(__env: *s___jmp_buf_tag) -> int
export import def #extern longjmp(__env: *s___jmp_buf_tag, __val: int)
export import def #extern _longjmp(__env: *s___jmp_buf_tag, __val: int)
export import def #extern siglongjmp(__env: *s___jmp_buf_tag, __val: int)
export import var #extern stdin: *s__IO_FILE
export import var #extern stdout: *s__IO_FILE
export import var #extern stderr: *s__IO_FILE
export import var #extern __tzname: [2; *char]
export import var #extern __daylight: int
export import var #extern __timezone: long
export import var #extern tzname: [2; *char]
export import var #extern daylight: int
export import var #extern timezone: long
export import var #extern signgam: int
