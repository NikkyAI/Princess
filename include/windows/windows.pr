export const ExceptionContinueExecution: int = 0
export const ExceptionContinueSearch: int = ExceptionContinueExecution + 1
export const ExceptionNestedException: int = ExceptionContinueSearch + 1
export const ExceptionCollidedUnwind: int = ExceptionNestedException + 1
export const UNSPECIFIED_COMPARTMENT_ID: int = 0
export const DEFAULT_COMPARTMENT_ID: int = UNSPECIFIED_COMPARTMENT_ID + 1
export const SidTypeUser: int = 1
export const SidTypeGroup: int = SidTypeUser + 1
export const SidTypeDomain: int = SidTypeGroup + 1
export const SidTypeAlias: int = SidTypeDomain + 1
export const SidTypeWellKnownGroup: int = SidTypeAlias + 1
export const SidTypeDeletedAccount: int = SidTypeWellKnownGroup + 1
export const SidTypeInvalid: int = SidTypeDeletedAccount + 1
export const SidTypeUnknown: int = SidTypeInvalid + 1
export const SidTypeComputer: int = SidTypeUnknown + 1
export const SidTypeLabel: int = SidTypeComputer + 1
export const SidTypeLogonSession: int = SidTypeLabel + 1
export const WinNullSid: int = 0
export const WinWorldSid: int = 1
export const WinLocalSid: int = 2
export const WinCreatorOwnerSid: int = 3
export const WinCreatorGroupSid: int = 4
export const WinCreatorOwnerServerSid: int = 5
export const WinCreatorGroupServerSid: int = 6
export const WinNtAuthoritySid: int = 7
export const WinDialupSid: int = 8
export const WinNetworkSid: int = 9
export const WinBatchSid: int = 10
export const WinInteractiveSid: int = 11
export const WinServiceSid: int = 12
export const WinAnonymousSid: int = 13
export const WinProxySid: int = 14
export const WinEnterpriseControllersSid: int = 15
export const WinSelfSid: int = 16
export const WinAuthenticatedUserSid: int = 17
export const WinRestrictedCodeSid: int = 18
export const WinTerminalServerSid: int = 19
export const WinRemoteLogonIdSid: int = 20
export const WinLogonIdsSid: int = 21
export const WinLocalSystemSid: int = 22
export const WinLocalServiceSid: int = 23
export const WinNetworkServiceSid: int = 24
export const WinBuiltinDomainSid: int = 25
export const WinBuiltinAdministratorsSid: int = 26
export const WinBuiltinUsersSid: int = 27
export const WinBuiltinGuestsSid: int = 28
export const WinBuiltinPowerUsersSid: int = 29
export const WinBuiltinAccountOperatorsSid: int = 30
export const WinBuiltinSystemOperatorsSid: int = 31
export const WinBuiltinPrintOperatorsSid: int = 32
export const WinBuiltinBackupOperatorsSid: int = 33
export const WinBuiltinReplicatorSid: int = 34
export const WinBuiltinPreWindows2000CompatibleAccessSid: int = 35
export const WinBuiltinRemoteDesktopUsersSid: int = 36
export const WinBuiltinNetworkConfigurationOperatorsSid: int = 37
export const WinAccountAdministratorSid: int = 38
export const WinAccountGuestSid: int = 39
export const WinAccountKrbtgtSid: int = 40
export const WinAccountDomainAdminsSid: int = 41
export const WinAccountDomainUsersSid: int = 42
export const WinAccountDomainGuestsSid: int = 43
export const WinAccountComputersSid: int = 44
export const WinAccountControllersSid: int = 45
export const WinAccountCertAdminsSid: int = 46
export const WinAccountSchemaAdminsSid: int = 47
export const WinAccountEnterpriseAdminsSid: int = 48
export const WinAccountPolicyAdminsSid: int = 49
export const WinAccountRasAndIasServersSid: int = 50
export const WinNTLMAuthenticationSid: int = 51
export const WinDigestAuthenticationSid: int = 52
export const WinSChannelAuthenticationSid: int = 53
export const WinThisOrganizationSid: int = 54
export const WinOtherOrganizationSid: int = 55
export const WinBuiltinIncomingForestTrustBuildersSid: int = 56
export const WinBuiltinPerfMonitoringUsersSid: int = 57
export const WinBuiltinPerfLoggingUsersSid: int = 58
export const WinBuiltinAuthorizationAccessSid: int = 59
export const WinBuiltinTerminalServerLicenseServersSid: int = 60
export const WinBuiltinDCOMUsersSid: int = 61
export const WinBuiltinIUsersSid: int = 62
export const WinIUserSid: int = 63
export const WinBuiltinCryptoOperatorsSid: int = 64
export const WinUntrustedLabelSid: int = 65
export const WinLowLabelSid: int = 66
export const WinMediumLabelSid: int = 67
export const WinHighLabelSid: int = 68
export const WinSystemLabelSid: int = 69
export const WinWriteRestrictedCodeSid: int = 70
export const WinCreatorOwnerRightsSid: int = 71
export const WinCacheablePrincipalsGroupSid: int = 72
export const WinNonCacheablePrincipalsGroupSid: int = 73
export const WinEnterpriseReadonlyControllersSid: int = 74
export const WinAccountReadonlyControllersSid: int = 75
export const WinBuiltinEventLogReadersGroup: int = 76
export const WinNewEnterpriseReadonlyControllersSid: int = 77
export const WinBuiltinCertSvcDComAccessGroup: int = 78
export const WinMediumPlusLabelSid: int = 79
export const WinLocalLogonSid: int = 80
export const WinConsoleLogonSid: int = 81
export const WinThisOrganizationCertificateSid: int = 82
export const WinApplicationPackageAuthoritySid: int = 83
export const WinBuiltinAnyPackageSid: int = 84
export const WinCapabilityInternetClientSid: int = 85
export const WinCapabilityInternetClientServerSid: int = 86
export const WinCapabilityPrivateNetworkClientServerSid: int = 87
export const WinCapabilityPicturesLibrarySid: int = 88
export const WinCapabilityVideosLibrarySid: int = 89
export const WinCapabilityMusicLibrarySid: int = 90
export const WinCapabilityDocumentsLibrarySid: int = 91
export const WinCapabilitySharedUserCertificatesSid: int = 92
export const WinCapabilityEnterpriseAuthenticationSid: int = 93
export const WinCapabilityRemovableStorageSid: int = 94
export const WinBuiltinRDSRemoteAccessServersSid: int = 95
export const WinBuiltinRDSEndpointServersSid: int = 96
export const WinBuiltinRDSManagementServersSid: int = 97
export const WinUserModeDriversSid: int = 98
export const WinBuiltinHyperVAdminsSid: int = 99
export const WinAccountCloneableControllersSid: int = 100
export const WinBuiltinAccessControlAssistanceOperatorsSid: int = 101
export const WinBuiltinRemoteManagementUsersSid: int = 102
export const WinAuthenticationAuthorityAssertedSid: int = 103
export const WinAuthenticationServiceAssertedSid: int = 104
export const WinLocalAccountSid: int = 105
export const WinLocalAccountAndAdministratorSid: int = 106
export const WinAccountProtectedUsersSid: int = 107
export const WinCapabilityAppointmentsSid: int = 108
export const WinCapabilityContactsSid: int = 109
export const WinAccountDefaultSystemManagedSid: int = 110
export const WinBuiltinDefaultSystemManagedGroupSid: int = 111
export const WinBuiltinStorageReplicaAdminsSid: int = 112
export const WinAccountKeyAdminsSid: int = 113
export const WinAccountEnterpriseKeyAdminsSid: int = 114
export const WinAuthenticationKeyTrustSid: int = 115
export const WinAuthenticationKeyPropertyMFASid: int = 116
export const WinAuthenticationKeyPropertyAttestationSid: int = 117
export const WinAuthenticationFreshKeyAuthSid: int = 118
export const WinBuiltinDeviceOwnersSid: int = 119
export const AclRevisionInformation: int = 1
export const AclSizeInformation: int = AclRevisionInformation + 1
export const AuditEventObjectAccess: int = 0
export const AuditEventDirectoryServiceAccess: int = AuditEventObjectAccess + 1
export const AccessReasonNone: int = 0
export const AccessReasonAllowedAce: int = 65536
export const AccessReasonDeniedAce: int = 131072
export const AccessReasonAllowedParentAce: int = 196608
export const AccessReasonDeniedParentAce: int = 262144
export const AccessReasonNotGrantedByCape: int = 327680
export const AccessReasonNotGrantedByParentCape: int = 393216
export const AccessReasonNotGrantedToAppContainer: int = 458752
export const AccessReasonMissingPrivilege: int = 1048576
export const AccessReasonFromPrivilege: int = 2097152
export const AccessReasonIntegrityLevel: int = 3145728
export const AccessReasonOwnership: int = 4194304
export const AccessReasonNullDacl: int = 5242880
export const AccessReasonEmptyDacl: int = 6291456
export const AccessReasonNoSD: int = 7340032
export const AccessReasonNoGrant: int = 8388608
export const AccessReasonTrustLabel: int = 9437184
export const AccessReasonFilterAce: int = 10485760
export const SecurityAnonymous: int = 0
export const SecurityIdentification: int = SecurityAnonymous + 1
export const SecurityImpersonation: int = SecurityIdentification + 1
export const SecurityDelegation: int = SecurityImpersonation + 1
export const TokenPrimary: int = 1
export const TokenImpersonation: int = TokenPrimary + 1
export const TokenElevationTypeDefault: int = 1
export const TokenElevationTypeFull: int = TokenElevationTypeDefault + 1
export const TokenElevationTypeLimited: int = TokenElevationTypeFull + 1
export const TokenUser: int = 1
export const TokenGroups: int = TokenUser + 1
export const TokenPrivileges: int = TokenGroups + 1
export const TokenOwner: int = TokenPrivileges + 1
export const TokenPrimaryGroup: int = TokenOwner + 1
export const TokenDefaultDacl: int = TokenPrimaryGroup + 1
export const TokenSource: int = TokenDefaultDacl + 1
export const TokenType: int = TokenSource + 1
export const TokenImpersonationLevel: int = TokenType + 1
export const TokenStatistics: int = TokenImpersonationLevel + 1
export const TokenRestrictedSids: int = TokenStatistics + 1
export const TokenSessionId: int = TokenRestrictedSids + 1
export const TokenGroupsAndPrivileges: int = TokenSessionId + 1
export const TokenSessionReference: int = TokenGroupsAndPrivileges + 1
export const TokenSandBoxInert: int = TokenSessionReference + 1
export const TokenAuditPolicy: int = TokenSandBoxInert + 1
export const TokenOrigin: int = TokenAuditPolicy + 1
export const TokenElevationType: int = TokenOrigin + 1
export const TokenLinkedToken: int = TokenElevationType + 1
export const TokenElevation: int = TokenLinkedToken + 1
export const TokenHasRestrictions: int = TokenElevation + 1
export const TokenAccessInformation: int = TokenHasRestrictions + 1
export const TokenVirtualizationAllowed: int = TokenAccessInformation + 1
export const TokenVirtualizationEnabled: int = TokenVirtualizationAllowed + 1
export const TokenIntegrityLevel: int = TokenVirtualizationEnabled + 1
export const TokenUIAccess: int = TokenIntegrityLevel + 1
export const TokenMandatoryPolicy: int = TokenUIAccess + 1
export const TokenLogonSid: int = TokenMandatoryPolicy + 1
export const TokenIsAppContainer: int = TokenLogonSid + 1
export const TokenCapabilities: int = TokenIsAppContainer + 1
export const TokenAppContainerSid: int = TokenCapabilities + 1
export const TokenAppContainerNumber: int = TokenAppContainerSid + 1
export const TokenUserClaimAttributes: int = TokenAppContainerNumber + 1
export const TokenDeviceClaimAttributes: int = TokenUserClaimAttributes + 1
export const TokenRestrictedUserClaimAttributes: int = TokenDeviceClaimAttributes + 1
export const TokenRestrictedDeviceClaimAttributes: int = TokenRestrictedUserClaimAttributes + 1
export const TokenDeviceGroups: int = TokenRestrictedDeviceClaimAttributes + 1
export const TokenRestrictedDeviceGroups: int = TokenDeviceGroups + 1
export const TokenSecurityAttributes: int = TokenRestrictedDeviceGroups + 1
export const TokenIsRestricted: int = TokenSecurityAttributes + 1
export const TokenProcessTrustLevel: int = TokenIsRestricted + 1
export const TokenPrivateNameSpace: int = TokenProcessTrustLevel + 1
export const TokenSingletonAttributes: int = TokenPrivateNameSpace + 1
export const TokenBnoIsolation: int = TokenSingletonAttributes + 1
export const TokenChildProcessFlags: int = TokenBnoIsolation + 1
export const TokenIsLessPrivilegedAppContainer: int = TokenChildProcessFlags + 1
export const TokenIsSandboxed: int = TokenIsLessPrivilegedAppContainer + 1
export const TokenOriginatingProcessTrustLevel: int = TokenIsSandboxed + 1
export const MaxTokenInfoClass: int = TokenOriginatingProcessTrustLevel + 1
export const MandatoryLevelUntrusted: int = 0
export const MandatoryLevelLow: int = MandatoryLevelUntrusted + 1
export const MandatoryLevelMedium: int = MandatoryLevelLow + 1
export const MandatoryLevelHigh: int = MandatoryLevelMedium + 1
export const MandatoryLevelSystem: int = MandatoryLevelHigh + 1
export const MandatoryLevelSecureProcess: int = MandatoryLevelSystem + 1
export const MandatoryLevelCount: int = MandatoryLevelSecureProcess + 1
export const SeImageSignatureNone: int = 0
export const SeImageSignatureEmbedded: int = SeImageSignatureNone + 1
export const SeImageSignatureCache: int = SeImageSignatureEmbedded + 1
export const SeImageSignatureCatalogCached: int = SeImageSignatureCache + 1
export const SeImageSignatureCatalogNotCached: int = SeImageSignatureCatalogCached + 1
export const SeImageSignatureCatalogHint: int = SeImageSignatureCatalogNotCached + 1
export const SeImageSignaturePackageCatalog: int = SeImageSignatureCatalogHint + 1
export const SeLearningModeInvalidType: int = 0
export const SeLearningModeSettings: int = SeLearningModeInvalidType + 1
export const SeLearningModeMax: int = SeLearningModeSettings + 1
export const PMCCounter: int = 0
export const MaxHardwareCounterType: int = PMCCounter + 1
export const ProcessDEPPolicy: int = 0
export const ProcessASLRPolicy: int = ProcessDEPPolicy + 1
export const ProcessDynamicCodePolicy: int = ProcessASLRPolicy + 1
export const ProcessStrictHandleCheckPolicy: int = ProcessDynamicCodePolicy + 1
export const ProcessSystemCallDisablePolicy: int = ProcessStrictHandleCheckPolicy + 1
export const ProcessMitigationOptionsMask: int = ProcessSystemCallDisablePolicy + 1
export const ProcessExtensionPointDisablePolicy: int = ProcessMitigationOptionsMask + 1
export const ProcessControlFlowGuardPolicy: int = ProcessExtensionPointDisablePolicy + 1
export const ProcessSignaturePolicy: int = ProcessControlFlowGuardPolicy + 1
export const ProcessFontDisablePolicy: int = ProcessSignaturePolicy + 1
export const ProcessImageLoadPolicy: int = ProcessFontDisablePolicy + 1
export const ProcessSystemCallFilterPolicy: int = ProcessImageLoadPolicy + 1
export const ProcessPayloadRestrictionPolicy: int = ProcessSystemCallFilterPolicy + 1
export const ProcessChildProcessPolicy: int = ProcessPayloadRestrictionPolicy + 1
export const ProcessSideChannelIsolationPolicy: int = ProcessChildProcessPolicy + 1
export const ProcessUserShadowStackPolicy: int = ProcessSideChannelIsolationPolicy + 1
export const MaxProcessMitigationPolicy: int = ProcessUserShadowStackPolicy + 1
export const ToleranceLow: int = 1
export const ToleranceMedium: int = ToleranceLow + 1
export const ToleranceHigh: int = ToleranceMedium + 1
export const ToleranceIntervalShort: int = 1
export const ToleranceIntervalMedium: int = ToleranceIntervalShort + 1
export const ToleranceIntervalLong: int = ToleranceIntervalMedium + 1
export const JOB_OBJECT_NET_RATE_CONTROL_ENABLE: int = 1
export const JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH: int = 2
export const JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG: int = 4
export const JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS: int = 7
export const JOB_OBJECT_IO_RATE_CONTROL_ENABLE: int = 1
export const JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME: int = 2
export const JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL: int = 4
export const JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP: int = 8
export const JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS: int = (((JOB_OBJECT_IO_RATE_CONTROL_ENABLE | JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME) | JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL) | JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP)
export const JOBOBJECT_IO_ATTRIBUTION_CONTROL_ENABLE: int = 1
export const JOBOBJECT_IO_ATTRIBUTION_CONTROL_DISABLE: int = 2
export const JOBOBJECT_IO_ATTRIBUTION_CONTROL_VALID_FLAGS: int = 3
export const JobObjectBasicAccountingInformation: int = 1
export const JobObjectBasicLimitInformation: int = JobObjectBasicAccountingInformation + 1
export const JobObjectBasicProcessIdList: int = JobObjectBasicLimitInformation + 1
export const JobObjectBasicUIRestrictions: int = JobObjectBasicProcessIdList + 1
export const JobObjectSecurityLimitInformation: int = JobObjectBasicUIRestrictions + 1
export const JobObjectEndOfJobTimeInformation: int = JobObjectSecurityLimitInformation + 1
export const JobObjectAssociateCompletionPortInformation: int = JobObjectEndOfJobTimeInformation + 1
export const JobObjectBasicAndIoAccountingInformation: int = JobObjectAssociateCompletionPortInformation + 1
export const JobObjectExtendedLimitInformation: int = JobObjectBasicAndIoAccountingInformation + 1
export const JobObjectJobSetInformation: int = JobObjectExtendedLimitInformation + 1
export const JobObjectGroupInformation: int = JobObjectJobSetInformation + 1
export const JobObjectNotificationLimitInformation: int = JobObjectGroupInformation + 1
export const JobObjectLimitViolationInformation: int = JobObjectNotificationLimitInformation + 1
export const JobObjectGroupInformationEx: int = JobObjectLimitViolationInformation + 1
export const JobObjectCpuRateControlInformation: int = JobObjectGroupInformationEx + 1
export const JobObjectCompletionFilter: int = JobObjectCpuRateControlInformation + 1
export const JobObjectCompletionCounter: int = JobObjectCompletionFilter + 1
export const JobObjectReserved1Information: int = 18
export const JobObjectReserved2Information: int = JobObjectReserved1Information + 1
export const JobObjectReserved3Information: int = JobObjectReserved2Information + 1
export const JobObjectReserved4Information: int = JobObjectReserved3Information + 1
export const JobObjectReserved5Information: int = JobObjectReserved4Information + 1
export const JobObjectReserved6Information: int = JobObjectReserved5Information + 1
export const JobObjectReserved7Information: int = JobObjectReserved6Information + 1
export const JobObjectReserved8Information: int = JobObjectReserved7Information + 1
export const JobObjectReserved9Information: int = JobObjectReserved8Information + 1
export const JobObjectReserved10Information: int = JobObjectReserved9Information + 1
export const JobObjectReserved11Information: int = JobObjectReserved10Information + 1
export const JobObjectReserved12Information: int = JobObjectReserved11Information + 1
export const JobObjectReserved13Information: int = JobObjectReserved12Information + 1
export const JobObjectReserved14Information: int = 31
export const JobObjectNetRateControlInformation: int = JobObjectReserved14Information + 1
export const JobObjectNotificationLimitInformation2: int = JobObjectNetRateControlInformation + 1
export const JobObjectLimitViolationInformation2: int = JobObjectNotificationLimitInformation2 + 1
export const JobObjectCreateSilo: int = JobObjectLimitViolationInformation2 + 1
export const JobObjectSiloBasicInformation: int = JobObjectCreateSilo + 1
export const JobObjectReserved15Information: int = 37
export const JobObjectReserved16Information: int = 38
export const JobObjectReserved17Information: int = 39
export const JobObjectReserved18Information: int = 40
export const JobObjectReserved19Information: int = 41
export const JobObjectReserved20Information: int = 42
export const JobObjectReserved21Information: int = 43
export const JobObjectReserved22Information: int = 44
export const JobObjectReserved23Information: int = 45
export const JobObjectReserved24Information: int = 46
export const JobObjectReserved25Information: int = 47
export const MaxJobObjectInfoClass: int = JobObjectReserved25Information + 1
export const SERVERSILO_INITING: int = 0
export const SERVERSILO_STARTED: int = SERVERSILO_INITING + 1
export const SERVERSILO_SHUTTING_DOWN: int = SERVERSILO_STARTED + 1
export const SERVERSILO_TERMINATING: int = SERVERSILO_SHUTTING_DOWN + 1
export const SERVERSILO_TERMINATED: int = SERVERSILO_TERMINATING + 1
export const FirmwareTypeUnknown: int = 0
export const FirmwareTypeBios: int = FirmwareTypeUnknown + 1
export const FirmwareTypeUefi: int = FirmwareTypeBios + 1
export const FirmwareTypeMax: int = FirmwareTypeUefi + 1
export const RelationProcessorCore: int = 0
export const RelationNumaNode: int = RelationProcessorCore + 1
export const RelationCache: int = RelationNumaNode + 1
export const RelationProcessorPackage: int = RelationCache + 1
export const RelationGroup: int = RelationProcessorPackage + 1
export const RelationAll: int = 65535
export const CacheUnified: int = 0
export const CacheInstruction: int = CacheUnified + 1
export const CacheData: int = CacheInstruction + 1
export const CacheTrace: int = CacheData + 1
export const CpuSetInformation: int = 0
export const MemExtendedParameterInvalidType: int = 0
export const MemExtendedParameterAddressRequirements: int = MemExtendedParameterInvalidType + 1
export const MemExtendedParameterNumaNode: int = MemExtendedParameterAddressRequirements + 1
export const MemExtendedParameterPartitionHandle: int = MemExtendedParameterNumaNode + 1
export const MemExtendedParameterUserPhysicalHandle: int = MemExtendedParameterPartitionHandle + 1
export const MemExtendedParameterAttributeFlags: int = MemExtendedParameterUserPhysicalHandle + 1
export const MemExtendedParameterMax: int = MemExtendedParameterAttributeFlags + 1
export const MemSectionExtendedParameterInvalidType: int = 0
export const MemSectionExtendedParameterUserPhysicalFlags: int = MemSectionExtendedParameterInvalidType + 1
export const MemSectionExtendedParameterNumaNode: int = MemSectionExtendedParameterUserPhysicalFlags + 1
export const MemSectionExtendedParameterMax: int = MemSectionExtendedParameterNumaNode + 1
export const SharedVirtualDisksUnsupported: int = 0
export const SharedVirtualDisksSupported: int = 1
export const SharedVirtualDiskSnapshotsSupported: int = 3
export const SharedVirtualDiskCDPSnapshotsSupported: int = 7
export const SharedVirtualDiskHandleStateNone: int = 0
export const SharedVirtualDiskHandleStateFileShared: int = 1
export const SharedVirtualDiskHandleStateHandleShared: int = 3
export const PowerSystemUnspecified: int = 0
export const PowerSystemWorking: int = 1
export const PowerSystemSleeping1: int = 2
export const PowerSystemSleeping2: int = 3
export const PowerSystemSleeping3: int = 4
export const PowerSystemHibernate: int = 5
export const PowerSystemShutdown: int = 6
export const PowerSystemMaximum: int = 7
export const PowerActionNone: int = 0
export const PowerActionReserved: int = PowerActionNone + 1
export const PowerActionSleep: int = PowerActionReserved + 1
export const PowerActionHibernate: int = PowerActionSleep + 1
export const PowerActionShutdown: int = PowerActionHibernate + 1
export const PowerActionShutdownReset: int = PowerActionShutdown + 1
export const PowerActionShutdownOff: int = PowerActionShutdownReset + 1
export const PowerActionWarmEject: int = PowerActionShutdownOff + 1
export const PowerActionDisplayOff: int = PowerActionWarmEject + 1
export const PowerDeviceUnspecified: int = 0
export const PowerDeviceD0: int = PowerDeviceUnspecified + 1
export const PowerDeviceD1: int = PowerDeviceD0 + 1
export const PowerDeviceD2: int = PowerDeviceD1 + 1
export const PowerDeviceD3: int = PowerDeviceD2 + 1
export const PowerDeviceMaximum: int = PowerDeviceD3 + 1
export const PowerMonitorOff: int = 0
export const PowerMonitorOn: int = PowerMonitorOff + 1
export const PowerMonitorDim: int = PowerMonitorOn + 1
export const PowerUserPresent: int = 0
export const PowerUserNotPresent: int = PowerUserPresent + 1
export const PowerUserInactive: int = PowerUserNotPresent + 1
export const PowerUserMaximum: int = PowerUserInactive + 1
export const PowerUserInvalid: int = PowerUserMaximum
export const LT_DONT_CARE: int = 0
export const LT_LOWEST_LATENCY: int = LT_DONT_CARE + 1
export const PowerRequestDisplayRequired: int = 0
export const PowerRequestSystemRequired: int = PowerRequestDisplayRequired + 1
export const PowerRequestAwayModeRequired: int = PowerRequestSystemRequired + 1
export const PowerRequestExecutionRequired: int = PowerRequestAwayModeRequired + 1
export const SystemPowerPolicyAc: int = 0
export const SystemPowerPolicyDc: int = SystemPowerPolicyAc + 1
export const VerifySystemPolicyAc: int = SystemPowerPolicyDc + 1
export const VerifySystemPolicyDc: int = VerifySystemPolicyAc + 1
export const SystemPowerCapabilities: int = VerifySystemPolicyDc + 1
export const SystemBatteryState: int = SystemPowerCapabilities + 1
export const SystemPowerStateHandler: int = SystemBatteryState + 1
export const ProcessorStateHandler: int = SystemPowerStateHandler + 1
export const SystemPowerPolicyCurrent: int = ProcessorStateHandler + 1
export const AdministratorPowerPolicy: int = SystemPowerPolicyCurrent + 1
export const SystemReserveHiberFile: int = AdministratorPowerPolicy + 1
export const ProcessorInformation: int = SystemReserveHiberFile + 1
export const SystemPowerInformation: int = ProcessorInformation + 1
export const ProcessorStateHandler2: int = SystemPowerInformation + 1
export const LastWakeTime: int = ProcessorStateHandler2 + 1
export const LastSleepTime: int = LastWakeTime + 1
export const SystemExecutionState: int = LastSleepTime + 1
export const SystemPowerStateNotifyHandler: int = SystemExecutionState + 1
export const ProcessorPowerPolicyAc: int = SystemPowerStateNotifyHandler + 1
export const ProcessorPowerPolicyDc: int = ProcessorPowerPolicyAc + 1
export const VerifyProcessorPowerPolicyAc: int = ProcessorPowerPolicyDc + 1
export const VerifyProcessorPowerPolicyDc: int = VerifyProcessorPowerPolicyAc + 1
export const ProcessorPowerPolicyCurrent: int = VerifyProcessorPowerPolicyDc + 1
export const SystemPowerStateLogging: int = ProcessorPowerPolicyCurrent + 1
export const SystemPowerLoggingEntry: int = SystemPowerStateLogging + 1
export const SetPowerSettingValue: int = SystemPowerLoggingEntry + 1
export const NotifyUserPowerSetting: int = SetPowerSettingValue + 1
export const PowerInformationLevelUnused0: int = NotifyUserPowerSetting + 1
export const SystemMonitorHiberBootPowerOff: int = PowerInformationLevelUnused0 + 1
export const SystemVideoState: int = SystemMonitorHiberBootPowerOff + 1
export const TraceApplicationPowerMessage: int = SystemVideoState + 1
export const TraceApplicationPowerMessageEnd: int = TraceApplicationPowerMessage + 1
export const ProcessorPerfStates: int = TraceApplicationPowerMessageEnd + 1
export const ProcessorIdleStates: int = ProcessorPerfStates + 1
export const ProcessorCap: int = ProcessorIdleStates + 1
export const SystemWakeSource: int = ProcessorCap + 1
export const SystemHiberFileInformation: int = SystemWakeSource + 1
export const TraceServicePowerMessage: int = SystemHiberFileInformation + 1
export const ProcessorLoad: int = TraceServicePowerMessage + 1
export const PowerShutdownNotification: int = ProcessorLoad + 1
export const MonitorCapabilities: int = PowerShutdownNotification + 1
export const SessionPowerInit: int = MonitorCapabilities + 1
export const SessionDisplayState: int = SessionPowerInit + 1
export const PowerRequestCreate: int = SessionDisplayState + 1
export const PowerRequestAction: int = PowerRequestCreate + 1
export const GetPowerRequestList: int = PowerRequestAction + 1
export const ProcessorInformationEx: int = GetPowerRequestList + 1
export const NotifyUserModeLegacyPowerEvent: int = ProcessorInformationEx + 1
export const GroupPark: int = NotifyUserModeLegacyPowerEvent + 1
export const ProcessorIdleDomains: int = GroupPark + 1
export const WakeTimerList: int = ProcessorIdleDomains + 1
export const SystemHiberFileSize: int = WakeTimerList + 1
export const ProcessorIdleStatesHv: int = SystemHiberFileSize + 1
export const ProcessorPerfStatesHv: int = ProcessorIdleStatesHv + 1
export const ProcessorPerfCapHv: int = ProcessorPerfStatesHv + 1
export const ProcessorSetIdle: int = ProcessorPerfCapHv + 1
export const LogicalProcessorIdling: int = ProcessorSetIdle + 1
export const UserPresence: int = LogicalProcessorIdling + 1
export const PowerSettingNotificationName: int = UserPresence + 1
export const GetPowerSettingValue: int = PowerSettingNotificationName + 1
export const IdleResiliency: int = GetPowerSettingValue + 1
export const SessionRITState: int = IdleResiliency + 1
export const SessionConnectNotification: int = SessionRITState + 1
export const SessionPowerCleanup: int = SessionConnectNotification + 1
export const SessionLockState: int = SessionPowerCleanup + 1
export const SystemHiberbootState: int = SessionLockState + 1
export const PlatformInformation: int = SystemHiberbootState + 1
export const PdcInvocation: int = PlatformInformation + 1
export const MonitorInvocation: int = PdcInvocation + 1
export const FirmwareTableInformationRegistered: int = MonitorInvocation + 1
export const SetShutdownSelectedTime: int = FirmwareTableInformationRegistered + 1
export const SuspendResumeInvocation: int = SetShutdownSelectedTime + 1
export const PlmPowerRequestCreate: int = SuspendResumeInvocation + 1
export const ScreenOff: int = PlmPowerRequestCreate + 1
export const CsDeviceNotification: int = ScreenOff + 1
export const PlatformRole: int = CsDeviceNotification + 1
export const LastResumePerformance: int = PlatformRole + 1
export const DisplayBurst: int = LastResumePerformance + 1
export const ExitLatencySamplingPercentage: int = DisplayBurst + 1
export const RegisterSpmPowerSettings: int = ExitLatencySamplingPercentage + 1
export const PlatformIdleStates: int = RegisterSpmPowerSettings + 1
export const ProcessorIdleVeto: int = PlatformIdleStates + 1
export const PlatformIdleVeto: int = ProcessorIdleVeto + 1
export const SystemBatteryStatePrecise: int = PlatformIdleVeto + 1
export const ThermalEvent: int = SystemBatteryStatePrecise + 1
export const PowerRequestActionInternal: int = ThermalEvent + 1
export const BatteryDeviceState: int = PowerRequestActionInternal + 1
export const PowerInformationInternal: int = BatteryDeviceState + 1
export const ThermalStandby: int = PowerInformationInternal + 1
export const SystemHiberFileType: int = ThermalStandby + 1
export const PhysicalPowerButtonPress: int = SystemHiberFileType + 1
export const QueryPotentialDripsConstraint: int = PhysicalPowerButtonPress + 1
export const EnergyTrackerCreate: int = QueryPotentialDripsConstraint + 1
export const EnergyTrackerQuery: int = EnergyTrackerCreate + 1
export const UpdateBlackBoxRecorder: int = EnergyTrackerQuery + 1
export const SessionAllowExternalDmaDevices: int = UpdateBlackBoxRecorder + 1
export const PowerInformationLevelMaximum: int = SessionAllowExternalDmaDevices + 1
export const UserNotPresent: int = 0
export const UserPresent: int = 1
export const UserUnknown: int = 255
export const MonitorRequestReasonUnknown: int = 0
export const MonitorRequestReasonPowerButton: int = MonitorRequestReasonUnknown + 1
export const MonitorRequestReasonRemoteConnection: int = MonitorRequestReasonPowerButton + 1
export const MonitorRequestReasonScMonitorpower: int = MonitorRequestReasonRemoteConnection + 1
export const MonitorRequestReasonUserInput: int = MonitorRequestReasonScMonitorpower + 1
export const MonitorRequestReasonAcDcDisplayBurst: int = MonitorRequestReasonUserInput + 1
export const MonitorRequestReasonUserDisplayBurst: int = MonitorRequestReasonAcDcDisplayBurst + 1
export const MonitorRequestReasonPoSetSystemState: int = MonitorRequestReasonUserDisplayBurst + 1
export const MonitorRequestReasonSetThreadExecutionState: int = MonitorRequestReasonPoSetSystemState + 1
export const MonitorRequestReasonFullWake: int = MonitorRequestReasonSetThreadExecutionState + 1
export const MonitorRequestReasonSessionUnlock: int = MonitorRequestReasonFullWake + 1
export const MonitorRequestReasonScreenOffRequest: int = MonitorRequestReasonSessionUnlock + 1
export const MonitorRequestReasonIdleTimeout: int = MonitorRequestReasonScreenOffRequest + 1
export const MonitorRequestReasonPolicyChange: int = MonitorRequestReasonIdleTimeout + 1
export const MonitorRequestReasonSleepButton: int = MonitorRequestReasonPolicyChange + 1
export const MonitorRequestReasonLid: int = MonitorRequestReasonSleepButton + 1
export const MonitorRequestReasonBatteryCountChange: int = MonitorRequestReasonLid + 1
export const MonitorRequestReasonGracePeriod: int = MonitorRequestReasonBatteryCountChange + 1
export const MonitorRequestReasonPnP: int = MonitorRequestReasonGracePeriod + 1
export const MonitorRequestReasonDP: int = MonitorRequestReasonPnP + 1
export const MonitorRequestReasonSxTransition: int = MonitorRequestReasonDP + 1
export const MonitorRequestReasonSystemIdle: int = MonitorRequestReasonSxTransition + 1
export const MonitorRequestReasonNearProximity: int = MonitorRequestReasonSystemIdle + 1
export const MonitorRequestReasonThermalStandby: int = MonitorRequestReasonNearProximity + 1
export const MonitorRequestReasonResumePdc: int = MonitorRequestReasonThermalStandby + 1
export const MonitorRequestReasonResumeS4: int = MonitorRequestReasonResumePdc + 1
export const MonitorRequestReasonTerminal: int = MonitorRequestReasonResumeS4 + 1
export const MonitorRequestReasonPdcSignal: int = MonitorRequestReasonTerminal + 1
export const MonitorRequestReasonAcDcDisplayBurstSuppressed: int = MonitorRequestReasonPdcSignal + 1
export const MonitorRequestReasonSystemStateEntered: int = MonitorRequestReasonAcDcDisplayBurstSuppressed + 1
export const MonitorRequestReasonWinrt: int = MonitorRequestReasonSystemStateEntered + 1
export const MonitorRequestReasonUserInputKeyboard: int = MonitorRequestReasonWinrt + 1
export const MonitorRequestReasonUserInputMouse: int = MonitorRequestReasonUserInputKeyboard + 1
export const MonitorRequestReasonUserInputTouch: int = MonitorRequestReasonUserInputMouse + 1
export const MonitorRequestReasonUserInputPen: int = MonitorRequestReasonUserInputTouch + 1
export const MonitorRequestReasonUserInputAccelerometer: int = MonitorRequestReasonUserInputPen + 1
export const MonitorRequestReasonUserInputHid: int = MonitorRequestReasonUserInputAccelerometer + 1
export const MonitorRequestReasonUserInputPoUserPresent: int = MonitorRequestReasonUserInputHid + 1
export const MonitorRequestReasonUserInputSessionSwitch: int = MonitorRequestReasonUserInputPoUserPresent + 1
export const MonitorRequestReasonUserInputInitialization: int = MonitorRequestReasonUserInputSessionSwitch + 1
export const MonitorRequestReasonPdcSignalWindowsMobilePwrNotif: int = MonitorRequestReasonUserInputInitialization + 1
export const MonitorRequestReasonPdcSignalWindowsMobileShell: int = MonitorRequestReasonPdcSignalWindowsMobilePwrNotif + 1
export const MonitorRequestReasonPdcSignalHeyCortana: int = MonitorRequestReasonPdcSignalWindowsMobileShell + 1
export const MonitorRequestReasonPdcSignalHolographicShell: int = MonitorRequestReasonPdcSignalHeyCortana + 1
export const MonitorRequestReasonPdcSignalFingerprint: int = MonitorRequestReasonPdcSignalHolographicShell + 1
export const MonitorRequestReasonDirectedDrips: int = MonitorRequestReasonPdcSignalFingerprint + 1
export const MonitorRequestReasonDim: int = MonitorRequestReasonDirectedDrips + 1
export const MonitorRequestReasonBuiltinPanel: int = MonitorRequestReasonDim + 1
export const MonitorRequestReasonDisplayRequiredUnDim: int = MonitorRequestReasonBuiltinPanel + 1
export const MonitorRequestReasonBatteryCountChangeSuppressed: int = MonitorRequestReasonDisplayRequiredUnDim + 1
export const MonitorRequestReasonResumeModernStandby: int = MonitorRequestReasonBatteryCountChangeSuppressed + 1
export const MonitorRequestReasonMax: int = MonitorRequestReasonResumeModernStandby + 1
export const MonitorRequestTypeOff: int = 0
export const MonitorRequestTypeOnAndPresent: int = MonitorRequestTypeOff + 1
export const MonitorRequestTypeToggleOn: int = MonitorRequestTypeOnAndPresent + 1
export const PoAc: int = 0
export const PoDc: int = PoAc + 1
export const PoHot: int = PoDc + 1
export const PoConditionMaximum: int = PoHot + 1
export const PlatformRoleUnspecified: int = 0
export const PlatformRoleDesktop: int = PlatformRoleUnspecified + 1
export const PlatformRoleMobile: int = PlatformRoleDesktop + 1
export const PlatformRoleWorkstation: int = PlatformRoleMobile + 1
export const PlatformRoleEnterpriseServer: int = PlatformRoleWorkstation + 1
export const PlatformRoleSOHOServer: int = PlatformRoleEnterpriseServer + 1
export const PlatformRoleAppliancePC: int = PlatformRoleSOHOServer + 1
export const PlatformRolePerformanceServer: int = PlatformRoleAppliancePC + 1
export const PlatformRoleSlate: int = PlatformRolePerformanceServer + 1
export const PlatformRoleMaximum: int = PlatformRoleSlate + 1
export const HiberFileBucket1GB: int = 0
export const HiberFileBucket2GB: int = HiberFileBucket1GB + 1
export const HiberFileBucket4GB: int = HiberFileBucket2GB + 1
export const HiberFileBucket8GB: int = HiberFileBucket4GB + 1
export const HiberFileBucket16GB: int = HiberFileBucket8GB + 1
export const HiberFileBucket32GB: int = HiberFileBucket16GB + 1
export const HiberFileBucketUnlimited: int = HiberFileBucket32GB + 1
export const HiberFileBucketMax: int = HiberFileBucketUnlimited + 1
export const IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF: int = 1
export const PdataRefToFullXdata: int = 0
export const PdataPackedUnwindFunction: int = 1
export const PdataPackedUnwindFragment: int = 2
export const PdataCrUnchained: int = 0
export const PdataCrUnchainedSavedLr: int = 1
export const PdataCrChainedWithPac: int = 2
export const PdataCrChained: int = 3
export const IMPORT_OBJECT_CODE: int = 0
export const IMPORT_OBJECT_DATA: int = 1
export const IMPORT_OBJECT_CONST: int = 2
export const IMPORT_OBJECT_ORDINAL: int = 0
export const IMPORT_OBJECT_NAME: int = 1
export const IMPORT_OBJECT_NAME_NO_PREFIX: int = 2
export const IMPORT_OBJECT_NAME_UNDECORATE: int = 3
export const IMPORT_OBJECT_NAME_EXPORTAS: int = 4
export const COMIMAGE_FLAGS_ILONLY: int = 1
export const COMIMAGE_FLAGS_32BITREQUIRED: int = 2
export const COMIMAGE_FLAGS_IL_LIBRARY: int = 4
export const COMIMAGE_FLAGS_STRONGNAMESIGNED: int = 8
export const COMIMAGE_FLAGS_NATIVE_ENTRYPOINT: int = 16
export const COMIMAGE_FLAGS_TRACKDEBUGDATA: int = 65536
export const COMIMAGE_FLAGS_32BITPREFERRED: int = 131072
export const COR_VERSION_MAJOR_V2: int = 2
export const COR_VERSION_MAJOR: int = COR_VERSION_MAJOR_V2
export const COR_VERSION_MINOR: int = 5
export const COR_DELETED_NAME_LENGTH: int = 8
export const COR_VTABLEGAP_NAME_LENGTH: int = 8
export const NATIVE_TYPE_MAX_CB: int = 1
export const COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE: int = 255
export const IMAGE_COR_MIH_METHODRVA: int = 1
export const IMAGE_COR_MIH_EHRVA: int = 2
export const IMAGE_COR_MIH_BASICBLOCK: int = 8
export const COR_VTABLE_32BIT: int = 1
export const COR_VTABLE_64BIT: int = 2
export const COR_VTABLE_FROM_UNMANAGED: int = 4
export const COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN: int = 8
export const COR_VTABLE_CALL_MOST_DERIVED: int = 16
export const IMAGE_COR_EATJ_THUNK_SIZE: int = 32
export const MAX_CLASS_NAME: int = 1024
export const MAX_PACKAGE_NAME: int = 1024
export const UmsThreadInvalidInfoClass: int = 0
export const UmsThreadUserContext: int = UmsThreadInvalidInfoClass + 1
export const UmsThreadPriority: int = UmsThreadUserContext + 1
export const UmsThreadAffinity: int = UmsThreadPriority + 1
export const UmsThreadTeb: int = UmsThreadAffinity + 1
export const UmsThreadIsSuspended: int = UmsThreadTeb + 1
export const UmsThreadIsTerminated: int = UmsThreadIsSuspended + 1
export const UmsThreadMaxInfoClass: int = UmsThreadIsTerminated + 1
export const UmsSchedulerStartup: int = 0
export const UmsSchedulerThreadBlocked: int = UmsSchedulerStartup + 1
export const UmsSchedulerThreadYield: int = UmsSchedulerThreadBlocked + 1
export const OS_DEPLOYMENT_STANDARD: int = 1
export const OS_DEPLOYMENT_COMPACT: int = OS_DEPLOYMENT_STANDARD + 1
export const ImagePolicyEntryTypeNone: int = 0
export const ImagePolicyEntryTypeBool: int = ImagePolicyEntryTypeNone + 1
export const ImagePolicyEntryTypeInt8: int = ImagePolicyEntryTypeBool + 1
export const ImagePolicyEntryTypeUInt8: int = ImagePolicyEntryTypeInt8 + 1
export const ImagePolicyEntryTypeInt16: int = ImagePolicyEntryTypeUInt8 + 1
export const ImagePolicyEntryTypeUInt16: int = ImagePolicyEntryTypeInt16 + 1
export const ImagePolicyEntryTypeInt32: int = ImagePolicyEntryTypeUInt16 + 1
export const ImagePolicyEntryTypeUInt32: int = ImagePolicyEntryTypeInt32 + 1
export const ImagePolicyEntryTypeInt64: int = ImagePolicyEntryTypeUInt32 + 1
export const ImagePolicyEntryTypeUInt64: int = ImagePolicyEntryTypeInt64 + 1
export const ImagePolicyEntryTypeAnsiString: int = ImagePolicyEntryTypeUInt64 + 1
export const ImagePolicyEntryTypeUnicodeString: int = ImagePolicyEntryTypeAnsiString + 1
export const ImagePolicyEntryTypeOverride: int = ImagePolicyEntryTypeUnicodeString + 1
export const ImagePolicyEntryTypeMaximum: int = ImagePolicyEntryTypeOverride + 1
export const ImagePolicyIdNone: int = 0
export const ImagePolicyIdEtw: int = ImagePolicyIdNone + 1
export const ImagePolicyIdDebug: int = ImagePolicyIdEtw + 1
export const ImagePolicyIdCrashDump: int = ImagePolicyIdDebug + 1
export const ImagePolicyIdCrashDumpKey: int = ImagePolicyIdCrashDump + 1
export const ImagePolicyIdCrashDumpKeyGuid: int = ImagePolicyIdCrashDumpKey + 1
export const ImagePolicyIdParentSd: int = ImagePolicyIdCrashDumpKeyGuid + 1
export const ImagePolicyIdParentSdRev: int = ImagePolicyIdParentSd + 1
export const ImagePolicyIdSvn: int = ImagePolicyIdParentSdRev + 1
export const ImagePolicyIdDeviceId: int = ImagePolicyIdSvn + 1
export const ImagePolicyIdCapability: int = ImagePolicyIdDeviceId + 1
export const ImagePolicyIdScenarioId: int = ImagePolicyIdCapability + 1
export const ImagePolicyIdMaximum: int = ImagePolicyIdScenarioId + 1
export const HeapCompatibilityInformation: int = 0
export const HeapEnableTerminationOnCorruption: int = 1
export const HeapOptimizeResources: int = 3
export const ActivationContextBasicInformation: int = 1
export const ActivationContextDetailedInformation: int = 2
export const AssemblyDetailedInformationInActivationContext: int = 3
export const FileInformationInAssemblyOfAssemblyInActivationContext: int = 4
export const RunlevelInformationInActivationContext: int = 5
export const CompatibilityInformationInActivationContext: int = 6
export const ActivationContextManifestResourceName: int = 7
export const MaxActivationContextInfoClass: int = ActivationContextManifestResourceName + 1
export const AssemblyDetailedInformationInActivationContxt: int = 3
export const FileInformationInAssemblyOfAssemblyInActivationContxt: int = 4
export const ACTCTX_RUN_LEVEL_UNSPECIFIED: int = 0
export const ACTCTX_RUN_LEVEL_AS_INVOKER: int = ACTCTX_RUN_LEVEL_UNSPECIFIED + 1
export const ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE: int = ACTCTX_RUN_LEVEL_AS_INVOKER + 1
export const ACTCTX_RUN_LEVEL_REQUIRE_ADMIN: int = ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE + 1
export const ACTCTX_RUN_LEVEL_NUMBERS: int = ACTCTX_RUN_LEVEL_REQUIRE_ADMIN + 1
export const ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN: int = 0
export const ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS: int = ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN + 1
export const ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION: int = ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS + 1
export const ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MAXVERSIONTESTED: int = ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION + 1
export const DriverType: int = 1
export const FileSystemType: int = 2
export const Win32ServiceOwnProcess: int = 16
export const Win32ServiceShareProcess: int = 32
export const AdapterType: int = 4
export const RecognizerType: int = 8
export const BootLoad: int = 0
export const SystemLoad: int = 1
export const AutoLoad: int = 2
export const DemandLoad: int = 3
export const DisableLoad: int = 4
export const IgnoreError: int = 0
export const NormalError: int = 1
export const SevereError: int = 2
export const CriticalError: int = 3
export const TapeDriveProblemNone: int = 0
export const TapeDriveReadWriteWarning: int = TapeDriveProblemNone + 1
export const TapeDriveReadWriteError: int = TapeDriveReadWriteWarning + 1
export const TapeDriveReadWarning: int = TapeDriveReadWriteError + 1
export const TapeDriveWriteWarning: int = TapeDriveReadWarning + 1
export const TapeDriveReadError: int = TapeDriveWriteWarning + 1
export const TapeDriveWriteError: int = TapeDriveReadError + 1
export const TapeDriveHardwareError: int = TapeDriveWriteError + 1
export const TapeDriveUnsupportedMedia: int = TapeDriveHardwareError + 1
export const TapeDriveScsiConnectionError: int = TapeDriveUnsupportedMedia + 1
export const TapeDriveTimetoClean: int = TapeDriveScsiConnectionError + 1
export const TapeDriveCleanDriveNow: int = TapeDriveTimetoClean + 1
export const TapeDriveMediaLifeExpired: int = TapeDriveCleanDriveNow + 1
export const TapeDriveSnappedTape: int = TapeDriveMediaLifeExpired + 1
export const TransactionOutcomeUndetermined: int = 1
export const TransactionOutcomeCommitted: int = TransactionOutcomeUndetermined + 1
export const TransactionOutcomeAborted: int = TransactionOutcomeCommitted + 1
export const TransactionStateNormal: int = 1
export const TransactionStateIndoubt: int = TransactionStateNormal + 1
export const TransactionStateCommittedNotify: int = TransactionStateIndoubt + 1
export const TransactionBasicInformation: int = 0
export const TransactionPropertiesInformation: int = TransactionBasicInformation + 1
export const TransactionEnlistmentInformation: int = TransactionPropertiesInformation + 1
export const TransactionSuperiorEnlistmentInformation: int = TransactionEnlistmentInformation + 1
export const TransactionBindInformation: int = TransactionSuperiorEnlistmentInformation + 1
export const TransactionDTCPrivateInformation: int = TransactionBindInformation + 1
export const TransactionManagerBasicInformation: int = 0
export const TransactionManagerLogInformation: int = TransactionManagerBasicInformation + 1
export const TransactionManagerLogPathInformation: int = TransactionManagerLogInformation + 1
export const TransactionManagerRecoveryInformation: int = 4
export const TransactionManagerOnlineProbeInformation: int = 3
export const TransactionManagerOldestTransactionInformation: int = 5
export const ResourceManagerBasicInformation: int = 0
export const ResourceManagerCompletionInformation: int = ResourceManagerBasicInformation + 1
export const EnlistmentBasicInformation: int = 0
export const EnlistmentRecoveryInformation: int = EnlistmentBasicInformation + 1
export const EnlistmentCrmInformation: int = EnlistmentRecoveryInformation + 1
export const KTMOBJECT_TRANSACTION: int = 0
export const KTMOBJECT_TRANSACTION_MANAGER: int = KTMOBJECT_TRANSACTION + 1
export const KTMOBJECT_RESOURCE_MANAGER: int = KTMOBJECT_TRANSACTION_MANAGER + 1
export const KTMOBJECT_ENLISTMENT: int = KTMOBJECT_RESOURCE_MANAGER + 1
export const KTMOBJECT_INVALID: int = KTMOBJECT_ENLISTMENT + 1
export const TP_CALLBACK_PRIORITY_HIGH: int = 0
export const TP_CALLBACK_PRIORITY_NORMAL: int = TP_CALLBACK_PRIORITY_HIGH + 1
export const TP_CALLBACK_PRIORITY_LOW: int = TP_CALLBACK_PRIORITY_NORMAL + 1
export const TP_CALLBACK_PRIORITY_INVALID: int = TP_CALLBACK_PRIORITY_LOW + 1
export const TP_CALLBACK_PRIORITY_COUNT: int = TP_CALLBACK_PRIORITY_INVALID
export const DPI_AWARENESS_INVALID: int = (- 1)
export const DPI_AWARENESS_UNAWARE: int = 0
export const DPI_AWARENESS_SYSTEM_AWARE: int = 1
export const DPI_AWARENESS_PER_MONITOR_AWARE: int = 2
export const DPI_HOSTING_BEHAVIOR_INVALID: int = (- 1)
export const DPI_HOSTING_BEHAVIOR_DEFAULT: int = 0
export const DPI_HOSTING_BEHAVIOR_MIXED: int = 1
export const FindExInfoStandard: int = 0
export const FindExInfoBasic: int = FindExInfoStandard + 1
export const FindExInfoMaxInfoLevel: int = FindExInfoBasic + 1
export const FindExSearchNameMatch: int = 0
export const FindExSearchLimitToDirectories: int = FindExSearchNameMatch + 1
export const FindExSearchLimitToDevices: int = FindExSearchLimitToDirectories + 1
export const FindExSearchMaxSearchOp: int = FindExSearchLimitToDevices + 1
export const ReadDirectoryNotifyInformation: int = 1
export const ReadDirectoryNotifyExtendedInformation: int = ReadDirectoryNotifyInformation + 1
export const GetFileExInfoStandard: int = 0
export const GetFileExMaxInfoLevel: int = GetFileExInfoStandard + 1
export const FileBasicInfo: int = 0
export const FileStandardInfo: int = FileBasicInfo + 1
export const FileNameInfo: int = FileStandardInfo + 1
export const FileRenameInfo: int = FileNameInfo + 1
export const FileDispositionInfo: int = FileRenameInfo + 1
export const FileAllocationInfo: int = FileDispositionInfo + 1
export const FileEndOfFileInfo: int = FileAllocationInfo + 1
export const FileStreamInfo: int = FileEndOfFileInfo + 1
export const FileCompressionInfo: int = FileStreamInfo + 1
export const FileAttributeTagInfo: int = FileCompressionInfo + 1
export const FileIdBothDirectoryInfo: int = FileAttributeTagInfo + 1
export const FileIdBothDirectoryRestartInfo: int = FileIdBothDirectoryInfo + 1
export const FileIoPriorityHintInfo: int = FileIdBothDirectoryRestartInfo + 1
export const FileRemoteProtocolInfo: int = FileIoPriorityHintInfo + 1
export const FileFullDirectoryInfo: int = FileRemoteProtocolInfo + 1
export const FileFullDirectoryRestartInfo: int = FileFullDirectoryInfo + 1
export const FileStorageInfo: int = FileFullDirectoryRestartInfo + 1
export const FileAlignmentInfo: int = FileStorageInfo + 1
export const FileIdInfo: int = FileAlignmentInfo + 1
export const FileIdExtdDirectoryInfo: int = FileIdInfo + 1
export const FileIdExtdDirectoryRestartInfo: int = FileIdExtdDirectoryInfo + 1
export const FileDispositionInfoEx: int = FileIdExtdDirectoryRestartInfo + 1
export const FileRenameInfoEx: int = FileDispositionInfoEx + 1
export const FileCaseSensitiveInfo: int = FileRenameInfoEx + 1
export const FileNormalizedNameInfo: int = FileCaseSensitiveInfo + 1
export const MaximumFileInfoByHandleClass: int = FileNormalizedNameInfo + 1
export const FindStreamInfoStandard: int = 0
export const FindStreamInfoMaxInfoLevel: int = FindStreamInfoStandard + 1
export const ThreadMemoryPriority: int = 0
export const ThreadAbsoluteCpuPriority: int = ThreadMemoryPriority + 1
export const ThreadDynamicCodePolicy: int = ThreadAbsoluteCpuPriority + 1
export const ThreadPowerThrottling: int = ThreadDynamicCodePolicy + 1
export const ThreadInformationClassMax: int = ThreadPowerThrottling + 1
export const ProcessMemoryPriority: int = 0
export const ProcessMemoryExhaustionInfo: int = ProcessMemoryPriority + 1
export const ProcessAppMemoryInfo: int = ProcessMemoryExhaustionInfo + 1
export const ProcessInPrivateInfo: int = ProcessAppMemoryInfo + 1
export const ProcessPowerThrottling: int = ProcessInPrivateInfo + 1
export const ProcessReservedValue1: int = ProcessPowerThrottling + 1
export const ProcessTelemetryCoverageInfo: int = ProcessReservedValue1 + 1
export const ProcessProtectionLevelInfo: int = ProcessTelemetryCoverageInfo + 1
export const ProcessLeapSecondInfo: int = ProcessProtectionLevelInfo + 1
export const ProcessInformationClassMax: int = ProcessLeapSecondInfo + 1
export const PMETypeFailFastOnCommitFailure: int = 0
export const PMETypeMax: int = PMETypeFailFastOnCommitFailure + 1
export const ComputerNameNetBIOS: int = 0
export const ComputerNameDnsHostname: int = ComputerNameNetBIOS + 1
export const ComputerNameDnsDomain: int = ComputerNameDnsHostname + 1
export const ComputerNameDnsFullyQualified: int = ComputerNameDnsDomain + 1
export const ComputerNamePhysicalNetBIOS: int = ComputerNameDnsFullyQualified + 1
export const ComputerNamePhysicalDnsHostname: int = ComputerNamePhysicalNetBIOS + 1
export const ComputerNamePhysicalDnsDomain: int = ComputerNamePhysicalDnsHostname + 1
export const ComputerNamePhysicalDnsFullyQualified: int = ComputerNamePhysicalDnsDomain + 1
export const ComputerNameMax: int = ComputerNamePhysicalDnsFullyQualified + 1
export const LowMemoryResourceNotification: int = 0
export const HighMemoryResourceNotification: int = LowMemoryResourceNotification + 1
export const VmOfferPriorityVeryLow: int = 1
export const VmOfferPriorityLow: int = VmOfferPriorityVeryLow + 1
export const VmOfferPriorityBelowNormal: int = VmOfferPriorityLow + 1
export const VmOfferPriorityNormal: int = VmOfferPriorityBelowNormal + 1
export const MemoryRegionInfo: int = 0
export const DEPPolicyAlwaysOff: int = 0
export const DEPPolicyAlwaysOn: int = DEPPolicyAlwaysOff + 1
export const DEPPolicyOptIn: int = DEPPolicyAlwaysOn + 1
export const DEPPolicyOptOut: int = DEPPolicyOptIn + 1
export const DEPTotalPolicyCount: int = DEPPolicyOptOut + 1
export const ProcThreadAttributeParentProcess: int = 0
export const ProcThreadAttributeHandleList: int = 2
export const ProcThreadAttributeGroupAffinity: int = 3
export const ProcThreadAttributePreferredNode: int = 4
export const ProcThreadAttributeIdealProcessor: int = 5
export const ProcThreadAttributeUmsThread: int = 6
export const ProcThreadAttributeMitigationPolicy: int = 7
export const ProcThreadAttributeSecurityCapabilities: int = 9
export const ProcThreadAttributeProtectionLevel: int = 11
export const ProcThreadAttributeJobList: int = 13
export const ProcThreadAttributeChildProcessPolicy: int = 14
export const ProcThreadAttributeAllApplicationPackagesPolicy: int = 15
export const ProcThreadAttributeWin32kFilter: int = 16
export const ProcThreadAttributeSafeOpenPromptOriginClaim: int = 17
export const ProcThreadAttributeDesktopAppPolicy: int = 18
export const ProcThreadAttributePseudoConsole: int = 22
export const ProcThreadAttributeMitigationAuditPolicy: int = 24
export const COPYFILE2_CALLBACK_NONE: int = 0
export const COPYFILE2_CALLBACK_CHUNK_STARTED: int = COPYFILE2_CALLBACK_NONE + 1
export const COPYFILE2_CALLBACK_CHUNK_FINISHED: int = COPYFILE2_CALLBACK_CHUNK_STARTED + 1
export const COPYFILE2_CALLBACK_STREAM_STARTED: int = COPYFILE2_CALLBACK_CHUNK_FINISHED + 1
export const COPYFILE2_CALLBACK_STREAM_FINISHED: int = COPYFILE2_CALLBACK_STREAM_STARTED + 1
export const COPYFILE2_CALLBACK_POLL_CONTINUE: int = COPYFILE2_CALLBACK_STREAM_FINISHED + 1
export const COPYFILE2_CALLBACK_ERROR: int = COPYFILE2_CALLBACK_POLL_CONTINUE + 1
export const COPYFILE2_CALLBACK_MAX: int = COPYFILE2_CALLBACK_ERROR + 1
export const COPYFILE2_PROGRESS_CONTINUE: int = 0
export const COPYFILE2_PROGRESS_CANCEL: int = COPYFILE2_PROGRESS_CONTINUE + 1
export const COPYFILE2_PROGRESS_STOP: int = COPYFILE2_PROGRESS_CANCEL + 1
export const COPYFILE2_PROGRESS_QUIET: int = COPYFILE2_PROGRESS_STOP + 1
export const COPYFILE2_PROGRESS_PAUSE: int = COPYFILE2_PROGRESS_QUIET + 1
export const COPYFILE2_PHASE_NONE: int = 0
export const COPYFILE2_PHASE_PREPARE_SOURCE: int = COPYFILE2_PHASE_NONE + 1
export const COPYFILE2_PHASE_PREPARE_DEST: int = COPYFILE2_PHASE_PREPARE_SOURCE + 1
export const COPYFILE2_PHASE_READ_SOURCE: int = COPYFILE2_PHASE_PREPARE_DEST + 1
export const COPYFILE2_PHASE_WRITE_DESTINATION: int = COPYFILE2_PHASE_READ_SOURCE + 1
export const COPYFILE2_PHASE_SERVER_COPY: int = COPYFILE2_PHASE_WRITE_DESTINATION + 1
export const COPYFILE2_PHASE_NAMEGRAFT_COPY: int = COPYFILE2_PHASE_SERVER_COPY + 1
export const COPYFILE2_PHASE_MAX: int = COPYFILE2_PHASE_NAMEGRAFT_COPY + 1
export const IoPriorityHintVeryLow: int = 0
export const IoPriorityHintLow: int = IoPriorityHintVeryLow + 1
export const IoPriorityHintNormal: int = IoPriorityHintLow + 1
export const MaximumIoPriorityHintType: int = IoPriorityHintNormal + 1
export const FileIdType: int = 0
export const ObjectIdType: int = FileIdType + 1
export const ExtendedFileIdType: int = ObjectIdType + 1
export const MaximumFileIdType: int = ExtendedFileIdType + 1
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER: int = (- 1)
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15: int = 0
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO: int = 1
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO: int = 2
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO: int = 3
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI: int = 4
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI: int = 5
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS: int = 6
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN: int = 8
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI: int = 9
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL: int = 10
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED: int = 11
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL: int = 12
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED: int = 13
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE: int = 14
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST: int = 15
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED: int = 16
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_VIRTUAL: int = 17
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL: int = DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_VIRTUAL + 1
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32: int = DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL + 1
export const DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED: int = 0
export const DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE: int = 1
export const DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED: int = 2
export const DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST: int = DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED
export const DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST: int = 3
export const DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32: int = DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST + 1
export const DISPLAYCONFIG_SCALING_IDENTITY: int = 1
export const DISPLAYCONFIG_SCALING_CENTERED: int = 2
export const DISPLAYCONFIG_SCALING_STRETCHED: int = 3
export const DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX: int = 4
export const DISPLAYCONFIG_SCALING_CUSTOM: int = 5
export const DISPLAYCONFIG_SCALING_PREFERRED: int = 128
export const DISPLAYCONFIG_SCALING_FORCE_UINT32: int = DISPLAYCONFIG_SCALING_PREFERRED + 1
export const DISPLAYCONFIG_ROTATION_IDENTITY: int = 1
export const DISPLAYCONFIG_ROTATION_ROTATE90: int = 2
export const DISPLAYCONFIG_ROTATION_ROTATE180: int = 3
export const DISPLAYCONFIG_ROTATION_ROTATE270: int = 4
export const DISPLAYCONFIG_ROTATION_FORCE_UINT32: int = DISPLAYCONFIG_ROTATION_ROTATE270 + 1
export const DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE: int = 1
export const DISPLAYCONFIG_MODE_INFO_TYPE_TARGET: int = 2
export const DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE: int = 3
export const DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32: int = DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE + 1
export const DISPLAYCONFIG_PIXELFORMAT_8BPP: int = 1
export const DISPLAYCONFIG_PIXELFORMAT_16BPP: int = 2
export const DISPLAYCONFIG_PIXELFORMAT_24BPP: int = 3
export const DISPLAYCONFIG_PIXELFORMAT_32BPP: int = 4
export const DISPLAYCONFIG_PIXELFORMAT_NONGDI: int = 5
export const DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32: int = DISPLAYCONFIG_PIXELFORMAT_NONGDI + 1
export const DISPLAYCONFIG_TOPOLOGY_INTERNAL: int = 1
export const DISPLAYCONFIG_TOPOLOGY_CLONE: int = 2
export const DISPLAYCONFIG_TOPOLOGY_EXTEND: int = 4
export const DISPLAYCONFIG_TOPOLOGY_EXTERNAL: int = 8
export const DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32: int = DISPLAYCONFIG_TOPOLOGY_EXTERNAL + 1
export const DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME: int = 1
export const DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME: int = 2
export const DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE: int = 3
export const DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME: int = 4
export const DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE: int = 5
export const DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE: int = 6
export const DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION: int = 7
export const DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION: int = 8
export const DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO: int = 9
export const DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE: int = 10
export const DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL: int = 11
export const DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32: int = DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL + 1
export const DISPLAYCONFIG_COLOR_ENCODING_RGB: int = 0
export const DISPLAYCONFIG_COLOR_ENCODING_YCBCR444: int = 1
export const DISPLAYCONFIG_COLOR_ENCODING_YCBCR422: int = 2
export const DISPLAYCONFIG_COLOR_ENCODING_YCBCR420: int = 3
export const DISPLAYCONFIG_COLOR_ENCODING_INTENSITY: int = 4
export const DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32: int = DISPLAYCONFIG_COLOR_ENCODING_INTENSITY + 1
export const DCDC_DEFAULT: int = 0
export const DCDC_DISABLE_FONT_UPDATE: int = 1
export const DCDC_DISABLE_RELAYOUT: int = 2
export const DDC_DEFAULT: int = 0
export const DDC_DISABLE_ALL: int = 1
export const DDC_DISABLE_RESIZE: int = 2
export const DDC_DISABLE_CONTROL_RELAYOUT: int = 4
export const PT_POINTER: int = 1
export const PT_TOUCH: int = 2
export const PT_PEN: int = 3
export const PT_MOUSE: int = 4
export const PT_TOUCHPAD: int = 5
export const POINTER_CHANGE_NONE: int = 0
export const POINTER_CHANGE_FIRSTBUTTON_DOWN: int = POINTER_CHANGE_NONE + 1
export const POINTER_CHANGE_FIRSTBUTTON_UP: int = POINTER_CHANGE_FIRSTBUTTON_DOWN + 1
export const POINTER_CHANGE_SECONDBUTTON_DOWN: int = POINTER_CHANGE_FIRSTBUTTON_UP + 1
export const POINTER_CHANGE_SECONDBUTTON_UP: int = POINTER_CHANGE_SECONDBUTTON_DOWN + 1
export const POINTER_CHANGE_THIRDBUTTON_DOWN: int = POINTER_CHANGE_SECONDBUTTON_UP + 1
export const POINTER_CHANGE_THIRDBUTTON_UP: int = POINTER_CHANGE_THIRDBUTTON_DOWN + 1
export const POINTER_CHANGE_FOURTHBUTTON_DOWN: int = POINTER_CHANGE_THIRDBUTTON_UP + 1
export const POINTER_CHANGE_FOURTHBUTTON_UP: int = POINTER_CHANGE_FOURTHBUTTON_DOWN + 1
export const POINTER_CHANGE_FIFTHBUTTON_DOWN: int = POINTER_CHANGE_FOURTHBUTTON_UP + 1
export const POINTER_CHANGE_FIFTHBUTTON_UP: int = POINTER_CHANGE_FIFTHBUTTON_DOWN + 1
export const POINTER_FEEDBACK_DEFAULT: int = 1
export const POINTER_FEEDBACK_INDIRECT: int = 2
export const POINTER_FEEDBACK_NONE: int = 3
export const FEEDBACK_TOUCH_CONTACTVISUALIZATION: int = 1
export const FEEDBACK_PEN_BARRELVISUALIZATION: int = 2
export const FEEDBACK_PEN_TAP: int = 3
export const FEEDBACK_PEN_DOUBLETAP: int = 4
export const FEEDBACK_PEN_PRESSANDHOLD: int = 5
export const FEEDBACK_PEN_RIGHTTAP: int = 6
export const FEEDBACK_TOUCH_TAP: int = 7
export const FEEDBACK_TOUCH_DOUBLETAP: int = 8
export const FEEDBACK_TOUCH_PRESSANDHOLD: int = 9
export const FEEDBACK_TOUCH_RIGHTTAP: int = 10
export const FEEDBACK_GESTURE_PRESSANDTAP: int = 11
export const FEEDBACK_MAX: int = FEEDBACK_GESTURE_PRESSANDTAP + 1
export const EDIT_CONTROL_FEATURE_ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT: int = 0
export const EDIT_CONTROL_FEATURE_PASTE_NOTIFICATIONS: int = 1
export const HANDEDNESS_LEFT: int = 0
export const HANDEDNESS_RIGHT: int = HANDEDNESS_LEFT + 1
export const POINTER_DEVICE_TYPE_INTEGRATED_PEN: int = 1
export const POINTER_DEVICE_TYPE_EXTERNAL_PEN: int = 2
export const POINTER_DEVICE_TYPE_TOUCH: int = 3
export const POINTER_DEVICE_TYPE_TOUCH_PAD: int = 4
export const POINTER_DEVICE_TYPE_MAX: int = POINTER_DEVICE_TYPE_TOUCH_PAD + 1
export const POINTER_DEVICE_CURSOR_TYPE_UNKNOWN: int = 0
export const POINTER_DEVICE_CURSOR_TYPE_TIP: int = 1
export const POINTER_DEVICE_CURSOR_TYPE_ERASER: int = 2
export const POINTER_DEVICE_CURSOR_TYPE_MAX: int = POINTER_DEVICE_CURSOR_TYPE_ERASER + 1
export const IMDT_UNAVAILABLE: int = 0
export const IMDT_KEYBOARD: int = 1
export const IMDT_MOUSE: int = 2
export const IMDT_TOUCH: int = 4
export const IMDT_PEN: int = 8
export const IMDT_TOUCHPAD: int = 16
export const IMO_UNAVAILABLE: int = 0
export const IMO_HARDWARE: int = 1
export const IMO_INJECTED: int = 2
export const IMO_SYSTEM: int = 4
export const AR_ENABLED: int = 0
export const AR_DISABLED: int = 1
export const AR_SUPPRESSED: int = 2
export const AR_REMOTESESSION: int = 4
export const AR_MULTIMON: int = 8
export const AR_NOSENSOR: int = 16
export const AR_NOT_SUPPORTED: int = 32
export const AR_DOCKED: int = 64
export const AR_LAPTOP: int = 128
export const ORIENTATION_PREFERENCE_NONE: int = 0
export const ORIENTATION_PREFERENCE_LANDSCAPE: int = 1
export const ORIENTATION_PREFERENCE_PORTRAIT: int = 2
export const ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED: int = 4
export const ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED: int = 8
export const COMPARE_STRING: int = 1
export const GEO_NATION: int = 1
export const GEO_LATITUDE: int = 2
export const GEO_LONGITUDE: int = 3
export const GEO_ISO2: int = 4
export const GEO_ISO3: int = 5
export const GEO_RFC1766: int = 6
export const GEO_LCID: int = 7
export const GEO_FRIENDLYNAME: int = 8
export const GEO_OFFICIALNAME: int = 9
export const GEO_TIMEZONES: int = 10
export const GEO_OFFICIALLANGUAGES: int = 11
export const GEO_ISO_UN_NUMBER: int = 12
export const GEO_PARENT: int = 13
export const GEO_DIALINGCODE: int = 14
export const GEO_CURRENCYCODE: int = 15
export const GEO_CURRENCYSYMBOL: int = 16
export const GEO_NAME: int = 17
export const GEO_ID: int = 18
export const GEOCLASS_NATION: int = 16
export const GEOCLASS_REGION: int = 14
export const GEOCLASS_ALL: int = 0
export const NormalizationOther: int = 0
export const NormalizationC: int = 1
export const NormalizationD: int = 2
export const NormalizationKC: int = 5
export const NormalizationKD: int = 6
export const RPCHTTP_RS_REDIRECT: int = 1
export const RPCHTTP_RS_ACCESS_1: int = RPCHTTP_RS_REDIRECT + 1
export const RPCHTTP_RS_SESSION: int = RPCHTTP_RS_ACCESS_1 + 1
export const RPCHTTP_RS_ACCESS_2: int = RPCHTTP_RS_SESSION + 1
export const RPCHTTP_RS_INTERFACE: int = RPCHTTP_RS_ACCESS_2 + 1
export const PROTOCOL_NOT_LOADED: int = 1
export const PROTOCOL_LOADED: int = PROTOCOL_NOT_LOADED + 1
export const PROTOCOL_ADDRESS_CHANGE: int = PROTOCOL_LOADED + 1
export const MarshalDirectionMarshal: int = 0
export const MarshalDirectionUnmarshal: int = MarshalDirectionMarshal + 1
export const RpcCurrentUniqueUser: int = 1
export const RpcBackEndConnectionAttempts: int = RpcCurrentUniqueUser + 1
export const RpcBackEndConnectionFailed: int = RpcBackEndConnectionAttempts + 1
export const RpcRequestsPerSecond: int = RpcBackEndConnectionFailed + 1
export const RpcIncomingConnections: int = RpcRequestsPerSecond + 1
export const RpcIncomingBandwidth: int = RpcIncomingConnections + 1
export const RpcOutgoingBandwidth: int = RpcIncomingBandwidth + 1
export const RpcAttemptedLbsDecisions: int = RpcOutgoingBandwidth + 1
export const RpcFailedLbsDecisions: int = RpcAttemptedLbsDecisions + 1
export const RpcAttemptedLbsMessages: int = RpcFailedLbsDecisions + 1
export const RpcFailedLbsMessages: int = RpcAttemptedLbsMessages + 1
export const RpcLastCounter: int = RpcFailedLbsMessages + 1
export const RpcNotificationTypeNone: int = 0
export const RpcNotificationTypeEvent: int = RpcNotificationTypeNone + 1
export const RpcNotificationTypeApc: int = RpcNotificationTypeEvent + 1
export const RpcNotificationTypeIoc: int = RpcNotificationTypeApc + 1
export const RpcNotificationTypeHwnd: int = RpcNotificationTypeIoc + 1
export const RpcNotificationTypeCallback: int = RpcNotificationTypeHwnd + 1
export const RpcCallComplete: int = 0
export const RpcSendComplete: int = RpcCallComplete + 1
export const RpcReceiveComplete: int = RpcSendComplete + 1
export const RpcClientDisconnect: int = RpcReceiveComplete + 1
export const RpcClientCancel: int = RpcClientDisconnect + 1
export const eeptAnsiString: int = 1
export const eeptUnicodeString: int = eeptAnsiString + 1
export const eeptLongVal: int = eeptUnicodeString + 1
export const eeptShortVal: int = eeptLongVal + 1
export const eeptPointerVal: int = eeptShortVal + 1
export const eeptNone: int = eeptPointerVal + 1
export const eeptBinary: int = eeptNone + 1
export const rlafInvalid: int = 0
export const rlafIPv4: int = rlafInvalid + 1
export const rlafIPv6: int = rlafIPv4 + 1
export const rctInvalid: int = 0
export const rctNormal: int = rctInvalid + 1
export const rctTraining: int = rctNormal + 1
export const rctGuaranteed: int = rctTraining + 1
export const rcclInvalid: int = 0
export const rcclLocal: int = rcclInvalid + 1
export const rcclRemote: int = rcclLocal + 1
export const rcclClientUnknownLocality: int = rcclRemote + 1
export const RpcNotificationCallNone: int = 0
export const RpcNotificationClientDisconnect: int = 1
export const RpcNotificationCallCancel: int = 2
export const ASSOCCLASS_SHELL_KEY: int = 0
export const ASSOCCLASS_PROGID_KEY: int = ASSOCCLASS_SHELL_KEY + 1
export const ASSOCCLASS_PROGID_STR: int = ASSOCCLASS_PROGID_KEY + 1
export const ASSOCCLASS_CLSID_KEY: int = ASSOCCLASS_PROGID_STR + 1
export const ASSOCCLASS_CLSID_STR: int = ASSOCCLASS_CLSID_KEY + 1
export const ASSOCCLASS_APP_KEY: int = ASSOCCLASS_CLSID_STR + 1
export const ASSOCCLASS_APP_STR: int = ASSOCCLASS_APP_KEY + 1
export const ASSOCCLASS_SYSTEM_STR: int = ASSOCCLASS_APP_STR + 1
export const ASSOCCLASS_FOLDER: int = ASSOCCLASS_SYSTEM_STR + 1
export const ASSOCCLASS_STAR: int = ASSOCCLASS_FOLDER + 1
export const ASSOCCLASS_FIXED_PROGID_STR: int = ASSOCCLASS_STAR + 1
export const ASSOCCLASS_PROTOCOL_STR: int = ASSOCCLASS_FIXED_PROGID_STR + 1
export const QUNS_NOT_PRESENT: int = 1
export const QUNS_BUSY: int = 2
export const QUNS_RUNNING_D3D_FULL_SCREEN: int = 3
export const QUNS_PRESENTATION_MODE: int = 4
export const QUNS_ACCEPTS_NOTIFICATIONS: int = 5
export const QUNS_QUIET_TIME: int = 6
export const QUNS_APP: int = 7
export const SIID_DOCNOASSOC: int = 0
export const SIID_DOCASSOC: int = 1
export const SIID_APPLICATION: int = 2
export const SIID_FOLDER: int = 3
export const SIID_FOLDEROPEN: int = 4
export const SIID_DRIVE525: int = 5
export const SIID_DRIVE35: int = 6
export const SIID_DRIVEREMOVE: int = 7
export const SIID_DRIVEFIXED: int = 8
export const SIID_DRIVENET: int = 9
export const SIID_DRIVENETDISABLED: int = 10
export const SIID_DRIVECD: int = 11
export const SIID_DRIVERAM: int = 12
export const SIID_WORLD: int = 13
export const SIID_SERVER: int = 15
export const SIID_PRINTER: int = 16
export const SIID_MYNETWORK: int = 17
export const SIID_FIND: int = 22
export const SIID_HELP: int = 23
export const SIID_SHARE: int = 28
export const SIID_LINK: int = 29
export const SIID_SLOWFILE: int = 30
export const SIID_RECYCLER: int = 31
export const SIID_RECYCLERFULL: int = 32
export const SIID_MEDIACDAUDIO: int = 40
export const SIID_LOCK: int = 47
export const SIID_AUTOLIST: int = 49
export const SIID_PRINTERNET: int = 50
export const SIID_SERVERSHARE: int = 51
export const SIID_PRINTERFAX: int = 52
export const SIID_PRINTERFAXNET: int = 53
export const SIID_PRINTERFILE: int = 54
export const SIID_STACK: int = 55
export const SIID_MEDIASVCD: int = 56
export const SIID_STUFFEDFOLDER: int = 57
export const SIID_DRIVEUNKNOWN: int = 58
export const SIID_DRIVEDVD: int = 59
export const SIID_MEDIADVD: int = 60
export const SIID_MEDIADVDRAM: int = 61
export const SIID_MEDIADVDRW: int = 62
export const SIID_MEDIADVDR: int = 63
export const SIID_MEDIADVDROM: int = 64
export const SIID_MEDIACDAUDIOPLUS: int = 65
export const SIID_MEDIACDRW: int = 66
export const SIID_MEDIACDR: int = 67
export const SIID_MEDIACDBURN: int = 68
export const SIID_MEDIABLANKCD: int = 69
export const SIID_MEDIACDROM: int = 70
export const SIID_AUDIOFILES: int = 71
export const SIID_IMAGEFILES: int = 72
export const SIID_VIDEOFILES: int = 73
export const SIID_MIXEDFILES: int = 74
export const SIID_FOLDERBACK: int = 75
export const SIID_FOLDERFRONT: int = 76
export const SIID_SHIELD: int = 77
export const SIID_WARNING: int = 78
export const SIID_INFO: int = 79
export const SIID_ERROR: int = 80
export const SIID_KEY: int = 81
export const SIID_SOFTWARE: int = 82
export const SIID_RENAME: int = 83
export const SIID_DELETE: int = 84
export const SIID_MEDIAAUDIODVD: int = 85
export const SIID_MEDIAMOVIEDVD: int = 86
export const SIID_MEDIAENHANCEDCD: int = 87
export const SIID_MEDIAENHANCEDDVD: int = 88
export const SIID_MEDIAHDDVD: int = 89
export const SIID_MEDIABLURAY: int = 90
export const SIID_MEDIAVCD: int = 91
export const SIID_MEDIADVDPLUSR: int = 92
export const SIID_MEDIADVDPLUSRW: int = 93
export const SIID_DESKTOPPC: int = 94
export const SIID_MOBILEPC: int = 95
export const SIID_USERS: int = 96
export const SIID_MEDIASMARTMEDIA: int = 97
export const SIID_MEDIACOMPACTFLASH: int = 98
export const SIID_DEVICECELLPHONE: int = 99
export const SIID_DEVICECAMERA: int = 100
export const SIID_DEVICEVIDEOCAMERA: int = 101
export const SIID_DEVICEAUDIOPLAYER: int = 102
export const SIID_NETWORKCONNECT: int = 103
export const SIID_INTERNET: int = 104
export const SIID_ZIPFILE: int = 105
export const SIID_SETTINGS: int = 106
export const SIID_DRIVEHDDVD: int = 132
export const SIID_DRIVEBD: int = 133
export const SIID_MEDIAHDDVDROM: int = 134
export const SIID_MEDIAHDDVDR: int = 135
export const SIID_MEDIAHDDVDRAM: int = 136
export const SIID_MEDIABDROM: int = 137
export const SIID_MEDIABDR: int = 138
export const SIID_MEDIABDRE: int = 139
export const SIID_CLUSTEREDDRIVE: int = 140
export const SIID_MAX_ICONS: int = 181
export const BCRYPT_ECC_PRIME_SHORT_WEIERSTRASS_CURVE: int = 1
export const BCRYPT_ECC_PRIME_TWISTED_EDWARDS_CURVE: int = 2
export const BCRYPT_ECC_PRIME_MONTGOMERY_CURVE: int = 3
export const BCRYPT_NO_CURVE_GENERATION_ALG_ID: int = 0
export const DSA_HASH_ALGORITHM_SHA1: int = 0
export const DSA_HASH_ALGORITHM_SHA256: int = DSA_HASH_ALGORITHM_SHA1 + 1
export const DSA_HASH_ALGORITHM_SHA512: int = DSA_HASH_ALGORITHM_SHA256 + 1
export const DSA_FIPS186_2: int = 0
export const DSA_FIPS186_3: int = DSA_FIPS186_2 + 1
export const BCRYPT_HASH_OPERATION_HASH_DATA: int = 1
export const BCRYPT_HASH_OPERATION_FINISH_HASH: int = 2
export const BCRYPT_OPERATION_TYPE_HASH: int = 1
export const KeyTypeOther: int = 0
export const KeyTypeVirtualSmartCard: int = 1
export const KeyTypePhysicalSmartCard: int = 2
export const KeyTypePassport: int = 3
export const KeyTypePassportRemote: int = 4
export const KeyTypePassportSmartCard: int = 5
export const KeyTypeHardware: int = 6
export const KeyTypeSoftware: int = 7
export const KeyTypeSelfSigned: int = 8
export const USER_MARSHAL_CB_BUFFER_SIZE: int = 0
export const USER_MARSHAL_CB_MARSHALL: int = USER_MARSHAL_CB_BUFFER_SIZE + 1
export const USER_MARSHAL_CB_UNMARSHALL: int = USER_MARSHAL_CB_MARSHALL + 1
export const USER_MARSHAL_CB_FREE: int = USER_MARSHAL_CB_UNMARSHALL + 1
export const IDL_CS_NO_CONVERT: int = 0
export const IDL_CS_IN_PLACE_CONVERT: int = IDL_CS_NO_CONVERT + 1
export const IDL_CS_NEW_BUFFER_CONVERT: int = IDL_CS_IN_PLACE_CONVERT + 1
export const XLAT_SERVER: int = 1
export const XLAT_CLIENT: int = XLAT_SERVER + 1
export const SYSTEM_HANDLE_FILE: int = 0
export const SYSTEM_HANDLE_SEMAPHORE: int = 1
export const SYSTEM_HANDLE_EVENT: int = 2
export const SYSTEM_HANDLE_MUTEX: int = 3
export const SYSTEM_HANDLE_PROCESS: int = 4
export const SYSTEM_HANDLE_TOKEN: int = 5
export const SYSTEM_HANDLE_SECTION: int = 6
export const SYSTEM_HANDLE_REG_KEY: int = 7
export const SYSTEM_HANDLE_THREAD: int = 8
export const SYSTEM_HANDLE_COMPOSITION_OBJECT: int = 9
export const SYSTEM_HANDLE_SOCKET: int = 10
export const SYSTEM_HANDLE_JOB: int = 11
export const SYSTEM_HANDLE_PIPE: int = 12
export const SYSTEM_HANDLE_MAX: int = 12
export const SYSTEM_HANDLE_INVALID: int = 255
export const MidlInterceptionInfoVersionOne: int = 1
export const MidlWinrtTypeSerializationInfoVersionOne: int = 1
export const STUB_UNMARSHAL: int = 0
export const STUB_CALL_SERVER: int = STUB_UNMARSHAL + 1
export const STUB_MARSHAL: int = STUB_CALL_SERVER + 1
export const STUB_CALL_SERVER_NO_HRESULT: int = STUB_MARSHAL + 1
export const PROXY_CALCSIZE: int = 0
export const PROXY_GETBUFFER: int = PROXY_CALCSIZE + 1
export const PROXY_MARSHAL: int = PROXY_GETBUFFER + 1
export const PROXY_SENDRECEIVE: int = PROXY_MARSHAL + 1
export const PROXY_UNMARSHAL: int = PROXY_SENDRECEIVE + 1
export const MEMCTX_TASK: int = 1
export const MEMCTX_SHARED: int = 2
export const MEMCTX_MACSYSTEM: int = 3
export const MEMCTX_UNKNOWN: int = (- 1)
export const MEMCTX_SAME: int = (- 2)
export const CLSCTX_INPROC_SERVER: int = 1
export const CLSCTX_INPROC_HANDLER: int = 2
export const CLSCTX_LOCAL_SERVER: int = 4
export const CLSCTX_INPROC_SERVER16: int = 8
export const CLSCTX_REMOTE_SERVER: int = 16
export const CLSCTX_INPROC_HANDLER16: int = 32
export const CLSCTX_RESERVED1: int = 64
export const CLSCTX_RESERVED2: int = 128
export const CLSCTX_RESERVED3: int = 256
export const CLSCTX_RESERVED4: int = 512
export const CLSCTX_NO_CODE_DOWNLOAD: int = 1024
export const CLSCTX_RESERVED5: int = 2048
export const CLSCTX_NO_CUSTOM_MARSHAL: int = 4096
export const CLSCTX_ENABLE_CODE_DOWNLOAD: int = 8192
export const CLSCTX_NO_FAILURE_LOG: int = 16384
export const CLSCTX_DISABLE_AAA: int = 32768
export const CLSCTX_ENABLE_AAA: int = 65536
export const CLSCTX_FROM_DEFAULT_CONTEXT: int = 131072
export const CLSCTX_ACTIVATE_X86_SERVER: int = 262144
export const CLSCTX_ACTIVATE_32_BIT_SERVER: int = CLSCTX_ACTIVATE_X86_SERVER
export const CLSCTX_ACTIVATE_64_BIT_SERVER: int = 524288
export const CLSCTX_ENABLE_CLOAKING: int = 1048576
export const CLSCTX_APPCONTAINER: int = 4194304
export const CLSCTX_ACTIVATE_AAA_AS_IU: int = 8388608
export const CLSCTX_RESERVED6: int = 16777216
export const CLSCTX_ACTIVATE_ARM32_SERVER: int = 33554432
export const CLSCTX_PS_DLL: int = CLSCTX_ACTIVATE_ARM32_SERVER + 1
export const MSHLFLAGS_NORMAL: int = 0
export const MSHLFLAGS_TABLESTRONG: int = 1
export const MSHLFLAGS_TABLEWEAK: int = 2
export const MSHLFLAGS_NOPING: int = 4
export const MSHLFLAGS_RESERVED1: int = 8
export const MSHLFLAGS_RESERVED2: int = 16
export const MSHLFLAGS_RESERVED3: int = 32
export const MSHLFLAGS_RESERVED4: int = 64
export const MSHCTX_LOCAL: int = 0
export const MSHCTX_NOSHAREDMEM: int = 1
export const MSHCTX_DIFFERENTMACHINE: int = 2
export const MSHCTX_INPROC: int = 3
export const MSHCTX_CROSSCTX: int = 4
export const MSHCTX_RESERVED1: int = 5
export const DVASPECT_CONTENT: int = 1
export const DVASPECT_THUMBNAIL: int = 2
export const DVASPECT_ICON: int = 4
export const DVASPECT_DOCPRINT: int = 8
export const STGC_DEFAULT: int = 0
export const STGC_OVERWRITE: int = 1
export const STGC_ONLYIFCURRENT: int = 2
export const STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE: int = 4
export const STGC_CONSOLIDATE: int = 8
export const STGMOVE_MOVE: int = 0
export const STGMOVE_COPY: int = 1
export const STGMOVE_SHALLOWCOPY: int = 2
export const STATFLAG_DEFAULT: int = 0
export const STATFLAG_NONAME: int = 1
export const STATFLAG_NOOPEN: int = 2
export const VT_EMPTY: int = 0
export const VT_NULL: int = 1
export const VT_I2: int = 2
export const VT_I4: int = 3
export const VT_R4: int = 4
export const VT_R8: int = 5
export const VT_CY: int = 6
export const VT_DATE: int = 7
export const VT_BSTR: int = 8
export const VT_DISPATCH: int = 9
export const VT_ERROR: int = 10
export const VT_BOOL: int = 11
export const VT_VARIANT: int = 12
export const VT_UNKNOWN: int = 13
export const VT_DECIMAL: int = 14
export const VT_I1: int = 16
export const VT_UI1: int = 17
export const VT_UI2: int = 18
export const VT_UI4: int = 19
export const VT_I8: int = 20
export const VT_UI8: int = 21
export const VT_INT: int = 22
export const VT_UINT: int = 23
export const VT_VOID: int = 24
export const VT_HRESULT: int = 25
export const VT_PTR: int = 26
export const VT_SAFEARRAY: int = 27
export const VT_CARRAY: int = 28
export const VT_USERDEFINED: int = 29
export const VT_LPSTR: int = 30
export const VT_LPWSTR: int = 31
export const VT_RECORD: int = 36
export const VT_INT_PTR: int = 37
export const VT_UINT_PTR: int = 38
export const VT_FILETIME: int = 64
export const VT_BLOB: int = 65
export const VT_STREAM: int = 66
export const VT_STORAGE: int = 67
export const VT_STREAMED_OBJECT: int = 68
export const VT_STORED_OBJECT: int = 69
export const VT_BLOB_OBJECT: int = 70
export const VT_CF: int = 71
export const VT_CLSID: int = 72
export const VT_VERSIONED_STREAM: int = 73
export const VT_BSTR_BLOB: int = 4095
export const VT_VECTOR: int = 4096
export const VT_ARRAY: int = 8192
export const VT_BYREF: int = 16384
export const VT_RESERVED: int = 32768
export const VT_ILLEGAL: int = 65535
export const VT_ILLEGALMASKED: int = 4095
export const VT_TYPEMASK: int = 4095
export const TYSPEC_CLSID: int = 0
export const TYSPEC_FILEEXT: int = ((TYSPEC_CLSID + 1))
export const TYSPEC_MIMETYPE: int = ((TYSPEC_FILEEXT + 1))
export const TYSPEC_FILENAME: int = ((TYSPEC_MIMETYPE + 1))
export const TYSPEC_PROGID: int = ((TYSPEC_FILENAME + 1))
export const TYSPEC_PACKAGENAME: int = ((TYSPEC_PROGID + 1))
export const TYSPEC_OBJECTID: int = ((TYSPEC_PACKAGENAME + 1))
export const DDS_4mm: int = 32
export const MiniQic: int = DDS_4mm + 1
export const Travan: int = MiniQic + 1
export const QIC: int = Travan + 1
export const MP_8mm: int = QIC + 1
export const AME_8mm: int = MP_8mm + 1
export const AIT1_8mm: int = AME_8mm + 1
export const DLT: int = AIT1_8mm + 1
export const NCTP: int = DLT + 1
export const IBM_3480: int = NCTP + 1
export const IBM_3490E: int = IBM_3480 + 1
export const IBM_Magstar_3590: int = IBM_3490E + 1
export const IBM_Magstar_MP: int = IBM_Magstar_3590 + 1
export const STK_DATA_D3: int = IBM_Magstar_MP + 1
export const SONY_DTF: int = STK_DATA_D3 + 1
export const DV_6mm: int = SONY_DTF + 1
export const DMI: int = DV_6mm + 1
export const SONY_D2: int = DMI + 1
export const CLEANER_CARTRIDGE: int = SONY_D2 + 1
export const CD_ROM: int = CLEANER_CARTRIDGE + 1
export const CD_R: int = CD_ROM + 1
export const CD_RW: int = CD_R + 1
export const DVD_ROM: int = CD_RW + 1
export const DVD_R: int = DVD_ROM + 1
export const DVD_RW: int = DVD_R + 1
export const MO_3_RW: int = DVD_RW + 1
export const MO_5_WO: int = MO_3_RW + 1
export const MO_5_RW: int = MO_5_WO + 1
export const MO_5_LIMDOW: int = MO_5_RW + 1
export const PC_5_WO: int = MO_5_LIMDOW + 1
export const PC_5_RW: int = PC_5_WO + 1
export const PD_5_RW: int = PC_5_RW + 1
export const ABL_5_WO: int = PD_5_RW + 1
export const PINNACLE_APEX_5_RW: int = ABL_5_WO + 1
export const SONY_12_WO: int = PINNACLE_APEX_5_RW + 1
export const PHILIPS_12_WO: int = SONY_12_WO + 1
export const HITACHI_12_WO: int = PHILIPS_12_WO + 1
export const CYGNET_12_WO: int = HITACHI_12_WO + 1
export const KODAK_14_WO: int = CYGNET_12_WO + 1
export const MO_NFR_525: int = KODAK_14_WO + 1
export const NIKON_12_RW: int = MO_NFR_525 + 1
export const IOMEGA_ZIP: int = NIKON_12_RW + 1
export const IOMEGA_JAZ: int = IOMEGA_ZIP + 1
export const SYQUEST_EZ135: int = IOMEGA_JAZ + 1
export const SYQUEST_EZFLYER: int = SYQUEST_EZ135 + 1
export const SYQUEST_SYJET: int = SYQUEST_EZFLYER + 1
export const AVATAR_F2: int = SYQUEST_SYJET + 1
export const MP2_8mm: int = AVATAR_F2 + 1
export const DST_S: int = MP2_8mm + 1
export const DST_M: int = DST_S + 1
export const DST_L: int = DST_M + 1
export const VXATape_1: int = DST_L + 1
export const VXATape_2: int = VXATape_1 + 1
export const STK_9840: int = VXATape_2 + 1
export const LTO_Ultrium: int = STK_9840 + 1
export const LTO_Accelis: int = LTO_Ultrium + 1
export const DVD_RAM: int = LTO_Accelis + 1
export const AIT_8mm: int = DVD_RAM + 1
export const ADR_1: int = AIT_8mm + 1
export const ADR_2: int = ADR_1 + 1
export const STK_9940: int = ADR_2 + 1
export const SAIT: int = STK_9940 + 1
export const VXATape: int = SAIT + 1
export const BusTypeUnknown: int = 0
export const BusTypeScsi: int = BusTypeUnknown + 1
export const BusTypeAtapi: int = BusTypeScsi + 1
export const BusTypeAta: int = BusTypeAtapi + 1
export const BusType1394: int = BusTypeAta + 1
export const BusTypeSsa: int = BusType1394 + 1
export const BusTypeFibre: int = BusTypeSsa + 1
export const BusTypeUsb: int = BusTypeFibre + 1
export const BusTypeRAID: int = BusTypeUsb + 1
export const BusTypeiScsi: int = BusTypeRAID + 1
export const BusTypeSas: int = BusTypeiScsi + 1
export const BusTypeSata: int = BusTypeSas + 1
export const BusTypeSd: int = BusTypeSata + 1
export const BusTypeMmc: int = BusTypeSd + 1
export const BusTypeVirtual: int = BusTypeMmc + 1
export const BusTypeFileBackedVirtual: int = BusTypeVirtual + 1
export const BusTypeSpaces: int = BusTypeFileBackedVirtual + 1
export const BusTypeNvme: int = BusTypeSpaces + 1
export const BusTypeSCM: int = BusTypeNvme + 1
export const BusTypeUfs: int = BusTypeSCM + 1
export const BusTypeMax: int = BusTypeUfs + 1
export const BusTypeMaxReserved: int = 127
export const PropertyStandardQuery: int = 0
export const PropertyExistsQuery: int = PropertyStandardQuery + 1
export const PropertyMaskQuery: int = PropertyExistsQuery + 1
export const PropertyQueryMaxDefined: int = PropertyMaskQuery + 1
export const PropertyStandardSet: int = 0
export const PropertyExistsSet: int = PropertyStandardSet + 1
export const PropertySetMaxDefined: int = PropertyExistsSet + 1
export const StorageDeviceProperty: int = 0
export const StorageAdapterProperty: int = StorageDeviceProperty + 1
export const StorageDeviceIdProperty: int = StorageAdapterProperty + 1
export const StorageDeviceUniqueIdProperty: int = StorageDeviceIdProperty + 1
export const StorageDeviceWriteCacheProperty: int = StorageDeviceUniqueIdProperty + 1
export const StorageMiniportProperty: int = StorageDeviceWriteCacheProperty + 1
export const StorageAccessAlignmentProperty: int = StorageMiniportProperty + 1
export const StorageDeviceSeekPenaltyProperty: int = StorageAccessAlignmentProperty + 1
export const StorageDeviceTrimProperty: int = StorageDeviceSeekPenaltyProperty + 1
export const StorageDeviceWriteAggregationProperty: int = StorageDeviceTrimProperty + 1
export const StorageDeviceDeviceTelemetryProperty: int = StorageDeviceWriteAggregationProperty + 1
export const StorageDeviceLBProvisioningProperty: int = StorageDeviceDeviceTelemetryProperty + 1
export const StorageDevicePowerProperty: int = StorageDeviceLBProvisioningProperty + 1
export const StorageDeviceCopyOffloadProperty: int = StorageDevicePowerProperty + 1
export const StorageDeviceResiliencyProperty: int = StorageDeviceCopyOffloadProperty + 1
export const StorageDeviceMediumProductType: int = StorageDeviceResiliencyProperty + 1
export const StorageAdapterRpmbProperty: int = StorageDeviceMediumProductType + 1
export const StorageAdapterCryptoProperty: int = StorageAdapterRpmbProperty + 1
export const StorageDeviceIoCapabilityProperty: int = 48
export const StorageAdapterProtocolSpecificProperty: int = StorageDeviceIoCapabilityProperty + 1
export const StorageDeviceProtocolSpecificProperty: int = StorageAdapterProtocolSpecificProperty + 1
export const StorageAdapterTemperatureProperty: int = StorageDeviceProtocolSpecificProperty + 1
export const StorageDeviceTemperatureProperty: int = StorageAdapterTemperatureProperty + 1
export const StorageAdapterPhysicalTopologyProperty: int = StorageDeviceTemperatureProperty + 1
export const StorageDevicePhysicalTopologyProperty: int = StorageAdapterPhysicalTopologyProperty + 1
export const StorageDeviceAttributesProperty: int = StorageDevicePhysicalTopologyProperty + 1
export const StorageDeviceManagementStatus: int = StorageDeviceAttributesProperty + 1
export const StorageAdapterSerialNumberProperty: int = StorageDeviceManagementStatus + 1
export const StorageDeviceLocationProperty: int = StorageAdapterSerialNumberProperty + 1
export const StorageDeviceNumaProperty: int = StorageDeviceLocationProperty + 1
export const StorageDeviceZonedDeviceProperty: int = StorageDeviceNumaProperty + 1
export const StorageDeviceUnsafeShutdownCount: int = StorageDeviceZonedDeviceProperty + 1
export const StorageDeviceEnduranceProperty: int = StorageDeviceUnsafeShutdownCount + 1
export const StoragePortCodeSetReserved: int = 0
export const StoragePortCodeSetStorport: int = 1
export const StoragePortCodeSetSCSIport: int = 2
export const StoragePortCodeSetSpaceport: int = 3
export const StoragePortCodeSetATAport: int = 4
export const StoragePortCodeSetUSBport: int = 5
export const StoragePortCodeSetSBP2port: int = 6
export const StoragePortCodeSetSDport: int = 7
export const StorageIdCodeSetReserved: int = 0
export const StorageIdCodeSetBinary: int = 1
export const StorageIdCodeSetAscii: int = 2
export const StorageIdCodeSetUtf8: int = 3
export const StorageIdTypeVendorSpecific: int = 0
export const StorageIdTypeVendorId: int = 1
export const StorageIdTypeEUI64: int = 2
export const StorageIdTypeFCPHName: int = 3
export const StorageIdTypePortRelative: int = 4
export const StorageIdTypeTargetPortGroup: int = 5
export const StorageIdTypeLogicalUnitGroup: int = 6
export const StorageIdTypeMD5LogicalUnitIdentifier: int = 7
export const StorageIdTypeScsiNameString: int = 8
export const StorageIdNAAFormatIEEEExtended: int = 2
export const StorageIdNAAFormatIEEERegistered: int = 3
export const StorageIdNAAFormatIEEEERegisteredExtended: int = 5
export const StorageIdAssocDevice: int = 0
export const StorageIdAssocPort: int = 1
export const StorageIdAssocTarget: int = 2
export const StorageRpmbFrameTypeUnknown: int = 0
export const StorageRpmbFrameTypeStandard: int = StorageRpmbFrameTypeUnknown + 1
export const StorageRpmbFrameTypeMax: int = StorageRpmbFrameTypeStandard + 1
export const StorageCryptoAlgorithmUnknown: int = 0
export const StorageCryptoAlgorithmXTSAES: int = 1
export const StorageCryptoAlgorithmBitlockerAESCBC: int = StorageCryptoAlgorithmXTSAES + 1
export const StorageCryptoAlgorithmAESECB: int = StorageCryptoAlgorithmBitlockerAESCBC + 1
export const StorageCryptoAlgorithmESSIVAESCBC: int = StorageCryptoAlgorithmAESECB + 1
export const StorageCryptoAlgorithmMax: int = StorageCryptoAlgorithmESSIVAESCBC + 1
export const StorageCryptoKeySizeUnknown: int = 0
export const StorageCryptoKeySize128Bits: int = 1
export const StorageCryptoKeySize192Bits: int = StorageCryptoKeySize128Bits + 1
export const StorageCryptoKeySize256Bits: int = StorageCryptoKeySize192Bits + 1
export const StorageCryptoKeySize512Bits: int = StorageCryptoKeySize256Bits + 1
export const StorageTierMediaTypeUnspecified: int = 0
export const StorageTierMediaTypeDisk: int = 1
export const StorageTierMediaTypeSsd: int = 2
export const StorageTierMediaTypeScm: int = 4
export const StorageTierMediaTypeMax: int = StorageTierMediaTypeScm + 1
export const StorageTierClassUnspecified: int = 0
export const StorageTierClassCapacity: int = StorageTierClassUnspecified + 1
export const StorageTierClassPerformance: int = StorageTierClassCapacity + 1
export const StorageTierClassMax: int = StorageTierClassPerformance + 1
export const ProtocolTypeUnknown: int = 0
export const ProtocolTypeScsi: int = ProtocolTypeUnknown + 1
export const ProtocolTypeAta: int = ProtocolTypeScsi + 1
export const ProtocolTypeNvme: int = ProtocolTypeAta + 1
export const ProtocolTypeSd: int = ProtocolTypeNvme + 1
export const ProtocolTypeUfs: int = ProtocolTypeSd + 1
export const ProtocolTypeProprietary: int = 126
export const ProtocolTypeMaxReserved: int = 127
export const NVMeDataTypeUnknown: int = 0
export const NVMeDataTypeIdentify: int = NVMeDataTypeUnknown + 1
export const NVMeDataTypeLogPage: int = NVMeDataTypeIdentify + 1
export const NVMeDataTypeFeature: int = NVMeDataTypeLogPage + 1
export const AtaDataTypeUnknown: int = 0
export const AtaDataTypeIdentify: int = AtaDataTypeUnknown + 1
export const AtaDataTypeLogPage: int = AtaDataTypeIdentify + 1
export const UfsDataTypeUnknown: int = 0
export const UfsDataTypeQueryDescriptor: int = UfsDataTypeUnknown + 1
export const UfsDataTypeMax: int = UfsDataTypeQueryDescriptor + 1
export const FormFactorUnknown: int = 0
export const FormFactor3_5: int = FormFactorUnknown + 1
export const FormFactor2_5: int = FormFactor3_5 + 1
export const FormFactor1_8: int = FormFactor2_5 + 1
export const FormFactor1_8Less: int = FormFactor1_8 + 1
export const FormFactorEmbedded: int = FormFactor1_8Less + 1
export const FormFactorMemoryCard: int = FormFactorEmbedded + 1
export const FormFactormSata: int = FormFactorMemoryCard + 1
export const FormFactorM_2: int = FormFactormSata + 1
export const FormFactorPCIeBoard: int = FormFactorM_2 + 1
export const FormFactorDimm: int = FormFactorPCIeBoard + 1
export const HealthStatusUnknown: int = 0
export const HealthStatusNormal: int = HealthStatusUnknown + 1
export const HealthStatusThrottled: int = HealthStatusNormal + 1
export const HealthStatusWarning: int = HealthStatusThrottled + 1
export const HealthStatusDisabled: int = HealthStatusWarning + 1
export const HealthStatusFailed: int = HealthStatusDisabled + 1
export const DiskHealthUnknown: int = 0
export const DiskHealthUnhealthy: int = DiskHealthUnknown + 1
export const DiskHealthWarning: int = DiskHealthUnhealthy + 1
export const DiskHealthHealthy: int = DiskHealthWarning + 1
export const DiskHealthMax: int = DiskHealthHealthy + 1
export const DiskOpStatusNone: int = 0
export const DiskOpStatusUnknown: int = DiskOpStatusNone + 1
export const DiskOpStatusOk: int = DiskOpStatusUnknown + 1
export const DiskOpStatusPredictingFailure: int = DiskOpStatusOk + 1
export const DiskOpStatusInService: int = DiskOpStatusPredictingFailure + 1
export const DiskOpStatusHardwareError: int = DiskOpStatusInService + 1
export const DiskOpStatusNotUsable: int = DiskOpStatusHardwareError + 1
export const DiskOpStatusTransientError: int = DiskOpStatusNotUsable + 1
export const DiskOpStatusMissing: int = DiskOpStatusTransientError + 1
export const DiskOpReasonUnknown: int = 0
export const DiskOpReasonScsiSenseCode: int = DiskOpReasonUnknown + 1
export const DiskOpReasonMedia: int = DiskOpReasonScsiSenseCode + 1
export const DiskOpReasonIo: int = DiskOpReasonMedia + 1
export const DiskOpReasonThresholdExceeded: int = DiskOpReasonIo + 1
export const DiskOpReasonLostData: int = DiskOpReasonThresholdExceeded + 1
export const DiskOpReasonEnergySource: int = DiskOpReasonLostData + 1
export const DiskOpReasonConfiguration: int = DiskOpReasonEnergySource + 1
export const DiskOpReasonDeviceController: int = DiskOpReasonConfiguration + 1
export const DiskOpReasonMediaController: int = DiskOpReasonDeviceController + 1
export const DiskOpReasonComponent: int = DiskOpReasonMediaController + 1
export const DiskOpReasonNVDIMM_N: int = DiskOpReasonComponent + 1
export const DiskOpReasonBackgroundOperation: int = DiskOpReasonNVDIMM_N + 1
export const DiskOpReasonInvalidFirmware: int = DiskOpReasonBackgroundOperation + 1
export const DiskOpReasonHealthCheck: int = DiskOpReasonInvalidFirmware + 1
export const DiskOpReasonLostDataPersistence: int = DiskOpReasonHealthCheck + 1
export const DiskOpReasonDisabledByPlatform: int = DiskOpReasonLostDataPersistence + 1
export const DiskOpReasonLostWritePersistence: int = DiskOpReasonDisabledByPlatform + 1
export const DiskOpReasonDataPersistenceLossImminent: int = DiskOpReasonLostWritePersistence + 1
export const DiskOpReasonWritePersistenceLossImminent: int = DiskOpReasonDataPersistenceLossImminent + 1
export const DiskOpReasonMax: int = DiskOpReasonWritePersistenceLossImminent + 1
export const ZonedDeviceTypeUnknown: int = 0
export const ZonedDeviceTypeHostManaged: int = ZonedDeviceTypeUnknown + 1
export const ZonedDeviceTypeHostAware: int = ZonedDeviceTypeHostManaged + 1
export const ZonedDeviceTypeDeviceManaged: int = ZonedDeviceTypeHostAware + 1
export const ZoneTypeUnknown: int = 0
export const ZoneTypeConventional: int = 1
export const ZoneTypeSequentialWriteRequired: int = 2
export const ZoneTypeSequentialWritePreferred: int = 3
export const ZoneTypeMax: int = ZoneTypeSequentialWritePreferred + 1
export const ZonesAttributeTypeAndLengthMayDifferent: int = 0
export const ZonesAttributeTypeSameLengthSame: int = 1
export const ZonesAttributeTypeSameLastZoneLengthDifferent: int = 2
export const ZonesAttributeTypeMayDifferentLengthSame: int = 3
export const ZoneConditionConventional: int = 0
export const ZoneConditionEmpty: int = 1
export const ZoneConditionImplicitlyOpened: int = 2
export const ZoneConditionExplicitlyOpened: int = 3
export const ZoneConditionClosed: int = 4
export const ZoneConditionReadOnly: int = 13
export const ZoneConditionFull: int = 14
export const ZoneConditionOffline: int = 15
export const StorageDiagnosticLevelDefault: int = 0
export const StorageDiagnosticLevelMax: int = StorageDiagnosticLevelDefault + 1
export const StorageDiagnosticTargetTypeUndefined: int = 0
export const StorageDiagnosticTargetTypePort: int = StorageDiagnosticTargetTypeUndefined + 1
export const StorageDiagnosticTargetTypeMiniport: int = StorageDiagnosticTargetTypePort + 1
export const StorageDiagnosticTargetTypeHbaFirmware: int = StorageDiagnosticTargetTypeMiniport + 1
export const StorageDiagnosticTargetTypeMax: int = StorageDiagnosticTargetTypeHbaFirmware + 1
export const DeviceInternalStatusDataRequestTypeUndefined: int = 0
export const DeviceCurrentInternalStatusDataHeader: int = DeviceInternalStatusDataRequestTypeUndefined + 1
export const DeviceCurrentInternalStatusData: int = DeviceCurrentInternalStatusDataHeader + 1
export const DeviceStatusDataSetUndefined: int = 0
export const DeviceStatusDataSet1: int = DeviceStatusDataSetUndefined + 1
export const DeviceStatusDataSet2: int = DeviceStatusDataSet1 + 1
export const DeviceStatusDataSet3: int = DeviceStatusDataSet2 + 1
export const DeviceStatusDataSet4: int = DeviceStatusDataSet3 + 1
export const DeviceStatusDataSetMax: int = DeviceStatusDataSet4 + 1
export const WriteCacheTypeUnknown: int = 0
export const WriteCacheTypeNone: int = WriteCacheTypeUnknown + 1
export const WriteCacheTypeWriteBack: int = WriteCacheTypeNone + 1
export const WriteCacheTypeWriteThrough: int = WriteCacheTypeWriteBack + 1
export const WriteCacheEnableUnknown: int = 0
export const WriteCacheDisabled: int = WriteCacheEnableUnknown + 1
export const WriteCacheEnabled: int = WriteCacheDisabled + 1
export const WriteCacheChangeUnknown: int = 0
export const WriteCacheNotChangeable: int = WriteCacheChangeUnknown + 1
export const WriteCacheChangeable: int = WriteCacheNotChangeable + 1
export const WriteThroughUnknown: int = 0
export const WriteThroughNotSupported: int = WriteThroughUnknown + 1
export const WriteThroughSupported: int = WriteThroughNotSupported + 1
export const TCCollectionBugCheck: int = 1
export const TCCollectionApplicationRequested: int = TCCollectionBugCheck + 1
export const TCCollectionDeviceRequested: int = TCCollectionApplicationRequested + 1
export const StoragePowerupUnknown: int = 0
export const StoragePowerupIO: int = StoragePowerupUnknown + 1
export const StoragePowerupDeviceAttention: int = StoragePowerupIO + 1
export const StorageDevicePowerCapUnitsPercent: int = 0
export const StorageDevicePowerCapUnitsMilliwatts: int = StorageDevicePowerCapUnitsPercent + 1
export const StorRpmbProgramAuthKey: int = 1
export const StorRpmbQueryWriteCounter: int = 2
export const StorRpmbAuthenticatedWrite: int = 3
export const StorRpmbAuthenticatedRead: int = 4
export const StorRpmbReadResultRequest: int = 5
export const StorRpmbAuthenticatedDeviceConfigWrite: int = 6
export const StorRpmbAuthenticatedDeviceConfigRead: int = 7
export const StorageCounterTypeUnknown: int = 0
export const StorageCounterTypeTemperatureCelsius: int = StorageCounterTypeUnknown + 1
export const StorageCounterTypeTemperatureCelsiusMax: int = StorageCounterTypeTemperatureCelsius + 1
export const StorageCounterTypeReadErrorsTotal: int = StorageCounterTypeTemperatureCelsiusMax + 1
export const StorageCounterTypeReadErrorsCorrected: int = StorageCounterTypeReadErrorsTotal + 1
export const StorageCounterTypeReadErrorsUncorrected: int = StorageCounterTypeReadErrorsCorrected + 1
export const StorageCounterTypeWriteErrorsTotal: int = StorageCounterTypeReadErrorsUncorrected + 1
export const StorageCounterTypeWriteErrorsCorrected: int = StorageCounterTypeWriteErrorsTotal + 1
export const StorageCounterTypeWriteErrorsUncorrected: int = StorageCounterTypeWriteErrorsCorrected + 1
export const StorageCounterTypeManufactureDate: int = StorageCounterTypeWriteErrorsUncorrected + 1
export const StorageCounterTypeStartStopCycleCount: int = StorageCounterTypeManufactureDate + 1
export const StorageCounterTypeStartStopCycleCountMax: int = StorageCounterTypeStartStopCycleCount + 1
export const StorageCounterTypeLoadUnloadCycleCount: int = StorageCounterTypeStartStopCycleCountMax + 1
export const StorageCounterTypeLoadUnloadCycleCountMax: int = StorageCounterTypeLoadUnloadCycleCount + 1
export const StorageCounterTypeWearPercentage: int = StorageCounterTypeLoadUnloadCycleCountMax + 1
export const StorageCounterTypeWearPercentageWarning: int = StorageCounterTypeWearPercentage + 1
export const StorageCounterTypeWearPercentageMax: int = StorageCounterTypeWearPercentageWarning + 1
export const StorageCounterTypePowerOnHours: int = StorageCounterTypeWearPercentageMax + 1
export const StorageCounterTypeReadLatency100NSMax: int = StorageCounterTypePowerOnHours + 1
export const StorageCounterTypeWriteLatency100NSMax: int = StorageCounterTypeReadLatency100NSMax + 1
export const StorageCounterTypeFlushLatency100NSMax: int = StorageCounterTypeWriteLatency100NSMax + 1
export const StorageCounterTypeMax: int = StorageCounterTypeFlushLatency100NSMax + 1
export const StorAttributeMgmt_ClearAttribute: int = 0
export const StorAttributeMgmt_SetAttribute: int = 1
export const StorAttributeMgmt_ResetAttribute: int = 2
export const ScmRegionFlagNone: int = 0
export const ScmRegionFlagLabel: int = 1
export const ScmPhysicalDeviceQuery_Descriptor: int = 0
export const ScmPhysicalDeviceQuery_IsSupported: int = ScmPhysicalDeviceQuery_Descriptor + 1
export const ScmPhysicalDeviceQuery_Max: int = ScmPhysicalDeviceQuery_IsSupported + 1
export const ScmPhysicalDeviceProperty_DeviceInfo: int = 0
export const ScmPhysicalDeviceProperty_ManagementStatus: int = ScmPhysicalDeviceProperty_DeviceInfo + 1
export const ScmPhysicalDeviceProperty_FirmwareInfo: int = ScmPhysicalDeviceProperty_ManagementStatus + 1
export const ScmPhysicalDeviceProperty_LocationString: int = ScmPhysicalDeviceProperty_FirmwareInfo + 1
export const ScmPhysicalDeviceProperty_DeviceSpecificInfo: int = ScmPhysicalDeviceProperty_LocationString + 1
export const ScmPhysicalDeviceProperty_DeviceHandle: int = ScmPhysicalDeviceProperty_DeviceSpecificInfo + 1
export const ScmPhysicalDeviceProperty_Max: int = ScmPhysicalDeviceProperty_DeviceHandle + 1
export const ScmPhysicalDeviceHealth_Unknown: int = 0
export const ScmPhysicalDeviceHealth_Unhealthy: int = ScmPhysicalDeviceHealth_Unknown + 1
export const ScmPhysicalDeviceHealth_Warning: int = ScmPhysicalDeviceHealth_Unhealthy + 1
export const ScmPhysicalDeviceHealth_Healthy: int = ScmPhysicalDeviceHealth_Warning + 1
export const ScmPhysicalDeviceHealth_Max: int = ScmPhysicalDeviceHealth_Healthy + 1
export const ScmPhysicalDeviceOpStatus_Unknown: int = 0
export const ScmPhysicalDeviceOpStatus_Ok: int = ScmPhysicalDeviceOpStatus_Unknown + 1
export const ScmPhysicalDeviceOpStatus_PredictingFailure: int = ScmPhysicalDeviceOpStatus_Ok + 1
export const ScmPhysicalDeviceOpStatus_InService: int = ScmPhysicalDeviceOpStatus_PredictingFailure + 1
export const ScmPhysicalDeviceOpStatus_HardwareError: int = ScmPhysicalDeviceOpStatus_InService + 1
export const ScmPhysicalDeviceOpStatus_NotUsable: int = ScmPhysicalDeviceOpStatus_HardwareError + 1
export const ScmPhysicalDeviceOpStatus_TransientError: int = ScmPhysicalDeviceOpStatus_NotUsable + 1
export const ScmPhysicalDeviceOpStatus_Missing: int = ScmPhysicalDeviceOpStatus_TransientError + 1
export const ScmPhysicalDeviceOpStatus_Max: int = ScmPhysicalDeviceOpStatus_Missing + 1
export const ScmPhysicalDeviceOpReason_Unknown: int = 0
export const ScmPhysicalDeviceOpReason_Media: int = ScmPhysicalDeviceOpReason_Unknown + 1
export const ScmPhysicalDeviceOpReason_ThresholdExceeded: int = ScmPhysicalDeviceOpReason_Media + 1
export const ScmPhysicalDeviceOpReason_LostData: int = ScmPhysicalDeviceOpReason_ThresholdExceeded + 1
export const ScmPhysicalDeviceOpReason_EnergySource: int = ScmPhysicalDeviceOpReason_LostData + 1
export const ScmPhysicalDeviceOpReason_Configuration: int = ScmPhysicalDeviceOpReason_EnergySource + 1
export const ScmPhysicalDeviceOpReason_DeviceController: int = ScmPhysicalDeviceOpReason_Configuration + 1
export const ScmPhysicalDeviceOpReason_MediaController: int = ScmPhysicalDeviceOpReason_DeviceController + 1
export const ScmPhysicalDeviceOpReason_Component: int = ScmPhysicalDeviceOpReason_MediaController + 1
export const ScmPhysicalDeviceOpReason_BackgroundOperation: int = ScmPhysicalDeviceOpReason_Component + 1
export const ScmPhysicalDeviceOpReason_InvalidFirmware: int = ScmPhysicalDeviceOpReason_BackgroundOperation + 1
export const ScmPhysicalDeviceOpReason_HealthCheck: int = ScmPhysicalDeviceOpReason_InvalidFirmware + 1
export const ScmPhysicalDeviceOpReason_LostDataPersistence: int = ScmPhysicalDeviceOpReason_HealthCheck + 1
export const ScmPhysicalDeviceOpReason_DisabledByPlatform: int = ScmPhysicalDeviceOpReason_LostDataPersistence + 1
export const ScmPhysicalDeviceOpReason_PermanentError: int = ScmPhysicalDeviceOpReason_DisabledByPlatform + 1
export const ScmPhysicalDeviceOpReason_LostWritePersistence: int = ScmPhysicalDeviceOpReason_PermanentError + 1
export const ScmPhysicalDeviceOpReason_FatalError: int = ScmPhysicalDeviceOpReason_LostWritePersistence + 1
export const ScmPhysicalDeviceOpReason_DataPersistenceLossImminent: int = ScmPhysicalDeviceOpReason_FatalError + 1
export const ScmPhysicalDeviceOpReason_WritePersistenceLossImminent: int = ScmPhysicalDeviceOpReason_DataPersistenceLossImminent + 1
export const ScmPhysicalDeviceOpReason_MediaRemainingSpareBlock: int = ScmPhysicalDeviceOpReason_WritePersistenceLossImminent + 1
export const ScmPhysicalDeviceOpReason_PerformanceDegradation: int = ScmPhysicalDeviceOpReason_MediaRemainingSpareBlock + 1
export const ScmPhysicalDeviceOpReason_ExcessiveTemperature: int = ScmPhysicalDeviceOpReason_PerformanceDegradation + 1
export const ScmPhysicalDeviceOpReason_Max: int = ScmPhysicalDeviceOpReason_ExcessiveTemperature + 1
export const ScmPhysicalDeviceReinit_Success: int = 0
export const ScmPhysicalDeviceReinit_RebootNeeded: int = ScmPhysicalDeviceReinit_Success + 1
export const ScmPhysicalDeviceReinit_ColdBootNeeded: int = ScmPhysicalDeviceReinit_RebootNeeded + 1
export const ScmPhysicalDeviceReinit_Max: int = ScmPhysicalDeviceReinit_ColdBootNeeded + 1
export const Unknown: int = 0
export const F5_1Pt2_512: int = Unknown + 1
export const F3_1Pt44_512: int = F5_1Pt2_512 + 1
export const F3_2Pt88_512: int = F3_1Pt44_512 + 1
export const F3_20Pt8_512: int = F3_2Pt88_512 + 1
export const F3_720_512: int = F3_20Pt8_512 + 1
export const F5_360_512: int = F3_720_512 + 1
export const F5_320_512: int = F5_360_512 + 1
export const F5_320_1024: int = F5_320_512 + 1
export const F5_180_512: int = F5_320_1024 + 1
export const F5_160_512: int = F5_180_512 + 1
export const RemovableMedia: int = F5_160_512 + 1
export const FixedMedia: int = RemovableMedia + 1
export const F3_120M_512: int = FixedMedia + 1
export const F3_640_512: int = F3_120M_512 + 1
export const F5_640_512: int = F3_640_512 + 1
export const F5_720_512: int = F5_640_512 + 1
export const F3_1Pt2_512: int = F5_720_512 + 1
export const F3_1Pt23_1024: int = F3_1Pt2_512 + 1
export const F5_1Pt23_1024: int = F3_1Pt23_1024 + 1
export const F3_128Mb_512: int = F5_1Pt23_1024 + 1
export const F3_230Mb_512: int = F3_128Mb_512 + 1
export const F8_256_128: int = F3_230Mb_512 + 1
export const F3_200Mb_512: int = F8_256_128 + 1
export const F3_240M_512: int = F3_200Mb_512 + 1
export const F3_32M_512: int = F3_240M_512 + 1
export const PARTITION_STYLE_MBR: int = 0
export const PARTITION_STYLE_GPT: int = PARTITION_STYLE_MBR + 1
export const PARTITION_STYLE_RAW: int = PARTITION_STYLE_GPT + 1
export const DetectNone: int = 0
export const DetectInt13: int = DetectNone + 1
export const DetectExInt13: int = DetectInt13 + 1
export const EqualPriority: int = 0
export const KeepPrefetchedData: int = EqualPriority + 1
export const KeepReadData: int = KeepPrefetchedData + 1
export const RequestSize: int = 0
export const RequestLocation: int = RequestSize + 1
export const AllElements: int = 0
export const ChangerTransport: int = AllElements + 1
export const ChangerSlot: int = ChangerTransport + 1
export const ChangerIEPort: int = ChangerSlot + 1
export const ChangerDrive: int = ChangerIEPort + 1
export const ChangerDoor: int = ChangerDrive + 1
export const ChangerKeypad: int = ChangerDoor + 1
export const ChangerMaxElement: int = ChangerKeypad + 1
export const DeviceProblemNone: int = 0
export const DeviceProblemHardware: int = DeviceProblemNone + 1
export const DeviceProblemCHMError: int = DeviceProblemHardware + 1
export const DeviceProblemDoorOpen: int = DeviceProblemCHMError + 1
export const DeviceProblemCalibrationError: int = DeviceProblemDoorOpen + 1
export const DeviceProblemTargetFailure: int = DeviceProblemCalibrationError + 1
export const DeviceProblemCHMMoveError: int = DeviceProblemTargetFailure + 1
export const DeviceProblemCHMZeroError: int = DeviceProblemCHMMoveError + 1
export const DeviceProblemCartridgeInsertError: int = DeviceProblemCHMZeroError + 1
export const DeviceProblemPositionError: int = DeviceProblemCartridgeInsertError + 1
export const DeviceProblemSensorError: int = DeviceProblemPositionError + 1
export const DeviceProblemCartridgeEjectError: int = DeviceProblemSensorError + 1
export const DeviceProblemGripperError: int = DeviceProblemCartridgeEjectError + 1
export const DeviceProblemDriveError: int = DeviceProblemGripperError + 1
export const ShrinkPrepare: int = 1
export const ShrinkCommit: int = ShrinkPrepare + 1
export const ShrinkAbort: int = ShrinkCommit + 1
export const CsvControlStartRedirectFile: int = 2
export const CsvControlStopRedirectFile: int = 3
export const CsvControlQueryRedirectState: int = 4
export const CsvControlQueryFileRevision: int = 6
export const CsvControlQueryMdsPath: int = 8
export const CsvControlQueryFileRevisionFileId128: int = 9
export const CsvControlQueryVolumeRedirectState: int = 10
export const CsvControlEnableUSNRangeModificationTracking: int = 13
export const CsvControlMarkHandleLocalVolumeMount: int = 14
export const CsvControlUnmarkHandleLocalVolumeMount: int = 15
export const CsvControlGetCsvFsMdsPathV2: int = 18
export const CsvControlDisableCaching: int = 19
export const CsvControlEnableCaching: int = 20
export const CsvControlStartForceDFO: int = 21
export const CsvControlStopForceDFO: int = 22
export const CsvFsDiskConnectivityNone: int = 0
export const CsvFsDiskConnectivityMdsNodeOnly: int = 1
export const CsvFsDiskConnectivitySubsetOfNodes: int = 2
export const CsvFsDiskConnectivityAllNodes: int = 3
export const StorageReserveIdNone: int = 0
export const StorageReserveIdHard: int = StorageReserveIdNone + 1
export const StorageReserveIdSoft: int = StorageReserveIdHard + 1
export const StorageReserveIdUpdateScratch: int = StorageReserveIdSoft + 1
export const StorageReserveIdMax: int = StorageReserveIdUpdateScratch + 1
export const QUERY_FILE_LAYOUT_FILTER_TYPE_NONE: int = 0
export const QUERY_FILE_LAYOUT_FILTER_TYPE_CLUSTERS: int = 1
export const QUERY_FILE_LAYOUT_FILTER_TYPE_FILEID: int = 2
export const QUERY_FILE_LAYOUT_FILTER_TYPE_STORAGE_RESERVE_ID: int = 3
export const QUERY_FILE_LAYOUT_NUM_FILTER_TYPES: int = QUERY_FILE_LAYOUT_FILTER_TYPE_STORAGE_RESERVE_ID + 1
export const FileStorageTierMediaTypeUnspecified: int = 0
export const FileStorageTierMediaTypeDisk: int = 1
export const FileStorageTierMediaTypeSsd: int = 2
export const FileStorageTierMediaTypeScm: int = 4
export const FileStorageTierMediaTypeMax: int = FileStorageTierMediaTypeScm + 1
export const FileStorageTierClassUnspecified: int = 0
export const FileStorageTierClassCapacity: int = FileStorageTierClassUnspecified + 1
export const FileStorageTierClassPerformance: int = FileStorageTierClassCapacity + 1
export const FileStorageTierClassMax: int = FileStorageTierClassPerformance + 1
export const SmrGcStateInactive: int = 0
export const SmrGcStatePaused: int = 1
export const SmrGcStateActive: int = 2
export const SmrGcStateActiveFullSpeed: int = 3
export const SmrGcActionStart: int = 1
export const SmrGcActionStartFullSpeed: int = 2
export const SmrGcActionPause: int = 3
export const SmrGcActionStop: int = 4
export const SmrGcMethodCompaction: int = 1
export const SmrGcMethodCompression: int = 2
export const SmrGcMethodRotation: int = 3
export const VirtualStorageBehaviorUndefined: int = 0
export const VirtualStorageBehaviorCacheWriteThrough: int = 1
export const VirtualStorageBehaviorCacheWriteBack: int = 2
export const RSR_MATCH_TYPE_READER_AND_CONTAINER: int = 1
export const RSR_MATCH_TYPE_SERIAL_NUMBER: int = RSR_MATCH_TYPE_READER_AND_CONTAINER + 1
export const RSR_MATCH_TYPE_ALL_CARDS: int = RSR_MATCH_TYPE_SERIAL_NUMBER + 1
export const BIDI_NULL: int = 0
export const BIDI_INT: int = 1
export const BIDI_FLOAT: int = 2
export const BIDI_BOOL: int = 3
export const BIDI_STRING: int = 4
export const BIDI_TEXT: int = 5
export const BIDI_ENUM: int = 6
export const BIDI_BLOB: int = 7
export const PRINTER_OPTION_NO_CACHE: int = (1 << 0)
export const PRINTER_OPTION_CACHE: int = (1 << 1)
export const PRINTER_OPTION_CLIENT_CHANGE: int = (1 << 2)
export const PRINTER_OPTION_NO_CLIENT_DATA: int = (1 << 3)
export const kPropertyTypeString: int = 1
export const kPropertyTypeInt32: int = kPropertyTypeString + 1
export const kPropertyTypeInt64: int = kPropertyTypeInt32 + 1
export const kPropertyTypeByte: int = kPropertyTypeInt64 + 1
export const kPropertyTypeTime: int = kPropertyTypeByte + 1
export const kPropertyTypeDevMode: int = kPropertyTypeTime + 1
export const kPropertyTypeSD: int = kPropertyTypeDevMode + 1
export const kPropertyTypeNotificationReply: int = kPropertyTypeSD + 1
export const kPropertyTypeNotificationOptions: int = kPropertyTypeNotificationReply + 1
export const kPropertyTypeBuffer: int = kPropertyTypeNotificationOptions + 1
export const kAddingDocumentSequence: int = 0
export const kDocumentSequenceAdded: int = 1
export const kAddingFixedDocument: int = 2
export const kFixedDocumentAdded: int = 3
export const kAddingFixedPage: int = 4
export const kFixedPageAdded: int = 5
export const kResourceAdded: int = 6
export const kFontAdded: int = 7
export const kImageAdded: int = 8
export const kXpsDocumentCommitted: int = 9
export const kJobProduction: int = 1
export const kJobConsumption: int = kJobProduction + 1
export const PRINT_EXECUTION_CONTEXT_APPLICATION: int = 0
export const PRINT_EXECUTION_CONTEXT_SPOOLER_SERVICE: int = 1
export const PRINT_EXECUTION_CONTEXT_SPOOLER_ISOLATION_HOST: int = 2
export const PRINT_EXECUTION_CONTEXT_FILTER_PIPELINE: int = 3
export const PRINT_EXECUTION_CONTEXT_WOW64: int = 4
export const REGCLS_SINGLEUSE: int = 0
export const REGCLS_MULTIPLEUSE: int = 1
export const REGCLS_MULTI_SEPARATE: int = 2
export const REGCLS_SUSPENDED: int = 4
export const REGCLS_SURROGATE: int = 8
export const REGCLS_AGILE: int = 16
export const COINITBASE_MULTITHREADED: int = 0
export const ACTIVATIONTYPE_UNCATEGORIZED: int = 0
export const ACTIVATIONTYPE_FROM_MONIKER: int = 1
export const ACTIVATIONTYPE_FROM_DATA: int = 2
export const ACTIVATIONTYPE_FROM_STORAGE: int = 4
export const ACTIVATIONTYPE_FROM_STREAM: int = 8
export const ACTIVATIONTYPE_FROM_FILE: int = 16
export const EXTCONN_STRONG: int = 1
export const EXTCONN_WEAK: int = 2
export const EXTCONN_CALLABLE: int = 4
export const STGTY_STORAGE: int = 1
export const STGTY_STREAM: int = 2
export const STGTY_LOCKBYTES: int = 3
export const STGTY_PROPERTY: int = 4
export const STREAM_SEEK_SET: int = 0
export const STREAM_SEEK_CUR: int = 1
export const STREAM_SEEK_END: int = 2
export const LOCK_WRITE: int = 1
export const LOCK_EXCLUSIVE: int = 2
export const LOCK_ONLYONCE: int = 4
export const EOAC_NONE: int = 0
export const EOAC_MUTUAL_AUTH: int = 1
export const EOAC_STATIC_CLOAKING: int = 32
export const EOAC_DYNAMIC_CLOAKING: int = 64
export const EOAC_ANY_AUTHORITY: int = 128
export const EOAC_MAKE_FULLSIC: int = 256
export const EOAC_DEFAULT: int = 2048
export const EOAC_SECURE_REFS: int = 2
export const EOAC_ACCESS_CONTROL: int = 4
export const EOAC_APPID: int = 8
export const EOAC_DYNAMIC: int = 16
export const EOAC_REQUIRE_FULLSIC: int = 512
export const EOAC_AUTO_IMPERSONATE: int = 1024
export const EOAC_DISABLE_AAA: int = 4096
export const EOAC_NO_CUSTOM_MARSHAL: int = 8192
export const EOAC_RESERVED1: int = 16384
export const COMBND_RPCTIMEOUT: int = 1
export const COMBND_SERVER_LOCALITY: int = 2
export const COMBND_RESERVED1: int = 4
export const COMBND_RESERVED2: int = 5
export const COMBND_RESERVED3: int = 8
export const COMBND_RESERVED4: int = 16
export const SERVER_LOCALITY_PROCESS_LOCAL: int = 0
export const SERVER_LOCALITY_MACHINE_LOCAL: int = 1
export const SERVER_LOCALITY_REMOTE: int = 2
export const COMGLB_EXCEPTION_HANDLING: int = 1
export const COMGLB_APPID: int = 2
export const COMGLB_RPC_THREADPOOL_SETTING: int = 3
export const COMGLB_RO_SETTINGS: int = 4
export const COMGLB_UNMARSHALING_POLICY: int = 5
export const COMGLB_PROPERTIES_RESERVED1: int = 6
export const COMGLB_PROPERTIES_RESERVED2: int = 7
export const COMGLB_PROPERTIES_RESERVED3: int = 8
export const COMGLB_EXCEPTION_HANDLE: int = 0
export const COMGLB_EXCEPTION_DONOT_HANDLE_FATAL: int = 1
export const COMGLB_EXCEPTION_DONOT_HANDLE: int = COMGLB_EXCEPTION_DONOT_HANDLE_FATAL
export const COMGLB_EXCEPTION_DONOT_HANDLE_ANY: int = 2
export const COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL: int = 0
export const COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL: int = 1
export const COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES: int = 1
export const COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES: int = 2
export const COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES: int = 4
export const COMGLB_FAST_RUNDOWN: int = 8
export const COMGLB_RESERVED1: int = 16
export const COMGLB_RESERVED2: int = 32
export const COMGLB_RESERVED3: int = 64
export const COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES: int = 128
export const COMGLB_RESERVED4: int = 256
export const COMGLB_RESERVED5: int = 512
export const COMGLB_RESERVED6: int = 1024
export const COMGLB_UNMARSHALING_POLICY_NORMAL: int = 0
export const COMGLB_UNMARSHALING_POLICY_STRONG: int = 1
export const COMGLB_UNMARSHALING_POLICY_HYBRID: int = 2
export const DCOM_NONE: int = 0
export const DCOM_CALL_COMPLETE: int = 1
export const DCOM_CALL_CANCELED: int = 2
export const APTTYPEQUALIFIER_NONE: int = 0
export const APTTYPEQUALIFIER_IMPLICIT_MTA: int = 1
export const APTTYPEQUALIFIER_NA_ON_MTA: int = 2
export const APTTYPEQUALIFIER_NA_ON_STA: int = 3
export const APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA: int = 4
export const APTTYPEQUALIFIER_NA_ON_MAINSTA: int = 5
export const APTTYPEQUALIFIER_APPLICATION_STA: int = 6
export const APTTYPEQUALIFIER_RESERVED_1: int = 7
export const APTTYPE_CURRENT: int = (- 1)
export const APTTYPE_STA: int = 0
export const APTTYPE_MTA: int = 1
export const APTTYPE_NA: int = 2
export const APTTYPE_MAINSTA: int = 3
export const THDTYPE_BLOCKMESSAGES: int = 0
export const THDTYPE_PROCESSMESSAGES: int = 1
export const CO_MARSHALING_SOURCE_IS_APP_CONTAINER: int = 0
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_1: int = CO_MARSHALING_SOURCE_IS_APP_CONTAINER + 1
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_2: int = CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_1 + 1
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_3: int = CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_2 + 1
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_4: int = CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_3 + 1
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_5: int = CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_4 + 1
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_6: int = CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_5 + 1
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_7: int = CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_6 + 1
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_8: int = CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_7 + 1
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_9: int = CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_8 + 1
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_10: int = CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_9 + 1
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_11: int = CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_10 + 1
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_12: int = CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_11 + 1
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_13: int = CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_12 + 1
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_14: int = CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_13 + 1
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_15: int = CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_14 + 1
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_16: int = CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_15 + 1
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_17: int = CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_16 + 1
export const CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_18: int = CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_17 + 1
export const SMEXF_SERVER: int = 1
export const SMEXF_HANDLER: int = 2
export const COWAIT_DEFAULT: int = 0
export const COWAIT_WAITALL: int = 1
export const COWAIT_ALERTABLE: int = 2
export const COWAIT_INPUTAVAILABLE: int = 4
export const COWAIT_DISPATCH_CALLS: int = 8
export const COWAIT_DISPATCH_WINDOW_MESSAGES: int = 16
export const CWMO_DEFAULT: int = 0
export const CWMO_DISPATCH_CALLS: int = 1
export const CWMO_DISPATCH_WINDOW_MESSAGES: int = 2
export const AGILEREFERENCE_DEFAULT: int = 0
export const AGILEREFERENCE_DELAYEDMARSHAL: int = 1
export const BIND_MAYBOTHERUSER: int = 1
export const BIND_JUSTTESTEXISTENCE: int = 2
export const MKSYS_NONE: int = 0
export const MKSYS_GENERICCOMPOSITE: int = 1
export const MKSYS_FILEMONIKER: int = 2
export const MKSYS_ANTIMONIKER: int = 3
export const MKSYS_ITEMMONIKER: int = 4
export const MKSYS_POINTERMONIKER: int = 5
export const MKSYS_CLASSMONIKER: int = 7
export const MKSYS_OBJREFMONIKER: int = 8
export const MKSYS_SESSIONMONIKER: int = 9
export const MKSYS_LUAMONIKER: int = 10
export const MKRREDUCE_ONE: int = ((3 << 16))
export const MKRREDUCE_TOUSER: int = ((2 << 16))
export const MKRREDUCE_THROUGHUSER: int = ((1 << 16))
export const MKRREDUCE_ALL: int = 0
export const ADVF_NODATA: int = 1
export const ADVF_PRIMEFIRST: int = 2
export const ADVF_ONLYONCE: int = 4
export const ADVF_DATAONSTOP: int = 64
export const ADVFCACHE_NOHANDLER: int = 8
export const ADVFCACHE_FORCEBUILTIN: int = 16
export const ADVFCACHE_ONSAVE: int = 32
export const TYMED_HGLOBAL: int = 1
export const TYMED_FILE: int = 2
export const TYMED_ISTREAM: int = 4
export const TYMED_ISTORAGE: int = 8
export const TYMED_GDI: int = 16
export const TYMED_MFPICT: int = 32
export const TYMED_ENHMF: int = 64
export const TYMED_NULL: int = 0
export const DATADIR_GET: int = 1
export const DATADIR_SET: int = 2
export const CALLTYPE_TOPLEVEL: int = 1
export const CALLTYPE_NESTED: int = 2
export const CALLTYPE_ASYNC: int = 3
export const CALLTYPE_TOPLEVEL_CALLPENDING: int = 4
export const CALLTYPE_ASYNC_CALLPENDING: int = 5
export const SERVERCALL_ISHANDLED: int = 0
export const SERVERCALL_REJECTED: int = 1
export const SERVERCALL_RETRYLATER: int = 2
export const PENDINGTYPE_TOPLEVEL: int = 1
export const PENDINGTYPE_NESTED: int = 2
export const PENDINGMSG_CANCELCALL: int = 0
export const PENDINGMSG_WAITNOPROCESS: int = 1
export const PENDINGMSG_WAITDEFPROCESS: int = 2
export const ServerApplication: int = 0
export const LibraryApplication: int = ((ServerApplication + 1))
export const IdleShutdown: int = 0
export const ForcedShutdown: int = ((IdleShutdown + 1))
export const SF_ERROR: int = VT_ERROR
export const SF_I1: int = VT_I1
export const SF_I2: int = VT_I2
export const SF_I4: int = VT_I4
export const SF_I8: int = VT_I8
export const SF_BSTR: int = VT_BSTR
export const SF_UNKNOWN: int = VT_UNKNOWN
export const SF_DISPATCH: int = VT_DISPATCH
export const SF_VARIANT: int = VT_VARIANT
export const SF_RECORD: int = VT_RECORD
export const SF_HAVEIID: int = ((VT_UNKNOWN | VT_RESERVED))
export const TKIND_ENUM: int = 0
export const TKIND_RECORD: int = ((TKIND_ENUM + 1))
export const TKIND_MODULE: int = ((TKIND_RECORD + 1))
export const TKIND_INTERFACE: int = ((TKIND_MODULE + 1))
export const TKIND_DISPATCH: int = ((TKIND_INTERFACE + 1))
export const TKIND_COCLASS: int = ((TKIND_DISPATCH + 1))
export const TKIND_ALIAS: int = ((TKIND_COCLASS + 1))
export const TKIND_UNION: int = ((TKIND_ALIAS + 1))
export const TKIND_MAX: int = ((TKIND_UNION + 1))
export const CC_FASTCALL: int = 0
export const CC_CDECL: int = 1
export const CC_MSCPASCAL: int = ((CC_CDECL + 1))
export const CC_PASCAL: int = CC_MSCPASCAL
export const CC_MACPASCAL: int = ((CC_PASCAL + 1))
export const CC_STDCALL: int = ((CC_MACPASCAL + 1))
export const CC_FPFASTCALL: int = ((CC_STDCALL + 1))
export const CC_SYSCALL: int = ((CC_FPFASTCALL + 1))
export const CC_MPWCDECL: int = ((CC_SYSCALL + 1))
export const CC_MPWPASCAL: int = ((CC_MPWCDECL + 1))
export const CC_MAX: int = ((CC_MPWPASCAL + 1))
export const FUNC_VIRTUAL: int = 0
export const FUNC_PUREVIRTUAL: int = ((FUNC_VIRTUAL + 1))
export const FUNC_NONVIRTUAL: int = ((FUNC_PUREVIRTUAL + 1))
export const FUNC_STATIC: int = ((FUNC_NONVIRTUAL + 1))
export const FUNC_DISPATCH: int = ((FUNC_STATIC + 1))
export const INVOKE_FUNC: int = 1
export const INVOKE_PROPERTYGET: int = 2
export const INVOKE_PROPERTYPUT: int = 4
export const INVOKE_PROPERTYPUTREF: int = 8
export const VAR_PERINSTANCE: int = 0
export const VAR_STATIC: int = ((VAR_PERINSTANCE + 1))
export const VAR_CONST: int = ((VAR_STATIC + 1))
export const VAR_DISPATCH: int = ((VAR_CONST + 1))
export const TYPEFLAG_FAPPOBJECT: int = 1
export const TYPEFLAG_FCANCREATE: int = 2
export const TYPEFLAG_FLICENSED: int = 4
export const TYPEFLAG_FPREDECLID: int = 8
export const TYPEFLAG_FHIDDEN: int = 16
export const TYPEFLAG_FCONTROL: int = 32
export const TYPEFLAG_FDUAL: int = 64
export const TYPEFLAG_FNONEXTENSIBLE: int = 128
export const TYPEFLAG_FOLEAUTOMATION: int = 256
export const TYPEFLAG_FRESTRICTED: int = 512
export const TYPEFLAG_FAGGREGATABLE: int = 1024
export const TYPEFLAG_FREPLACEABLE: int = 2048
export const TYPEFLAG_FDISPATCHABLE: int = 4096
export const TYPEFLAG_FREVERSEBIND: int = 8192
export const TYPEFLAG_FPROXY: int = 16384
export const FUNCFLAG_FRESTRICTED: int = 1
export const FUNCFLAG_FSOURCE: int = 2
export const FUNCFLAG_FBINDABLE: int = 4
export const FUNCFLAG_FREQUESTEDIT: int = 8
export const FUNCFLAG_FDISPLAYBIND: int = 16
export const FUNCFLAG_FDEFAULTBIND: int = 32
export const FUNCFLAG_FHIDDEN: int = 64
export const FUNCFLAG_FUSESGETLASTERROR: int = 128
export const FUNCFLAG_FDEFAULTCOLLELEM: int = 256
export const FUNCFLAG_FUIDEFAULT: int = 512
export const FUNCFLAG_FNONBROWSABLE: int = 1024
export const FUNCFLAG_FREPLACEABLE: int = 2048
export const FUNCFLAG_FIMMEDIATEBIND: int = 4096
export const VARFLAG_FREADONLY: int = 1
export const VARFLAG_FSOURCE: int = 2
export const VARFLAG_FBINDABLE: int = 4
export const VARFLAG_FREQUESTEDIT: int = 8
export const VARFLAG_FDISPLAYBIND: int = 16
export const VARFLAG_FDEFAULTBIND: int = 32
export const VARFLAG_FHIDDEN: int = 64
export const VARFLAG_FRESTRICTED: int = 128
export const VARFLAG_FDEFAULTCOLLELEM: int = 256
export const VARFLAG_FUIDEFAULT: int = 512
export const VARFLAG_FNONBROWSABLE: int = 1024
export const VARFLAG_FREPLACEABLE: int = 2048
export const VARFLAG_FIMMEDIATEBIND: int = 4096
export const DESCKIND_NONE: int = 0
export const DESCKIND_FUNCDESC: int = ((DESCKIND_NONE + 1))
export const DESCKIND_VARDESC: int = ((DESCKIND_FUNCDESC + 1))
export const DESCKIND_TYPECOMP: int = ((DESCKIND_VARDESC + 1))
export const DESCKIND_IMPLICITAPPOBJ: int = ((DESCKIND_TYPECOMP + 1))
export const DESCKIND_MAX: int = ((DESCKIND_IMPLICITAPPOBJ + 1))
export const SYS_WIN16: int = 0
export const SYS_WIN32: int = ((SYS_WIN16 + 1))
export const SYS_MAC: int = ((SYS_WIN32 + 1))
export const SYS_WIN64: int = ((SYS_MAC + 1))
export const LIBFLAG_FRESTRICTED: int = 1
export const LIBFLAG_FCONTROL: int = 2
export const LIBFLAG_FHIDDEN: int = 4
export const LIBFLAG_FHASDISKIMAGE: int = 8
export const CHANGEKIND_ADDMEMBER: int = 0
export const CHANGEKIND_DELETEMEMBER: int = ((CHANGEKIND_ADDMEMBER + 1))
export const CHANGEKIND_SETNAMES: int = ((CHANGEKIND_DELETEMEMBER + 1))
export const CHANGEKIND_SETDOCUMENTATION: int = ((CHANGEKIND_SETNAMES + 1))
export const CHANGEKIND_GENERAL: int = ((CHANGEKIND_SETDOCUMENTATION + 1))
export const CHANGEKIND_INVALIDATE: int = ((CHANGEKIND_GENERAL + 1))
export const CHANGEKIND_CHANGEFAILED: int = ((CHANGEKIND_INVALIDATE + 1))
export const CHANGEKIND_MAX: int = ((CHANGEKIND_CHANGEFAILED + 1))
export const COINIT_APARTMENTTHREADED: int = 2
export const COINIT_MULTITHREADED: int = COINITBASE_MULTITHREADED
export const COINIT_DISABLE_OLE1DDE: int = 4
export const COINIT_SPEED_OVER_MEMORY: int = 8
export const SD_LAUNCHPERMISSIONS: int = 0
export const SD_ACCESSPERMISSIONS: int = 1
export const SD_LAUNCHRESTRICTIONS: int = 2
export const SD_ACCESSRESTRICTIONS: int = 3
export const DISCARDCACHE_SAVEIFDIRTY: int = 0
export const DISCARDCACHE_NOSAVE: int = 1
export const OLEGETMONIKER_ONLYIFTHERE: int = 1
export const OLEGETMONIKER_FORCEASSIGN: int = 2
export const OLEGETMONIKER_UNASSIGN: int = 3
export const OLEGETMONIKER_TEMPFORUSER: int = 4
export const OLEWHICHMK_CONTAINER: int = 1
export const OLEWHICHMK_OBJREL: int = 2
export const OLEWHICHMK_OBJFULL: int = 3
export const USERCLASSTYPE_FULL: int = 1
export const USERCLASSTYPE_SHORT: int = 2
export const USERCLASSTYPE_APPNAME: int = 3
export const OLEMISC_RECOMPOSEONRESIZE: int = 1
export const OLEMISC_ONLYICONIC: int = 2
export const OLEMISC_INSERTNOTREPLACE: int = 4
export const OLEMISC_STATIC: int = 8
export const OLEMISC_CANTLINKINSIDE: int = 16
export const OLEMISC_CANLINKBYOLE1: int = 32
export const OLEMISC_ISLINKOBJECT: int = 64
export const OLEMISC_INSIDEOUT: int = 128
export const OLEMISC_ACTIVATEWHENVISIBLE: int = 256
export const OLEMISC_RENDERINGISDEVICEINDEPENDENT: int = 512
export const OLEMISC_INVISIBLEATRUNTIME: int = 1024
export const OLEMISC_ALWAYSRUN: int = 2048
export const OLEMISC_ACTSLIKEBUTTON: int = 4096
export const OLEMISC_ACTSLIKELABEL: int = 8192
export const OLEMISC_NOUIACTIVATE: int = 16384
export const OLEMISC_ALIGNABLE: int = 32768
export const OLEMISC_SIMPLEFRAME: int = 65536
export const OLEMISC_SETCLIENTSITEFIRST: int = 131072
export const OLEMISC_IMEMODE: int = 262144
export const OLEMISC_IGNOREACTIVATEWHENVISIBLE: int = 524288
export const OLEMISC_WANTSTOMENUMERGE: int = 1048576
export const OLEMISC_SUPPORTSMULTILEVELUNDO: int = 2097152
export const OLECLOSE_SAVEIFDIRTY: int = 0
export const OLECLOSE_NOSAVE: int = 1
export const OLECLOSE_PROMPTSAVE: int = 2
export const OLERENDER_NONE: int = 0
export const OLERENDER_DRAW: int = 1
export const OLERENDER_FORMAT: int = 2
export const OLERENDER_ASIS: int = 3
export const OLEUPDATE_ALWAYS: int = 1
export const OLEUPDATE_ONCALL: int = 3
export const OLELINKBIND_EVENIFCLASSDIFF: int = 1
export const BINDSPEED_INDEFINITE: int = 1
export const BINDSPEED_MODERATE: int = 2
export const BINDSPEED_IMMEDIATE: int = 3
export const OLECONTF_EMBEDDINGS: int = 1
export const OLECONTF_LINKS: int = 2
export const OLECONTF_OTHERS: int = 4
export const OLECONTF_ONLYUSER: int = 8
export const OLECONTF_ONLYIFRUNNING: int = 16
export const OLEVERBATTRIB_NEVERDIRTIES: int = 1
export const OLEVERBATTRIB_ONCONTAINERMENU: int = 2
export const NODE_INVALID: int = 0
export const NODE_ELEMENT: int = ((NODE_INVALID + 1))
export const NODE_ATTRIBUTE: int = ((NODE_ELEMENT + 1))
export const NODE_TEXT: int = ((NODE_ATTRIBUTE + 1))
export const NODE_CDATA_SECTION: int = ((NODE_TEXT + 1))
export const NODE_ENTITY_REFERENCE: int = ((NODE_CDATA_SECTION + 1))
export const NODE_ENTITY: int = ((NODE_ENTITY_REFERENCE + 1))
export const NODE_PROCESSING_INSTRUCTION: int = ((NODE_ENTITY + 1))
export const NODE_COMMENT: int = ((NODE_PROCESSING_INSTRUCTION + 1))
export const NODE_DOCUMENT: int = ((NODE_COMMENT + 1))
export const NODE_DOCUMENT_TYPE: int = ((NODE_DOCUMENT + 1))
export const NODE_DOCUMENT_FRAGMENT: int = ((NODE_DOCUMENT_TYPE + 1))
export const NODE_NOTATION: int = ((NODE_DOCUMENT_FRAGMENT + 1))
export const XMLELEMTYPE_ELEMENT: int = 0
export const XMLELEMTYPE_TEXT: int = ((XMLELEMTYPE_ELEMENT + 1))
export const XMLELEMTYPE_COMMENT: int = ((XMLELEMTYPE_TEXT + 1))
export const XMLELEMTYPE_DOCUMENT: int = ((XMLELEMTYPE_COMMENT + 1))
export const XMLELEMTYPE_DTD: int = ((XMLELEMTYPE_DOCUMENT + 1))
export const XMLELEMTYPE_PI: int = ((XMLELEMTYPE_DTD + 1))
export const XMLELEMTYPE_OTHER: int = ((XMLELEMTYPE_PI + 1))
export const IE_EPM_OBJECT_EVENT: int = 0
export const IE_EPM_OBJECT_MUTEX: int = IE_EPM_OBJECT_EVENT + 1
export const IE_EPM_OBJECT_SEMAPHORE: int = IE_EPM_OBJECT_MUTEX + 1
export const IE_EPM_OBJECT_SHARED_MEMORY: int = IE_EPM_OBJECT_SEMAPHORE + 1
export const IE_EPM_OBJECT_WAITABLE_TIMER: int = IE_EPM_OBJECT_SHARED_MEMORY + 1
export const IE_EPM_OBJECT_FILE: int = IE_EPM_OBJECT_WAITABLE_TIMER + 1
export const IE_EPM_OBJECT_NAMED_PIPE: int = IE_EPM_OBJECT_FILE + 1
export const IE_EPM_OBJECT_REGISTRY: int = IE_EPM_OBJECT_NAMED_PIPE + 1
export const MIMETYPEPROP: int = 0
export const USE_SRC_URL: int = 1
export const CLASSIDPROP: int = 2
export const TRUSTEDDOWNLOADPROP: int = 3
export const POPUPLEVELPROP: int = 4
export const BINDVERB_GET: int = 0
export const BINDVERB_POST: int = 1
export const BINDVERB_PUT: int = 2
export const BINDVERB_CUSTOM: int = 3
export const BINDVERB_RESERVED1: int = 4
export const BINDINFOF_URLENCODESTGMEDDATA: int = 1
export const BINDINFOF_URLENCODEDEXTRAINFO: int = 2
export const BINDF_ASYNCHRONOUS: int = 1
export const BINDF_ASYNCSTORAGE: int = 2
export const BINDF_NOPROGRESSIVERENDERING: int = 4
export const BINDF_OFFLINEOPERATION: int = 8
export const BINDF_GETNEWESTVERSION: int = 16
export const BINDF_NOWRITECACHE: int = 32
export const BINDF_NEEDFILE: int = 64
export const BINDF_PULLDATA: int = 128
export const BINDF_IGNORESECURITYPROBLEM: int = 256
export const BINDF_RESYNCHRONIZE: int = 512
export const BINDF_HYPERLINK: int = 1024
export const BINDF_NO_UI: int = 2048
export const BINDF_SILENTOPERATION: int = 4096
export const BINDF_PRAGMA_NO_CACHE: int = 8192
export const BINDF_GETCLASSOBJECT: int = 16384
export const BINDF_RESERVED_1: int = 32768
export const BINDF_FREE_THREADED: int = 65536
export const BINDF_DIRECT_READ: int = 131072
export const BINDF_FORMS_SUBMIT: int = 262144
export const BINDF_GETFROMCACHE_IF_NET_FAIL: int = 524288
export const BINDF_FROMURLMON: int = 1048576
export const BINDF_FWD_BACK: int = 2097152
export const BINDF_PREFERDEFAULTHANDLER: int = 4194304
export const BINDF_ENFORCERESTRICTED: int = 8388608
export const BINDF_RESERVED_2: int = BINDF_ENFORCERESTRICTED + 1
export const BINDF_RESERVED_3: int = 16777216
export const BINDF_RESERVED_4: int = 33554432
export const BINDF_RESERVED_5: int = 67108864
export const BINDF_RESERVED_6: int = 134217728
export const BINDF_RESERVED_7: int = 1073741824
export const BINDF_RESERVED_8: int = 536870912
export const URL_ENCODING_NONE: int = 0
export const URL_ENCODING_ENABLE_UTF8: int = 268435456
export const URL_ENCODING_DISABLE_UTF8: int = 536870912
export const BINDINFO_OPTIONS_WININETFLAG: int = 65536
export const BINDINFO_OPTIONS_ENABLE_UTF8: int = 131072
export const BINDINFO_OPTIONS_DISABLE_UTF8: int = 262144
export const BINDINFO_OPTIONS_USE_IE_ENCODING: int = 524288
export const BINDINFO_OPTIONS_BINDTOOBJECT: int = 1048576
export const BINDINFO_OPTIONS_SECURITYOPTOUT: int = 2097152
export const BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN: int = 4194304
export const BINDINFO_OPTIONS_USEBINDSTRINGCREDS: int = 8388608
export const BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS: int = 16777216
export const BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE: int = 33554432
export const BINDINFO_WPC_DOWNLOADBLOCKED: int = 134217728
export const BINDINFO_WPC_LOGGING_ENABLED: int = 268435456
export const BINDINFO_OPTIONS_ALLOWCONNECTDATA: int = 536870912
export const BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS: int = 1073741824
export const BINDINFO_OPTIONS_SHDOCVW_NAVIGATE: int = BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS + 1
export const BSCF_FIRSTDATANOTIFICATION: int = 1
export const BSCF_INTERMEDIATEDATANOTIFICATION: int = 2
export const BSCF_LASTDATANOTIFICATION: int = 4
export const BSCF_DATAFULLYAVAILABLE: int = 8
export const BSCF_AVAILABLEDATASIZEUNKNOWN: int = 16
export const BSCF_SKIPDRAINDATAFORFILEURLS: int = 32
export const BSCF_64BITLENGTHDOWNLOAD: int = 64
export const BINDSTATUS_FINDINGRESOURCE: int = 1
export const BINDSTATUS_CONNECTING: int = ((BINDSTATUS_FINDINGRESOURCE + 1))
export const BINDSTATUS_REDIRECTING: int = ((BINDSTATUS_CONNECTING + 1))
export const BINDSTATUS_BEGINDOWNLOADDATA: int = ((BINDSTATUS_REDIRECTING + 1))
export const BINDSTATUS_DOWNLOADINGDATA: int = ((BINDSTATUS_BEGINDOWNLOADDATA + 1))
export const BINDSTATUS_ENDDOWNLOADDATA: int = ((BINDSTATUS_DOWNLOADINGDATA + 1))
export const BINDSTATUS_BEGINDOWNLOADCOMPONENTS: int = ((BINDSTATUS_ENDDOWNLOADDATA + 1))
export const BINDSTATUS_INSTALLINGCOMPONENTS: int = ((BINDSTATUS_BEGINDOWNLOADCOMPONENTS + 1))
export const BINDSTATUS_ENDDOWNLOADCOMPONENTS: int = ((BINDSTATUS_INSTALLINGCOMPONENTS + 1))
export const BINDSTATUS_USINGCACHEDCOPY: int = ((BINDSTATUS_ENDDOWNLOADCOMPONENTS + 1))
export const BINDSTATUS_SENDINGREQUEST: int = ((BINDSTATUS_USINGCACHEDCOPY + 1))
export const BINDSTATUS_CLASSIDAVAILABLE: int = ((BINDSTATUS_SENDINGREQUEST + 1))
export const BINDSTATUS_MIMETYPEAVAILABLE: int = ((BINDSTATUS_CLASSIDAVAILABLE + 1))
export const BINDSTATUS_CACHEFILENAMEAVAILABLE: int = ((BINDSTATUS_MIMETYPEAVAILABLE + 1))
export const BINDSTATUS_BEGINSYNCOPERATION: int = ((BINDSTATUS_CACHEFILENAMEAVAILABLE + 1))
export const BINDSTATUS_ENDSYNCOPERATION: int = ((BINDSTATUS_BEGINSYNCOPERATION + 1))
export const BINDSTATUS_BEGINUPLOADDATA: int = ((BINDSTATUS_ENDSYNCOPERATION + 1))
export const BINDSTATUS_UPLOADINGDATA: int = ((BINDSTATUS_BEGINUPLOADDATA + 1))
export const BINDSTATUS_ENDUPLOADDATA: int = ((BINDSTATUS_UPLOADINGDATA + 1))
export const BINDSTATUS_PROTOCOLCLASSID: int = ((BINDSTATUS_ENDUPLOADDATA + 1))
export const BINDSTATUS_ENCODING: int = ((BINDSTATUS_PROTOCOLCLASSID + 1))
export const BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE: int = ((BINDSTATUS_ENCODING + 1))
export const BINDSTATUS_CLASSINSTALLLOCATION: int = ((BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE + 1))
export const BINDSTATUS_DECODING: int = ((BINDSTATUS_CLASSINSTALLLOCATION + 1))
export const BINDSTATUS_LOADINGMIMEHANDLER: int = ((BINDSTATUS_DECODING + 1))
export const BINDSTATUS_CONTENTDISPOSITIONATTACH: int = ((BINDSTATUS_LOADINGMIMEHANDLER + 1))
export const BINDSTATUS_FILTERREPORTMIMETYPE: int = ((BINDSTATUS_CONTENTDISPOSITIONATTACH + 1))
export const BINDSTATUS_CLSIDCANINSTANTIATE: int = ((BINDSTATUS_FILTERREPORTMIMETYPE + 1))
export const BINDSTATUS_IUNKNOWNAVAILABLE: int = ((BINDSTATUS_CLSIDCANINSTANTIATE + 1))
export const BINDSTATUS_DIRECTBIND: int = ((BINDSTATUS_IUNKNOWNAVAILABLE + 1))
export const BINDSTATUS_RAWMIMETYPE: int = ((BINDSTATUS_DIRECTBIND + 1))
export const BINDSTATUS_PROXYDETECTING: int = ((BINDSTATUS_RAWMIMETYPE + 1))
export const BINDSTATUS_ACCEPTRANGES: int = ((BINDSTATUS_PROXYDETECTING + 1))
export const BINDSTATUS_COOKIE_SENT: int = ((BINDSTATUS_ACCEPTRANGES + 1))
export const BINDSTATUS_COMPACT_POLICY_RECEIVED: int = ((BINDSTATUS_COOKIE_SENT + 1))
export const BINDSTATUS_COOKIE_SUPPRESSED: int = ((BINDSTATUS_COMPACT_POLICY_RECEIVED + 1))
export const BINDSTATUS_COOKIE_STATE_UNKNOWN: int = ((BINDSTATUS_COOKIE_SUPPRESSED + 1))
export const BINDSTATUS_COOKIE_STATE_ACCEPT: int = ((BINDSTATUS_COOKIE_STATE_UNKNOWN + 1))
export const BINDSTATUS_COOKIE_STATE_REJECT: int = ((BINDSTATUS_COOKIE_STATE_ACCEPT + 1))
export const BINDSTATUS_COOKIE_STATE_PROMPT: int = ((BINDSTATUS_COOKIE_STATE_REJECT + 1))
export const BINDSTATUS_COOKIE_STATE_LEASH: int = ((BINDSTATUS_COOKIE_STATE_PROMPT + 1))
export const BINDSTATUS_COOKIE_STATE_DOWNGRADE: int = ((BINDSTATUS_COOKIE_STATE_LEASH + 1))
export const BINDSTATUS_POLICY_HREF: int = ((BINDSTATUS_COOKIE_STATE_DOWNGRADE + 1))
export const BINDSTATUS_P3P_HEADER: int = ((BINDSTATUS_POLICY_HREF + 1))
export const BINDSTATUS_SESSION_COOKIE_RECEIVED: int = ((BINDSTATUS_P3P_HEADER + 1))
export const BINDSTATUS_PERSISTENT_COOKIE_RECEIVED: int = ((BINDSTATUS_SESSION_COOKIE_RECEIVED + 1))
export const BINDSTATUS_SESSION_COOKIES_ALLOWED: int = ((BINDSTATUS_PERSISTENT_COOKIE_RECEIVED + 1))
export const BINDSTATUS_CACHECONTROL: int = ((BINDSTATUS_SESSION_COOKIES_ALLOWED + 1))
export const BINDSTATUS_CONTENTDISPOSITIONFILENAME: int = ((BINDSTATUS_CACHECONTROL + 1))
export const BINDSTATUS_MIMETEXTPLAINMISMATCH: int = ((BINDSTATUS_CONTENTDISPOSITIONFILENAME + 1))
export const BINDSTATUS_PUBLISHERAVAILABLE: int = ((BINDSTATUS_MIMETEXTPLAINMISMATCH + 1))
export const BINDSTATUS_DISPLAYNAMEAVAILABLE: int = ((BINDSTATUS_PUBLISHERAVAILABLE + 1))
export const BINDSTATUS_SSLUX_NAVBLOCKED: int = ((BINDSTATUS_DISPLAYNAMEAVAILABLE + 1))
export const BINDSTATUS_SERVER_MIMETYPEAVAILABLE: int = ((BINDSTATUS_SSLUX_NAVBLOCKED + 1))
export const BINDSTATUS_SNIFFED_CLASSIDAVAILABLE: int = ((BINDSTATUS_SERVER_MIMETYPEAVAILABLE + 1))
export const BINDSTATUS_64BIT_PROGRESS: int = ((BINDSTATUS_SNIFFED_CLASSIDAVAILABLE + 1))
export const BINDSTATUS_LAST: int = BINDSTATUS_64BIT_PROGRESS
export const BINDSTATUS_RESERVED_0: int = ((BINDSTATUS_LAST + 1))
export const BINDSTATUS_RESERVED_1: int = ((BINDSTATUS_RESERVED_0 + 1))
export const BINDSTATUS_RESERVED_2: int = ((BINDSTATUS_RESERVED_1 + 1))
export const BINDSTATUS_RESERVED_3: int = ((BINDSTATUS_RESERVED_2 + 1))
export const BINDSTATUS_RESERVED_4: int = ((BINDSTATUS_RESERVED_3 + 1))
export const BINDSTATUS_RESERVED_5: int = ((BINDSTATUS_RESERVED_4 + 1))
export const BINDSTATUS_RESERVED_6: int = ((BINDSTATUS_RESERVED_5 + 1))
export const BINDSTATUS_RESERVED_7: int = ((BINDSTATUS_RESERVED_6 + 1))
export const BINDSTATUS_RESERVED_8: int = ((BINDSTATUS_RESERVED_7 + 1))
export const BINDSTATUS_RESERVED_9: int = ((BINDSTATUS_RESERVED_8 + 1))
export const BINDSTATUS_RESERVED_A: int = ((BINDSTATUS_RESERVED_9 + 1))
export const BINDSTATUS_RESERVED_B: int = ((BINDSTATUS_RESERVED_A + 1))
export const BINDSTATUS_RESERVED_C: int = ((BINDSTATUS_RESERVED_B + 1))
export const BINDSTATUS_RESERVED_D: int = ((BINDSTATUS_RESERVED_C + 1))
export const BINDSTATUS_RESERVED_E: int = ((BINDSTATUS_RESERVED_D + 1))
export const BINDSTATUS_RESERVED_F: int = ((BINDSTATUS_RESERVED_E + 1))
export const BINDSTATUS_RESERVED_10: int = ((BINDSTATUS_RESERVED_F + 1))
export const BINDSTATUS_RESERVED_11: int = ((BINDSTATUS_RESERVED_10 + 1))
export const BINDSTATUS_RESERVED_12: int = ((BINDSTATUS_RESERVED_11 + 1))
export const BINDSTATUS_RESERVED_13: int = ((BINDSTATUS_RESERVED_12 + 1))
export const BINDSTATUS_LAST_PRIVATE: int = BINDSTATUS_RESERVED_13
export const BINDF2_DISABLEBASICOVERHTTP: int = 1
export const BINDF2_DISABLEAUTOCOOKIEHANDLING: int = 2
export const BINDF2_READ_DATA_GREATER_THAN_4GB: int = 4
export const BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID: int = 8
export const BINDF2_SETDOWNLOADMODE: int = 32
export const BINDF2_DISABLE_HTTP_REDIRECT_CACHING: int = 64
export const BINDF2_KEEP_CALLBACK_MODULE_LOADED: int = 128
export const BINDF2_ALLOW_PROXY_CRED_PROMPT: int = 256
export const BINDF2_RESERVED_17: int = 512
export const BINDF2_RESERVED_16: int = 1024
export const BINDF2_RESERVED_15: int = 2048
export const BINDF2_RESERVED_14: int = 4096
export const BINDF2_RESERVED_13: int = 8192
export const BINDF2_RESERVED_12: int = 16384
export const BINDF2_RESERVED_11: int = 32768
export const BINDF2_RESERVED_10: int = 65536
export const BINDF2_RESERVED_F: int = 131072
export const BINDF2_RESERVED_E: int = 262144
export const BINDF2_RESERVED_D: int = 524288
export const BINDF2_RESERVED_C: int = 1048576
export const BINDF2_RESERVED_B: int = 2097152
export const BINDF2_RESERVED_A: int = 4194304
export const BINDF2_RESERVED_9: int = 8388608
export const BINDF2_RESERVED_8: int = 16777216
export const BINDF2_RESERVED_7: int = 33554432
export const BINDF2_RESERVED_6: int = 67108864
export const BINDF2_RESERVED_5: int = 134217728
export const BINDF2_RESERVED_4: int = 268435456
export const BINDF2_RESERVED_3: int = 536870912
export const BINDF2_RESERVED_2: int = 1073741824
export const BINDF2_RESERVED_1: int = BINDF2_RESERVED_2 + 1
export const AUTHENTICATEF_PROXY: int = 1
export const AUTHENTICATEF_BASIC: int = 2
export const AUTHENTICATEF_HTTP: int = 4
export const CIP_DISK_FULL: int = 0
export const CIP_ACCESS_DENIED: int = ((CIP_DISK_FULL + 1))
export const CIP_NEWER_VERSION_EXISTS: int = ((CIP_ACCESS_DENIED + 1))
export const CIP_OLDER_VERSION_EXISTS: int = ((CIP_NEWER_VERSION_EXISTS + 1))
export const CIP_NAME_CONFLICT: int = ((CIP_OLDER_VERSION_EXISTS + 1))
export const CIP_TRUST_VERIFICATION_COMPONENT_MISSING: int = ((CIP_NAME_CONFLICT + 1))
export const CIP_EXE_SELF_REGISTERATION_TIMEOUT: int = ((CIP_TRUST_VERIFICATION_COMPONENT_MISSING + 1))
export const CIP_UNSAFE_TO_ABORT: int = ((CIP_EXE_SELF_REGISTERATION_TIMEOUT + 1))
export const CIP_NEED_REBOOT: int = ((CIP_UNSAFE_TO_ABORT + 1))
export const CIP_NEED_REBOOT_UI_PERMISSION: int = ((CIP_NEED_REBOOT + 1))
export const Uri_PROPERTY_ABSOLUTE_URI: int = 0
export const Uri_PROPERTY_STRING_START: int = Uri_PROPERTY_ABSOLUTE_URI
export const Uri_PROPERTY_AUTHORITY: int = 1
export const Uri_PROPERTY_DISPLAY_URI: int = 2
export const Uri_PROPERTY_DOMAIN: int = 3
export const Uri_PROPERTY_EXTENSION: int = 4
export const Uri_PROPERTY_FRAGMENT: int = 5
export const Uri_PROPERTY_HOST: int = 6
export const Uri_PROPERTY_PASSWORD: int = 7
export const Uri_PROPERTY_PATH: int = 8
export const Uri_PROPERTY_PATH_AND_QUERY: int = 9
export const Uri_PROPERTY_QUERY: int = 10
export const Uri_PROPERTY_RAW_URI: int = 11
export const Uri_PROPERTY_SCHEME_NAME: int = 12
export const Uri_PROPERTY_USER_INFO: int = 13
export const Uri_PROPERTY_USER_NAME: int = 14
export const Uri_PROPERTY_STRING_LAST: int = Uri_PROPERTY_USER_NAME
export const Uri_PROPERTY_HOST_TYPE: int = 15
export const Uri_PROPERTY_DWORD_START: int = Uri_PROPERTY_HOST_TYPE
export const Uri_PROPERTY_PORT: int = 16
export const Uri_PROPERTY_SCHEME: int = 17
export const Uri_PROPERTY_ZONE: int = 18
export const Uri_PROPERTY_DWORD_LAST: int = Uri_PROPERTY_ZONE
export const Uri_HOST_UNKNOWN: int = 0
export const Uri_HOST_DNS: int = ((Uri_HOST_UNKNOWN + 1))
export const Uri_HOST_IPV4: int = ((Uri_HOST_DNS + 1))
export const Uri_HOST_IPV6: int = ((Uri_HOST_IPV4 + 1))
export const Uri_HOST_IDN: int = ((Uri_HOST_IPV6 + 1))
export const BINDSTRING_HEADERS: int = 1
export const BINDSTRING_ACCEPT_MIMES: int = ((BINDSTRING_HEADERS + 1))
export const BINDSTRING_EXTRA_URL: int = ((BINDSTRING_ACCEPT_MIMES + 1))
export const BINDSTRING_LANGUAGE: int = ((BINDSTRING_EXTRA_URL + 1))
export const BINDSTRING_USERNAME: int = ((BINDSTRING_LANGUAGE + 1))
export const BINDSTRING_PASSWORD: int = ((BINDSTRING_USERNAME + 1))
export const BINDSTRING_UA_PIXELS: int = ((BINDSTRING_PASSWORD + 1))
export const BINDSTRING_UA_COLOR: int = ((BINDSTRING_UA_PIXELS + 1))
export const BINDSTRING_OS: int = ((BINDSTRING_UA_COLOR + 1))
export const BINDSTRING_USER_AGENT: int = ((BINDSTRING_OS + 1))
export const BINDSTRING_ACCEPT_ENCODINGS: int = ((BINDSTRING_USER_AGENT + 1))
export const BINDSTRING_POST_COOKIE: int = ((BINDSTRING_ACCEPT_ENCODINGS + 1))
export const BINDSTRING_POST_DATA_MIME: int = ((BINDSTRING_POST_COOKIE + 1))
export const BINDSTRING_URL: int = ((BINDSTRING_POST_DATA_MIME + 1))
export const BINDSTRING_IID: int = ((BINDSTRING_URL + 1))
export const BINDSTRING_FLAG_BIND_TO_OBJECT: int = ((BINDSTRING_IID + 1))
export const BINDSTRING_PTR_BIND_CONTEXT: int = ((BINDSTRING_FLAG_BIND_TO_OBJECT + 1))
export const BINDSTRING_XDR_ORIGIN: int = ((BINDSTRING_PTR_BIND_CONTEXT + 1))
export const BINDSTRING_DOWNLOADPATH: int = ((BINDSTRING_XDR_ORIGIN + 1))
export const BINDSTRING_ROOTDOC_URL: int = ((BINDSTRING_DOWNLOADPATH + 1))
export const BINDSTRING_INITIAL_FILENAME: int = ((BINDSTRING_ROOTDOC_URL + 1))
export const BINDSTRING_PROXY_USERNAME: int = ((BINDSTRING_INITIAL_FILENAME + 1))
export const BINDSTRING_PROXY_PASSWORD: int = ((BINDSTRING_PROXY_USERNAME + 1))
export const BINDSTRING_ENTERPRISE_ID: int = ((BINDSTRING_PROXY_PASSWORD + 1))
export const BINDSTRING_DOC_URL: int = ((BINDSTRING_ENTERPRISE_ID + 1))
export const BINDSTRING_SAMESITE_COOKIE_LEVEL: int = ((BINDSTRING_DOC_URL + 1))
export const PI_PARSE_URL: int = 1
export const PI_FILTER_MODE: int = 2
export const PI_FORCE_ASYNC: int = 4
export const PI_USE_WORKERTHREAD: int = 8
export const PI_MIMEVERIFICATION: int = 16
export const PI_CLSIDLOOKUP: int = 32
export const PI_DATAPROGRESS: int = 64
export const PI_SYNCHRONOUS: int = 128
export const PI_APARTMENTTHREADED: int = 256
export const PI_CLASSINSTALL: int = 512
export const PI_PASSONBINDCTX: int = 8192
export const PI_NOMIMEHANDLER: int = 32768
export const PI_LOADAPPDIRECT: int = 16384
export const PD_FORCE_SWITCH: int = 65536
export const PI_PREFERDEFAULTHANDLER: int = 131072
export const OIBDG_APARTMENTTHREADED: int = 256
export const OIBDG_DATAONLY: int = 4096
export const PARSE_CANONICALIZE: int = 1
export const PARSE_FRIENDLY: int = ((PARSE_CANONICALIZE + 1))
export const PARSE_SECURITY_URL: int = ((PARSE_FRIENDLY + 1))
export const PARSE_ROOTDOCUMENT: int = ((PARSE_SECURITY_URL + 1))
export const PARSE_DOCUMENT: int = ((PARSE_ROOTDOCUMENT + 1))
export const PARSE_ANCHOR: int = ((PARSE_DOCUMENT + 1))
export const PARSE_ENCODE_IS_UNESCAPE: int = ((PARSE_ANCHOR + 1))
export const PARSE_DECODE_IS_ESCAPE: int = ((PARSE_ENCODE_IS_UNESCAPE + 1))
export const PARSE_PATH_FROM_URL: int = ((PARSE_DECODE_IS_ESCAPE + 1))
export const PARSE_URL_FROM_PATH: int = ((PARSE_PATH_FROM_URL + 1))
export const PARSE_MIME: int = ((PARSE_URL_FROM_PATH + 1))
export const PARSE_SERVER: int = ((PARSE_MIME + 1))
export const PARSE_SCHEMA: int = ((PARSE_SERVER + 1))
export const PARSE_SITE: int = ((PARSE_SCHEMA + 1))
export const PARSE_DOMAIN: int = ((PARSE_SITE + 1))
export const PARSE_LOCATION: int = ((PARSE_DOMAIN + 1))
export const PARSE_SECURITY_DOMAIN: int = ((PARSE_LOCATION + 1))
export const PARSE_ESCAPE: int = ((PARSE_SECURITY_DOMAIN + 1))
export const PARSE_UNESCAPE: int = ((PARSE_ESCAPE + 1))
export const PSU_DEFAULT: int = 1
export const PSU_SECURITY_URL_ONLY: int = ((PSU_DEFAULT + 1))
export const QUERY_EXPIRATION_DATE: int = 1
export const QUERY_TIME_OF_LAST_CHANGE: int = ((QUERY_EXPIRATION_DATE + 1))
export const QUERY_CONTENT_ENCODING: int = ((QUERY_TIME_OF_LAST_CHANGE + 1))
export const QUERY_CONTENT_TYPE: int = ((QUERY_CONTENT_ENCODING + 1))
export const QUERY_REFRESH: int = ((QUERY_CONTENT_TYPE + 1))
export const QUERY_RECOMBINE: int = ((QUERY_REFRESH + 1))
export const QUERY_CAN_NAVIGATE: int = ((QUERY_RECOMBINE + 1))
export const QUERY_USES_NETWORK: int = ((QUERY_CAN_NAVIGATE + 1))
export const QUERY_IS_CACHED: int = ((QUERY_USES_NETWORK + 1))
export const QUERY_IS_INSTALLEDENTRY: int = ((QUERY_IS_CACHED + 1))
export const QUERY_IS_CACHED_OR_MAPPED: int = ((QUERY_IS_INSTALLEDENTRY + 1))
export const QUERY_USES_CACHE: int = ((QUERY_IS_CACHED_OR_MAPPED + 1))
export const QUERY_IS_SECURE: int = ((QUERY_USES_CACHE + 1))
export const QUERY_IS_SAFE: int = ((QUERY_IS_SECURE + 1))
export const QUERY_USES_HISTORYFOLDER: int = ((QUERY_IS_SAFE + 1))
export const QUERY_IS_CACHED_AND_USABLE_OFFLINE: int = ((QUERY_USES_HISTORYFOLDER + 1))
export const FEATURE_OBJECT_CACHING: int = 0
export const FEATURE_ZONE_ELEVATION: int = ((FEATURE_OBJECT_CACHING + 1))
export const FEATURE_MIME_HANDLING: int = ((FEATURE_ZONE_ELEVATION + 1))
export const FEATURE_MIME_SNIFFING: int = ((FEATURE_MIME_HANDLING + 1))
export const FEATURE_WINDOW_RESTRICTIONS: int = ((FEATURE_MIME_SNIFFING + 1))
export const FEATURE_WEBOC_POPUPMANAGEMENT: int = ((FEATURE_WINDOW_RESTRICTIONS + 1))
export const FEATURE_BEHAVIORS: int = ((FEATURE_WEBOC_POPUPMANAGEMENT + 1))
export const FEATURE_DISABLE_MK_PROTOCOL: int = ((FEATURE_BEHAVIORS + 1))
export const FEATURE_LOCALMACHINE_LOCKDOWN: int = ((FEATURE_DISABLE_MK_PROTOCOL + 1))
export const FEATURE_SECURITYBAND: int = ((FEATURE_LOCALMACHINE_LOCKDOWN + 1))
export const FEATURE_RESTRICT_ACTIVEXINSTALL: int = ((FEATURE_SECURITYBAND + 1))
export const FEATURE_VALIDATE_NAVIGATE_URL: int = ((FEATURE_RESTRICT_ACTIVEXINSTALL + 1))
export const FEATURE_RESTRICT_FILEDOWNLOAD: int = ((FEATURE_VALIDATE_NAVIGATE_URL + 1))
export const FEATURE_ADDON_MANAGEMENT: int = ((FEATURE_RESTRICT_FILEDOWNLOAD + 1))
export const FEATURE_PROTOCOL_LOCKDOWN: int = ((FEATURE_ADDON_MANAGEMENT + 1))
export const FEATURE_HTTP_USERNAME_PASSWORD_DISABLE: int = ((FEATURE_PROTOCOL_LOCKDOWN + 1))
export const FEATURE_SAFE_BINDTOOBJECT: int = ((FEATURE_HTTP_USERNAME_PASSWORD_DISABLE + 1))
export const FEATURE_UNC_SAVEDFILECHECK: int = ((FEATURE_SAFE_BINDTOOBJECT + 1))
export const FEATURE_GET_URL_DOM_FILEPATH_UNENCODED: int = ((FEATURE_UNC_SAVEDFILECHECK + 1))
export const FEATURE_TABBED_BROWSING: int = ((FEATURE_GET_URL_DOM_FILEPATH_UNENCODED + 1))
export const FEATURE_SSLUX: int = ((FEATURE_TABBED_BROWSING + 1))
export const FEATURE_DISABLE_NAVIGATION_SOUNDS: int = ((FEATURE_SSLUX + 1))
export const FEATURE_DISABLE_LEGACY_COMPRESSION: int = ((FEATURE_DISABLE_NAVIGATION_SOUNDS + 1))
export const FEATURE_FORCE_ADDR_AND_STATUS: int = ((FEATURE_DISABLE_LEGACY_COMPRESSION + 1))
export const FEATURE_XMLHTTP: int = ((FEATURE_FORCE_ADDR_AND_STATUS + 1))
export const FEATURE_DISABLE_TELNET_PROTOCOL: int = ((FEATURE_XMLHTTP + 1))
export const FEATURE_FEEDS: int = ((FEATURE_DISABLE_TELNET_PROTOCOL + 1))
export const FEATURE_BLOCK_INPUT_PROMPTS: int = ((FEATURE_FEEDS + 1))
export const FEATURE_ENTRY_COUNT: int = ((FEATURE_BLOCK_INPUT_PROMPTS + 1))
export const PUAF_DEFAULT: int = 0
export const PUAF_NOUI: int = 1
export const PUAF_ISFILE: int = 2
export const PUAF_WARN_IF_DENIED: int = 4
export const PUAF_FORCEUI_FOREGROUND: int = 8
export const PUAF_CHECK_TIFS: int = 16
export const PUAF_DONTCHECKBOXINDIALOG: int = 32
export const PUAF_TRUSTED: int = 64
export const PUAF_ACCEPT_WILDCARD_SCHEME: int = 128
export const PUAF_ENFORCERESTRICTED: int = 256
export const PUAF_NOSAVEDFILECHECK: int = 512
export const PUAF_REQUIRESAVEDFILECHECK: int = 1024
export const PUAF_DONT_USE_CACHE: int = 4096
export const PUAF_RESERVED1: int = 8192
export const PUAF_RESERVED2: int = 16384
export const PUAF_LMZ_UNLOCKED: int = 65536
export const PUAF_LMZ_LOCKED: int = 131072
export const PUAF_DEFAULTZONEPOL: int = 262144
export const PUAF_NPL_USE_LOCKED_IF_RESTRICTED: int = 524288
export const PUAF_NOUIIFLOCKED: int = 1048576
export const PUAF_DRAGPROTOCOLCHECK: int = 2097152
export const PUAFOUT_DEFAULT: int = 0
export const PUAFOUT_ISLOCKZONEPOLICY: int = 1
export const SZM_CREATE: int = 0
export const SZM_DELETE: int = 1
export const URLZONE_INVALID: int = (- 1)
export const URLZONE_PREDEFINED_MIN: int = 0
export const URLZONE_LOCAL_MACHINE: int = 0
export const URLZONE_INTRANET: int = ((URLZONE_LOCAL_MACHINE + 1))
export const URLZONE_TRUSTED: int = ((URLZONE_INTRANET + 1))
export const URLZONE_INTERNET: int = ((URLZONE_TRUSTED + 1))
export const URLZONE_UNTRUSTED: int = ((URLZONE_INTERNET + 1))
export const URLZONE_PREDEFINED_MAX: int = 999
export const URLZONE_USER_MIN: int = 1000
export const URLZONE_USER_MAX: int = 10000
export const URLTEMPLATE_CUSTOM: int = 0
export const URLTEMPLATE_PREDEFINED_MIN: int = 65536
export const URLTEMPLATE_LOW: int = 65536
export const URLTEMPLATE_MEDLOW: int = 66816
export const URLTEMPLATE_MEDIUM: int = 69632
export const URLTEMPLATE_MEDHIGH: int = 70912
export const URLTEMPLATE_HIGH: int = 73728
export const URLTEMPLATE_PREDEFINED_MAX: int = 131072
export const MAX_ZONE_PATH: int = 260
export const MAX_ZONE_DESCRIPTION: int = 200
export const ZAFLAGS_CUSTOM_EDIT: int = 1
export const ZAFLAGS_ADD_SITES: int = 2
export const ZAFLAGS_REQUIRE_VERIFICATION: int = 4
export const ZAFLAGS_INCLUDE_PROXY_OVERRIDE: int = 8
export const ZAFLAGS_INCLUDE_INTRANET_SITES: int = 16
export const ZAFLAGS_NO_UI: int = 32
export const ZAFLAGS_SUPPORTS_VERIFICATION: int = 64
export const ZAFLAGS_UNC_AS_INTRANET: int = 128
export const ZAFLAGS_DETECT_INTRANET: int = 256
export const ZAFLAGS_USE_LOCKED_ZONES: int = 65536
export const ZAFLAGS_VERIFY_TEMPLATE_SETTINGS: int = 131072
export const ZAFLAGS_NO_CACHE: int = 262144
export const URLZONEREG_DEFAULT: int = 0
export const URLZONEREG_HKLM: int = ((URLZONEREG_DEFAULT + 1))
export const URLZONEREG_HKCU: int = ((URLZONEREG_HKLM + 1))
export const BINDHANDLETYPES_APPCACHE: int = 0
export const BINDHANDLETYPES_DEPENDENCY: int = 1
export const BINDHANDLETYPES_COUNT: int = ((BINDHANDLETYPES_DEPENDENCY + 1))
export const PIDMSI_STATUS_NORMAL: int = 0
export const PIDMSI_STATUS_NEW: int = ((PIDMSI_STATUS_NORMAL + 1))
export const PIDMSI_STATUS_PRELIM: int = ((PIDMSI_STATUS_NEW + 1))
export const PIDMSI_STATUS_DRAFT: int = ((PIDMSI_STATUS_PRELIM + 1))
export const PIDMSI_STATUS_INPROGRESS: int = ((PIDMSI_STATUS_DRAFT + 1))
export const PIDMSI_STATUS_EDIT: int = ((PIDMSI_STATUS_INPROGRESS + 1))
export const PIDMSI_STATUS_REVIEW: int = ((PIDMSI_STATUS_EDIT + 1))
export const PIDMSI_STATUS_PROOF: int = ((PIDMSI_STATUS_REVIEW + 1))
export const PIDMSI_STATUS_FINAL: int = ((PIDMSI_STATUS_PROOF + 1))
export const PIDMSI_STATUS_OTHER: int = 32767
export const REGKIND_DEFAULT: int = 0
export const REGKIND_REGISTER: int = REGKIND_DEFAULT + 1
export const REGKIND_NONE: int = REGKIND_REGISTER + 1
export const SC_ACTION_NONE: int = 0
export const SC_ACTION_RESTART: int = 1
export const SC_ACTION_REBOOT: int = 2
export const SC_ACTION_RUN_COMMAND: int = 3
export const SC_ACTION_OWN_RESTART: int = 4
export const SC_STATUS_PROCESS_INFO: int = 0
export const SC_ENUM_PROCESS_INFO: int = 0
export const SC_EVENT_DATABASE_CHANGE: int = 0
export const SC_EVENT_PROPERTY_CHANGE: int = SC_EVENT_DATABASE_CHANGE + 1
export const SC_EVENT_STATUS_CHANGE: int = SC_EVENT_PROPERTY_CHANGE + 1
export const ServiceRegistryStateParameters: int = 0
export const ServiceRegistryStatePersistent: int = 1
export const MaxServiceRegistryStateType: int = 2
export const ServiceDirectoryPersistentState: int = 0
export const ServiceDirectoryTypeMax: int = 1
export const AddrMode1616: int = 0
export const AddrMode1632: int = AddrMode1616 + 1
export const AddrModeReal: int = AddrMode1632 + 1
export const AddrModeFlat: int = AddrModeReal + 1
export const SymNone: int = 0
export const SymCoff: int = SymNone + 1
export const SymCv: int = SymCoff + 1
export const SymPdb: int = SymCv + 1
export const SymExport: int = SymPdb + 1
export const SymDeferred: int = SymExport + 1
export const SymSym: int = SymDeferred + 1
export const SymDia: int = SymSym + 1
export const SymVirtual: int = SymDia + 1
export const NumSymTypes: int = SymVirtual + 1
export const sevInfo: int = 0
export const sevProblem: int = sevInfo + 1
export const sevAttn: int = sevProblem + 1
export const sevFatal: int = sevAttn + 1
export const sevMax: int = sevFatal + 1
export const hdBase: int = 0
export const hdSym: int = hdBase + 1
export const hdSrc: int = hdSym + 1
export const hdMax: int = hdSrc + 1
export const SYMOPT_EX_DISABLEACCESSTIMEUPDATE: int = 0
export const SYMOPT_EX_LASTVALIDDEBUGDIRECTORY: int = SYMOPT_EX_DISABLEACCESSTIMEUPDATE + 1
export const SYMOPT_EX_MAX: int = SYMOPT_EX_LASTVALIDDEBUGDIRECTORY + 1
export const TI_GET_SYMTAG: int = 0
export const TI_GET_SYMNAME: int = TI_GET_SYMTAG + 1
export const TI_GET_LENGTH: int = TI_GET_SYMNAME + 1
export const TI_GET_TYPE: int = TI_GET_LENGTH + 1
export const TI_GET_TYPEID: int = TI_GET_TYPE + 1
export const TI_GET_BASETYPE: int = TI_GET_TYPEID + 1
export const TI_GET_ARRAYINDEXTYPEID: int = TI_GET_BASETYPE + 1
export const TI_FINDCHILDREN: int = TI_GET_ARRAYINDEXTYPEID + 1
export const TI_GET_DATAKIND: int = TI_FINDCHILDREN + 1
export const TI_GET_ADDRESSOFFSET: int = TI_GET_DATAKIND + 1
export const TI_GET_OFFSET: int = TI_GET_ADDRESSOFFSET + 1
export const TI_GET_VALUE: int = TI_GET_OFFSET + 1
export const TI_GET_COUNT: int = TI_GET_VALUE + 1
export const TI_GET_CHILDRENCOUNT: int = TI_GET_COUNT + 1
export const TI_GET_BITPOSITION: int = TI_GET_CHILDRENCOUNT + 1
export const TI_GET_VIRTUALBASECLASS: int = TI_GET_BITPOSITION + 1
export const TI_GET_VIRTUALTABLESHAPEID: int = TI_GET_VIRTUALBASECLASS + 1
export const TI_GET_VIRTUALBASEPOINTEROFFSET: int = TI_GET_VIRTUALTABLESHAPEID + 1
export const TI_GET_CLASSPARENTID: int = TI_GET_VIRTUALBASEPOINTEROFFSET + 1
export const TI_GET_NESTED: int = TI_GET_CLASSPARENTID + 1
export const TI_GET_SYMINDEX: int = TI_GET_NESTED + 1
export const TI_GET_LEXICALPARENT: int = TI_GET_SYMINDEX + 1
export const TI_GET_ADDRESS: int = TI_GET_LEXICALPARENT + 1
export const TI_GET_THISADJUST: int = TI_GET_ADDRESS + 1
export const TI_GET_UDTKIND: int = TI_GET_THISADJUST + 1
export const TI_IS_EQUIV_TO: int = TI_GET_UDTKIND + 1
export const TI_GET_CALLING_CONVENTION: int = TI_IS_EQUIV_TO + 1
export const TI_IS_CLOSE_EQUIV_TO: int = TI_GET_CALLING_CONVENTION + 1
export const TI_GTIEX_REQS_VALID: int = TI_IS_CLOSE_EQUIV_TO + 1
export const TI_GET_VIRTUALBASEOFFSET: int = TI_GTIEX_REQS_VALID + 1
export const TI_GET_VIRTUALBASEDISPINDEX: int = TI_GET_VIRTUALBASEOFFSET + 1
export const TI_GET_IS_REFERENCE: int = TI_GET_VIRTUALBASEDISPINDEX + 1
export const TI_GET_INDIRECTVIRTUALBASECLASS: int = TI_GET_IS_REFERENCE + 1
export const TI_GET_VIRTUALBASETABLETYPE: int = TI_GET_INDIRECTVIRTUALBASECLASS + 1
export const IMAGEHLP_SYMBOL_TYPE_INFO_MAX: int = TI_GET_VIRTUALBASETABLETYPE + 1
export const sfImage: int = 0
export const sfDbg: int = sfImage + 1
export const sfPdb: int = sfDbg + 1
export const sfMpd: int = sfPdb + 1
export const sfMax: int = sfMpd + 1
export const UnusedStream: int = 0
export const ReservedStream0: int = 1
export const ReservedStream1: int = 2
export const ThreadListStream: int = 3
export const ModuleListStream: int = 4
export const MemoryListStream: int = 5
export const ExceptionStream: int = 6
export const SystemInfoStream: int = 7
export const ThreadExListStream: int = 8
export const Memory64ListStream: int = 9
export const CommentStreamA: int = 10
export const CommentStreamW: int = 11
export const HandleDataStream: int = 12
export const FunctionTableStream: int = 13
export const UnloadedModuleListStream: int = 14
export const MiscInfoStream: int = 15
export const MemoryInfoListStream: int = 16
export const ThreadInfoListStream: int = 17
export const HandleOperationListStream: int = 18
export const TokenStream: int = 19
export const JavaScriptDataStream: int = 20
export const SystemMemoryInfoStream: int = 21
export const ProcessVmCountersStream: int = 22
export const IptTraceStream: int = 23
export const ThreadNamesStream: int = 24
export const ceStreamNull: int = 32768
export const ceStreamSystemInfo: int = 32769
export const ceStreamException: int = 32770
export const ceStreamModuleList: int = 32771
export const ceStreamProcessList: int = 32772
export const ceStreamThreadList: int = 32773
export const ceStreamThreadContextList: int = 32774
export const ceStreamThreadCallStackList: int = 32775
export const ceStreamMemoryVirtualList: int = 32776
export const ceStreamMemoryPhysicalList: int = 32777
export const ceStreamBucketParameters: int = 32778
export const ceStreamProcessModuleMap: int = 32779
export const ceStreamDiagnosisList: int = 32780
export const LastReservedStream: int = 65535
export const MiniHandleObjectInformationNone: int = 0
export const MiniThreadInformation1: int = MiniHandleObjectInformationNone + 1
export const MiniMutantInformation1: int = MiniThreadInformation1 + 1
export const MiniMutantInformation2: int = MiniMutantInformation1 + 1
export const MiniProcessInformation1: int = MiniMutantInformation2 + 1
export const MiniProcessInformation2: int = MiniProcessInformation1 + 1
export const MiniEventInformation1: int = MiniProcessInformation2 + 1
export const MiniSectionInformation1: int = MiniEventInformation1 + 1
export const MiniSemaphoreInformation1: int = MiniSectionInformation1 + 1
export const MiniHandleObjectInformationTypeMax: int = MiniSemaphoreInformation1 + 1
export const ModuleCallback: int = 0
export const ThreadCallback: int = ModuleCallback + 1
export const ThreadExCallback: int = ThreadCallback + 1
export const IncludeThreadCallback: int = ThreadExCallback + 1
export const IncludeModuleCallback: int = IncludeThreadCallback + 1
export const MemoryCallback: int = IncludeModuleCallback + 1
export const CancelCallback: int = MemoryCallback + 1
export const WriteKernelMinidumpCallback: int = CancelCallback + 1
export const KernelMinidumpStatusCallback: int = WriteKernelMinidumpCallback + 1
export const RemoveMemoryCallback: int = KernelMinidumpStatusCallback + 1
export const IncludeVmRegionCallback: int = RemoveMemoryCallback + 1
export const IoStartCallback: int = IncludeVmRegionCallback + 1
export const IoWriteAllCallback: int = IoStartCallback + 1
export const IoFinishCallback: int = IoWriteAllCallback + 1
export const ReadMemoryFailureCallback: int = IoFinishCallback + 1
export const SecondaryFlagsCallback: int = ReadMemoryFailureCallback + 1
export const IsProcessSnapshotCallback: int = SecondaryFlagsCallback + 1
export const VmStartCallback: int = IsProcessSnapshotCallback + 1
export const VmQueryCallback: int = VmStartCallback + 1
export const VmPreReadCallback: int = VmQueryCallback + 1
export const VmPostReadCallback: int = VmPreReadCallback + 1
export const ThreadWriteThread: int = 1
export const ThreadWriteStack: int = 2
export const ThreadWriteContext: int = 4
export const ThreadWriteBackingStore: int = 8
export const ThreadWriteInstructionWindow: int = 16
export const ThreadWriteThreadData: int = 32
export const ThreadWriteThreadInfo: int = 64
export const ModuleWriteModule: int = 1
export const ModuleWriteDataSeg: int = 2
export const ModuleWriteMiscRecord: int = 4
export const ModuleWriteCvRecord: int = 8
export const ModuleReferencedByMemory: int = 16
export const ModuleWriteTlsData: int = 32
export const ModuleWriteCodeSegs: int = 64
export const MiniDumpNormal: int = 0
export const MiniDumpWithDataSegs: int = 1
export const MiniDumpWithFullMemory: int = 2
export const MiniDumpWithHandleData: int = 4
export const MiniDumpFilterMemory: int = 8
export const MiniDumpScanMemory: int = 16
export const MiniDumpWithUnloadedModules: int = 32
export const MiniDumpWithIndirectlyReferencedMemory: int = 64
export const MiniDumpFilterModulePaths: int = 128
export const MiniDumpWithProcessThreadData: int = 256
export const MiniDumpWithPrivateReadWriteMemory: int = 512
export const MiniDumpWithoutOptionalData: int = 1024
export const MiniDumpWithFullMemoryInfo: int = 2048
export const MiniDumpWithThreadInfo: int = 4096
export const MiniDumpWithCodeSegs: int = 8192
export const MiniDumpWithoutAuxiliaryState: int = 16384
export const MiniDumpWithFullAuxiliaryState: int = 32768
export const MiniDumpWithPrivateWriteCopyMemory: int = 65536
export const MiniDumpIgnoreInaccessibleMemory: int = 131072
export const MiniDumpWithTokenInformation: int = 262144
export const MiniDumpWithModuleHeaders: int = 524288
export const MiniDumpFilterTriage: int = 1048576
export const MiniDumpWithAvxXStateContext: int = 2097152
export const MiniDumpWithIptTrace: int = 4194304
export const MiniDumpScanInaccessiblePartialPages: int = 8388608
export const MiniDumpValidTypeFlags: int = 16777215
export const MiniSecondaryWithoutPowerInfo: int = 1
export const MiniSecondaryValidFlags: int = 1
export type EXCEPTION_DISPOSITION = enum { ExceptionContinueExecution; ExceptionContinueSearch; ExceptionNestedException; ExceptionCollidedUnwind; }
export type __crt_locale_data_public = struct { _locale_pctype: *ushort; _locale_mb_cur_max: int; _locale_lc_codepage: uint; }
export type __crt_locale_pointers = struct { locinfo: *s___crt_locale_data; mbcinfo: *s___crt_multibyte_data; }
export type _Mbstatet = struct { _Wchar: ulong; _Byte: ushort; _State: ushort; }
export type PROCESSOR_NUMBER = struct { Group: ushort; Number: char; Reserved: char; }
export type GROUP_AFFINITY = struct { Mask: uint64; Group: ushort; Reserved: [3; ushort]; }
export type COMPARTMENT_ID = enum { UNSPECIFIED_COMPARTMENT_ID = 0; DEFAULT_COMPARTMENT_ID; }
export type FLOAT128 = struct { LowPart: int64; HighPart: int64; }
export type LARGE_INTEGER = struct #union { _1: struct { LowPart: ulong; HighPart: long; }; u: struct { LowPart: ulong; HighPart: long; }; QuadPart: int64; }
export type ULARGE_INTEGER = struct #union { _1: struct { LowPart: ulong; HighPart: ulong; }; u: struct { LowPart: ulong; HighPart: ulong; }; QuadPart: uint64; }
export type LUID = struct { LowPart: ulong; HighPart: long; }
export type LIST_ENTRY = struct { Flink: *LIST_ENTRY; Blink: *LIST_ENTRY; }
export type SINGLE_LIST_ENTRY = struct { Next: *SINGLE_LIST_ENTRY; }
export type LIST_ENTRY32 = struct { Flink: ulong; Blink: ulong; }
export type LIST_ENTRY64 = struct { Flink: uint64; Blink: uint64; }
export type GUID = struct { Data1: ulong; Data2: ushort; Data3: ushort; Data4: [8; char]; }
export type OBJECTID = struct { Lineage: GUID; Uniquifier: ulong; }
export type M128A = struct { Low: uint64; High: int64; }
export type XSAVE_FORMAT = struct { ControlWord: ushort; StatusWord: ushort; TagWord: char; Reserved1: char; ErrorOpcode: ushort; ErrorOffset: ulong; ErrorSelector: ushort; Reserved2: ushort; DataOffset: ulong; DataSelector: ushort; Reserved3: ushort; MxCsr: ulong; MxCsr_Mask: ulong; FloatRegisters: [8; M128A]; XmmRegisters: [16; M128A]; Reserved4: [96; char]; }
export type XSAVE_CET_U_FORMAT = struct { Ia32CetUMsr: uint64; Ia32Pl3SspMsr: uint64; }
export type XSAVE_AREA_HEADER = struct { Mask: uint64; CompactionMask: uint64; Reserved2: [6; uint64]; }
export type XSAVE_AREA = struct { LegacyState: XSAVE_FORMAT; Header: XSAVE_AREA_HEADER; }
export type XSTATE_CONTEXT = struct { Mask: uint64; Length: ulong; Reserved1: ulong; Area: *XSAVE_AREA; Buffer: *; }
export type SCOPE_TABLE_AMD64 = struct { Count: ulong; ScopeRecord: struct { BeginAddress: ulong; EndAddress: ulong; HandlerAddress: ulong; JumpTarget: ulong; }; }
export type CONTEXT = struct { P1Home: uint64; P2Home: uint64; P3Home: uint64; P4Home: uint64; P5Home: uint64; P6Home: uint64; ContextFlags: ulong; MxCsr: ulong; SegCs: ushort; SegDs: ushort; SegEs: ushort; SegFs: ushort; SegGs: ushort; SegSs: ushort; EFlags: ulong; Dr0: uint64; Dr1: uint64; Dr2: uint64; Dr3: uint64; Dr6: uint64; Dr7: uint64; Rax: uint64; Rcx: uint64; Rdx: uint64; Rbx: uint64; Rsp: uint64; Rbp: uint64; Rsi: uint64; Rdi: uint64; R8: uint64; R9: uint64; R10: uint64; R11: uint64; R12: uint64; R13: uint64; R14: uint64; R15: uint64; Rip: uint64; _40: struct #union { FltSave: XSAVE_FORMAT; _2: struct { Header: [2; M128A]; Legacy: [8; M128A]; Xmm0: M128A; Xmm1: M128A; Xmm2: M128A; Xmm3: M128A; Xmm4: M128A; Xmm5: M128A; Xmm6: M128A; Xmm7: M128A; Xmm8: M128A; Xmm9: M128A; Xmm10: M128A; Xmm11: M128A; Xmm12: M128A; Xmm13: M128A; Xmm14: M128A; Xmm15: M128A; }; }; VectorRegister: [26; M128A]; VectorControl: uint64; DebugControl: uint64; LastBranchToRip: uint64; LastBranchFromRip: uint64; LastExceptionToRip: uint64; LastExceptionFromRip: uint64; }
export type RUNTIME_FUNCTION
export type UNWIND_HISTORY_TABLE_ENTRY = struct { ImageBase: uint64; FunctionEntry: *_IMAGE_RUNTIME_FUNCTION_ENTRY; }
export type UNWIND_HISTORY_TABLE = struct { Count: ulong; LocalHint: char; GlobalHint: char; Search: char; Once: char; LowAddress: uint64; HighAddress: uint64; Entry: [12; UNWIND_HISTORY_TABLE_ENTRY]; }
export type DISPATCHER_CONTEXT = struct { ControlPc: uint64; ImageBase: uint64; FunctionEntry: *_IMAGE_RUNTIME_FUNCTION_ENTRY; EstablisherFrame: uint64; TargetIp: uint64; ContextRecord: *CONTEXT; LanguageHandler: *EXCEPTION_DISPOSITION; HandlerData: *; HistoryTable: *UNWIND_HISTORY_TABLE; ScopeIndex: ulong; Fill0: ulong; }
export type KNONVOLATILE_CONTEXT_POINTERS = struct { _1: struct #union { FloatingContext: [16; *M128A]; _2: struct { Xmm0: *M128A; Xmm1: *M128A; Xmm2: *M128A; Xmm3: *M128A; Xmm4: *M128A; Xmm5: *M128A; Xmm6: *M128A; Xmm7: *M128A; Xmm8: *M128A; Xmm9: *M128A; Xmm10: *M128A; Xmm11: *M128A; Xmm12: *M128A; Xmm13: *M128A; Xmm14: *M128A; Xmm15: *M128A; }; }; _20: struct #union { IntegerContext: [16; *uint64]; _2: struct { Rax: *uint64; Rcx: *uint64; Rdx: *uint64; Rbx: *uint64; Rsp: *uint64; Rbp: *uint64; Rsi: *uint64; Rdi: *uint64; R8: *uint64; R9: *uint64; R10: *uint64; R11: *uint64; R12: *uint64; R13: *uint64; R14: *uint64; R15: *uint64; }; }; }
export type SCOPE_TABLE_ARM = struct { Count: ulong; ScopeRecord: struct { BeginAddress: ulong; EndAddress: ulong; HandlerAddress: ulong; JumpTarget: ulong; }; }
export type SCOPE_TABLE_ARM64 = struct { Count: ulong; ScopeRecord: struct { BeginAddress: ulong; EndAddress: ulong; HandlerAddress: ulong; JumpTarget: ulong; }; }
export type KNONVOLATILE_CONTEXT_POINTERS_ARM64 = struct { X19: *uint64; X20: *uint64; X21: *uint64; X22: *uint64; X23: *uint64; X24: *uint64; X25: *uint64; X26: *uint64; X27: *uint64; X28: *uint64; Fp: *uint64; Lr: *uint64; D8: *uint64; D9: *uint64; D10: *uint64; D11: *uint64; D12: *uint64; D13: *uint64; D14: *uint64; D15: *uint64; }
export type LDT_ENTRY = struct { LimitLow: ushort; BaseLow: ushort; HighWord: struct #union { Bytes: struct { BaseMid: char; Flags1: char; Flags2: char; BaseHi: char; }; Bits: struct { #bits(8) BaseMid: ulong; #bits(5) Type: ulong; #bits(2) Dpl: ulong; #bits(1) Pres: ulong; #bits(4) LimitHi: ulong; #bits(1) Sys: ulong; #bits(1) Reserved_0: ulong; #bits(1) Default_Big: ulong; #bits(1) Granularity: ulong; #bits(8) BaseHi: ulong; }; }; }
export type WOW64_FLOATING_SAVE_AREA = struct { ControlWord: ulong; StatusWord: ulong; TagWord: ulong; ErrorOffset: ulong; ErrorSelector: ulong; DataOffset: ulong; DataSelector: ulong; RegisterArea: [80; char]; Cr0NpxState: ulong; }
export type WOW64_CONTEXT = struct { ContextFlags: ulong; Dr0: ulong; Dr1: ulong; Dr2: ulong; Dr3: ulong; Dr6: ulong; Dr7: ulong; FloatSave: WOW64_FLOATING_SAVE_AREA; SegGs: ulong; SegFs: ulong; SegEs: ulong; SegDs: ulong; Edi: ulong; Esi: ulong; Ebx: ulong; Edx: ulong; Ecx: ulong; Eax: ulong; Ebp: ulong; Eip: ulong; SegCs: ulong; EFlags: ulong; Esp: ulong; SegSs: ulong; ExtendedRegisters: [512; char]; }
export type WOW64_LDT_ENTRY = struct { LimitLow: ushort; BaseLow: ushort; HighWord: struct #union { Bytes: struct { BaseMid: char; Flags1: char; Flags2: char; BaseHi: char; }; Bits: struct { #bits(8) BaseMid: ulong; #bits(5) Type: ulong; #bits(2) Dpl: ulong; #bits(1) Pres: ulong; #bits(4) LimitHi: ulong; #bits(1) Sys: ulong; #bits(1) Reserved_0: ulong; #bits(1) Default_Big: ulong; #bits(1) Granularity: ulong; #bits(8) BaseHi: ulong; }; }; }
export type WOW64_DESCRIPTOR_TABLE_ENTRY = struct { Selector: ulong; Descriptor: WOW64_LDT_ENTRY; }
export type EXCEPTION_RECORD = struct { ExceptionCode: ulong; ExceptionFlags: ulong; ExceptionRecord: *EXCEPTION_RECORD; ExceptionAddress: *; NumberParameters: ulong; ExceptionInformation: [15; uint64]; }
export type EXCEPTION_RECORD32 = struct { ExceptionCode: ulong; ExceptionFlags: ulong; ExceptionRecord: ulong; ExceptionAddress: ulong; NumberParameters: ulong; ExceptionInformation: [15; ulong]; }
export type EXCEPTION_RECORD64 = struct { ExceptionCode: ulong; ExceptionFlags: ulong; ExceptionRecord: uint64; ExceptionAddress: uint64; NumberParameters: ulong; __unusedAlignment: ulong; ExceptionInformation: [15; uint64]; }
export type EXCEPTION_POINTERS = struct { ExceptionRecord: *EXCEPTION_RECORD; ContextRecord: *CONTEXT; }
export type GENERIC_MAPPING = struct { GenericRead: ulong; GenericWrite: ulong; GenericExecute: ulong; GenericAll: ulong; }
export type LUID_AND_ATTRIBUTES = struct { Luid: LUID; Attributes: ulong; }
export type SID_IDENTIFIER_AUTHORITY = struct { Value: [6; char]; }
export type SID = struct { Revision: char; SubAuthorityCount: char; IdentifierAuthority: SID_IDENTIFIER_AUTHORITY; SubAuthority: [1; ulong]; }
export type SE_SID = struct #union { Sid: SID; Buffer: [68; char]; }
export type SID_NAME_USE = enum { SidTypeUser = 1; SidTypeGroup; SidTypeDomain; SidTypeAlias; SidTypeWellKnownGroup; SidTypeDeletedAccount; SidTypeInvalid; SidTypeUnknown; SidTypeComputer; SidTypeLabel; SidTypeLogonSession; }
export type SID_AND_ATTRIBUTES = struct { Sid: *; Attributes: ulong; }
export type SID_AND_ATTRIBUTES_HASH = struct { SidCount: ulong; SidAttr: *SID_AND_ATTRIBUTES; Hash: [32; uint64]; }
export type WELL_KNOWN_SID_TYPE = enum { WinNullSid = 0; WinWorldSid = 1; WinLocalSid = 2; WinCreatorOwnerSid = 3; WinCreatorGroupSid = 4; WinCreatorOwnerServerSid = 5; WinCreatorGroupServerSid = 6; WinNtAuthoritySid = 7; WinDialupSid = 8; WinNetworkSid = 9; WinBatchSid = 10; WinInteractiveSid = 11; WinServiceSid = 12; WinAnonymousSid = 13; WinProxySid = 14; WinEnterpriseControllersSid = 15; WinSelfSid = 16; WinAuthenticatedUserSid = 17; WinRestrictedCodeSid = 18; WinTerminalServerSid = 19; WinRemoteLogonIdSid = 20; WinLogonIdsSid = 21; WinLocalSystemSid = 22; WinLocalServiceSid = 23; WinNetworkServiceSid = 24; WinBuiltinDomainSid = 25; WinBuiltinAdministratorsSid = 26; WinBuiltinUsersSid = 27; WinBuiltinGuestsSid = 28; WinBuiltinPowerUsersSid = 29; WinBuiltinAccountOperatorsSid = 30; WinBuiltinSystemOperatorsSid = 31; WinBuiltinPrintOperatorsSid = 32; WinBuiltinBackupOperatorsSid = 33; WinBuiltinReplicatorSid = 34; WinBuiltinPreWindows2000CompatibleAccessSid = 35; WinBuiltinRemoteDesktopUsersSid = 36; WinBuiltinNetworkConfigurationOperatorsSid = 37; WinAccountAdministratorSid = 38; WinAccountGuestSid = 39; WinAccountKrbtgtSid = 40; WinAccountDomainAdminsSid = 41; WinAccountDomainUsersSid = 42; WinAccountDomainGuestsSid = 43; WinAccountComputersSid = 44; WinAccountControllersSid = 45; WinAccountCertAdminsSid = 46; WinAccountSchemaAdminsSid = 47; WinAccountEnterpriseAdminsSid = 48; WinAccountPolicyAdminsSid = 49; WinAccountRasAndIasServersSid = 50; WinNTLMAuthenticationSid = 51; WinDigestAuthenticationSid = 52; WinSChannelAuthenticationSid = 53; WinThisOrganizationSid = 54; WinOtherOrganizationSid = 55; WinBuiltinIncomingForestTrustBuildersSid = 56; WinBuiltinPerfMonitoringUsersSid = 57; WinBuiltinPerfLoggingUsersSid = 58; WinBuiltinAuthorizationAccessSid = 59; WinBuiltinTerminalServerLicenseServersSid = 60; WinBuiltinDCOMUsersSid = 61; WinBuiltinIUsersSid = 62; WinIUserSid = 63; WinBuiltinCryptoOperatorsSid = 64; WinUntrustedLabelSid = 65; WinLowLabelSid = 66; WinMediumLabelSid = 67; WinHighLabelSid = 68; WinSystemLabelSid = 69; WinWriteRestrictedCodeSid = 70; WinCreatorOwnerRightsSid = 71; WinCacheablePrincipalsGroupSid = 72; WinNonCacheablePrincipalsGroupSid = 73; WinEnterpriseReadonlyControllersSid = 74; WinAccountReadonlyControllersSid = 75; WinBuiltinEventLogReadersGroup = 76; WinNewEnterpriseReadonlyControllersSid = 77; WinBuiltinCertSvcDComAccessGroup = 78; WinMediumPlusLabelSid = 79; WinLocalLogonSid = 80; WinConsoleLogonSid = 81; WinThisOrganizationCertificateSid = 82; WinApplicationPackageAuthoritySid = 83; WinBuiltinAnyPackageSid = 84; WinCapabilityInternetClientSid = 85; WinCapabilityInternetClientServerSid = 86; WinCapabilityPrivateNetworkClientServerSid = 87; WinCapabilityPicturesLibrarySid = 88; WinCapabilityVideosLibrarySid = 89; WinCapabilityMusicLibrarySid = 90; WinCapabilityDocumentsLibrarySid = 91; WinCapabilitySharedUserCertificatesSid = 92; WinCapabilityEnterpriseAuthenticationSid = 93; WinCapabilityRemovableStorageSid = 94; WinBuiltinRDSRemoteAccessServersSid = 95; WinBuiltinRDSEndpointServersSid = 96; WinBuiltinRDSManagementServersSid = 97; WinUserModeDriversSid = 98; WinBuiltinHyperVAdminsSid = 99; WinAccountCloneableControllersSid = 100; WinBuiltinAccessControlAssistanceOperatorsSid = 101; WinBuiltinRemoteManagementUsersSid = 102; WinAuthenticationAuthorityAssertedSid = 103; WinAuthenticationServiceAssertedSid = 104; WinLocalAccountSid = 105; WinLocalAccountAndAdministratorSid = 106; WinAccountProtectedUsersSid = 107; WinCapabilityAppointmentsSid = 108; WinCapabilityContactsSid = 109; WinAccountDefaultSystemManagedSid = 110; WinBuiltinDefaultSystemManagedGroupSid = 111; WinBuiltinStorageReplicaAdminsSid = 112; WinAccountKeyAdminsSid = 113; WinAccountEnterpriseKeyAdminsSid = 114; WinAuthenticationKeyTrustSid = 115; WinAuthenticationKeyPropertyMFASid = 116; WinAuthenticationKeyPropertyAttestationSid = 117; WinAuthenticationFreshKeyAuthSid = 118; WinBuiltinDeviceOwnersSid = 119; }
export type ACL = struct { AclRevision: char; Sbz1: char; AclSize: ushort; AceCount: ushort; Sbz2: ushort; }
export type ACE_HEADER = struct { AceType: char; AceFlags: char; AceSize: ushort; }
export type ACCESS_ALLOWED_ACE = struct { Header: ACE_HEADER; Mask: ulong; SidStart: ulong; }
export type ACCESS_DENIED_ACE = struct { Header: ACE_HEADER; Mask: ulong; SidStart: ulong; }
export type SYSTEM_AUDIT_ACE = struct { Header: ACE_HEADER; Mask: ulong; SidStart: ulong; }
export type SYSTEM_ALARM_ACE = struct { Header: ACE_HEADER; Mask: ulong; SidStart: ulong; }
export type SYSTEM_RESOURCE_ATTRIBUTE_ACE = struct { Header: ACE_HEADER; Mask: ulong; SidStart: ulong; }
export type SYSTEM_SCOPED_POLICY_ID_ACE = struct { Header: ACE_HEADER; Mask: ulong; SidStart: ulong; }
export type SYSTEM_MANDATORY_LABEL_ACE = struct { Header: ACE_HEADER; Mask: ulong; SidStart: ulong; }
export type SYSTEM_PROCESS_TRUST_LABEL_ACE = struct { Header: ACE_HEADER; Mask: ulong; SidStart: ulong; }
export type SYSTEM_ACCESS_FILTER_ACE = struct { Header: ACE_HEADER; Mask: ulong; SidStart: ulong; }
export type ACCESS_ALLOWED_OBJECT_ACE = struct { Header: ACE_HEADER; Mask: ulong; Flags: ulong; ObjectType: GUID; InheritedObjectType: GUID; SidStart: ulong; }
export type ACCESS_DENIED_OBJECT_ACE = struct { Header: ACE_HEADER; Mask: ulong; Flags: ulong; ObjectType: GUID; InheritedObjectType: GUID; SidStart: ulong; }
export type SYSTEM_AUDIT_OBJECT_ACE = struct { Header: ACE_HEADER; Mask: ulong; Flags: ulong; ObjectType: GUID; InheritedObjectType: GUID; SidStart: ulong; }
export type SYSTEM_ALARM_OBJECT_ACE = struct { Header: ACE_HEADER; Mask: ulong; Flags: ulong; ObjectType: GUID; InheritedObjectType: GUID; SidStart: ulong; }
export type ACCESS_ALLOWED_CALLBACK_ACE = struct { Header: ACE_HEADER; Mask: ulong; SidStart: ulong; }
export type ACCESS_DENIED_CALLBACK_ACE = struct { Header: ACE_HEADER; Mask: ulong; SidStart: ulong; }
export type SYSTEM_AUDIT_CALLBACK_ACE = struct { Header: ACE_HEADER; Mask: ulong; SidStart: ulong; }
export type SYSTEM_ALARM_CALLBACK_ACE = struct { Header: ACE_HEADER; Mask: ulong; SidStart: ulong; }
export type ACCESS_ALLOWED_CALLBACK_OBJECT_ACE = struct { Header: ACE_HEADER; Mask: ulong; Flags: ulong; ObjectType: GUID; InheritedObjectType: GUID; SidStart: ulong; }
export type ACCESS_DENIED_CALLBACK_OBJECT_ACE = struct { Header: ACE_HEADER; Mask: ulong; Flags: ulong; ObjectType: GUID; InheritedObjectType: GUID; SidStart: ulong; }
export type SYSTEM_AUDIT_CALLBACK_OBJECT_ACE = struct { Header: ACE_HEADER; Mask: ulong; Flags: ulong; ObjectType: GUID; InheritedObjectType: GUID; SidStart: ulong; }
export type SYSTEM_ALARM_CALLBACK_OBJECT_ACE = struct { Header: ACE_HEADER; Mask: ulong; Flags: ulong; ObjectType: GUID; InheritedObjectType: GUID; SidStart: ulong; }
export type ACL_INFORMATION_CLASS = enum { AclRevisionInformation = 1; AclSizeInformation; }
export type ACL_REVISION_INFORMATION = struct { AclRevision: ulong; }
export type ACL_SIZE_INFORMATION = struct { AceCount: ulong; AclBytesInUse: ulong; AclBytesFree: ulong; }
export type SECURITY_DESCRIPTOR_RELATIVE = struct { Revision: char; Sbz1: char; Control: ushort; Owner: ulong; Group: ulong; Sacl: ulong; Dacl: ulong; }
export type SECURITY_DESCRIPTOR = struct { Revision: char; Sbz1: char; Control: ushort; Owner: *; Group: *; Sacl: *ACL; Dacl: *ACL; }
export type SECURITY_OBJECT_AI_PARAMS = struct { Size: ulong; ConstraintMask: ulong; }
export type OBJECT_TYPE_LIST = struct { Level: ushort; Sbz: ushort; ObjectType: *GUID; }
export type AUDIT_EVENT_TYPE = enum { AuditEventObjectAccess; AuditEventDirectoryServiceAccess; }
export type PRIVILEGE_SET = struct { PrivilegeCount: ulong; Control: ulong; Privilege: [1; LUID_AND_ATTRIBUTES]; }
export type ACCESS_REASON_TYPE = enum { AccessReasonNone = 0; AccessReasonAllowedAce = 65536; AccessReasonDeniedAce = 131072; AccessReasonAllowedParentAce = 196608; AccessReasonDeniedParentAce = 262144; AccessReasonNotGrantedByCape = 327680; AccessReasonNotGrantedByParentCape = 393216; AccessReasonNotGrantedToAppContainer = 458752; AccessReasonMissingPrivilege = 1048576; AccessReasonFromPrivilege = 2097152; AccessReasonIntegrityLevel = 3145728; AccessReasonOwnership = 4194304; AccessReasonNullDacl = 5242880; AccessReasonEmptyDacl = 6291456; AccessReasonNoSD = 7340032; AccessReasonNoGrant = 8388608; AccessReasonTrustLabel = 9437184; AccessReasonFilterAce = 10485760; }
export type ACCESS_REASONS = struct { Data: [32; ulong]; }
export type SE_SECURITY_DESCRIPTOR = struct { Size: ulong; Flags: ulong; SecurityDescriptor: *; }
export type SE_ACCESS_REQUEST = struct { Size: ulong; SeSecurityDescriptor: *SE_SECURITY_DESCRIPTOR; DesiredAccess: ulong; PreviouslyGrantedAccess: ulong; PrincipalSelfSid: *; GenericMapping: *GENERIC_MAPPING; ObjectTypeListCount: ulong; ObjectTypeList: *OBJECT_TYPE_LIST; }
export type SE_ACCESS_REPLY = struct { Size: ulong; ResultListCount: ulong; GrantedAccess: *ulong; AccessStatus: *ulong; AccessReason: *ACCESS_REASONS; Privileges: **PRIVILEGE_SET; }
export type SECURITY_IMPERSONATION_LEVEL = enum { SecurityAnonymous; SecurityIdentification; SecurityImpersonation; SecurityDelegation; }
export type TOKEN_TYPE = enum { TokenPrimary = 1; TokenImpersonation; }
export type TOKEN_ELEVATION_TYPE = enum { TokenElevationTypeDefault = 1; TokenElevationTypeFull; TokenElevationTypeLimited; }
export type TOKEN_INFORMATION_CLASS = enum { TokenUser = 1; TokenGroups; TokenPrivileges; TokenOwner; TokenPrimaryGroup; TokenDefaultDacl; TokenSource; TokenType; TokenImpersonationLevel; TokenStatistics; TokenRestrictedSids; TokenSessionId; TokenGroupsAndPrivileges; TokenSessionReference; TokenSandBoxInert; TokenAuditPolicy; TokenOrigin; TokenElevationType; TokenLinkedToken; TokenElevation; TokenHasRestrictions; TokenAccessInformation; TokenVirtualizationAllowed; TokenVirtualizationEnabled; TokenIntegrityLevel; TokenUIAccess; TokenMandatoryPolicy; TokenLogonSid; TokenIsAppContainer; TokenCapabilities; TokenAppContainerSid; TokenAppContainerNumber; TokenUserClaimAttributes; TokenDeviceClaimAttributes; TokenRestrictedUserClaimAttributes; TokenRestrictedDeviceClaimAttributes; TokenDeviceGroups; TokenRestrictedDeviceGroups; TokenSecurityAttributes; TokenIsRestricted; TokenProcessTrustLevel; TokenPrivateNameSpace; TokenSingletonAttributes; TokenBnoIsolation; TokenChildProcessFlags; TokenIsLessPrivilegedAppContainer; TokenIsSandboxed; TokenOriginatingProcessTrustLevel; MaxTokenInfoClass; }
export type TOKEN_USER = struct { User: SID_AND_ATTRIBUTES; }
export type PSE_TOKEN_USER = struct { _1: struct #union { TokenUser: TOKEN_USER; User: SID_AND_ATTRIBUTES; }; _5: struct #union { Sid: SID; Buffer: [68; char]; }; }
export type TOKEN_GROUPS = struct { GroupCount: ulong; Groups: [1; SID_AND_ATTRIBUTES]; }
export type TOKEN_PRIVILEGES = struct { PrivilegeCount: ulong; Privileges: [1; LUID_AND_ATTRIBUTES]; }
export type TOKEN_OWNER = struct { Owner: *; }
export type TOKEN_PRIMARY_GROUP = struct { PrimaryGroup: *; }
export type TOKEN_DEFAULT_DACL = struct { DefaultDacl: *ACL; }
export type TOKEN_USER_CLAIMS = struct { UserClaims: *; }
export type TOKEN_DEVICE_CLAIMS = struct { DeviceClaims: *; }
export type TOKEN_GROUPS_AND_PRIVILEGES = struct { SidCount: ulong; SidLength: ulong; Sids: *SID_AND_ATTRIBUTES; RestrictedSidCount: ulong; RestrictedSidLength: ulong; RestrictedSids: *SID_AND_ATTRIBUTES; PrivilegeCount: ulong; PrivilegeLength: ulong; Privileges: *LUID_AND_ATTRIBUTES; AuthenticationId: LUID; }
export type TOKEN_LINKED_TOKEN = struct { LinkedToken: *; }
export type TOKEN_ELEVATION = struct { TokenIsElevated: ulong; }
export type TOKEN_MANDATORY_LABEL = struct { Label: SID_AND_ATTRIBUTES; }
export type TOKEN_MANDATORY_POLICY = struct { Policy: ulong; }
export type TOKEN_ACCESS_INFORMATION = struct { SidHash: *SID_AND_ATTRIBUTES_HASH; RestrictedSidHash: *SID_AND_ATTRIBUTES_HASH; Privileges: *TOKEN_PRIVILEGES; AuthenticationId: LUID; TokenType: TOKEN_TYPE; ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL; MandatoryPolicy: TOKEN_MANDATORY_POLICY; Flags: ulong; AppContainerNumber: ulong; PackageSid: *; CapabilitiesHash: *SID_AND_ATTRIBUTES_HASH; TrustLevelSid: *; SecurityAttributes: *; }
export type TOKEN_AUDIT_POLICY = struct { PerUserPolicy: [30; char]; }
export type TOKEN_SOURCE = struct { SourceName: [8; char]; SourceIdentifier: LUID; }
export type TOKEN_STATISTICS = struct { TokenId: LUID; AuthenticationId: LUID; ExpirationTime: LARGE_INTEGER; TokenType: TOKEN_TYPE; ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL; DynamicCharged: ulong; DynamicAvailable: ulong; GroupCount: ulong; PrivilegeCount: ulong; ModifiedId: LUID; }
export type TOKEN_CONTROL = struct { TokenId: LUID; AuthenticationId: LUID; ModifiedId: LUID; TokenSource: TOKEN_SOURCE; }
export type TOKEN_ORIGIN = struct { OriginatingLogonSession: LUID; }
export type MANDATORY_LEVEL = enum { MandatoryLevelUntrusted = 0; MandatoryLevelLow; MandatoryLevelMedium; MandatoryLevelHigh; MandatoryLevelSystem; MandatoryLevelSecureProcess; MandatoryLevelCount; }
export type TOKEN_APPCONTAINER_INFORMATION = struct { TokenAppContainer: *; }
export type TOKEN_SID_INFORMATION = struct { Sid: *; }
export type TOKEN_BNO_ISOLATION_INFORMATION = struct { IsolationPrefix: *ushort; IsolationEnabled: char; }
export type CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE = struct { Version: uint64; Name: *ushort; }
export type CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE = struct { pValue: *; ValueLength: ulong; }
export type CLAIM_SECURITY_ATTRIBUTE_V1 = struct { Name: *ushort; ValueType: ushort; Reserved: ushort; Flags: ulong; ValueCount: ulong; Values: struct #union { pInt64: *int64; pUint64: *uint64; ppString: **ushort; pFqbn: *CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE; pOctetString: *CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE; }; }
export type CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 = struct { Name: ulong; ValueType: ushort; Reserved: ushort; Flags: ulong; ValueCount: ulong; Values: struct #union { pInt64: [1; ulong]; pUint64: [1; ulong]; ppString: [1; ulong]; pFqbn: [1; ulong]; pOctetString: [1; ulong]; }; }
export type CLAIM_SECURITY_ATTRIBUTES_INFORMATION = struct { Version: ushort; Reserved: ushort; AttributeCount: ulong; Attribute: struct #union { pAttributeV1: *CLAIM_SECURITY_ATTRIBUTE_V1; }; }
export type SECURITY_QUALITY_OF_SERVICE = struct { Length: ulong; ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL; ContextTrackingMode: char; EffectiveOnly: char; }
export type SE_IMPERSONATION_STATE = struct { Token: *; CopyOnOpen: char; EffectiveOnly: char; Level: SECURITY_IMPERSONATION_LEVEL; }
export type SE_IMAGE_SIGNATURE_TYPE = enum { SeImageSignatureNone = 0; SeImageSignatureEmbedded; SeImageSignatureCache; SeImageSignatureCatalogCached; SeImageSignatureCatalogNotCached; SeImageSignatureCatalogHint; SeImageSignaturePackageCatalog; }
export type SE_LEARNING_MODE_DATA_TYPE = enum { SeLearningModeInvalidType = 0; SeLearningModeSettings; SeLearningModeMax; }
export type SECURITY_CAPABILITIES = struct { AppContainerSid: *; Capabilities: *SID_AND_ATTRIBUTES; CapabilityCount: ulong; Reserved: ulong; }
export type JOB_SET_ARRAY = struct { JobHandle: *; MemberLevel: ulong; Flags: ulong; }
export type EXCEPTION_REGISTRATION_RECORD = struct { Next: *EXCEPTION_REGISTRATION_RECORD; Handler: *EXCEPTION_DISPOSITION; }
export type NT_TIB = struct { ExceptionList: *EXCEPTION_REGISTRATION_RECORD; StackBase: *; StackLimit: *; SubSystemTib: *; _5: struct #union { FiberData: *; Version: ulong; }; ArbitraryUserPointer: *; Self: *NT_TIB; }
export type NT_TIB32 = struct { ExceptionList: ulong; StackBase: ulong; StackLimit: ulong; SubSystemTib: ulong; _5: struct #union { FiberData: ulong; Version: ulong; }; ArbitraryUserPointer: ulong; Self: ulong; }
export type NT_TIB64 = struct { ExceptionList: uint64; StackBase: uint64; StackLimit: uint64; SubSystemTib: uint64; _5: struct #union { FiberData: uint64; Version: ulong; }; ArbitraryUserPointer: uint64; Self: uint64; }
export type UMS_CREATE_THREAD_ATTRIBUTES = struct { UmsVersion: ulong; UmsContext: *; UmsCompletionList: *; }
export type WOW64_ARCHITECTURE_INFORMATION = struct { #bits(16) Machine: ulong; #bits(1) KernelMode: ulong; #bits(1) UserMode: ulong; #bits(1) Native: ulong; #bits(1) Process: ulong; #bits(12) ReservedZero0: ulong; }
export type PROCESS_DYNAMIC_EH_CONTINUATION_TARGET = struct { TargetAddress: uint64; Flags: uint64; }
export type PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION = struct { NumberOfTargets: ushort; Reserved: ushort; Reserved2: ulong; Targets: *PROCESS_DYNAMIC_EH_CONTINUATION_TARGET; }
export type PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE = struct { BaseAddress: uint64; Size: uint64; Flags: ulong; }
export type PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION = struct { NumberOfRanges: ushort; Reserved: ushort; Reserved2: ulong; Ranges: *PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE; }
export type QUOTA_LIMITS = struct { PagedPoolLimit: uint64; NonPagedPoolLimit: uint64; MinimumWorkingSetSize: uint64; MaximumWorkingSetSize: uint64; PagefileLimit: uint64; TimeLimit: LARGE_INTEGER; }
export type RATE_QUOTA_LIMIT = struct #union { RateData: ulong; _2: struct { #bits(7) RatePercent: ulong; #bits(25) Reserved0: ulong; }; }
export type QUOTA_LIMITS_EX = struct { PagedPoolLimit: uint64; NonPagedPoolLimit: uint64; MinimumWorkingSetSize: uint64; MaximumWorkingSetSize: uint64; PagefileLimit: uint64; TimeLimit: LARGE_INTEGER; WorkingSetLimit: uint64; Reserved2: uint64; Reserved3: uint64; Reserved4: uint64; Flags: ulong; CpuRateLimit: RATE_QUOTA_LIMIT; }
export type IO_COUNTERS = struct { ReadOperationCount: uint64; WriteOperationCount: uint64; OtherOperationCount: uint64; ReadTransferCount: uint64; WriteTransferCount: uint64; OtherTransferCount: uint64; }
export type HARDWARE_COUNTER_TYPE = enum { PMCCounter; MaxHardwareCounterType; }
export type PROCESS_MITIGATION_POLICY = enum { ProcessDEPPolicy; ProcessASLRPolicy; ProcessDynamicCodePolicy; ProcessStrictHandleCheckPolicy; ProcessSystemCallDisablePolicy; ProcessMitigationOptionsMask; ProcessExtensionPointDisablePolicy; ProcessControlFlowGuardPolicy; ProcessSignaturePolicy; ProcessFontDisablePolicy; ProcessImageLoadPolicy; ProcessSystemCallFilterPolicy; ProcessPayloadRestrictionPolicy; ProcessChildProcessPolicy; ProcessSideChannelIsolationPolicy; ProcessUserShadowStackPolicy; MaxProcessMitigationPolicy; }
export type PROCESS_MITIGATION_ASLR_POLICY = struct { _1: struct #union { Flags: ulong; _2: struct { #bits(1) EnableBottomUpRandomization: ulong; #bits(1) EnableForceRelocateImages: ulong; #bits(1) EnableHighEntropy: ulong; #bits(1) DisallowStrippedImages: ulong; #bits(28) ReservedFlags: ulong; }; }; }
export type PROCESS_MITIGATION_DEP_POLICY = struct { _1: struct #union { Flags: ulong; _2: struct { #bits(1) Enable: ulong; #bits(1) DisableAtlThunkEmulation: ulong; #bits(30) ReservedFlags: ulong; }; }; Permanent: char; }
export type PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY = struct { _1: struct #union { Flags: ulong; _2: struct { #bits(1) RaiseExceptionOnInvalidHandleReference: ulong; #bits(1) HandleExceptionsPermanentlyEnabled: ulong; #bits(30) ReservedFlags: ulong; }; }; }
export type PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY = struct { _1: struct #union { Flags: ulong; _2: struct { #bits(1) DisallowWin32kSystemCalls: ulong; #bits(1) AuditDisallowWin32kSystemCalls: ulong; #bits(30) ReservedFlags: ulong; }; }; }
export type PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY = struct { _1: struct #union { Flags: ulong; _2: struct { #bits(1) DisableExtensionPoints: ulong; #bits(31) ReservedFlags: ulong; }; }; }
export type PROCESS_MITIGATION_DYNAMIC_CODE_POLICY = struct { _1: struct #union { Flags: ulong; _2: struct { #bits(1) ProhibitDynamicCode: ulong; #bits(1) AllowThreadOptOut: ulong; #bits(1) AllowRemoteDowngrade: ulong; #bits(1) AuditProhibitDynamicCode: ulong; #bits(28) ReservedFlags: ulong; }; }; }
export type PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY = struct { _1: struct #union { Flags: ulong; _2: struct { #bits(1) EnableControlFlowGuard: ulong; #bits(1) EnableExportSuppression: ulong; #bits(1) StrictMode: ulong; #bits(29) ReservedFlags: ulong; }; }; }
export type PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY = struct { _1: struct #union { Flags: ulong; _2: struct { #bits(1) MicrosoftSignedOnly: ulong; #bits(1) StoreSignedOnly: ulong; #bits(1) MitigationOptIn: ulong; #bits(1) AuditMicrosoftSignedOnly: ulong; #bits(1) AuditStoreSignedOnly: ulong; #bits(27) ReservedFlags: ulong; }; }; }
export type PROCESS_MITIGATION_FONT_DISABLE_POLICY = struct { _1: struct #union { Flags: ulong; _2: struct { #bits(1) DisableNonSystemFonts: ulong; #bits(1) AuditNonSystemFontLoading: ulong; #bits(30) ReservedFlags: ulong; }; }; }
export type PROCESS_MITIGATION_IMAGE_LOAD_POLICY = struct { _1: struct #union { Flags: ulong; _2: struct { #bits(1) NoRemoteImages: ulong; #bits(1) NoLowMandatoryLabelImages: ulong; #bits(1) PreferSystem32Images: ulong; #bits(1) AuditNoRemoteImages: ulong; #bits(1) AuditNoLowMandatoryLabelImages: ulong; #bits(27) ReservedFlags: ulong; }; }; }
export type PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY = struct { _1: struct #union { Flags: ulong; _2: struct { #bits(4) FilterId: ulong; #bits(28) ReservedFlags: ulong; }; }; }
export type PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY = struct { _1: struct #union { Flags: ulong; _2: struct { #bits(1) EnableExportAddressFilter: ulong; #bits(1) AuditExportAddressFilter: ulong; #bits(1) EnableExportAddressFilterPlus: ulong; #bits(1) AuditExportAddressFilterPlus: ulong; #bits(1) EnableImportAddressFilter: ulong; #bits(1) AuditImportAddressFilter: ulong; #bits(1) EnableRopStackPivot: ulong; #bits(1) AuditRopStackPivot: ulong; #bits(1) EnableRopCallerCheck: ulong; #bits(1) AuditRopCallerCheck: ulong; #bits(1) EnableRopSimExec: ulong; #bits(1) AuditRopSimExec: ulong; #bits(20) ReservedFlags: ulong; }; }; }
export type PROCESS_MITIGATION_CHILD_PROCESS_POLICY = struct { _1: struct #union { Flags: ulong; _2: struct { #bits(1) NoChildProcessCreation: ulong; #bits(1) AuditNoChildProcessCreation: ulong; #bits(1) AllowSecureProcessCreation: ulong; #bits(29) ReservedFlags: ulong; }; }; }
export type PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY = struct { _1: struct #union { Flags: ulong; _2: struct { #bits(1) SmtBranchTargetIsolation: ulong; #bits(1) IsolateSecurityDomain: ulong; #bits(1) DisablePageCombine: ulong; #bits(1) SpeculativeStoreBypassDisable: ulong; #bits(28) ReservedFlags: ulong; }; }; }
export type PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY = struct { _1: struct #union { Flags: ulong; _2: struct { #bits(1) EnableUserShadowStack: ulong; #bits(1) AuditUserShadowStack: ulong; #bits(1) SetContextIpValidation: ulong; #bits(1) AuditSetContextIpValidation: ulong; #bits(1) EnableUserShadowStackStrictMode: ulong; #bits(1) BlockNonCetBinaries: ulong; #bits(1) BlockNonCetBinariesNonEhcont: ulong; #bits(1) AuditBlockNonCetBinaries: ulong; #bits(1) CetDynamicApisOutOfProcOnly: ulong; #bits(1) SetContextIpValidationRelaxedMode: ulong; #bits(22) ReservedFlags: ulong; }; }; }
export type JOBOBJECT_BASIC_ACCOUNTING_INFORMATION = struct { TotalUserTime: LARGE_INTEGER; TotalKernelTime: LARGE_INTEGER; ThisPeriodTotalUserTime: LARGE_INTEGER; ThisPeriodTotalKernelTime: LARGE_INTEGER; TotalPageFaultCount: ulong; TotalProcesses: ulong; ActiveProcesses: ulong; TotalTerminatedProcesses: ulong; }
export type JOBOBJECT_BASIC_LIMIT_INFORMATION = struct { PerProcessUserTimeLimit: LARGE_INTEGER; PerJobUserTimeLimit: LARGE_INTEGER; LimitFlags: ulong; MinimumWorkingSetSize: uint64; MaximumWorkingSetSize: uint64; ActiveProcessLimit: ulong; Affinity: uint64; PriorityClass: ulong; SchedulingClass: ulong; }
export type JOBOBJECT_EXTENDED_LIMIT_INFORMATION = struct { BasicLimitInformation: JOBOBJECT_BASIC_LIMIT_INFORMATION; IoInfo: IO_COUNTERS; ProcessMemoryLimit: uint64; JobMemoryLimit: uint64; PeakProcessMemoryUsed: uint64; PeakJobMemoryUsed: uint64; }
export type JOBOBJECT_BASIC_PROCESS_ID_LIST = struct { NumberOfAssignedProcesses: ulong; NumberOfProcessIdsInList: ulong; ProcessIdList: [1; uint64]; }
export type JOBOBJECT_BASIC_UI_RESTRICTIONS = struct { UIRestrictionsClass: ulong; }
export type JOBOBJECT_SECURITY_LIMIT_INFORMATION = struct { SecurityLimitFlags: ulong; JobToken: *; SidsToDisable: *TOKEN_GROUPS; PrivilegesToDelete: *TOKEN_PRIVILEGES; RestrictedSids: *TOKEN_GROUPS; }
export type JOBOBJECT_END_OF_JOB_TIME_INFORMATION = struct { EndOfJobTimeAction: ulong; }
export type JOBOBJECT_ASSOCIATE_COMPLETION_PORT = struct { CompletionKey: *; CompletionPort: *; }
export type JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION = struct { BasicInfo: JOBOBJECT_BASIC_ACCOUNTING_INFORMATION; IoInfo: IO_COUNTERS; }
export type JOBOBJECT_JOBSET_INFORMATION = struct { MemberLevel: ulong; }
export type JOBOBJECT_RATE_CONTROL_TOLERANCE = enum { ToleranceLow = 1; ToleranceMedium; ToleranceHigh; }
export type JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL = enum { ToleranceIntervalShort = 1; ToleranceIntervalMedium; ToleranceIntervalLong; }
export type JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION = struct { IoReadBytesLimit: uint64; IoWriteBytesLimit: uint64; PerJobUserTimeLimit: LARGE_INTEGER; JobMemoryLimit: uint64; RateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE; RateControlToleranceInterval: JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL; LimitFlags: ulong; }
export type JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2 = struct { IoReadBytesLimit: uint64; IoWriteBytesLimit: uint64; PerJobUserTimeLimit: LARGE_INTEGER; _4: struct #union { JobHighMemoryLimit: uint64; JobMemoryLimit: uint64; }; _8: struct #union { RateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE; CpuRateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE; }; _12: struct #union { RateControlToleranceInterval: JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL; CpuRateControlToleranceInterval: JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL; }; LimitFlags: ulong; IoRateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE; JobLowMemoryLimit: uint64; IoRateControlToleranceInterval: JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL; NetRateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE; NetRateControlToleranceInterval: JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL; }
export type JOBOBJECT_LIMIT_VIOLATION_INFORMATION = struct { LimitFlags: ulong; ViolationLimitFlags: ulong; IoReadBytes: uint64; IoReadBytesLimit: uint64; IoWriteBytes: uint64; IoWriteBytesLimit: uint64; PerJobUserTime: LARGE_INTEGER; PerJobUserTimeLimit: LARGE_INTEGER; JobMemory: uint64; JobMemoryLimit: uint64; RateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE; RateControlToleranceLimit: JOBOBJECT_RATE_CONTROL_TOLERANCE; }
export type JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2 = struct { LimitFlags: ulong; ViolationLimitFlags: ulong; IoReadBytes: uint64; IoReadBytesLimit: uint64; IoWriteBytes: uint64; IoWriteBytesLimit: uint64; PerJobUserTime: LARGE_INTEGER; PerJobUserTimeLimit: LARGE_INTEGER; JobMemory: uint64; _10: struct #union { JobHighMemoryLimit: uint64; JobMemoryLimit: uint64; }; _14: struct #union { RateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE; CpuRateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE; }; _18: struct #union { RateControlToleranceLimit: JOBOBJECT_RATE_CONTROL_TOLERANCE; CpuRateControlToleranceLimit: JOBOBJECT_RATE_CONTROL_TOLERANCE; }; JobLowMemoryLimit: uint64; IoRateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE; IoRateControlToleranceLimit: JOBOBJECT_RATE_CONTROL_TOLERANCE; NetRateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE; NetRateControlToleranceLimit: JOBOBJECT_RATE_CONTROL_TOLERANCE; }
export type JOBOBJECT_CPU_RATE_CONTROL_INFORMATION = struct { ControlFlags: ulong; _2: struct #union { CpuRate: ulong; Weight: ulong; _3: struct { MinRate: ushort; MaxRate: ushort; }; }; }
export type JOB_OBJECT_NET_RATE_CONTROL_FLAGS = enum { JOB_OBJECT_NET_RATE_CONTROL_ENABLE = 1; JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH = 2; JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG = 4; JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS = 7; }
export type JOBOBJECT_NET_RATE_CONTROL_INFORMATION = struct { MaxBandwidth: uint64; ControlFlags: JOB_OBJECT_NET_RATE_CONTROL_FLAGS; DscpTag: char; }
export type JOB_OBJECT_IO_RATE_CONTROL_FLAGS = enum { JOB_OBJECT_IO_RATE_CONTROL_ENABLE = 1; JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME = 2; JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL = 4; JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP = 8; JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS = (((JOB_OBJECT_IO_RATE_CONTROL_ENABLE | JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME) | JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL) | JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP); }
export type JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE = struct { MaxIops: int64; MaxBandwidth: int64; ReservationIops: int64; VolumeName: *ushort; BaseIoSize: ulong; ControlFlags: JOB_OBJECT_IO_RATE_CONTROL_FLAGS; VolumeNameLength: ushort; }
export type JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2 = struct { MaxIops: int64; MaxBandwidth: int64; ReservationIops: int64; VolumeName: *ushort; BaseIoSize: ulong; ControlFlags: JOB_OBJECT_IO_RATE_CONTROL_FLAGS; VolumeNameLength: ushort; CriticalReservationIops: int64; ReservationBandwidth: int64; CriticalReservationBandwidth: int64; MaxTimePercent: int64; ReservationTimePercent: int64; CriticalReservationTimePercent: int64; }
export type JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3 = struct { MaxIops: int64; MaxBandwidth: int64; ReservationIops: int64; VolumeName: *ushort; BaseIoSize: ulong; ControlFlags: JOB_OBJECT_IO_RATE_CONTROL_FLAGS; VolumeNameLength: ushort; CriticalReservationIops: int64; ReservationBandwidth: int64; CriticalReservationBandwidth: int64; MaxTimePercent: int64; ReservationTimePercent: int64; CriticalReservationTimePercent: int64; SoftMaxIops: int64; SoftMaxBandwidth: int64; SoftMaxTimePercent: int64; LimitExcessNotifyIops: int64; LimitExcessNotifyBandwidth: int64; LimitExcessNotifyTimePercent: int64; }
export type JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS = enum { JOBOBJECT_IO_ATTRIBUTION_CONTROL_ENABLE = 1; JOBOBJECT_IO_ATTRIBUTION_CONTROL_DISABLE = 2; JOBOBJECT_IO_ATTRIBUTION_CONTROL_VALID_FLAGS = 3; }
export type JOBOBJECT_IO_ATTRIBUTION_STATS = struct { IoCount: uint64; TotalNonOverlappedQueueTime: uint64; TotalNonOverlappedServiceTime: uint64; TotalSize: uint64; }
export type JOBOBJECT_IO_ATTRIBUTION_INFORMATION = struct { ControlFlags: ulong; ReadStats: JOBOBJECT_IO_ATTRIBUTION_STATS; WriteStats: JOBOBJECT_IO_ATTRIBUTION_STATS; }
export type JOBOBJECTINFOCLASS = enum { JobObjectBasicAccountingInformation = 1; JobObjectBasicLimitInformation; JobObjectBasicProcessIdList; JobObjectBasicUIRestrictions; JobObjectSecurityLimitInformation; JobObjectEndOfJobTimeInformation; JobObjectAssociateCompletionPortInformation; JobObjectBasicAndIoAccountingInformation; JobObjectExtendedLimitInformation; JobObjectJobSetInformation; JobObjectGroupInformation; JobObjectNotificationLimitInformation; JobObjectLimitViolationInformation; JobObjectGroupInformationEx; JobObjectCpuRateControlInformation; JobObjectCompletionFilter; JobObjectCompletionCounter; JobObjectReserved1Information = 18; JobObjectReserved2Information; JobObjectReserved3Information; JobObjectReserved4Information; JobObjectReserved5Information; JobObjectReserved6Information; JobObjectReserved7Information; JobObjectReserved8Information; JobObjectReserved9Information; JobObjectReserved10Information; JobObjectReserved11Information; JobObjectReserved12Information; JobObjectReserved13Information; JobObjectReserved14Information = 31; JobObjectNetRateControlInformation; JobObjectNotificationLimitInformation2; JobObjectLimitViolationInformation2; JobObjectCreateSilo; JobObjectSiloBasicInformation; JobObjectReserved15Information = 37; JobObjectReserved16Information = 38; JobObjectReserved17Information = 39; JobObjectReserved18Information = 40; JobObjectReserved19Information = 41; JobObjectReserved20Information = 42; JobObjectReserved21Information = 43; JobObjectReserved22Information = 44; JobObjectReserved23Information = 45; JobObjectReserved24Information = 46; JobObjectReserved25Information = 47; MaxJobObjectInfoClass; }
export type SILOOBJECT_BASIC_INFORMATION = struct { SiloId: ulong; SiloParentId: ulong; NumberOfProcesses: ulong; IsInServerSilo: char; Reserved: [3; char]; }
export type SERVERSILO_STATE = enum { SERVERSILO_INITING = 0; SERVERSILO_STARTED; SERVERSILO_SHUTTING_DOWN; SERVERSILO_TERMINATING; SERVERSILO_TERMINATED; }
export type SERVERSILO_BASIC_INFORMATION = struct { ServiceSessionId: ulong; State: SERVERSILO_STATE; ExitStatus: ulong; IsDownlevelContainer: char; ApiSetSchema: *; HostApiSetSchema: *; }
export type FIRMWARE_TYPE = enum { FirmwareTypeUnknown; FirmwareTypeBios; FirmwareTypeUefi; FirmwareTypeMax; }
export type LOGICAL_PROCESSOR_RELATIONSHIP = enum { RelationProcessorCore; RelationNumaNode; RelationCache; RelationProcessorPackage; RelationGroup; RelationAll = 65535; }
export type PROCESSOR_CACHE_TYPE = enum { CacheUnified; CacheInstruction; CacheData; CacheTrace; }
export type CACHE_DESCRIPTOR = struct { Level: char; Associativity: char; LineSize: ushort; Size: ulong; Type: PROCESSOR_CACHE_TYPE; }
export type SYSTEM_LOGICAL_PROCESSOR_INFORMATION = struct { ProcessorMask: uint64; Relationship: LOGICAL_PROCESSOR_RELATIONSHIP; _3: struct #union { ProcessorCore: struct { Flags: char; }; NumaNode: struct { NodeNumber: ulong; }; Cache: CACHE_DESCRIPTOR; Reserved: [2; uint64]; }; }
export type PROCESSOR_RELATIONSHIP = struct { Flags: char; EfficiencyClass: char; Reserved: [20; char]; GroupCount: ushort; GroupMask: [1; GROUP_AFFINITY]; }
export type NUMA_NODE_RELATIONSHIP = struct { NodeNumber: ulong; Reserved: [20; char]; GroupMask: GROUP_AFFINITY; }
export type CACHE_RELATIONSHIP = struct { Level: char; Associativity: char; LineSize: ushort; CacheSize: ulong; Type: PROCESSOR_CACHE_TYPE; Reserved: [20; char]; GroupMask: GROUP_AFFINITY; }
export type PROCESSOR_GROUP_INFO = struct { MaximumProcessorCount: char; ActiveProcessorCount: char; Reserved: [38; char]; ActiveProcessorMask: uint64; }
export type GROUP_RELATIONSHIP = struct { MaximumGroupCount: ushort; ActiveGroupCount: ushort; Reserved: [20; char]; GroupInfo: [1; PROCESSOR_GROUP_INFO]; }
export type s__SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX = struct { Relationship: LOGICAL_PROCESSOR_RELATIONSHIP; Size: ulong; _3: struct #union { Processor: PROCESSOR_RELATIONSHIP; NumaNode: NUMA_NODE_RELATIONSHIP; Cache: CACHE_RELATIONSHIP; Group: GROUP_RELATIONSHIP; }; }
export type CPU_SET_INFORMATION_TYPE = enum { CpuSetInformation; }
export type s__SYSTEM_CPU_SET_INFORMATION = struct { Size: ulong; Type: CPU_SET_INFORMATION_TYPE; _3: struct #union { CpuSet: struct { Id: ulong; Group: ushort; LogicalProcessorIndex: char; CoreIndex: char; LastLevelCacheIndex: char; NumaNodeIndex: char; EfficiencyClass: char; _8: struct #union { AllFlags: char; _2: struct { #bits(1) Parked: char; #bits(1) Allocated: char; #bits(1) AllocatedToTargetProcess: char; #bits(1) RealTime: char; #bits(4) ReservedFlags: char; }; }; _16: struct #union { Reserved: ulong; SchedulingClass: char; }; AllocationTag: uint64; }; }; }
export type SYSTEM_POOL_ZEROING_INFORMATION = struct { PoolZeroingSupportPresent: char; }
export type SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION = struct { CycleTime: uint64; }
export type XSTATE_FEATURE = struct { Offset: ulong; Size: ulong; }
export type XSTATE_CONFIGURATION = struct { EnabledFeatures: uint64; EnabledVolatileFeatures: uint64; Size: ulong; _4: struct #union { ControlFlags: ulong; _2: struct { #bits(1) OptimizedSave: ulong; #bits(1) CompactionEnabled: ulong; }; }; Features: [64; XSTATE_FEATURE]; EnabledSupervisorFeatures: uint64; AlignedFeatures: uint64; AllFeatureSize: ulong; AllFeatures: [64; ulong]; EnabledUserVisibleSupervisorFeatures: uint64; }
export type MEMORY_BASIC_INFORMATION = struct { BaseAddress: *; AllocationBase: *; AllocationProtect: ulong; PartitionId: ushort; RegionSize: uint64; State: ulong; Protect: ulong; Type: ulong; }
export type MEMORY_BASIC_INFORMATION32 = struct { BaseAddress: ulong; AllocationBase: ulong; AllocationProtect: ulong; RegionSize: ulong; State: ulong; Protect: ulong; Type: ulong; }
export type MEMORY_BASIC_INFORMATION64 = struct { BaseAddress: uint64; AllocationBase: uint64; AllocationProtect: ulong; __alignment1: ulong; RegionSize: uint64; State: ulong; Protect: ulong; Type: ulong; __alignment2: ulong; }
export type CFG_CALL_TARGET_INFO = struct { Offset: uint64; Flags: uint64; }
export type MEM_ADDRESS_REQUIREMENTS = struct { LowestStartingAddress: *; HighestEndingAddress: *; Alignment: uint64; }
export type MEM_EXTENDED_PARAMETER_TYPE = enum { MemExtendedParameterInvalidType = 0; MemExtendedParameterAddressRequirements; MemExtendedParameterNumaNode; MemExtendedParameterPartitionHandle; MemExtendedParameterUserPhysicalHandle; MemExtendedParameterAttributeFlags; MemExtendedParameterMax; }
export type MEM_EXTENDED_PARAMETER = struct { _2: struct { #bits(8) Type: uint64; #bits(56) Reserved: uint64; }; _6: struct #union { ULong64: uint64; Pointer: *; Size: uint64; Handle: *; ULong: ulong; }; }
export type MEM_SECTION_EXTENDED_PARAMETER_TYPE = enum { MemSectionExtendedParameterInvalidType = 0; MemSectionExtendedParameterUserPhysicalFlags; MemSectionExtendedParameterNumaNode; MemSectionExtendedParameterMax; }
export type ENCLAVE_CREATE_INFO_SGX = struct { Secs: [4096; char]; }
export type ENCLAVE_INIT_INFO_SGX = struct { SigStruct: [1808; char]; Reserved1: [240; char]; EInitToken: [304; char]; Reserved2: [1744; char]; }
export type ENCLAVE_CREATE_INFO_VBS = struct { Flags: ulong; OwnerID: [32; char]; }
export type ENCLAVE_CREATE_INFO_VBS_BASIC = struct { Flags: ulong; OwnerID: [32; char]; }
export type ENCLAVE_LOAD_DATA_VBS_BASIC = struct { PageType: ulong; }
export type ENCLAVE_INIT_INFO_VBS_BASIC = struct { FamilyId: [16; char]; ImageId: [16; char]; EnclaveSize: uint64; EnclaveSvn: ulong; Reserved: ulong; _6: struct #union { SignatureInfoHandle: *; Unused: uint64; }; }
export type ENCLAVE_INIT_INFO_VBS = struct { Length: ulong; ThreadCount: ulong; }
export type FILE_ID_128 = struct { Identifier: [16; char]; }
export type FILE_NOTIFY_INFORMATION = struct { NextEntryOffset: ulong; Action: ulong; FileNameLength: ulong; FileName: [1; ushort]; }
export type FILE_NOTIFY_EXTENDED_INFORMATION = struct { NextEntryOffset: ulong; Action: ulong; CreationTime: LARGE_INTEGER; LastModificationTime: LARGE_INTEGER; LastChangeTime: LARGE_INTEGER; LastAccessTime: LARGE_INTEGER; AllocatedLength: LARGE_INTEGER; FileSize: LARGE_INTEGER; FileAttributes: ulong; ReparsePointTag: ulong; FileId: LARGE_INTEGER; ParentFileId: LARGE_INTEGER; FileNameLength: ulong; FileName: [1; ushort]; }
export type FILE_SEGMENT_ELEMENT = struct #union { Buffer: *; Alignment: uint64; }
export type REPARSE_GUID_DATA_BUFFER = struct { ReparseTag: ulong; ReparseDataLength: ushort; Reserved: ushort; ReparseGuid: GUID; GenericReparseBuffer: struct { DataBuffer: [1; char]; }; }
export type SCRUB_DATA_INPUT = struct { Size: ulong; Flags: ulong; MaximumIos: ulong; ObjectId: [4; ulong]; Reserved: [25; ulong]; ResumeContext: [816; char]; }
export type SCRUB_PARITY_EXTENT = struct { Offset: int64; Length: uint64; }
export type SCRUB_PARITY_EXTENT_DATA = struct { Size: ushort; Flags: ushort; NumberOfParityExtents: ushort; MaximumNumberOfParityExtents: ushort; ParityExtents: [1; SCRUB_PARITY_EXTENT]; }
export type SCRUB_DATA_OUTPUT = struct { Size: ulong; Flags: ulong; Status: ulong; ErrorFileOffset: uint64; ErrorLength: uint64; NumberOfBytesRepaired: uint64; NumberOfBytesFailed: uint64; InternalFileReference: uint64; ResumeContextLength: ushort; ParityExtentDataOffset: ushort; Reserved: [9; ulong]; NumberOfMetadataBytesProcessed: uint64; NumberOfDataBytesProcessed: uint64; TotalNumberOfMetadataBytesInUse: uint64; TotalNumberOfDataBytesInUse: uint64; ResumeContext: [816; char]; }
export type SharedVirtualDiskSupportType = enum { SharedVirtualDisksUnsupported = 0; SharedVirtualDisksSupported = 1; SharedVirtualDiskSnapshotsSupported = 3; SharedVirtualDiskCDPSnapshotsSupported = 7; }
export type SharedVirtualDiskHandleState = enum { SharedVirtualDiskHandleStateNone = 0; SharedVirtualDiskHandleStateFileShared = 1; SharedVirtualDiskHandleStateHandleShared = 3; }
export type SHARED_VIRTUAL_DISK_SUPPORT = struct { SharedVirtualDiskSupport: SharedVirtualDiskSupportType; HandleState: SharedVirtualDiskHandleState; }
export type REARRANGE_FILE_DATA = struct { SourceStartingOffset: uint64; TargetOffset: uint64; SourceFileHandle: *; Length: ulong; Flags: ulong; }
export type REARRANGE_FILE_DATA32 = struct { SourceStartingOffset: uint64; TargetOffset: uint64; SourceFileHandle: uint; Length: ulong; Flags: ulong; }
export type SHUFFLE_FILE_DATA = struct { StartingOffset: int64; Length: int64; Flags: ulong; }
export type NETWORK_APP_INSTANCE_EA = struct { AppInstanceID: GUID; CsvFlags: ulong; }
export type SYSTEM_POWER_STATE = enum { PowerSystemUnspecified = 0; PowerSystemWorking = 1; PowerSystemSleeping1 = 2; PowerSystemSleeping2 = 3; PowerSystemSleeping3 = 4; PowerSystemHibernate = 5; PowerSystemShutdown = 6; PowerSystemMaximum = 7; }
export type POWER_ACTION = enum { PowerActionNone = 0; PowerActionReserved; PowerActionSleep; PowerActionHibernate; PowerActionShutdown; PowerActionShutdownReset; PowerActionShutdownOff; PowerActionWarmEject; PowerActionDisplayOff; }
export type DEVICE_POWER_STATE = enum { PowerDeviceUnspecified = 0; PowerDeviceD0; PowerDeviceD1; PowerDeviceD2; PowerDeviceD3; PowerDeviceMaximum; }
export type MONITOR_DISPLAY_STATE = enum { PowerMonitorOff = 0; PowerMonitorOn; PowerMonitorDim; }
export type USER_ACTIVITY_PRESENCE = enum { PowerUserPresent = 0; PowerUserNotPresent; PowerUserInactive; PowerUserMaximum; PowerUserInvalid = PowerUserMaximum; }
export type LATENCY_TIME = enum { LT_DONT_CARE; LT_LOWEST_LATENCY; }
export type POWER_REQUEST_TYPE = enum { PowerRequestDisplayRequired; PowerRequestSystemRequired; PowerRequestAwayModeRequired; PowerRequestExecutionRequired; }
export type CM_POWER_DATA = struct { PD_Size: ulong; PD_MostRecentPowerState: DEVICE_POWER_STATE; PD_Capabilities: ulong; PD_D1Latency: ulong; PD_D2Latency: ulong; PD_D3Latency: ulong; PD_PowerStateMapping: [7; DEVICE_POWER_STATE]; PD_DeepestSystemWake: SYSTEM_POWER_STATE; }
export type POWER_INFORMATION_LEVEL = enum { SystemPowerPolicyAc; SystemPowerPolicyDc; VerifySystemPolicyAc; VerifySystemPolicyDc; SystemPowerCapabilities; SystemBatteryState; SystemPowerStateHandler; ProcessorStateHandler; SystemPowerPolicyCurrent; AdministratorPowerPolicy; SystemReserveHiberFile; ProcessorInformation; SystemPowerInformation; ProcessorStateHandler2; LastWakeTime; LastSleepTime; SystemExecutionState; SystemPowerStateNotifyHandler; ProcessorPowerPolicyAc; ProcessorPowerPolicyDc; VerifyProcessorPowerPolicyAc; VerifyProcessorPowerPolicyDc; ProcessorPowerPolicyCurrent; SystemPowerStateLogging; SystemPowerLoggingEntry; SetPowerSettingValue; NotifyUserPowerSetting; PowerInformationLevelUnused0; SystemMonitorHiberBootPowerOff; SystemVideoState; TraceApplicationPowerMessage; TraceApplicationPowerMessageEnd; ProcessorPerfStates; ProcessorIdleStates; ProcessorCap; SystemWakeSource; SystemHiberFileInformation; TraceServicePowerMessage; ProcessorLoad; PowerShutdownNotification; MonitorCapabilities; SessionPowerInit; SessionDisplayState; PowerRequestCreate; PowerRequestAction; GetPowerRequestList; ProcessorInformationEx; NotifyUserModeLegacyPowerEvent; GroupPark; ProcessorIdleDomains; WakeTimerList; SystemHiberFileSize; ProcessorIdleStatesHv; ProcessorPerfStatesHv; ProcessorPerfCapHv; ProcessorSetIdle; LogicalProcessorIdling; UserPresence; PowerSettingNotificationName; GetPowerSettingValue; IdleResiliency; SessionRITState; SessionConnectNotification; SessionPowerCleanup; SessionLockState; SystemHiberbootState; PlatformInformation; PdcInvocation; MonitorInvocation; FirmwareTableInformationRegistered; SetShutdownSelectedTime; SuspendResumeInvocation; PlmPowerRequestCreate; ScreenOff; CsDeviceNotification; PlatformRole; LastResumePerformance; DisplayBurst; ExitLatencySamplingPercentage; RegisterSpmPowerSettings; PlatformIdleStates; ProcessorIdleVeto; PlatformIdleVeto; SystemBatteryStatePrecise; ThermalEvent; PowerRequestActionInternal; BatteryDeviceState; PowerInformationInternal; ThermalStandby; SystemHiberFileType; PhysicalPowerButtonPress; QueryPotentialDripsConstraint; EnergyTrackerCreate; EnergyTrackerQuery; UpdateBlackBoxRecorder; SessionAllowExternalDmaDevices; PowerInformationLevelMaximum; }
export type POWER_USER_PRESENCE_TYPE = enum { UserNotPresent = 0; UserPresent = 1; UserUnknown = 255; }
export type POWER_USER_PRESENCE = struct { UserPresence: POWER_USER_PRESENCE_TYPE; }
export type POWER_SESSION_CONNECT = struct { Connected: char; Console: char; }
export type POWER_SESSION_TIMEOUTS = struct { InputTimeout: ulong; DisplayTimeout: ulong; }
export type POWER_SESSION_RIT_STATE = struct { Active: char; LastInputTime: ulong; }
export type POWER_SESSION_WINLOGON = struct { SessionId: ulong; Console: char; Locked: char; }
export type POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES = struct { IsAllowed: char; }
export type POWER_IDLE_RESILIENCY = struct { CoalescingTimeout: ulong; IdleResiliencyPeriod: ulong; }
export type POWER_MONITOR_REQUEST_REASON = enum { MonitorRequestReasonUnknown; MonitorRequestReasonPowerButton; MonitorRequestReasonRemoteConnection; MonitorRequestReasonScMonitorpower; MonitorRequestReasonUserInput; MonitorRequestReasonAcDcDisplayBurst; MonitorRequestReasonUserDisplayBurst; MonitorRequestReasonPoSetSystemState; MonitorRequestReasonSetThreadExecutionState; MonitorRequestReasonFullWake; MonitorRequestReasonSessionUnlock; MonitorRequestReasonScreenOffRequest; MonitorRequestReasonIdleTimeout; MonitorRequestReasonPolicyChange; MonitorRequestReasonSleepButton; MonitorRequestReasonLid; MonitorRequestReasonBatteryCountChange; MonitorRequestReasonGracePeriod; MonitorRequestReasonPnP; MonitorRequestReasonDP; MonitorRequestReasonSxTransition; MonitorRequestReasonSystemIdle; MonitorRequestReasonNearProximity; MonitorRequestReasonThermalStandby; MonitorRequestReasonResumePdc; MonitorRequestReasonResumeS4; MonitorRequestReasonTerminal; MonitorRequestReasonPdcSignal; MonitorRequestReasonAcDcDisplayBurstSuppressed; MonitorRequestReasonSystemStateEntered; MonitorRequestReasonWinrt; MonitorRequestReasonUserInputKeyboard; MonitorRequestReasonUserInputMouse; MonitorRequestReasonUserInputTouch; MonitorRequestReasonUserInputPen; MonitorRequestReasonUserInputAccelerometer; MonitorRequestReasonUserInputHid; MonitorRequestReasonUserInputPoUserPresent; MonitorRequestReasonUserInputSessionSwitch; MonitorRequestReasonUserInputInitialization; MonitorRequestReasonPdcSignalWindowsMobilePwrNotif; MonitorRequestReasonPdcSignalWindowsMobileShell; MonitorRequestReasonPdcSignalHeyCortana; MonitorRequestReasonPdcSignalHolographicShell; MonitorRequestReasonPdcSignalFingerprint; MonitorRequestReasonDirectedDrips; MonitorRequestReasonDim; MonitorRequestReasonBuiltinPanel; MonitorRequestReasonDisplayRequiredUnDim; MonitorRequestReasonBatteryCountChangeSuppressed; MonitorRequestReasonResumeModernStandby; MonitorRequestReasonMax; }
export type POWER_MONITOR_REQUEST_TYPE = enum { MonitorRequestTypeOff; MonitorRequestTypeOnAndPresent; MonitorRequestTypeToggleOn; }
export type POWER_MONITOR_INVOCATION = struct { Console: char; RequestReason: POWER_MONITOR_REQUEST_REASON; }
export type RESUME_PERFORMANCE = struct { PostTimeMs: ulong; TotalResumeTimeMs: uint64; ResumeCompleteTimestamp: uint64; }
export type SYSTEM_POWER_CONDITION = enum { PoAc; PoDc; PoHot; PoConditionMaximum; }
export type SET_POWER_SETTING_VALUE = struct { Version: ulong; Guid: GUID; PowerCondition: SYSTEM_POWER_CONDITION; DataLength: ulong; Data: [1; char]; }
export type NOTIFY_USER_POWER_SETTING = struct { Guid: GUID; }
export type APPLICATIONLAUNCH_SETTING_VALUE = struct { ActivationTime: LARGE_INTEGER; Flags: ulong; ButtonInstanceID: ulong; }
export type POWER_PLATFORM_ROLE = enum { PlatformRoleUnspecified = 0; PlatformRoleDesktop; PlatformRoleMobile; PlatformRoleWorkstation; PlatformRoleEnterpriseServer; PlatformRoleSOHOServer; PlatformRoleAppliancePC; PlatformRolePerformanceServer; PlatformRoleSlate; PlatformRoleMaximum; }
export type POWER_PLATFORM_INFORMATION = struct { AoAc: char; }
export type BATTERY_REPORTING_SCALE = struct { Granularity: ulong; Capacity: ulong; }
export type PPM_WMI_LEGACY_PERFSTATE = struct { Frequency: ulong; Flags: ulong; PercentFrequency: ulong; }
export type PPM_WMI_IDLE_STATE = struct { Latency: ulong; Power: ulong; TimeCheck: ulong; PromotePercent: char; DemotePercent: char; StateType: char; Reserved: char; StateFlags: ulong; Context: ulong; IdleHandler: ulong; Reserved1: ulong; }
export type PPM_WMI_IDLE_STATES = struct { Type: ulong; Count: ulong; TargetState: ulong; OldState: ulong; TargetProcessors: uint64; State: [1; PPM_WMI_IDLE_STATE]; }
export type PPM_WMI_IDLE_STATES_EX = struct { Type: ulong; Count: ulong; TargetState: ulong; OldState: ulong; TargetProcessors: *; State: [1; PPM_WMI_IDLE_STATE]; }
export type PPM_WMI_PERF_STATE = struct { Frequency: ulong; Power: ulong; PercentFrequency: char; IncreaseLevel: char; DecreaseLevel: char; Type: char; IncreaseTime: ulong; DecreaseTime: ulong; Control: uint64; Status: uint64; HitCount: ulong; Reserved1: ulong; Reserved2: uint64; Reserved3: uint64; }
export type PPM_WMI_PERF_STATES = struct { Count: ulong; MaxFrequency: ulong; CurrentState: ulong; MaxPerfState: ulong; MinPerfState: ulong; LowestPerfState: ulong; ThermalConstraint: ulong; BusyAdjThreshold: char; PolicyType: char; Type: char; Reserved: char; TimerInterval: ulong; TargetProcessors: uint64; PStateHandler: ulong; PStateContext: ulong; TStateHandler: ulong; TStateContext: ulong; FeedbackHandler: ulong; Reserved1: ulong; Reserved2: uint64; State: [1; PPM_WMI_PERF_STATE]; }
export type PPM_WMI_PERF_STATES_EX = struct { Count: ulong; MaxFrequency: ulong; CurrentState: ulong; MaxPerfState: ulong; MinPerfState: ulong; LowestPerfState: ulong; ThermalConstraint: ulong; BusyAdjThreshold: char; PolicyType: char; Type: char; Reserved: char; TimerInterval: ulong; TargetProcessors: *; PStateHandler: ulong; PStateContext: ulong; TStateHandler: ulong; TStateContext: ulong; FeedbackHandler: ulong; Reserved1: ulong; Reserved2: uint64; State: [1; PPM_WMI_PERF_STATE]; }
export type PPM_IDLE_STATE_ACCOUNTING = struct { IdleTransitions: ulong; FailedTransitions: ulong; InvalidBucketIndex: ulong; TotalTime: uint64; IdleTimeBuckets: [6; ulong]; }
export type PPM_IDLE_ACCOUNTING = struct { StateCount: ulong; TotalTransitions: ulong; ResetCount: ulong; StartTime: uint64; State: [1; PPM_IDLE_STATE_ACCOUNTING]; }
export type PPM_IDLE_STATE_BUCKET_EX = struct { TotalTimeUs: uint64; MinTimeUs: ulong; MaxTimeUs: ulong; Count: ulong; }
export type PPM_IDLE_STATE_ACCOUNTING_EX = struct { TotalTime: uint64; IdleTransitions: ulong; FailedTransitions: ulong; InvalidBucketIndex: ulong; MinTimeUs: ulong; MaxTimeUs: ulong; CancelledTransitions: ulong; IdleTimeBuckets: [16; PPM_IDLE_STATE_BUCKET_EX]; }
export type PPM_IDLE_ACCOUNTING_EX = struct { StateCount: ulong; TotalTransitions: ulong; ResetCount: ulong; AbortCount: ulong; StartTime: uint64; State: [1; PPM_IDLE_STATE_ACCOUNTING_EX]; }
export type PPM_PERFSTATE_EVENT = struct { State: ulong; Status: ulong; Latency: ulong; Speed: ulong; Processor: ulong; }
export type PPM_PERFSTATE_DOMAIN_EVENT = struct { State: ulong; Latency: ulong; Speed: ulong; Processors: uint64; }
export type PPM_IDLESTATE_EVENT = struct { NewState: ulong; OldState: ulong; Processors: uint64; }
export type PPM_THERMALCHANGE_EVENT = struct { ThermalConstraint: ulong; Processors: uint64; }
export type PPM_THERMAL_POLICY_EVENT = struct { Mode: char; Processors: uint64; }
export type POWER_ACTION_POLICY = struct { Action: POWER_ACTION; Flags: ulong; EventCode: ulong; }
export type SYSTEM_POWER_LEVEL = struct { Enable: char; Spare: [3; char]; BatteryLevel: ulong; PowerPolicy: POWER_ACTION_POLICY; MinSystemState: SYSTEM_POWER_STATE; }
export type SYSTEM_POWER_POLICY = struct { Revision: ulong; PowerButton: POWER_ACTION_POLICY; SleepButton: POWER_ACTION_POLICY; LidClose: POWER_ACTION_POLICY; LidOpenWake: SYSTEM_POWER_STATE; Reserved: ulong; Idle: POWER_ACTION_POLICY; IdleTimeout: ulong; IdleSensitivity: char; DynamicThrottle: char; Spare2: [2; char]; MinSleep: SYSTEM_POWER_STATE; MaxSleep: SYSTEM_POWER_STATE; ReducedLatencySleep: SYSTEM_POWER_STATE; WinLogonFlags: ulong; Spare3: ulong; DozeS4Timeout: ulong; BroadcastCapacityResolution: ulong; DischargePolicy: [4; SYSTEM_POWER_LEVEL]; VideoTimeout: ulong; VideoDimDisplay: char; VideoReserved: [3; ulong]; SpindownTimeout: ulong; OptimizeForPower: char; FanThrottleTolerance: char; ForcedThrottle: char; MinThrottle: char; OverThrottled: POWER_ACTION_POLICY; }
export type PROCESSOR_IDLESTATE_INFO = struct { TimeCheck: ulong; DemotePercent: char; PromotePercent: char; Spare: [2; char]; }
export type PROCESSOR_IDLESTATE_POLICY = struct { Revision: ushort; Flags: struct #union { AsWORD: ushort; _2: struct { #bits(1) AllowScaling: ushort; #bits(1) Disabled: ushort; #bits(14) Reserved: ushort; }; }; PolicyCount: ulong; Policy: [3; PROCESSOR_IDLESTATE_INFO]; }
export type PROCESSOR_POWER_POLICY_INFO = struct { TimeCheck: ulong; DemoteLimit: ulong; PromoteLimit: ulong; DemotePercent: char; PromotePercent: char; Spare: [2; char]; #bits(1) AllowDemotion: ulong; #bits(1) AllowPromotion: ulong; #bits(30) Reserved: ulong; }
export type PROCESSOR_POWER_POLICY = struct { Revision: ulong; DynamicThrottle: char; Spare: [3; char]; #bits(1) DisableCStates: ulong; #bits(31) Reserved: ulong; PolicyCount: ulong; Policy: [3; PROCESSOR_POWER_POLICY_INFO]; }
export type PROCESSOR_PERFSTATE_POLICY = struct { Revision: ulong; MaxThrottle: char; MinThrottle: char; BusyAdjThreshold: char; _5: struct #union { Spare: char; Flags: struct #union { AsBYTE: char; _2: struct { #bits(1) NoDomainAccounting: char; #bits(2) IncreasePolicy: char; #bits(2) DecreasePolicy: char; #bits(3) Reserved: char; }; }; }; TimeCheck: ulong; IncreaseTime: ulong; DecreaseTime: ulong; IncreasePercent: ulong; DecreasePercent: ulong; }
export type ADMINISTRATOR_POWER_POLICY = struct { MinSleep: SYSTEM_POWER_STATE; MaxSleep: SYSTEM_POWER_STATE; MinVideoTimeout: ulong; MaxVideoTimeout: ulong; MinSpindownTimeout: ulong; MaxSpindownTimeout: ulong; }
export type HIBERFILE_BUCKET_SIZE = enum { HiberFileBucket1GB = 0; HiberFileBucket2GB; HiberFileBucket4GB; HiberFileBucket8GB; HiberFileBucket16GB; HiberFileBucket32GB; HiberFileBucketUnlimited; HiberFileBucketMax; }
export type HIBERFILE_BUCKET = struct { MaxPhysicalMemory: uint64; PhysicalMemoryPercent: [3; ulong]; }
export type SYSTEM_POWER_CAPABILITIES = struct { PowerButtonPresent: char; SleepButtonPresent: char; LidPresent: char; SystemS1: char; SystemS2: char; SystemS3: char; SystemS4: char; SystemS5: char; HiberFilePresent: char; FullWake: char; VideoDimPresent: char; ApmPresent: char; UpsPresent: char; ThermalControl: char; ProcessorThrottle: char; ProcessorMinThrottle: char; ProcessorMaxThrottle: char; FastSystemS4: char; Hiberboot: char; WakeAlarmPresent: char; AoAc: char; DiskSpinDown: char; HiberFileType: char; AoAcConnectivitySupported: char; spare3: [6; char]; SystemBatteriesPresent: char; BatteriesAreShortTerm: char; BatteryScale: [3; BATTERY_REPORTING_SCALE]; AcOnLineWake: SYSTEM_POWER_STATE; SoftLidWake: SYSTEM_POWER_STATE; RtcWake: SYSTEM_POWER_STATE; MinDeviceWakeState: SYSTEM_POWER_STATE; DefaultLowLatencyWake: SYSTEM_POWER_STATE; }
export type SYSTEM_BATTERY_STATE = struct { AcOnLine: char; BatteryPresent: char; Charging: char; Discharging: char; Spare1: [3; char]; Tag: char; MaxCapacity: ulong; RemainingCapacity: ulong; Rate: ulong; EstimatedTime: ulong; DefaultAlert1: ulong; DefaultAlert2: ulong; }
export type IMAGE_DOS_HEADER = struct { e_magic: ushort; e_cblp: ushort; e_cp: ushort; e_crlc: ushort; e_cparhdr: ushort; e_minalloc: ushort; e_maxalloc: ushort; e_ss: ushort; e_sp: ushort; e_csum: ushort; e_ip: ushort; e_cs: ushort; e_lfarlc: ushort; e_ovno: ushort; e_res: [4; ushort]; e_oemid: ushort; e_oeminfo: ushort; e_res2: [10; ushort]; e_lfanew: long; }
export type IMAGE_OS2_HEADER = struct { ne_magic: ushort; ne_ver: char; ne_rev: char; ne_enttab: ushort; ne_cbenttab: ushort; ne_crc: long; ne_flags: ushort; ne_autodata: ushort; ne_heap: ushort; ne_stack: ushort; ne_csip: long; ne_sssp: long; ne_cseg: ushort; ne_cmod: ushort; ne_cbnrestab: ushort; ne_segtab: ushort; ne_rsrctab: ushort; ne_restab: ushort; ne_modtab: ushort; ne_imptab: ushort; ne_nrestab: long; ne_cmovent: ushort; ne_align: ushort; ne_cres: ushort; ne_exetyp: char; ne_flagsothers: char; ne_pretthunks: ushort; ne_psegrefbytes: ushort; ne_swaparea: ushort; ne_expver: ushort; }
export type IMAGE_VXD_HEADER = struct { e32_magic: ushort; e32_border: char; e32_worder: char; e32_level: ulong; e32_cpu: ushort; e32_os: ushort; e32_ver: ulong; e32_mflags: ulong; e32_mpages: ulong; e32_startobj: ulong; e32_eip: ulong; e32_stackobj: ulong; e32_esp: ulong; e32_pagesize: ulong; e32_lastpagesize: ulong; e32_fixupsize: ulong; e32_fixupsum: ulong; e32_ldrsize: ulong; e32_ldrsum: ulong; e32_objtab: ulong; e32_objcnt: ulong; e32_objmap: ulong; e32_itermap: ulong; e32_rsrctab: ulong; e32_rsrccnt: ulong; e32_restab: ulong; e32_enttab: ulong; e32_dirtab: ulong; e32_dircnt: ulong; e32_fpagetab: ulong; e32_frectab: ulong; e32_impmod: ulong; e32_impmodcnt: ulong; e32_impproc: ulong; e32_pagesum: ulong; e32_datapage: ulong; e32_preload: ulong; e32_nrestab: ulong; e32_cbnrestab: ulong; e32_nressum: ulong; e32_autodata: ulong; e32_debuginfo: ulong; e32_debuglen: ulong; e32_instpreload: ulong; e32_instdemand: ulong; e32_heapsize: ulong; e32_res3: [12; char]; e32_winresoff: ulong; e32_winreslen: ulong; e32_devid: ushort; e32_ddkver: ushort; }
export type IMAGE_FILE_HEADER = struct { Machine: ushort; NumberOfSections: ushort; TimeDateStamp: ulong; PointerToSymbolTable: ulong; NumberOfSymbols: ulong; SizeOfOptionalHeader: ushort; Characteristics: ushort; }
export type IMAGE_DATA_DIRECTORY = struct { VirtualAddress: ulong; Size: ulong; }
export type IMAGE_OPTIONAL_HEADER32 = struct { Magic: ushort; MajorLinkerVersion: char; MinorLinkerVersion: char; SizeOfCode: ulong; SizeOfInitializedData: ulong; SizeOfUninitializedData: ulong; AddressOfEntryPoint: ulong; BaseOfCode: ulong; BaseOfData: ulong; ImageBase: ulong; SectionAlignment: ulong; FileAlignment: ulong; MajorOperatingSystemVersion: ushort; MinorOperatingSystemVersion: ushort; MajorImageVersion: ushort; MinorImageVersion: ushort; MajorSubsystemVersion: ushort; MinorSubsystemVersion: ushort; Win32VersionValue: ulong; SizeOfImage: ulong; SizeOfHeaders: ulong; CheckSum: ulong; Subsystem: ushort; DllCharacteristics: ushort; SizeOfStackReserve: ulong; SizeOfStackCommit: ulong; SizeOfHeapReserve: ulong; SizeOfHeapCommit: ulong; LoaderFlags: ulong; NumberOfRvaAndSizes: ulong; DataDirectory: [16; IMAGE_DATA_DIRECTORY]; }
export type IMAGE_ROM_OPTIONAL_HEADER = struct { Magic: ushort; MajorLinkerVersion: char; MinorLinkerVersion: char; SizeOfCode: ulong; SizeOfInitializedData: ulong; SizeOfUninitializedData: ulong; AddressOfEntryPoint: ulong; BaseOfCode: ulong; BaseOfData: ulong; BaseOfBss: ulong; GprMask: ulong; CprMask: [4; ulong]; GpValue: ulong; }
export type IMAGE_OPTIONAL_HEADER64 = struct { Magic: ushort; MajorLinkerVersion: char; MinorLinkerVersion: char; SizeOfCode: ulong; SizeOfInitializedData: ulong; SizeOfUninitializedData: ulong; AddressOfEntryPoint: ulong; BaseOfCode: ulong; ImageBase: uint64; SectionAlignment: ulong; FileAlignment: ulong; MajorOperatingSystemVersion: ushort; MinorOperatingSystemVersion: ushort; MajorImageVersion: ushort; MinorImageVersion: ushort; MajorSubsystemVersion: ushort; MinorSubsystemVersion: ushort; Win32VersionValue: ulong; SizeOfImage: ulong; SizeOfHeaders: ulong; CheckSum: ulong; Subsystem: ushort; DllCharacteristics: ushort; SizeOfStackReserve: uint64; SizeOfStackCommit: uint64; SizeOfHeapReserve: uint64; SizeOfHeapCommit: uint64; LoaderFlags: ulong; NumberOfRvaAndSizes: ulong; DataDirectory: [16; IMAGE_DATA_DIRECTORY]; }
export type IMAGE_NT_HEADERS64 = struct { Signature: ulong; FileHeader: IMAGE_FILE_HEADER; OptionalHeader: IMAGE_OPTIONAL_HEADER64; }
export type IMAGE_NT_HEADERS32 = struct { Signature: ulong; FileHeader: IMAGE_FILE_HEADER; OptionalHeader: IMAGE_OPTIONAL_HEADER32; }
export type IMAGE_ROM_HEADERS = struct { FileHeader: IMAGE_FILE_HEADER; OptionalHeader: IMAGE_ROM_OPTIONAL_HEADER; }
export type ANON_OBJECT_HEADER = struct { Sig1: ushort; Sig2: ushort; Version: ushort; Machine: ushort; TimeDateStamp: ulong; ClassID: GUID; SizeOfData: ulong; }
export type ANON_OBJECT_HEADER_V2 = struct { Sig1: ushort; Sig2: ushort; Version: ushort; Machine: ushort; TimeDateStamp: ulong; ClassID: GUID; SizeOfData: ulong; Flags: ulong; MetaDataSize: ulong; MetaDataOffset: ulong; }
export type ANON_OBJECT_HEADER_BIGOBJ = struct { Sig1: ushort; Sig2: ushort; Version: ushort; Machine: ushort; TimeDateStamp: ulong; ClassID: GUID; SizeOfData: ulong; Flags: ulong; MetaDataSize: ulong; MetaDataOffset: ulong; NumberOfSections: ulong; PointerToSymbolTable: ulong; NumberOfSymbols: ulong; }
export type IMAGE_SECTION_HEADER = struct { Name: [8; char]; Misc: struct #union { PhysicalAddress: ulong; VirtualSize: ulong; }; VirtualAddress: ulong; SizeOfRawData: ulong; PointerToRawData: ulong; PointerToRelocations: ulong; PointerToLinenumbers: ulong; NumberOfRelocations: ushort; NumberOfLinenumbers: ushort; Characteristics: ulong; }
export type IMAGE_SYMBOL = struct { N: struct #union { ShortName: [8; char]; Name: struct { Short: ulong; Long: ulong; }; LongName: [2; ulong]; }; Value: ulong; SectionNumber: short; Type: ushort; StorageClass: char; NumberOfAuxSymbols: char; }
export type IMAGE_SYMBOL_EX = struct { N: struct #union { ShortName: [8; char]; Name: struct { Short: ulong; Long: ulong; }; LongName: [2; ulong]; }; Value: ulong; SectionNumber: long; Type: ushort; StorageClass: char; NumberOfAuxSymbols: char; }
export type IMAGE_AUX_SYMBOL_TOKEN_DEF = struct { bAuxType: char; bReserved: char; SymbolTableIndex: ulong; rgbReserved: [12; char]; }
export type IMAGE_AUX_SYMBOL = struct #union { Sym: struct { TagIndex: ulong; Misc: struct #union { LnSz: struct { Linenumber: ushort; Size: ushort; }; TotalSize: ulong; }; FcnAry: struct #union { Function: struct { PointerToLinenumber: ulong; PointerToNextFunction: ulong; }; Array: struct { Dimension: [4; ushort]; }; }; TvIndex: ushort; }; File: struct { Name: [18; char]; }; Section: struct { Length: ulong; NumberOfRelocations: ushort; NumberOfLinenumbers: ushort; CheckSum: ulong; Number: short; Selection: char; bReserved: char; HighNumber: short; }; TokenDef: IMAGE_AUX_SYMBOL_TOKEN_DEF; CRC: struct { crc: ulong; rgbReserved: [14; char]; }; }
export type IMAGE_AUX_SYMBOL_EX = struct #union { Sym: struct { WeakDefaultSymIndex: ulong; WeakSearchType: ulong; rgbReserved: [12; char]; }; File: struct { Name: [20; char]; }; Section: struct { Length: ulong; NumberOfRelocations: ushort; NumberOfLinenumbers: ushort; CheckSum: ulong; Number: short; Selection: char; bReserved: char; HighNumber: short; rgbReserved: [2; char]; }; _8: struct { TokenDef: IMAGE_AUX_SYMBOL_TOKEN_DEF; rgbReserved: [2; char]; }; CRC: struct { crc: ulong; rgbReserved: [16; char]; }; }
export type IMAGE_AUX_SYMBOL_TYPE = enum { IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1; }
export type IMAGE_RELOCATION = struct { _2: struct #union { VirtualAddress: ulong; RelocCount: ulong; }; SymbolTableIndex: ulong; Type: ushort; }
export type IMAGE_LINENUMBER = struct { Type: struct #union { SymbolTableIndex: ulong; VirtualAddress: ulong; }; Linenumber: ushort; }
export type IMAGE_BASE_RELOCATION = struct { VirtualAddress: ulong; SizeOfBlock: ulong; }
export type IMAGE_ARCHIVE_MEMBER_HEADER = struct { Name: [16; char]; Date: [12; char]; UserID: [6; char]; GroupID: [6; char]; Mode: [8; char]; Size: [10; char]; EndHeader: [2; char]; }
export type IMAGE_EXPORT_DIRECTORY = struct { Characteristics: ulong; TimeDateStamp: ulong; MajorVersion: ushort; MinorVersion: ushort; Name: ulong; Base: ulong; NumberOfFunctions: ulong; NumberOfNames: ulong; AddressOfFunctions: ulong; AddressOfNames: ulong; AddressOfNameOrdinals: ulong; }
export type IMAGE_IMPORT_BY_NAME = struct { Hint: ushort; Name: [1; char]; }
export type IMAGE_THUNK_DATA64 = struct { u1: struct #union { ForwarderString: uint64; Function: uint64; Ordinal: uint64; AddressOfData: uint64; }; }
export type IMAGE_THUNK_DATA32 = struct { u1: struct #union { ForwarderString: ulong; Function: ulong; Ordinal: ulong; AddressOfData: ulong; }; }
export type IMAGE_TLS_DIRECTORY64 = struct { StartAddressOfRawData: uint64; EndAddressOfRawData: uint64; AddressOfIndex: uint64; AddressOfCallBacks: uint64; SizeOfZeroFill: ulong; _7: struct #union { Characteristics: ulong; _3: struct { #bits(20) Reserved0: ulong; #bits(4) Alignment: ulong; #bits(8) Reserved1: ulong; }; }; }
export type IMAGE_TLS_DIRECTORY32 = struct { StartAddressOfRawData: ulong; EndAddressOfRawData: ulong; AddressOfIndex: ulong; AddressOfCallBacks: ulong; SizeOfZeroFill: ulong; _7: struct #union { Characteristics: ulong; _3: struct { #bits(20) Reserved0: ulong; #bits(4) Alignment: ulong; #bits(8) Reserved1: ulong; }; }; }
export type IMAGE_IMPORT_DESCRIPTOR = struct { _2: struct #union { Characteristics: ulong; OriginalFirstThunk: ulong; }; TimeDateStamp: ulong; ForwarderChain: ulong; Name: ulong; FirstThunk: ulong; }
export type IMAGE_BOUND_IMPORT_DESCRIPTOR = struct { TimeDateStamp: ulong; OffsetModuleName: ushort; NumberOfModuleForwarderRefs: ushort; }
export type IMAGE_BOUND_FORWARDER_REF = struct { TimeDateStamp: ulong; OffsetModuleName: ushort; Reserved: ushort; }
export type IMAGE_DELAYLOAD_DESCRIPTOR = struct { Attributes: struct #union { AllAttributes: ulong; _3: struct { #bits(1) RvaBased: ulong; #bits(31) ReservedAttributes: ulong; }; }; DllNameRVA: ulong; ModuleHandleRVA: ulong; ImportAddressTableRVA: ulong; ImportNameTableRVA: ulong; BoundImportAddressTableRVA: ulong; UnloadInformationTableRVA: ulong; TimeDateStamp: ulong; }
export type IMAGE_RESOURCE_DIRECTORY = struct { Characteristics: ulong; TimeDateStamp: ulong; MajorVersion: ushort; MinorVersion: ushort; NumberOfNamedEntries: ushort; NumberOfIdEntries: ushort; }
export type IMAGE_RESOURCE_DIRECTORY_ENTRY = struct { _2: struct #union { _2: struct { #bits(31) NameOffset: ulong; #bits(1) NameIsString: ulong; }; Name: ulong; Id: ushort; }; _8: struct #union { OffsetToData: ulong; _3: struct { #bits(31) OffsetToDirectory: ulong; #bits(1) DataIsDirectory: ulong; }; }; }
export type IMAGE_RESOURCE_DIRECTORY_STRING = struct { Length: ushort; NameString: [1; char]; }
export type IMAGE_RESOURCE_DIR_STRING_U = struct { Length: ushort; NameString: [1; ushort]; }
export type IMAGE_RESOURCE_DATA_ENTRY = struct { OffsetToData: ulong; Size: ulong; CodePage: ulong; Reserved: ulong; }
export type IMAGE_LOAD_CONFIG_CODE_INTEGRITY = struct { Flags: ushort; Catalog: ushort; CatalogOffset: ulong; Reserved: ulong; }
export type IMAGE_DYNAMIC_RELOCATION_TABLE = struct { Version: ulong; Size: ulong; }
export type IMAGE_DYNAMIC_RELOCATION32 = struct { Symbol: ulong; BaseRelocSize: ulong; }
export type IMAGE_DYNAMIC_RELOCATION64 = struct { Symbol: uint64; BaseRelocSize: ulong; }
export type IMAGE_DYNAMIC_RELOCATION32_V2 = struct { HeaderSize: ulong; FixupInfoSize: ulong; Symbol: ulong; SymbolGroup: ulong; Flags: ulong; }
export type IMAGE_DYNAMIC_RELOCATION64_V2 = struct { HeaderSize: ulong; FixupInfoSize: ulong; Symbol: uint64; SymbolGroup: ulong; Flags: ulong; }
export type IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER = struct { PrologueByteCount: char; }
export type IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER = struct { EpilogueCount: ulong; EpilogueByteCount: char; BranchDescriptorElementSize: char; BranchDescriptorCount: ushort; }
export type IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION = struct { #bits(12) PageRelativeOffset: ulong; #bits(1) IndirectCall: ulong; #bits(19) IATIndex: ulong; }
export type IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION = struct { #bits(12) PageRelativeOffset: ushort; #bits(1) IndirectCall: ushort; #bits(1) RexWPrefix: ushort; #bits(1) CfgCheck: ushort; #bits(1) Reserved: ushort; }
export type IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION = struct { #bits(12) PageRelativeOffset: ushort; #bits(4) RegisterNumber: ushort; }
export type IMAGE_LOAD_CONFIG_DIRECTORY32 = struct { Size: ulong; TimeDateStamp: ulong; MajorVersion: ushort; MinorVersion: ushort; GlobalFlagsClear: ulong; GlobalFlagsSet: ulong; CriticalSectionDefaultTimeout: ulong; DeCommitFreeBlockThreshold: ulong; DeCommitTotalFreeThreshold: ulong; LockPrefixTable: ulong; MaximumAllocationSize: ulong; VirtualMemoryThreshold: ulong; ProcessHeapFlags: ulong; ProcessAffinityMask: ulong; CSDVersion: ushort; DependentLoadFlags: ushort; EditList: ulong; SecurityCookie: ulong; SEHandlerTable: ulong; SEHandlerCount: ulong; GuardCFCheckFunctionPointer: ulong; GuardCFDispatchFunctionPointer: ulong; GuardCFFunctionTable: ulong; GuardCFFunctionCount: ulong; GuardFlags: ulong; CodeIntegrity: IMAGE_LOAD_CONFIG_CODE_INTEGRITY; GuardAddressTakenIatEntryTable: ulong; GuardAddressTakenIatEntryCount: ulong; GuardLongJumpTargetTable: ulong; GuardLongJumpTargetCount: ulong; DynamicValueRelocTable: ulong; CHPEMetadataPointer: ulong; GuardRFFailureRoutine: ulong; GuardRFFailureRoutineFunctionPointer: ulong; DynamicValueRelocTableOffset: ulong; DynamicValueRelocTableSection: ushort; Reserved2: ushort; GuardRFVerifyStackPointerFunctionPointer: ulong; HotPatchTableOffset: ulong; Reserved3: ulong; EnclaveConfigurationPointer: ulong; VolatileMetadataPointer: ulong; GuardEHContinuationTable: ulong; GuardEHContinuationCount: ulong; }
export type IMAGE_LOAD_CONFIG_DIRECTORY64 = struct { Size: ulong; TimeDateStamp: ulong; MajorVersion: ushort; MinorVersion: ushort; GlobalFlagsClear: ulong; GlobalFlagsSet: ulong; CriticalSectionDefaultTimeout: ulong; DeCommitFreeBlockThreshold: uint64; DeCommitTotalFreeThreshold: uint64; LockPrefixTable: uint64; MaximumAllocationSize: uint64; VirtualMemoryThreshold: uint64; ProcessAffinityMask: uint64; ProcessHeapFlags: ulong; CSDVersion: ushort; DependentLoadFlags: ushort; EditList: uint64; SecurityCookie: uint64; SEHandlerTable: uint64; SEHandlerCount: uint64; GuardCFCheckFunctionPointer: uint64; GuardCFDispatchFunctionPointer: uint64; GuardCFFunctionTable: uint64; GuardCFFunctionCount: uint64; GuardFlags: ulong; CodeIntegrity: IMAGE_LOAD_CONFIG_CODE_INTEGRITY; GuardAddressTakenIatEntryTable: uint64; GuardAddressTakenIatEntryCount: uint64; GuardLongJumpTargetTable: uint64; GuardLongJumpTargetCount: uint64; DynamicValueRelocTable: uint64; CHPEMetadataPointer: uint64; GuardRFFailureRoutine: uint64; GuardRFFailureRoutineFunctionPointer: uint64; DynamicValueRelocTableOffset: ulong; DynamicValueRelocTableSection: ushort; Reserved2: ushort; GuardRFVerifyStackPointerFunctionPointer: uint64; HotPatchTableOffset: ulong; Reserved3: ulong; EnclaveConfigurationPointer: uint64; VolatileMetadataPointer: uint64; GuardEHContinuationTable: uint64; GuardEHContinuationCount: uint64; }
export type IMAGE_HOT_PATCH_INFO = struct { Version: ulong; Size: ulong; SequenceNumber: ulong; BaseImageList: ulong; BaseImageCount: ulong; BufferOffset: ulong; ExtraPatchSize: ulong; }
export type IMAGE_HOT_PATCH_BASE = struct { SequenceNumber: ulong; Flags: ulong; OriginalTimeDateStamp: ulong; OriginalCheckSum: ulong; CodeIntegrityInfo: ulong; CodeIntegritySize: ulong; PatchTable: ulong; BufferOffset: ulong; }
export type IMAGE_HOT_PATCH_HASHES = struct { SHA256: [32; char]; SHA1: [20; char]; }
export type IMAGE_CE_RUNTIME_FUNCTION_ENTRY = struct { FuncStart: ulong; #bits(8) PrologLen: ulong; #bits(22) FuncLen: ulong; #bits(1) ThirtyTwoBit: ulong; #bits(1) ExceptionFlag: ulong; }
export type IMAGE_ARM_RUNTIME_FUNCTION_ENTRY = struct { BeginAddress: ulong; _3: struct #union { UnwindData: ulong; _3: struct { #bits(2) Flag: ulong; #bits(11) FunctionLength: ulong; #bits(2) Ret: ulong; #bits(1) H: ulong; #bits(3) Reg: ulong; #bits(1) R: ulong; #bits(1) L: ulong; #bits(1) C: ulong; #bits(10) StackAdjust: ulong; }; }; }
export type ARM64_FNPDATA_FLAGS = enum { PdataRefToFullXdata = 0; PdataPackedUnwindFunction = 1; PdataPackedUnwindFragment = 2; }
export type ARM64_FNPDATA_CR = enum { PdataCrUnchained = 0; PdataCrUnchainedSavedLr = 1; PdataCrChainedWithPac = 2; PdataCrChained = 3; }
export type IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY = struct { BeginAddress: ulong; _3: struct #union { UnwindData: ulong; _3: struct { #bits(2) Flag: ulong; #bits(11) FunctionLength: ulong; #bits(3) RegF: ulong; #bits(4) RegI: ulong; #bits(1) H: ulong; #bits(2) CR: ulong; #bits(9) FrameSize: ulong; }; }; }
export type IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA = struct #union { HeaderData: ulong; _3: struct { #bits(18) FunctionLength: ulong; #bits(2) Version: ulong; #bits(1) ExceptionDataPresent: ulong; #bits(1) EpilogInHeader: ulong; #bits(5) EpilogCount: ulong; #bits(5) CodeWords: ulong; }; }
export type IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY = struct { BeginAddress: uint64; EndAddress: uint64; ExceptionHandler: uint64; HandlerData: uint64; PrologEndAddress: uint64; }
export type IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY = struct { BeginAddress: ulong; EndAddress: ulong; ExceptionHandler: ulong; HandlerData: ulong; PrologEndAddress: ulong; }
export type _IMAGE_RUNTIME_FUNCTION_ENTRY = struct { BeginAddress: ulong; EndAddress: ulong; _4: struct #union { UnwindInfoAddress: ulong; UnwindData: ulong; }; }
export type IMAGE_ENCLAVE_CONFIG32 = struct { Size: ulong; MinimumRequiredConfigSize: ulong; PolicyFlags: ulong; NumberOfImports: ulong; ImportList: ulong; ImportEntrySize: ulong; FamilyID: [16; char]; ImageID: [16; char]; ImageVersion: ulong; SecurityVersion: ulong; EnclaveSize: ulong; NumberOfThreads: ulong; EnclaveFlags: ulong; }
export type IMAGE_ENCLAVE_CONFIG64 = struct { Size: ulong; MinimumRequiredConfigSize: ulong; PolicyFlags: ulong; NumberOfImports: ulong; ImportList: ulong; ImportEntrySize: ulong; FamilyID: [16; char]; ImageID: [16; char]; ImageVersion: ulong; SecurityVersion: ulong; EnclaveSize: uint64; NumberOfThreads: ulong; EnclaveFlags: ulong; }
export type IMAGE_ENCLAVE_IMPORT = struct { MatchType: ulong; MinimumSecurityVersion: ulong; UniqueOrAuthorID: [32; char]; FamilyID: [16; char]; ImageID: [16; char]; ImportName: ulong; Reserved: ulong; }
export type IMAGE_DEBUG_DIRECTORY = struct { Characteristics: ulong; TimeDateStamp: ulong; MajorVersion: ushort; MinorVersion: ushort; Type: ulong; SizeOfData: ulong; AddressOfRawData: ulong; PointerToRawData: ulong; }
export type IMAGE_COFF_SYMBOLS_HEADER = struct { NumberOfSymbols: ulong; LvaToFirstSymbol: ulong; NumberOfLinenumbers: ulong; LvaToFirstLinenumber: ulong; RvaToFirstByteOfCode: ulong; RvaToLastByteOfCode: ulong; RvaToFirstByteOfData: ulong; RvaToLastByteOfData: ulong; }
export type FPO_DATA = struct { ulOffStart: ulong; cbProcSize: ulong; cdwLocals: ulong; cdwParams: ushort; #bits(8) cbProlog: ushort; #bits(3) cbRegs: ushort; #bits(1) fHasSEH: ushort; #bits(1) fUseBP: ushort; #bits(1) reserved: ushort; #bits(2) cbFrame: ushort; }
export type IMAGE_DEBUG_MISC = struct { DataType: ulong; Length: ulong; Unicode: char; Reserved: [3; char]; Data: [1; char]; }
export type IMAGE_FUNCTION_ENTRY = struct { StartingAddress: ulong; EndingAddress: ulong; EndOfPrologue: ulong; }
export type IMAGE_FUNCTION_ENTRY64 = struct { StartingAddress: uint64; EndingAddress: uint64; _4: struct #union { EndOfPrologue: uint64; UnwindInfoAddress: uint64; }; }
export type IMAGE_SEPARATE_DEBUG_HEADER = struct { Signature: ushort; Flags: ushort; Machine: ushort; Characteristics: ushort; TimeDateStamp: ulong; CheckSum: ulong; ImageBase: ulong; SizeOfImage: ulong; NumberOfSections: ulong; ExportedNamesSize: ulong; DebugDirectorySize: ulong; SectionAlignment: ulong; Reserved: [2; ulong]; }
export type NON_PAGED_DEBUG_INFO = struct { Signature: ushort; Flags: ushort; Size: ulong; Machine: ushort; Characteristics: ushort; TimeDateStamp: ulong; CheckSum: ulong; SizeOfImage: ulong; ImageBase: uint64; }
export type IMAGE_ARCHITECTURE_HEADER = struct { #bits(1) AmaskValue: uint; #bits(7) : int; #bits(8) AmaskShift: uint; #bits(16) : int; FirstEntryRVA: ulong; }
export type IMAGE_ARCHITECTURE_ENTRY = struct { FixupInstRVA: ulong; NewInst: ulong; }
export type IMPORT_OBJECT_HEADER = struct { Sig1: ushort; Sig2: ushort; Version: ushort; Machine: ushort; TimeDateStamp: ulong; SizeOfData: ulong; _7: struct #union { Ordinal: ushort; Hint: ushort; }; #bits(2) Type: ushort; #bits(3) NameType: ushort; #bits(11) Reserved: ushort; }
export type IMPORT_OBJECT_TYPE = enum { IMPORT_OBJECT_CODE = 0; IMPORT_OBJECT_DATA = 1; IMPORT_OBJECT_CONST = 2; }
export type IMPORT_OBJECT_NAME_TYPE = enum { IMPORT_OBJECT_ORDINAL = 0; IMPORT_OBJECT_NAME = 1; IMPORT_OBJECT_NAME_NO_PREFIX = 2; IMPORT_OBJECT_NAME_UNDECORATE = 3; IMPORT_OBJECT_NAME_EXPORTAS = 4; }
export type ReplacesCorHdrNumericDefines = enum { COMIMAGE_FLAGS_ILONLY = 1; COMIMAGE_FLAGS_32BITREQUIRED = 2; COMIMAGE_FLAGS_IL_LIBRARY = 4; COMIMAGE_FLAGS_STRONGNAMESIGNED = 8; COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 16; COMIMAGE_FLAGS_TRACKDEBUGDATA = 65536; COMIMAGE_FLAGS_32BITPREFERRED = 131072; COR_VERSION_MAJOR_V2 = 2; COR_VERSION_MAJOR = COR_VERSION_MAJOR_V2; COR_VERSION_MINOR = 5; COR_DELETED_NAME_LENGTH = 8; COR_VTABLEGAP_NAME_LENGTH = 8; NATIVE_TYPE_MAX_CB = 1; COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 255; IMAGE_COR_MIH_METHODRVA = 1; IMAGE_COR_MIH_EHRVA = 2; IMAGE_COR_MIH_BASICBLOCK = 8; COR_VTABLE_32BIT = 1; COR_VTABLE_64BIT = 2; COR_VTABLE_FROM_UNMANAGED = 4; COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 8; COR_VTABLE_CALL_MOST_DERIVED = 16; IMAGE_COR_EATJ_THUNK_SIZE = 32; MAX_CLASS_NAME = 1024; MAX_PACKAGE_NAME = 1024; }
export type IMAGE_COR20_HEADER = struct { cb: ulong; MajorRuntimeVersion: ushort; MinorRuntimeVersion: ushort; MetaData: IMAGE_DATA_DIRECTORY; Flags: ulong; _6: struct #union { EntryPointToken: ulong; EntryPointRVA: ulong; }; Resources: IMAGE_DATA_DIRECTORY; StrongNameSignature: IMAGE_DATA_DIRECTORY; CodeManagerTable: IMAGE_DATA_DIRECTORY; VTableFixups: IMAGE_DATA_DIRECTORY; ExportAddressTableJumps: IMAGE_DATA_DIRECTORY; ManagedNativeHeader: IMAGE_DATA_DIRECTORY; }
export type SLIST_ENTRY = struct { Next: *SLIST_ENTRY; }
export type SLIST_HEADER = struct #union { _2: struct { Alignment: uint64; Region: uint64; }; HeaderX64: struct { #bits(16) Depth: uint64; #bits(48) Sequence: uint64; #bits(4) Reserved: uint64; #bits(60) NextEntry: uint64; }; }
export type RTL_RUN_ONCE = struct #union { Ptr: *; }
export type RTL_BARRIER = struct { Reserved1: ulong; Reserved2: ulong; Reserved3: [2; uint64]; Reserved4: ulong; Reserved5: ulong; }
export type MESSAGE_RESOURCE_ENTRY = struct { Length: ushort; Flags: ushort; Text: [1; char]; }
export type MESSAGE_RESOURCE_BLOCK = struct { LowId: ulong; HighId: ulong; OffsetToEntries: ulong; }
export type MESSAGE_RESOURCE_DATA = struct { NumberOfBlocks: ulong; Blocks: [1; MESSAGE_RESOURCE_BLOCK]; }
export type OSVERSIONINFOA = struct { dwOSVersionInfoSize: ulong; dwMajorVersion: ulong; dwMinorVersion: ulong; dwBuildNumber: ulong; dwPlatformId: ulong; szCSDVersion: [128; char]; }
export type RTL_OSVERSIONINFOW = struct { dwOSVersionInfoSize: ulong; dwMajorVersion: ulong; dwMinorVersion: ulong; dwBuildNumber: ulong; dwPlatformId: ulong; szCSDVersion: [128; ushort]; }
export type OSVERSIONINFOEXA = struct { dwOSVersionInfoSize: ulong; dwMajorVersion: ulong; dwMinorVersion: ulong; dwBuildNumber: ulong; dwPlatformId: ulong; szCSDVersion: [128; char]; wServicePackMajor: ushort; wServicePackMinor: ushort; wSuiteMask: ushort; wProductType: char; wReserved: char; }
export type RTL_OSVERSIONINFOEXW = struct { dwOSVersionInfoSize: ulong; dwMajorVersion: ulong; dwMinorVersion: ulong; dwBuildNumber: ulong; dwPlatformId: ulong; szCSDVersion: [128; ushort]; wServicePackMajor: ushort; wServicePackMinor: ushort; wSuiteMask: ushort; wProductType: char; wReserved: char; }
export type RTL_UMS_THREAD_INFO_CLASS = enum { UmsThreadInvalidInfoClass = 0; UmsThreadUserContext; UmsThreadPriority; UmsThreadAffinity; UmsThreadTeb; UmsThreadIsSuspended; UmsThreadIsTerminated; UmsThreadMaxInfoClass; }
export type RTL_UMS_SCHEDULER_REASON = enum { UmsSchedulerStartup = 0; UmsSchedulerThreadBlocked; UmsSchedulerThreadYield; }
export type OS_DEPLOYEMENT_STATE_VALUES = enum { OS_DEPLOYMENT_STANDARD = 1; OS_DEPLOYMENT_COMPACT; }
export type NV_MEMORY_RANGE = struct { BaseAddress: *; Length: uint64; }
export type CORRELATION_VECTOR = struct { Version: char; Vector: [129; char]; }
export type CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG = struct { Size: ulong; TriggerId: *ushort; }
export type IMAGE_POLICY_ENTRY_TYPE = enum { ImagePolicyEntryTypeNone = 0; ImagePolicyEntryTypeBool; ImagePolicyEntryTypeInt8; ImagePolicyEntryTypeUInt8; ImagePolicyEntryTypeInt16; ImagePolicyEntryTypeUInt16; ImagePolicyEntryTypeInt32; ImagePolicyEntryTypeUInt32; ImagePolicyEntryTypeInt64; ImagePolicyEntryTypeUInt64; ImagePolicyEntryTypeAnsiString; ImagePolicyEntryTypeUnicodeString; ImagePolicyEntryTypeOverride; ImagePolicyEntryTypeMaximum; }
export type IMAGE_POLICY_ID = enum { ImagePolicyIdNone = 0; ImagePolicyIdEtw; ImagePolicyIdDebug; ImagePolicyIdCrashDump; ImagePolicyIdCrashDumpKey; ImagePolicyIdCrashDumpKeyGuid; ImagePolicyIdParentSd; ImagePolicyIdParentSdRev; ImagePolicyIdSvn; ImagePolicyIdDeviceId; ImagePolicyIdCapability; ImagePolicyIdScenarioId; ImagePolicyIdMaximum; }
export type IMAGE_POLICY_ENTRY = struct { Type: IMAGE_POLICY_ENTRY_TYPE; PolicyId: IMAGE_POLICY_ID; u: struct #union { None: *; BoolValue: char; Int8Value: char; UInt8Value: char; Int16Value: short; UInt16Value: ushort; Int32Value: int; UInt32Value: uint; Int64Value: int64; UInt64Value: uint64; AnsiStringValue: *char; UnicodeStringValue: *ushort; }; }
export type IMAGE_POLICY_METADATA = struct { Version: char; Reserved0: [7; char]; ApplicationId: uint64; Policies: *IMAGE_POLICY_ENTRY; }
export type RTL_RESOURCE_DEBUG = struct { Type: ushort; CreatorBackTraceIndex: ushort; CriticalSection: *RTL_CRITICAL_SECTION; ProcessLocksList: LIST_ENTRY; EntryCount: ulong; ContentionCount: ulong; Flags: ulong; CreatorBackTraceIndexHigh: ushort; SpareWORD: ushort; }
export type RTL_CRITICAL_SECTION = struct { DebugInfo: *RTL_RESOURCE_DEBUG; LockCount: long; RecursionCount: long; OwningThread: *; LockSemaphore: *; SpinCount: uint64; }
export type RTL_SRWLOCK = struct { Ptr: *; }
export type RTL_CONDITION_VARIABLE = struct { Ptr: *; }
export type HEAP_INFORMATION_CLASS = enum { HeapCompatibilityInformation = 0; HeapEnableTerminationOnCorruption = 1; HeapOptimizeResources = 3; }
export type HEAP_OPTIMIZE_RESOURCES_INFORMATION = struct { Version: ulong; Flags: ulong; }
export type ACTIVATION_CONTEXT_INFO_CLASS = enum { ActivationContextBasicInformation = 1; ActivationContextDetailedInformation = 2; AssemblyDetailedInformationInActivationContext = 3; FileInformationInAssemblyOfAssemblyInActivationContext = 4; RunlevelInformationInActivationContext = 5; CompatibilityInformationInActivationContext = 6; ActivationContextManifestResourceName = 7; MaxActivationContextInfoClass; AssemblyDetailedInformationInActivationContxt = 3; FileInformationInAssemblyOfAssemblyInActivationContxt = 4; }
export type ACTIVATION_CONTEXT_QUERY_INDEX = struct { ulAssemblyIndex: ulong; ulFileIndexInAssembly: ulong; }
export type ASSEMBLY_FILE_DETAILED_INFORMATION = struct { ulFlags: ulong; ulFilenameLength: ulong; ulPathLength: ulong; lpFileName: *ushort; lpFilePath: *ushort; }
export type ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = struct { ulFlags: ulong; ulEncodedAssemblyIdentityLength: ulong; ulManifestPathType: ulong; ulManifestPathLength: ulong; liManifestLastWriteTime: LARGE_INTEGER; ulPolicyPathType: ulong; ulPolicyPathLength: ulong; liPolicyLastWriteTime: LARGE_INTEGER; ulMetadataSatelliteRosterIndex: ulong; ulManifestVersionMajor: ulong; ulManifestVersionMinor: ulong; ulPolicyVersionMajor: ulong; ulPolicyVersionMinor: ulong; ulAssemblyDirectoryNameLength: ulong; lpAssemblyEncodedAssemblyIdentity: *ushort; lpAssemblyManifestPath: *ushort; lpAssemblyPolicyPath: *ushort; lpAssemblyDirectoryName: *ushort; ulFileCount: ulong; }
export type ACTCTX_REQUESTED_RUN_LEVEL = enum { ACTCTX_RUN_LEVEL_UNSPECIFIED = 0; ACTCTX_RUN_LEVEL_AS_INVOKER; ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE; ACTCTX_RUN_LEVEL_REQUIRE_ADMIN; ACTCTX_RUN_LEVEL_NUMBERS; }
export type ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION = struct { ulFlags: ulong; RunLevel: ACTCTX_REQUESTED_RUN_LEVEL; UiAccess: ulong; }
export type ACTCTX_COMPATIBILITY_ELEMENT_TYPE = enum { ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = 0; ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS; ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION; ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MAXVERSIONTESTED; }
export type COMPATIBILITY_CONTEXT_ELEMENT = struct { Id: GUID; Type: ACTCTX_COMPATIBILITY_ELEMENT_TYPE; MaxVersionTested: uint64; }
export type ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION = struct { ElementCount: ulong; Elements: *COMPATIBILITY_CONTEXT_ELEMENT; }
export type SUPPORTED_OS_INFO = struct { MajorVersion: ushort; MinorVersion: ushort; }
export type MAXVERSIONTESTED_INFO = struct { MaxVersionTested: uint64; }
export type ACTIVATION_CONTEXT_DETAILED_INFORMATION = struct { dwFlags: ulong; ulFormatVersion: ulong; ulAssemblyCount: ulong; ulRootManifestPathType: ulong; ulRootManifestPathChars: ulong; ulRootConfigurationPathType: ulong; ulRootConfigurationPathChars: ulong; ulAppDirPathType: ulong; ulAppDirPathChars: ulong; lpRootManifestPath: *ushort; lpRootConfigurationPath: *ushort; lpAppDirPath: *ushort; }
export type HARDWARE_COUNTER_DATA = struct { Type: HARDWARE_COUNTER_TYPE; Reserved: ulong; Value: uint64; }
export type PERFORMANCE_DATA = struct { Size: ushort; Version: char; HwCountersCount: char; ContextSwitchCount: ulong; WaitReasonBitMap: uint64; CycleTime: uint64; RetryCount: ulong; Reserved: ulong; HwCounters: [16; HARDWARE_COUNTER_DATA]; }
export type EVENTLOGRECORD = struct { Length: ulong; Reserved: ulong; RecordNumber: ulong; TimeGenerated: ulong; TimeWritten: ulong; EventID: ulong; EventType: ushort; NumStrings: ushort; EventCategory: ushort; ReservedFlags: ushort; ClosingRecordNumber: ulong; StringOffset: ulong; UserSidLength: ulong; UserSidOffset: ulong; DataLength: ulong; DataOffset: ulong; }
export type s__EVENTSFORLOGFILE = struct { ulSize: ulong; szLogicalLogFile: [256; ushort]; ulNumRecords: ulong; pEventLogRecords: *EVENTLOGRECORD; }
export type s__PACKEDEVENTINFO = struct { ulSize: ulong; ulNumEventsForLogFile: ulong; ulOffsets: *ulong; }
export type SERVICE_NODE_TYPE = enum { DriverType = 1; FileSystemType = 2; Win32ServiceOwnProcess = 16; Win32ServiceShareProcess = 32; AdapterType = 4; RecognizerType = 8; }
export type SERVICE_LOAD_TYPE = enum { BootLoad = 0; SystemLoad = 1; AutoLoad = 2; DemandLoad = 3; DisableLoad = 4; }
export type SERVICE_ERROR_TYPE = enum { IgnoreError = 0; NormalError = 1; SevereError = 2; CriticalError = 3; }
export type TAPE_ERASE = struct { Type: ulong; Immediate: char; }
export type TAPE_PREPARE = struct { Operation: ulong; Immediate: char; }
export type TAPE_WRITE_MARKS = struct { Type: ulong; Count: ulong; Immediate: char; }
export type TAPE_GET_POSITION = struct { Type: ulong; Partition: ulong; Offset: LARGE_INTEGER; }
export type TAPE_SET_POSITION = struct { Method: ulong; Partition: ulong; Offset: LARGE_INTEGER; Immediate: char; }
export type TAPE_GET_DRIVE_PARAMETERS = struct { ECC: char; Compression: char; DataPadding: char; ReportSetmarks: char; DefaultBlockSize: ulong; MaximumBlockSize: ulong; MinimumBlockSize: ulong; MaximumPartitionCount: ulong; FeaturesLow: ulong; FeaturesHigh: ulong; EOTWarningZoneSize: ulong; }
export type TAPE_SET_DRIVE_PARAMETERS = struct { ECC: char; Compression: char; DataPadding: char; ReportSetmarks: char; EOTWarningZoneSize: ulong; }
export type TAPE_GET_MEDIA_PARAMETERS = struct { Capacity: LARGE_INTEGER; Remaining: LARGE_INTEGER; BlockSize: ulong; PartitionCount: ulong; WriteProtected: char; }
export type TAPE_SET_MEDIA_PARAMETERS = struct { BlockSize: ulong; }
export type TAPE_CREATE_PARTITION = struct { Method: ulong; Count: ulong; Size: ulong; }
export type TAPE_WMI_OPERATIONS = struct { Method: ulong; DataBufferSize: ulong; DataBuffer: *; }
export type TAPE_DRIVE_PROBLEM_TYPE = enum { TapeDriveProblemNone; TapeDriveReadWriteWarning; TapeDriveReadWriteError; TapeDriveReadWarning; TapeDriveWriteWarning; TapeDriveReadError; TapeDriveWriteError; TapeDriveHardwareError; TapeDriveUnsupportedMedia; TapeDriveScsiConnectionError; TapeDriveTimetoClean; TapeDriveCleanDriveNow; TapeDriveMediaLifeExpired; TapeDriveSnappedTape; }
export type TRANSACTION_NOTIFICATION = struct { TransactionKey: *; TransactionNotification: ulong; TmVirtualClock: LARGE_INTEGER; ArgumentLength: ulong; }
export type TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT = struct { EnlistmentId: GUID; UOW: GUID; }
export type TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT = struct { TmIdentity: GUID; Flags: ulong; }
export type TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT = struct { SavepointId: ulong; }
export type TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT = struct { PropagationCookie: ulong; UOW: GUID; TmIdentity: GUID; BufferLength: ulong; }
export type TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT = struct { MarshalCookie: ulong; UOW: GUID; }
export type KCRM_MARSHAL_HEADER = struct { VersionMajor: ulong; VersionMinor: ulong; NumProtocols: ulong; Unused: ulong; }
export type KCRM_TRANSACTION_BLOB = struct { UOW: GUID; TmIdentity: GUID; IsolationLevel: ulong; IsolationFlags: ulong; Timeout: ulong; Description: [64; ushort]; }
export type KCRM_PROTOCOL_BLOB = struct { ProtocolId: GUID; StaticInfoLength: ulong; TransactionIdInfoLength: ulong; Unused1: ulong; Unused2: ulong; }
export type TRANSACTION_OUTCOME = enum { TransactionOutcomeUndetermined = 1; TransactionOutcomeCommitted; TransactionOutcomeAborted; }
export type TRANSACTION_STATE = enum { TransactionStateNormal = 1; TransactionStateIndoubt; TransactionStateCommittedNotify; }
export type TRANSACTION_BASIC_INFORMATION = struct { TransactionId: GUID; State: ulong; Outcome: ulong; }
export type TRANSACTIONMANAGER_BASIC_INFORMATION = struct { TmIdentity: GUID; VirtualClock: LARGE_INTEGER; }
export type TRANSACTIONMANAGER_LOG_INFORMATION = struct { LogIdentity: GUID; }
export type TRANSACTIONMANAGER_LOGPATH_INFORMATION = struct { LogPathLength: ulong; LogPath: [1; ushort]; }
export type TRANSACTIONMANAGER_RECOVERY_INFORMATION = struct { LastRecoveredLsn: uint64; }
export type TRANSACTIONMANAGER_OLDEST_INFORMATION = struct { OldestTransactionGuid: GUID; }
export type TRANSACTION_PROPERTIES_INFORMATION = struct { IsolationLevel: ulong; IsolationFlags: ulong; Timeout: LARGE_INTEGER; Outcome: ulong; DescriptionLength: ulong; Description: [1; ushort]; }
export type TRANSACTION_BIND_INFORMATION = struct { TmHandle: *; }
export type TRANSACTION_ENLISTMENT_PAIR = struct { EnlistmentId: GUID; ResourceManagerId: GUID; }
export type TRANSACTION_ENLISTMENTS_INFORMATION = struct { NumberOfEnlistments: ulong; EnlistmentPair: [1; TRANSACTION_ENLISTMENT_PAIR]; }
export type TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION = struct { SuperiorEnlistmentPair: TRANSACTION_ENLISTMENT_PAIR; }
export type RESOURCEMANAGER_BASIC_INFORMATION = struct { ResourceManagerId: GUID; DescriptionLength: ulong; Description: [1; ushort]; }
export type RESOURCEMANAGER_COMPLETION_INFORMATION = struct { IoCompletionPortHandle: *; CompletionKey: uint64; }
export type TRANSACTION_INFORMATION_CLASS = enum { TransactionBasicInformation; TransactionPropertiesInformation; TransactionEnlistmentInformation; TransactionSuperiorEnlistmentInformation; TransactionBindInformation; TransactionDTCPrivateInformation; }
export type TRANSACTIONMANAGER_INFORMATION_CLASS = enum { TransactionManagerBasicInformation; TransactionManagerLogInformation; TransactionManagerLogPathInformation; TransactionManagerRecoveryInformation = 4; TransactionManagerOnlineProbeInformation = 3; TransactionManagerOldestTransactionInformation = 5; }
export type RESOURCEMANAGER_INFORMATION_CLASS = enum { ResourceManagerBasicInformation; ResourceManagerCompletionInformation; }
export type ENLISTMENT_BASIC_INFORMATION = struct { EnlistmentId: GUID; TransactionId: GUID; ResourceManagerId: GUID; }
export type ENLISTMENT_CRM_INFORMATION = struct { CrmTransactionManagerId: GUID; CrmResourceManagerId: GUID; CrmEnlistmentId: GUID; }
export type ENLISTMENT_INFORMATION_CLASS = enum { EnlistmentBasicInformation; EnlistmentRecoveryInformation; EnlistmentCrmInformation; }
export type TRANSACTION_LIST_ENTRY = struct { UOW: GUID; }
export type TRANSACTION_LIST_INFORMATION = struct { NumberOfTransactions: ulong; TransactionInformation: [1; TRANSACTION_LIST_ENTRY]; }
export type KTMOBJECT_TYPE = enum { KTMOBJECT_TRANSACTION; KTMOBJECT_TRANSACTION_MANAGER; KTMOBJECT_RESOURCE_MANAGER; KTMOBJECT_ENLISTMENT; KTMOBJECT_INVALID; }
export type KTMOBJECT_CURSOR = struct { LastQuery: GUID; ObjectIdCount: ulong; ObjectIds: [1; GUID]; }
export type TP_CALLBACK_INSTANCE
export type TP_POOL
export type TP_CALLBACK_PRIORITY = enum { TP_CALLBACK_PRIORITY_HIGH; TP_CALLBACK_PRIORITY_NORMAL; TP_CALLBACK_PRIORITY_LOW; TP_CALLBACK_PRIORITY_INVALID; TP_CALLBACK_PRIORITY_COUNT = TP_CALLBACK_PRIORITY_INVALID; }
export type TP_POOL_STACK_INFORMATION = struct { StackReserve: uint64; StackCommit: uint64; }
export type TP_CLEANUP_GROUP
export type TP_CALLBACK_ENVIRON_V3 = struct { Version: ulong; Pool: *TP_POOL; CleanupGroup: *TP_CLEANUP_GROUP; CleanupGroupCancelCallback: def (*, *) -> (); RaceDll: *; ActivationContext: *s__ACTIVATION_CONTEXT; FinalizationCallback: def (*TP_CALLBACK_INSTANCE, *) -> (); u: struct #union { Flags: ulong; s: struct { #bits(1) LongFunction: ulong; #bits(1) Persistent: ulong; #bits(30) Private: ulong; }; }; CallbackPriority: TP_CALLBACK_PRIORITY; Size: ulong; }
export type TP_WORK
export type TP_TIMER
export type TP_WAIT
export type TP_IO
export type FILETIME = struct { dwLowDateTime: ulong; dwHighDateTime: ulong; }
export type RECT = struct { left: long; top: long; right: long; bottom: long; }
export type RECTL = struct { left: long; top: long; right: long; bottom: long; }
export type POINT = struct { x: long; y: long; }
export type POINTL = struct { x: long; y: long; }
export type SIZE = struct { cx: long; cy: long; }
export type POINTS = struct { x: short; y: short; }
export type APP_LOCAL_DEVICE_ID = struct { value: [32; char]; }
export type DPI_AWARENESS = enum { DPI_AWARENESS_INVALID = (- 1); DPI_AWARENESS_UNAWARE = 0; DPI_AWARENESS_SYSTEM_AWARE = 1; DPI_AWARENESS_PER_MONITOR_AWARE = 2; }
export type DPI_HOSTING_BEHAVIOR = enum { DPI_HOSTING_BEHAVIOR_INVALID = (- 1); DPI_HOSTING_BEHAVIOR_DEFAULT = 0; DPI_HOSTING_BEHAVIOR_MIXED = 1; }
export type SECURITY_ATTRIBUTES = struct { nLength: ulong; lpSecurityDescriptor: *; bInheritHandle: int; }
export type OVERLAPPED = struct { Internal: uint64; InternalHigh: uint64; _3: struct #union { _1: struct { Offset: ulong; OffsetHigh: ulong; }; Pointer: *; }; hEvent: *; }
export type OVERLAPPED_ENTRY = struct { lpCompletionKey: uint64; lpOverlapped: *OVERLAPPED; Internal: uint64; dwNumberOfBytesTransferred: ulong; }
export type SYSTEMTIME = struct { wYear: ushort; wMonth: ushort; wDayOfWeek: ushort; wDay: ushort; wHour: ushort; wMinute: ushort; wSecond: ushort; wMilliseconds: ushort; }
export type WIN32_FIND_DATAA = struct { dwFileAttributes: ulong; ftCreationTime: FILETIME; ftLastAccessTime: FILETIME; ftLastWriteTime: FILETIME; nFileSizeHigh: ulong; nFileSizeLow: ulong; dwReserved0: ulong; dwReserved1: ulong; cFileName: [260; char]; cAlternateFileName: [14; char]; }
export type WIN32_FIND_DATAW = struct { dwFileAttributes: ulong; ftCreationTime: FILETIME; ftLastAccessTime: FILETIME; ftLastWriteTime: FILETIME; nFileSizeHigh: ulong; nFileSizeLow: ulong; dwReserved0: ulong; dwReserved1: ulong; cFileName: [260; ushort]; cAlternateFileName: [14; ushort]; }
export type FINDEX_INFO_LEVELS = enum { FindExInfoStandard; FindExInfoBasic; FindExInfoMaxInfoLevel; }
export type FINDEX_SEARCH_OPS = enum { FindExSearchNameMatch; FindExSearchLimitToDirectories; FindExSearchLimitToDevices; FindExSearchMaxSearchOp; }
export type READ_DIRECTORY_NOTIFY_INFORMATION_CLASS = enum { ReadDirectoryNotifyInformation = 1; ReadDirectoryNotifyExtendedInformation; }
export type GET_FILEEX_INFO_LEVELS = enum { GetFileExInfoStandard; GetFileExMaxInfoLevel; }
export type FILE_INFO_BY_HANDLE_CLASS = enum { FileBasicInfo; FileStandardInfo; FileNameInfo; FileRenameInfo; FileDispositionInfo; FileAllocationInfo; FileEndOfFileInfo; FileStreamInfo; FileCompressionInfo; FileAttributeTagInfo; FileIdBothDirectoryInfo; FileIdBothDirectoryRestartInfo; FileIoPriorityHintInfo; FileRemoteProtocolInfo; FileFullDirectoryInfo; FileFullDirectoryRestartInfo; FileStorageInfo; FileAlignmentInfo; FileIdInfo; FileIdExtdDirectoryInfo; FileIdExtdDirectoryRestartInfo; FileDispositionInfoEx; FileRenameInfoEx; FileCaseSensitiveInfo; FileNormalizedNameInfo; MaximumFileInfoByHandleClass; }
export type PROCESS_HEAP_ENTRY = struct { lpData: *; cbData: ulong; cbOverhead: char; iRegionIndex: char; wFlags: ushort; _6: struct #union { Block: struct { hMem: *; dwReserved: [3; ulong]; }; Region: struct { dwCommittedSize: ulong; dwUnCommittedSize: ulong; lpFirstBlock: *; lpLastBlock: *; }; }; }
export type REASON_CONTEXT = struct { Version: ulong; Flags: ulong; Reason: struct #union { Detailed: struct { LocalizedReasonModule: *s_HINSTANCE__; LocalizedReasonId: ulong; ReasonStringCount: ulong; ReasonStrings: **ushort; }; SimpleReasonString: *ushort; }; }
export type EXCEPTION_DEBUG_INFO = struct { ExceptionRecord: EXCEPTION_RECORD; dwFirstChance: ulong; }
export type CREATE_THREAD_DEBUG_INFO = struct { hThread: *; lpThreadLocalBase: *; lpStartAddress: def (*) -> (ulong); }
export type CREATE_PROCESS_DEBUG_INFO = struct { hFile: *; hProcess: *; hThread: *; lpBaseOfImage: *; dwDebugInfoFileOffset: ulong; nDebugInfoSize: ulong; lpThreadLocalBase: *; lpStartAddress: def (*) -> (ulong); lpImageName: *; fUnicode: ushort; }
export type EXIT_THREAD_DEBUG_INFO = struct { dwExitCode: ulong; }
export type EXIT_PROCESS_DEBUG_INFO = struct { dwExitCode: ulong; }
export type LOAD_DLL_DEBUG_INFO = struct { hFile: *; lpBaseOfDll: *; dwDebugInfoFileOffset: ulong; nDebugInfoSize: ulong; lpImageName: *; fUnicode: ushort; }
export type UNLOAD_DLL_DEBUG_INFO = struct { lpBaseOfDll: *; }
export type OUTPUT_DEBUG_STRING_INFO = struct { lpDebugStringData: *char; fUnicode: ushort; nDebugStringLength: ushort; }
export type RIP_INFO = struct { dwError: ulong; dwType: ulong; }
export type DEBUG_EVENT = struct { dwDebugEventCode: ulong; dwProcessId: ulong; dwThreadId: ulong; u: struct #union { Exception: EXCEPTION_DEBUG_INFO; CreateThread: CREATE_THREAD_DEBUG_INFO; CreateProcessInfo: CREATE_PROCESS_DEBUG_INFO; ExitThread: EXIT_THREAD_DEBUG_INFO; ExitProcess: EXIT_PROCESS_DEBUG_INFO; LoadDll: LOAD_DLL_DEBUG_INFO; UnloadDll: UNLOAD_DLL_DEBUG_INFO; DebugString: OUTPUT_DEBUG_STRING_INFO; RipInfo: RIP_INFO; }; }
export type DISK_SPACE_INFORMATION = struct { ActualTotalAllocationUnits: uint64; ActualAvailableAllocationUnits: uint64; ActualPoolUnavailableAllocationUnits: uint64; CallerTotalAllocationUnits: uint64; CallerAvailableAllocationUnits: uint64; CallerPoolUnavailableAllocationUnits: uint64; UsedAllocationUnits: uint64; TotalReservedAllocationUnits: uint64; VolumeStorageReserveAllocationUnits: uint64; AvailableCommittedAllocationUnits: uint64; PoolAvailableAllocationUnits: uint64; SectorsPerAllocationUnit: ulong; BytesPerSector: ulong; }
export type WIN32_FILE_ATTRIBUTE_DATA = struct { dwFileAttributes: ulong; ftCreationTime: FILETIME; ftLastAccessTime: FILETIME; ftLastWriteTime: FILETIME; nFileSizeHigh: ulong; nFileSizeLow: ulong; }
export type BY_HANDLE_FILE_INFORMATION = struct { dwFileAttributes: ulong; ftCreationTime: FILETIME; ftLastAccessTime: FILETIME; ftLastWriteTime: FILETIME; dwVolumeSerialNumber: ulong; nFileSizeHigh: ulong; nFileSizeLow: ulong; nNumberOfLinks: ulong; nFileIndexHigh: ulong; nFileIndexLow: ulong; }
export type CREATEFILE2_EXTENDED_PARAMETERS = struct { dwSize: ulong; dwFileAttributes: ulong; dwFileFlags: ulong; dwSecurityQosFlags: ulong; lpSecurityAttributes: *SECURITY_ATTRIBUTES; hTemplateFile: *; }
export type STREAM_INFO_LEVELS = enum { FindStreamInfoStandard; FindStreamInfoMaxInfoLevel; }
export type WIN32_FIND_STREAM_DATA = struct { StreamSize: LARGE_INTEGER; cStreamName: [296; ushort]; }
export type HEAP_SUMMARY = struct { cb: ulong; cbAllocated: uint64; cbCommitted: uint64; cbReserved: uint64; cbMaxReserve: uint64; }
export type PROCESS_INFORMATION = struct { hProcess: *; hThread: *; dwProcessId: ulong; dwThreadId: ulong; }
export type STARTUPINFOA = struct { cb: ulong; lpReserved: *char; lpDesktop: *char; lpTitle: *char; dwX: ulong; dwY: ulong; dwXSize: ulong; dwYSize: ulong; dwXCountChars: ulong; dwYCountChars: ulong; dwFillAttribute: ulong; dwFlags: ulong; wShowWindow: ushort; cbReserved2: ushort; lpReserved2: *char; hStdInput: *; hStdOutput: *; hStdError: *; }
export type STARTUPINFOW = struct { cb: ulong; lpReserved: *ushort; lpDesktop: *ushort; lpTitle: *ushort; dwX: ulong; dwY: ulong; dwXSize: ulong; dwYSize: ulong; dwXCountChars: ulong; dwYCountChars: ulong; dwFillAttribute: ulong; dwFlags: ulong; wShowWindow: ushort; cbReserved2: ushort; lpReserved2: *char; hStdInput: *; hStdOutput: *; hStdError: *; }
export type THREAD_INFORMATION_CLASS = enum { ThreadMemoryPriority; ThreadAbsoluteCpuPriority; ThreadDynamicCodePolicy; ThreadPowerThrottling; ThreadInformationClassMax; }
export type MEMORY_PRIORITY_INFORMATION = struct { MemoryPriority: ulong; }
export type THREAD_POWER_THROTTLING_STATE = struct { Version: ulong; ControlMask: ulong; StateMask: ulong; }
export type PROCESS_INFORMATION_CLASS = enum { ProcessMemoryPriority; ProcessMemoryExhaustionInfo; ProcessAppMemoryInfo; ProcessInPrivateInfo; ProcessPowerThrottling; ProcessReservedValue1; ProcessTelemetryCoverageInfo; ProcessProtectionLevelInfo; ProcessLeapSecondInfo; ProcessInformationClassMax; }
export type APP_MEMORY_INFORMATION = struct { AvailableCommit: uint64; PrivateCommitUsage: uint64; PeakPrivateCommitUsage: uint64; TotalCommitUsage: uint64; }
export type PROCESS_MEMORY_EXHAUSTION_TYPE = enum { PMETypeFailFastOnCommitFailure; PMETypeMax; }
export type PROCESS_MEMORY_EXHAUSTION_INFO = struct { Version: ushort; Reserved: ushort; Type: PROCESS_MEMORY_EXHAUSTION_TYPE; Value: uint64; }
export type PROCESS_POWER_THROTTLING_STATE = struct { Version: ulong; ControlMask: ulong; StateMask: ulong; }
export type PROCESS_PROTECTION_LEVEL_INFORMATION = struct { ProtectionLevel: ulong; }
export type PROCESS_LEAP_SECOND_INFO = struct { Flags: ulong; Reserved: ulong; }
export type SYSTEM_INFO = struct { _1: struct #union { dwOemId: ulong; _2: struct { wProcessorArchitecture: ushort; wReserved: ushort; }; }; dwPageSize: ulong; lpMinimumApplicationAddress: *; lpMaximumApplicationAddress: *; dwActiveProcessorMask: uint64; dwNumberOfProcessors: ulong; dwProcessorType: ulong; dwAllocationGranularity: ulong; wProcessorLevel: ushort; wProcessorRevision: ushort; }
export type MEMORYSTATUSEX = struct { dwLength: ulong; dwMemoryLoad: ulong; ullTotalPhys: uint64; ullAvailPhys: uint64; ullTotalPageFile: uint64; ullAvailPageFile: uint64; ullTotalVirtual: uint64; ullAvailVirtual: uint64; ullAvailExtendedVirtual: uint64; }
export type COMPUTER_NAME_FORMAT = enum { ComputerNameNetBIOS; ComputerNameDnsHostname; ComputerNameDnsDomain; ComputerNameDnsFullyQualified; ComputerNamePhysicalNetBIOS; ComputerNamePhysicalDnsHostname; ComputerNamePhysicalDnsDomain; ComputerNamePhysicalDnsFullyQualified; ComputerNameMax; }
export type MEMORY_RESOURCE_NOTIFICATION_TYPE = enum { LowMemoryResourceNotification; HighMemoryResourceNotification; }
export type WIN32_MEMORY_RANGE_ENTRY = struct { VirtualAddress: *; NumberOfBytes: uint64; }
export type OFFER_PRIORITY = enum { VmOfferPriorityVeryLow = 1; VmOfferPriorityLow; VmOfferPriorityBelowNormal; VmOfferPriorityNormal; }
export type WIN32_MEMORY_INFORMATION_CLASS = enum { MemoryRegionInfo; }
export type WIN32_MEMORY_REGION_INFORMATION = struct { AllocationBase: *; AllocationProtect: ulong; _3: struct #union { Flags: ulong; _2: struct { #bits(1) Private: ulong; #bits(1) MappedDataFile: ulong; #bits(1) MappedImage: ulong; #bits(1) MappedPageFile: ulong; #bits(1) MappedPhysical: ulong; #bits(1) DirectMapped: ulong; #bits(26) Reserved: ulong; }; }; RegionSize: uint64; CommitSize: uint64; }
export type JOBOBJECT_IO_RATE_CONTROL_INFORMATION = struct { MaxIops: int64; MaxBandwidth: int64; ReservationIops: int64; VolumeName: *ushort; BaseIoSize: ulong; ControlFlags: ulong; }
export type ENUMUILANG = struct { NumOfEnumUILang: ulong; SizeOfEnumUIBuffer: ulong; pEnumUIBuffer: *ushort; }
export type REDIRECTION_FUNCTION_DESCRIPTOR = struct { DllName: *char; FunctionName: *char; RedirectionTarget: *; }
export type REDIRECTION_DESCRIPTOR = struct { Version: ulong; FunctionCount: ulong; Redirections: *REDIRECTION_FUNCTION_DESCRIPTOR; }
export type COMMPROP = struct { wPacketLength: ushort; wPacketVersion: ushort; dwServiceMask: ulong; dwReserved1: ulong; dwMaxTxQueue: ulong; dwMaxRxQueue: ulong; dwMaxBaud: ulong; dwProvSubType: ulong; dwProvCapabilities: ulong; dwSettableParams: ulong; dwSettableBaud: ulong; wSettableData: ushort; wSettableStopParity: ushort; dwCurrentTxQueue: ulong; dwCurrentRxQueue: ulong; dwProvSpec1: ulong; dwProvSpec2: ulong; wcProvChar: [1; ushort]; }
export type COMSTAT = struct { #bits(1) fCtsHold: ulong; #bits(1) fDsrHold: ulong; #bits(1) fRlsdHold: ulong; #bits(1) fXoffHold: ulong; #bits(1) fXoffSent: ulong; #bits(1) fEof: ulong; #bits(1) fTxim: ulong; #bits(25) fReserved: ulong; cbInQue: ulong; cbOutQue: ulong; }
export type DCB = struct { DCBlength: ulong; BaudRate: ulong; #bits(1) fBinary: ulong; #bits(1) fParity: ulong; #bits(1) fOutxCtsFlow: ulong; #bits(1) fOutxDsrFlow: ulong; #bits(2) fDtrControl: ulong; #bits(1) fDsrSensitivity: ulong; #bits(1) fTXContinueOnXoff: ulong; #bits(1) fOutX: ulong; #bits(1) fInX: ulong; #bits(1) fErrorChar: ulong; #bits(1) fNull: ulong; #bits(2) fRtsControl: ulong; #bits(1) fAbortOnError: ulong; #bits(17) fDummy2: ulong; wReserved: ushort; XonLim: ushort; XoffLim: ushort; ByteSize: char; Parity: char; StopBits: char; XonChar: char; XoffChar: char; ErrorChar: char; EofChar: char; EvtChar: char; wReserved1: ushort; }
export type COMMTIMEOUTS = struct { ReadIntervalTimeout: ulong; ReadTotalTimeoutMultiplier: ulong; ReadTotalTimeoutConstant: ulong; WriteTotalTimeoutMultiplier: ulong; WriteTotalTimeoutConstant: ulong; }
export type COMMCONFIG = struct { dwSize: ulong; wVersion: ushort; wReserved: ushort; dcb: DCB; dwProviderSubType: ulong; dwProviderOffset: ulong; dwProviderSize: ulong; wcProviderData: [1; ushort]; }
export type MEMORYSTATUS = struct { dwLength: ulong; dwMemoryLoad: ulong; dwTotalPhys: uint64; dwAvailPhys: uint64; dwTotalPageFile: uint64; dwAvailPageFile: uint64; dwTotalVirtual: uint64; dwAvailVirtual: uint64; }
export type JIT_DEBUG_INFO = struct { dwSize: ulong; dwProcessorArchitecture: ulong; dwThreadID: ulong; dwReserved0: ulong; lpExceptionAddress: uint64; lpExceptionRecord: uint64; lpContextRecord: uint64; }
export type OFSTRUCT = struct { cBytes: char; fFixedDisk: char; nErrCode: ushort; Reserved1: ushort; Reserved2: ushort; szPathName: [128; char]; }
export type UMS_SCHEDULER_STARTUP_INFO = struct { UmsVersion: ulong; CompletionList: *; SchedulerProc: *; SchedulerParam: *; }
export type UMS_SYSTEM_THREAD_INFORMATION = struct { UmsVersion: ulong; _2: struct #union { _1: struct { #bits(1) IsUmsSchedulerThread: ulong; #bits(1) IsUmsWorkerThread: ulong; }; ThreadUmsFlags: ulong; }; }
export type DEP_SYSTEM_POLICY_TYPE = enum { DEPPolicyAlwaysOff = 0; DEPPolicyAlwaysOn; DEPPolicyOptIn; DEPPolicyOptOut; DEPTotalPolicyCount; }
export type WIN32_STREAM_ID = struct { dwStreamId: ulong; dwStreamAttributes: ulong; Size: LARGE_INTEGER; dwStreamNameSize: ulong; cStreamName: [1; ushort]; }
export type STARTUPINFOEXA = struct { StartupInfo: STARTUPINFOA; lpAttributeList: *s__PROC_THREAD_ATTRIBUTE_LIST; }
export type STARTUPINFOEXW = struct { StartupInfo: STARTUPINFOW; lpAttributeList: *s__PROC_THREAD_ATTRIBUTE_LIST; }
export type PROC_THREAD_ATTRIBUTE_NUM = enum { ProcThreadAttributeParentProcess = 0; ProcThreadAttributeHandleList = 2; ProcThreadAttributeGroupAffinity = 3; ProcThreadAttributePreferredNode = 4; ProcThreadAttributeIdealProcessor = 5; ProcThreadAttributeUmsThread = 6; ProcThreadAttributeMitigationPolicy = 7; ProcThreadAttributeSecurityCapabilities = 9; ProcThreadAttributeProtectionLevel = 11; ProcThreadAttributeJobList = 13; ProcThreadAttributeChildProcessPolicy = 14; ProcThreadAttributeAllApplicationPackagesPolicy = 15; ProcThreadAttributeWin32kFilter = 16; ProcThreadAttributeSafeOpenPromptOriginClaim = 17; ProcThreadAttributeDesktopAppPolicy = 18; ProcThreadAttributePseudoConsole = 22; ProcThreadAttributeMitigationAuditPolicy = 24; }
export type COPYFILE2_MESSAGE_TYPE = enum { COPYFILE2_CALLBACK_NONE = 0; COPYFILE2_CALLBACK_CHUNK_STARTED; COPYFILE2_CALLBACK_CHUNK_FINISHED; COPYFILE2_CALLBACK_STREAM_STARTED; COPYFILE2_CALLBACK_STREAM_FINISHED; COPYFILE2_CALLBACK_POLL_CONTINUE; COPYFILE2_CALLBACK_ERROR; COPYFILE2_CALLBACK_MAX; }
export type COPYFILE2_MESSAGE_ACTION = enum { COPYFILE2_PROGRESS_CONTINUE = 0; COPYFILE2_PROGRESS_CANCEL; COPYFILE2_PROGRESS_STOP; COPYFILE2_PROGRESS_QUIET; COPYFILE2_PROGRESS_PAUSE; }
export type COPYFILE2_COPY_PHASE = enum { COPYFILE2_PHASE_NONE = 0; COPYFILE2_PHASE_PREPARE_SOURCE; COPYFILE2_PHASE_PREPARE_DEST; COPYFILE2_PHASE_READ_SOURCE; COPYFILE2_PHASE_WRITE_DESTINATION; COPYFILE2_PHASE_SERVER_COPY; COPYFILE2_PHASE_NAMEGRAFT_COPY; COPYFILE2_PHASE_MAX; }
export type COPYFILE2_MESSAGE = struct { Type: COPYFILE2_MESSAGE_TYPE; dwPadding: ulong; Info: struct #union { ChunkStarted: struct { dwStreamNumber: ulong; dwReserved: ulong; hSourceFile: *; hDestinationFile: *; uliChunkNumber: ULARGE_INTEGER; uliChunkSize: ULARGE_INTEGER; uliStreamSize: ULARGE_INTEGER; uliTotalFileSize: ULARGE_INTEGER; }; ChunkFinished: struct { dwStreamNumber: ulong; dwFlags: ulong; hSourceFile: *; hDestinationFile: *; uliChunkNumber: ULARGE_INTEGER; uliChunkSize: ULARGE_INTEGER; uliStreamSize: ULARGE_INTEGER; uliStreamBytesTransferred: ULARGE_INTEGER; uliTotalFileSize: ULARGE_INTEGER; uliTotalBytesTransferred: ULARGE_INTEGER; }; StreamStarted: struct { dwStreamNumber: ulong; dwReserved: ulong; hSourceFile: *; hDestinationFile: *; uliStreamSize: ULARGE_INTEGER; uliTotalFileSize: ULARGE_INTEGER; }; StreamFinished: struct { dwStreamNumber: ulong; dwReserved: ulong; hSourceFile: *; hDestinationFile: *; uliStreamSize: ULARGE_INTEGER; uliStreamBytesTransferred: ULARGE_INTEGER; uliTotalFileSize: ULARGE_INTEGER; uliTotalBytesTransferred: ULARGE_INTEGER; }; PollContinue: struct { dwReserved: ulong; }; Error: struct { CopyPhase: COPYFILE2_COPY_PHASE; dwStreamNumber: ulong; hrFailure: long; dwReserved: ulong; uliChunkNumber: ULARGE_INTEGER; uliStreamSize: ULARGE_INTEGER; uliStreamBytesTransferred: ULARGE_INTEGER; uliTotalFileSize: ULARGE_INTEGER; uliTotalBytesTransferred: ULARGE_INTEGER; }; }; }
export type COPYFILE2_EXTENDED_PARAMETERS = struct { dwSize: ulong; dwCopyFlags: ulong; pfCancel: *int; pProgressRoutine: def (*COPYFILE2_MESSAGE, *) -> (COPYFILE2_MESSAGE_ACTION); pvCallbackContext: *; }
export type EVENTLOG_FULL_INFORMATION = struct { dwFull: ulong; }
export type OPERATION_START_PARAMETERS = struct { Version: ulong; OperationId: ulong; Flags: ulong; }
export type OPERATION_END_PARAMETERS = struct { Version: ulong; OperationId: ulong; Flags: ulong; }
export type HW_PROFILE_INFOA = struct { dwDockInfo: ulong; szHwProfileGuid: [39; char]; szHwProfileName: [80; char]; }
export type HW_PROFILE_INFOW = struct { dwDockInfo: ulong; szHwProfileGuid: [39; ushort]; szHwProfileName: [80; ushort]; }
export type TIME_ZONE_INFORMATION = struct { Bias: long; StandardName: [32; ushort]; StandardDate: SYSTEMTIME; StandardBias: long; DaylightName: [32; ushort]; DaylightDate: SYSTEMTIME; DaylightBias: long; }
export type DYNAMIC_TIME_ZONE_INFORMATION = struct { Bias: long; StandardName: [32; ushort]; StandardDate: SYSTEMTIME; StandardBias: long; DaylightName: [32; ushort]; DaylightDate: SYSTEMTIME; DaylightBias: long; TimeZoneKeyName: [128; ushort]; DynamicDaylightTimeDisabled: char; }
export type SYSTEM_POWER_STATUS = struct { ACLineStatus: char; BatteryFlag: char; BatteryLifePercent: char; SystemStatusFlag: char; BatteryLifeTime: ulong; BatteryFullLifeTime: ulong; }
export type ACTCTXA = struct { cbSize: ulong; dwFlags: ulong; lpSource: *char; wProcessorArchitecture: ushort; wLangId: ushort; lpAssemblyDirectory: *char; lpResourceName: *char; lpApplicationName: *char; hModule: *s_HINSTANCE__; }
export type ACTCTXW = struct { cbSize: ulong; dwFlags: ulong; lpSource: *ushort; wProcessorArchitecture: ushort; wLangId: ushort; lpAssemblyDirectory: *ushort; lpResourceName: *ushort; lpApplicationName: *ushort; hModule: *s_HINSTANCE__; }
export type ACTCTX_SECTION_KEYED_DATA_2600 = struct { cbSize: ulong; ulDataFormatVersion: ulong; lpData: *; ulLength: ulong; lpSectionGlobalData: *; ulSectionGlobalDataLength: ulong; lpSectionBase: *; ulSectionTotalLength: ulong; hActCtx: *; ulAssemblyRosterIndex: ulong; }
export type ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = struct { lpInformation: *; lpSectionBase: *; ulSectionLength: ulong; lpSectionGlobalDataBase: *; ulSectionGlobalDataLength: ulong; }
export type ACTCTX_SECTION_KEYED_DATA = struct { cbSize: ulong; ulDataFormatVersion: ulong; lpData: *; ulLength: ulong; lpSectionGlobalData: *; ulSectionGlobalDataLength: ulong; lpSectionBase: *; ulSectionTotalLength: ulong; hActCtx: *; ulAssemblyRosterIndex: ulong; ulFlags: ulong; AssemblyMetadata: ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA; }
export type ACTIVATION_CONTEXT_BASIC_INFORMATION = struct { hActCtx: *; dwFlags: ulong; }
export type FILE_BASIC_INFO = struct { CreationTime: LARGE_INTEGER; LastAccessTime: LARGE_INTEGER; LastWriteTime: LARGE_INTEGER; ChangeTime: LARGE_INTEGER; FileAttributes: ulong; }
export type FILE_STANDARD_INFO = struct { AllocationSize: LARGE_INTEGER; EndOfFile: LARGE_INTEGER; NumberOfLinks: ulong; DeletePending: char; Directory: char; }
export type FILE_NAME_INFO = struct { FileNameLength: ulong; FileName: [1; ushort]; }
export type FILE_CASE_SENSITIVE_INFO = struct { Flags: ulong; }
export type FILE_RENAME_INFO = struct { _1: struct #union { ReplaceIfExists: char; Flags: ulong; }; RootDirectory: *; FileNameLength: ulong; FileName: [1; ushort]; }
export type FILE_ALLOCATION_INFO = struct { AllocationSize: LARGE_INTEGER; }
export type FILE_END_OF_FILE_INFO = struct { EndOfFile: LARGE_INTEGER; }
export type FILE_STREAM_INFO = struct { NextEntryOffset: ulong; StreamNameLength: ulong; StreamSize: LARGE_INTEGER; StreamAllocationSize: LARGE_INTEGER; StreamName: [1; ushort]; }
export type FILE_COMPRESSION_INFO = struct { CompressedFileSize: LARGE_INTEGER; CompressionFormat: ushort; CompressionUnitShift: char; ChunkShift: char; ClusterShift: char; Reserved: [3; char]; }
export type FILE_ATTRIBUTE_TAG_INFO = struct { FileAttributes: ulong; ReparseTag: ulong; }
export type FILE_DISPOSITION_INFO = struct { DeleteFileA: char; }
export type FILE_DISPOSITION_INFO_EX = struct { Flags: ulong; }
export type FILE_ID_BOTH_DIR_INFO = struct { NextEntryOffset: ulong; FileIndex: ulong; CreationTime: LARGE_INTEGER; LastAccessTime: LARGE_INTEGER; LastWriteTime: LARGE_INTEGER; ChangeTime: LARGE_INTEGER; EndOfFile: LARGE_INTEGER; AllocationSize: LARGE_INTEGER; FileAttributes: ulong; FileNameLength: ulong; EaSize: ulong; ShortNameLength: char; ShortName: [12; ushort]; FileId: LARGE_INTEGER; FileName: [1; ushort]; }
export type FILE_FULL_DIR_INFO = struct { NextEntryOffset: ulong; FileIndex: ulong; CreationTime: LARGE_INTEGER; LastAccessTime: LARGE_INTEGER; LastWriteTime: LARGE_INTEGER; ChangeTime: LARGE_INTEGER; EndOfFile: LARGE_INTEGER; AllocationSize: LARGE_INTEGER; FileAttributes: ulong; FileNameLength: ulong; EaSize: ulong; FileName: [1; ushort]; }
export type PRIORITY_HINT = enum { IoPriorityHintVeryLow = 0; IoPriorityHintLow; IoPriorityHintNormal; MaximumIoPriorityHintType; }
export type FILE_IO_PRIORITY_HINT_INFO = struct { PriorityHint: PRIORITY_HINT; }
export type FILE_ALIGNMENT_INFO = struct { AlignmentRequirement: ulong; }
export type FILE_STORAGE_INFO = struct { LogicalBytesPerSector: ulong; PhysicalBytesPerSectorForAtomicity: ulong; PhysicalBytesPerSectorForPerformance: ulong; FileSystemEffectivePhysicalBytesPerSectorForAtomicity: ulong; Flags: ulong; ByteOffsetForSectorAlignment: ulong; ByteOffsetForPartitionAlignment: ulong; }
export type FILE_ID_INFO = struct { VolumeSerialNumber: uint64; FileId: FILE_ID_128; }
export type FILE_ID_EXTD_DIR_INFO = struct { NextEntryOffset: ulong; FileIndex: ulong; CreationTime: LARGE_INTEGER; LastAccessTime: LARGE_INTEGER; LastWriteTime: LARGE_INTEGER; ChangeTime: LARGE_INTEGER; EndOfFile: LARGE_INTEGER; AllocationSize: LARGE_INTEGER; FileAttributes: ulong; FileNameLength: ulong; EaSize: ulong; ReparsePointTag: ulong; FileId: FILE_ID_128; FileName: [1; ushort]; }
export type FILE_REMOTE_PROTOCOL_INFO = struct { StructureVersion: ushort; StructureSize: ushort; Protocol: ulong; ProtocolMajorVersion: ushort; ProtocolMinorVersion: ushort; ProtocolRevision: ushort; Reserved: ushort; Flags: ulong; GenericReserved: struct { Reserved: [8; ulong]; }; ProtocolSpecific: struct #union { Smb2: struct { Server: struct { Capabilities: ulong; }; Share: struct { Capabilities: ulong; CachingFlags: ulong; }; }; Reserved: [16; ulong]; }; }
export type FILE_ID_TYPE = enum { FileIdType; ObjectIdType; ExtendedFileIdType; MaximumFileIdType; }
export type FILE_ID_DESCRIPTOR = struct { dwSize: ulong; Type: FILE_ID_TYPE; _3: struct #union { FileId: LARGE_INTEGER; ObjectId: GUID; ExtendedFileId: FILE_ID_128; }; }
export type DRAWPATRECT = struct { ptPosition: POINT; ptSize: POINT; wStyle: ushort; wPattern: ushort; }
export type PSINJECTDATA = struct { DataBytes: ulong; InjectionPoint: ushort; PageNumber: ushort; }
export type PSFEATURE_OUTPUT = struct { bPageIndependent: int; bSetPageDevice: int; }
export type PSFEATURE_CUSTPAPER = struct { lOrientation: long; lWidth: long; lHeight: long; lWidthOffset: long; lHeightOffset: long; }
export type XFORM = struct { eM11: float; eM12: float; eM21: float; eM22: float; eDx: float; eDy: float; }
export type BITMAP = struct { bmType: long; bmWidth: long; bmHeight: long; bmWidthBytes: long; bmPlanes: ushort; bmBitsPixel: ushort; bmBits: *; }
export type RGBTRIPLE = struct { rgbtBlue: char; rgbtGreen: char; rgbtRed: char; }
export type RGBQUAD = struct { rgbBlue: char; rgbGreen: char; rgbRed: char; rgbReserved: char; }
export type CIEXYZ = struct { ciexyzX: long; ciexyzY: long; ciexyzZ: long; }
export type CIEXYZTRIPLE = struct { ciexyzRed: CIEXYZ; ciexyzGreen: CIEXYZ; ciexyzBlue: CIEXYZ; }
export type LOGCOLORSPACEA = struct { lcsSignature: ulong; lcsVersion: ulong; lcsSize: ulong; lcsCSType: long; lcsIntent: long; lcsEndpoints: CIEXYZTRIPLE; lcsGammaRed: ulong; lcsGammaGreen: ulong; lcsGammaBlue: ulong; lcsFilename: [260; char]; }
export type LOGCOLORSPACEW = struct { lcsSignature: ulong; lcsVersion: ulong; lcsSize: ulong; lcsCSType: long; lcsIntent: long; lcsEndpoints: CIEXYZTRIPLE; lcsGammaRed: ulong; lcsGammaGreen: ulong; lcsGammaBlue: ulong; lcsFilename: [260; ushort]; }
export type BITMAPCOREHEADER = struct { bcSize: ulong; bcWidth: ushort; bcHeight: ushort; bcPlanes: ushort; bcBitCount: ushort; }
export type BITMAPINFOHEADER = struct { biSize: ulong; biWidth: long; biHeight: long; biPlanes: ushort; biBitCount: ushort; biCompression: ulong; biSizeImage: ulong; biXPelsPerMeter: long; biYPelsPerMeter: long; biClrUsed: ulong; biClrImportant: ulong; }
export type BITMAPV4HEADER = struct { bV4Size: ulong; bV4Width: long; bV4Height: long; bV4Planes: ushort; bV4BitCount: ushort; bV4V4Compression: ulong; bV4SizeImage: ulong; bV4XPelsPerMeter: long; bV4YPelsPerMeter: long; bV4ClrUsed: ulong; bV4ClrImportant: ulong; bV4RedMask: ulong; bV4GreenMask: ulong; bV4BlueMask: ulong; bV4AlphaMask: ulong; bV4CSType: ulong; bV4Endpoints: CIEXYZTRIPLE; bV4GammaRed: ulong; bV4GammaGreen: ulong; bV4GammaBlue: ulong; }
export type BITMAPV5HEADER = struct { bV5Size: ulong; bV5Width: long; bV5Height: long; bV5Planes: ushort; bV5BitCount: ushort; bV5Compression: ulong; bV5SizeImage: ulong; bV5XPelsPerMeter: long; bV5YPelsPerMeter: long; bV5ClrUsed: ulong; bV5ClrImportant: ulong; bV5RedMask: ulong; bV5GreenMask: ulong; bV5BlueMask: ulong; bV5AlphaMask: ulong; bV5CSType: ulong; bV5Endpoints: CIEXYZTRIPLE; bV5GammaRed: ulong; bV5GammaGreen: ulong; bV5GammaBlue: ulong; bV5Intent: ulong; bV5ProfileData: ulong; bV5ProfileSize: ulong; bV5Reserved: ulong; }
export type BITMAPINFO = struct { bmiHeader: BITMAPINFOHEADER; bmiColors: [1; RGBQUAD]; }
export type BITMAPCOREINFO = struct { bmciHeader: BITMAPCOREHEADER; bmciColors: [1; RGBTRIPLE]; }
export type BITMAPFILEHEADER = struct { bfType: ushort; bfSize: ulong; bfReserved1: ushort; bfReserved2: ushort; bfOffBits: ulong; }
export type FONTSIGNATURE = struct { fsUsb: [4; ulong]; fsCsb: [2; ulong]; }
export type CHARSETINFO = struct { ciCharset: uint; ciACP: uint; fs: FONTSIGNATURE; }
export type LOCALESIGNATURE = struct { lsUsb: [4; ulong]; lsCsbDefault: [2; ulong]; lsCsbSupported: [2; ulong]; }
export type HANDLETABLE = struct { objectHandle: [1; *]; }
export type METARECORD = struct { rdSize: ulong; rdFunction: ushort; rdParm: [1; ushort]; }
export type METAFILEPICT = struct { mm: long; xExt: long; yExt: long; hMF: *s_HMETAFILE__; }
export type METAHEADER = struct { mtType: ushort; mtHeaderSize: ushort; mtVersion: ushort; mtSize: ulong; mtNoObjects: ushort; mtMaxRecord: ulong; mtNoParameters: ushort; }
export type ENHMETARECORD = struct { iType: ulong; nSize: ulong; dParm: [1; ulong]; }
export type ENHMETAHEADER = struct { iType: ulong; nSize: ulong; rclBounds: RECTL; rclFrame: RECTL; dSignature: ulong; nVersion: ulong; nBytes: ulong; nRecords: ulong; nHandles: ushort; sReserved: ushort; nDescription: ulong; offDescription: ulong; nPalEntries: ulong; szlDevice: SIZE; szlMillimeters: SIZE; cbPixelFormat: ulong; offPixelFormat: ulong; bOpenGL: ulong; szlMicrometers: SIZE; }
export type TEXTMETRICA = struct { tmHeight: long; tmAscent: long; tmDescent: long; tmInternalLeading: long; tmExternalLeading: long; tmAveCharWidth: long; tmMaxCharWidth: long; tmWeight: long; tmOverhang: long; tmDigitizedAspectX: long; tmDigitizedAspectY: long; tmFirstChar: char; tmLastChar: char; tmDefaultChar: char; tmBreakChar: char; tmItalic: char; tmUnderlined: char; tmStruckOut: char; tmPitchAndFamily: char; tmCharSet: char; }
export type TEXTMETRICW = struct { tmHeight: long; tmAscent: long; tmDescent: long; tmInternalLeading: long; tmExternalLeading: long; tmAveCharWidth: long; tmMaxCharWidth: long; tmWeight: long; tmOverhang: long; tmDigitizedAspectX: long; tmDigitizedAspectY: long; tmFirstChar: ushort; tmLastChar: ushort; tmDefaultChar: ushort; tmBreakChar: ushort; tmItalic: char; tmUnderlined: char; tmStruckOut: char; tmPitchAndFamily: char; tmCharSet: char; }
export type NEWTEXTMETRICA = struct { tmHeight: long; tmAscent: long; tmDescent: long; tmInternalLeading: long; tmExternalLeading: long; tmAveCharWidth: long; tmMaxCharWidth: long; tmWeight: long; tmOverhang: long; tmDigitizedAspectX: long; tmDigitizedAspectY: long; tmFirstChar: char; tmLastChar: char; tmDefaultChar: char; tmBreakChar: char; tmItalic: char; tmUnderlined: char; tmStruckOut: char; tmPitchAndFamily: char; tmCharSet: char; ntmFlags: ulong; ntmSizeEM: uint; ntmCellHeight: uint; ntmAvgWidth: uint; }
export type NEWTEXTMETRICW = struct { tmHeight: long; tmAscent: long; tmDescent: long; tmInternalLeading: long; tmExternalLeading: long; tmAveCharWidth: long; tmMaxCharWidth: long; tmWeight: long; tmOverhang: long; tmDigitizedAspectX: long; tmDigitizedAspectY: long; tmFirstChar: ushort; tmLastChar: ushort; tmDefaultChar: ushort; tmBreakChar: ushort; tmItalic: char; tmUnderlined: char; tmStruckOut: char; tmPitchAndFamily: char; tmCharSet: char; ntmFlags: ulong; ntmSizeEM: uint; ntmCellHeight: uint; ntmAvgWidth: uint; }
export type NEWTEXTMETRICEXA = struct { ntmTm: NEWTEXTMETRICA; ntmFontSig: FONTSIGNATURE; }
export type NEWTEXTMETRICEXW = struct { ntmTm: NEWTEXTMETRICW; ntmFontSig: FONTSIGNATURE; }
export type PELARRAY = struct { paXCount: long; paYCount: long; paXExt: long; paYExt: long; paRGBs: char; }
export type LOGBRUSH = struct { lbStyle: uint; lbColor: ulong; lbHatch: uint64; }
export type LOGBRUSH32 = struct { lbStyle: uint; lbColor: ulong; lbHatch: ulong; }
export type LOGPEN = struct { lopnStyle: uint; lopnWidth: POINT; lopnColor: ulong; }
export type EXTLOGPEN = struct { elpPenStyle: ulong; elpWidth: ulong; elpBrushStyle: uint; elpColor: ulong; elpHatch: uint64; elpNumEntries: ulong; elpStyleEntry: [1; ulong]; }
export type EXTLOGPEN32 = struct { elpPenStyle: ulong; elpWidth: ulong; elpBrushStyle: uint; elpColor: ulong; elpHatch: ulong; elpNumEntries: ulong; elpStyleEntry: [1; ulong]; }
export type PALETTEENTRY = struct { peRed: char; peGreen: char; peBlue: char; peFlags: char; }
export type LOGPALETTE = struct { palVersion: ushort; palNumEntries: ushort; palPalEntry: [1; PALETTEENTRY]; }
export type LOGFONTA = struct { lfHeight: long; lfWidth: long; lfEscapement: long; lfOrientation: long; lfWeight: long; lfItalic: char; lfUnderline: char; lfStrikeOut: char; lfCharSet: char; lfOutPrecision: char; lfClipPrecision: char; lfQuality: char; lfPitchAndFamily: char; lfFaceName: [32; char]; }
export type LOGFONTW = struct { lfHeight: long; lfWidth: long; lfEscapement: long; lfOrientation: long; lfWeight: long; lfItalic: char; lfUnderline: char; lfStrikeOut: char; lfCharSet: char; lfOutPrecision: char; lfClipPrecision: char; lfQuality: char; lfPitchAndFamily: char; lfFaceName: [32; ushort]; }
export type ENUMLOGFONTA = struct { elfLogFont: LOGFONTA; elfFullName: [64; char]; elfStyle: [32; char]; }
export type ENUMLOGFONTW = struct { elfLogFont: LOGFONTW; elfFullName: [64; ushort]; elfStyle: [32; ushort]; }
export type ENUMLOGFONTEXA = struct { elfLogFont: LOGFONTA; elfFullName: [64; char]; elfStyle: [32; char]; elfScript: [32; char]; }
export type ENUMLOGFONTEXW = struct { elfLogFont: LOGFONTW; elfFullName: [64; ushort]; elfStyle: [32; ushort]; elfScript: [32; ushort]; }
export type PANOSE = struct { bFamilyType: char; bSerifStyle: char; bWeight: char; bProportion: char; bContrast: char; bStrokeVariation: char; bArmStyle: char; bLetterform: char; bMidline: char; bXHeight: char; }
export type EXTLOGFONTA = struct { elfLogFont: LOGFONTA; elfFullName: [64; char]; elfStyle: [32; char]; elfVersion: ulong; elfStyleSize: ulong; elfMatch: ulong; elfReserved: ulong; elfVendorId: [4; char]; elfCulture: ulong; elfPanose: PANOSE; }
export type EXTLOGFONTW = struct { elfLogFont: LOGFONTW; elfFullName: [64; ushort]; elfStyle: [32; ushort]; elfVersion: ulong; elfStyleSize: ulong; elfMatch: ulong; elfReserved: ulong; elfVendorId: [4; char]; elfCulture: ulong; elfPanose: PANOSE; }
export type DEVMODEA = struct { dmDeviceName: [32; char]; dmSpecVersion: ushort; dmDriverVersion: ushort; dmSize: ushort; dmDriverExtra: ushort; dmFields: ulong; _7: struct #union { _1: struct { dmOrientation: short; dmPaperSize: short; dmPaperLength: short; dmPaperWidth: short; dmScale: short; dmCopies: short; dmDefaultSource: short; dmPrintQuality: short; }; _11: struct { dmPosition: POINTL; dmDisplayOrientation: ulong; dmDisplayFixedOutput: ulong; }; }; dmColor: short; dmDuplex: short; dmYResolution: short; dmTTOption: short; dmCollate: short; dmFormName: [32; char]; dmLogPixels: ushort; dmBitsPerPel: ulong; dmPelsWidth: ulong; dmPelsHeight: ulong; _30: struct #union { dmDisplayFlags: ulong; dmNup: ulong; }; dmDisplayFrequency: ulong; dmICMMethod: ulong; dmICMIntent: ulong; dmMediaType: ulong; dmDitherType: ulong; dmReserved1: ulong; dmReserved2: ulong; dmPanningWidth: ulong; dmPanningHeight: ulong; }
export type DEVMODEW = struct { dmDeviceName: [32; ushort]; dmSpecVersion: ushort; dmDriverVersion: ushort; dmSize: ushort; dmDriverExtra: ushort; dmFields: ulong; _7: struct #union { _1: struct { dmOrientation: short; dmPaperSize: short; dmPaperLength: short; dmPaperWidth: short; dmScale: short; dmCopies: short; dmDefaultSource: short; dmPrintQuality: short; }; _11: struct { dmPosition: POINTL; dmDisplayOrientation: ulong; dmDisplayFixedOutput: ulong; }; }; dmColor: short; dmDuplex: short; dmYResolution: short; dmTTOption: short; dmCollate: short; dmFormName: [32; ushort]; dmLogPixels: ushort; dmBitsPerPel: ulong; dmPelsWidth: ulong; dmPelsHeight: ulong; _30: struct #union { dmDisplayFlags: ulong; dmNup: ulong; }; dmDisplayFrequency: ulong; dmICMMethod: ulong; dmICMIntent: ulong; dmMediaType: ulong; dmDitherType: ulong; dmReserved1: ulong; dmReserved2: ulong; dmPanningWidth: ulong; dmPanningHeight: ulong; }
export type DISPLAY_DEVICEA = struct { cb: ulong; DeviceName: [32; char]; DeviceString: [128; char]; StateFlags: ulong; DeviceID: [128; char]; DeviceKey: [128; char]; }
export type DISPLAY_DEVICEW = struct { cb: ulong; DeviceName: [32; ushort]; DeviceString: [128; ushort]; StateFlags: ulong; DeviceID: [128; ushort]; DeviceKey: [128; ushort]; }
export type DISPLAYCONFIG_RATIONAL = struct { Numerator: uint; Denominator: uint; }
export type DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = enum { DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER = (- 1); DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15 = 0; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO = 1; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO = 2; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO = 3; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI = 4; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI = 5; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS = 6; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN = 8; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI = 9; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL = 10; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED = 11; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL = 12; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED = 13; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE = 14; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST = 15; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED = 16; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_VIRTUAL = 17; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL; DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32; }
export type DISPLAYCONFIG_SCANLINE_ORDERING = enum { DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED = 0; DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE = 1; DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED = 2; DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST = DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED; DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST = 3; DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32; }
export type DISPLAYCONFIG_2DREGION = struct { cx: uint; cy: uint; }
export type DISPLAYCONFIG_VIDEO_SIGNAL_INFO = struct { pixelRate: uint64; hSyncFreq: DISPLAYCONFIG_RATIONAL; vSyncFreq: DISPLAYCONFIG_RATIONAL; activeSize: DISPLAYCONFIG_2DREGION; totalSize: DISPLAYCONFIG_2DREGION; _6: struct #union { AdditionalSignalInfo: struct { #bits(16) videoStandard: uint; #bits(6) vSyncFreqDivider: uint; #bits(10) reserved: uint; }; videoStandard: uint; }; scanLineOrdering: DISPLAYCONFIG_SCANLINE_ORDERING; }
export type DISPLAYCONFIG_SCALING = enum { DISPLAYCONFIG_SCALING_IDENTITY = 1; DISPLAYCONFIG_SCALING_CENTERED = 2; DISPLAYCONFIG_SCALING_STRETCHED = 3; DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX = 4; DISPLAYCONFIG_SCALING_CUSTOM = 5; DISPLAYCONFIG_SCALING_PREFERRED = 128; DISPLAYCONFIG_SCALING_FORCE_UINT32; }
export type DISPLAYCONFIG_ROTATION = enum { DISPLAYCONFIG_ROTATION_IDENTITY = 1; DISPLAYCONFIG_ROTATION_ROTATE90 = 2; DISPLAYCONFIG_ROTATION_ROTATE180 = 3; DISPLAYCONFIG_ROTATION_ROTATE270 = 4; DISPLAYCONFIG_ROTATION_FORCE_UINT32; }
export type DISPLAYCONFIG_MODE_INFO_TYPE = enum { DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE = 1; DISPLAYCONFIG_MODE_INFO_TYPE_TARGET = 2; DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE = 3; DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32; }
export type DISPLAYCONFIG_PIXELFORMAT = enum { DISPLAYCONFIG_PIXELFORMAT_8BPP = 1; DISPLAYCONFIG_PIXELFORMAT_16BPP = 2; DISPLAYCONFIG_PIXELFORMAT_24BPP = 3; DISPLAYCONFIG_PIXELFORMAT_32BPP = 4; DISPLAYCONFIG_PIXELFORMAT_NONGDI = 5; DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32; }
export type DISPLAYCONFIG_SOURCE_MODE = struct { width: uint; height: uint; pixelFormat: DISPLAYCONFIG_PIXELFORMAT; position: POINTL; }
export type DISPLAYCONFIG_TARGET_MODE = struct { targetVideoSignalInfo: DISPLAYCONFIG_VIDEO_SIGNAL_INFO; }
export type DISPLAYCONFIG_DESKTOP_IMAGE_INFO = struct { PathSourceSize: POINTL; DesktopImageRegion: RECTL; DesktopImageClip: RECTL; }
export type DISPLAYCONFIG_MODE_INFO = struct { infoType: DISPLAYCONFIG_MODE_INFO_TYPE; id: uint; adapterId: LUID; _4: struct #union { targetMode: DISPLAYCONFIG_TARGET_MODE; sourceMode: DISPLAYCONFIG_SOURCE_MODE; desktopImageInfo: DISPLAYCONFIG_DESKTOP_IMAGE_INFO; }; }
export type DISPLAYCONFIG_PATH_SOURCE_INFO = struct { adapterId: LUID; id: uint; _3: struct #union { modeInfoIdx: uint; _2: struct { #bits(16) cloneGroupId: uint; #bits(16) sourceModeInfoIdx: uint; }; }; statusFlags: uint; }
export type DISPLAYCONFIG_PATH_TARGET_INFO = struct { adapterId: LUID; id: uint; _3: struct #union { modeInfoIdx: uint; _2: struct { #bits(16) desktopModeInfoIdx: uint; #bits(16) targetModeInfoIdx: uint; }; }; outputTechnology: DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY; rotation: DISPLAYCONFIG_ROTATION; scaling: DISPLAYCONFIG_SCALING; refreshRate: DISPLAYCONFIG_RATIONAL; scanLineOrdering: DISPLAYCONFIG_SCANLINE_ORDERING; targetAvailable: int; statusFlags: uint; }
export type DISPLAYCONFIG_PATH_INFO = struct { sourceInfo: DISPLAYCONFIG_PATH_SOURCE_INFO; targetInfo: DISPLAYCONFIG_PATH_TARGET_INFO; flags: uint; }
export type DISPLAYCONFIG_TOPOLOGY_ID = enum { DISPLAYCONFIG_TOPOLOGY_INTERNAL = 1; DISPLAYCONFIG_TOPOLOGY_CLONE = 2; DISPLAYCONFIG_TOPOLOGY_EXTEND = 4; DISPLAYCONFIG_TOPOLOGY_EXTERNAL = 8; DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32; }
export type DISPLAYCONFIG_DEVICE_INFO_TYPE = enum { DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME = 1; DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME = 2; DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE = 3; DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME = 4; DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE = 5; DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE = 6; DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION = 7; DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION = 8; DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO = 9; DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE = 10; DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL = 11; DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32; }
export type DISPLAYCONFIG_DEVICE_INFO_HEADER = struct { type_: DISPLAYCONFIG_DEVICE_INFO_TYPE; size: uint; adapterId: LUID; id: uint; }
export type DISPLAYCONFIG_SOURCE_DEVICE_NAME = struct { header: DISPLAYCONFIG_DEVICE_INFO_HEADER; viewGdiDeviceName: [32; ushort]; }
export type DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS = struct { _1: struct #union { _1: struct { #bits(1) friendlyNameFromEdid: uint; #bits(1) friendlyNameForced: uint; #bits(1) edidIdsValid: uint; #bits(29) reserved: uint; }; value: uint; }; }
export type DISPLAYCONFIG_TARGET_DEVICE_NAME = struct { header: DISPLAYCONFIG_DEVICE_INFO_HEADER; flags: DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS; outputTechnology: DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY; edidManufactureId: ushort; edidProductCodeId: ushort; connectorInstance: uint; monitorFriendlyDeviceName: [64; ushort]; monitorDevicePath: [128; ushort]; }
export type DISPLAYCONFIG_TARGET_PREFERRED_MODE = struct { header: DISPLAYCONFIG_DEVICE_INFO_HEADER; width: uint; height: uint; targetMode: DISPLAYCONFIG_TARGET_MODE; }
export type DISPLAYCONFIG_ADAPTER_NAME = struct { header: DISPLAYCONFIG_DEVICE_INFO_HEADER; adapterDevicePath: [128; ushort]; }
export type DISPLAYCONFIG_TARGET_BASE_TYPE = struct { header: DISPLAYCONFIG_DEVICE_INFO_HEADER; baseOutputTechnology: DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY; }
export type DISPLAYCONFIG_SET_TARGET_PERSISTENCE = struct { header: DISPLAYCONFIG_DEVICE_INFO_HEADER; _2: struct #union { _1: struct { #bits(1) bootPersistenceOn: uint; #bits(31) reserved: uint; }; value: uint; }; }
export type DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION = struct { header: DISPLAYCONFIG_DEVICE_INFO_HEADER; _2: struct #union { _1: struct { #bits(1) disableMonitorVirtualResolution: uint; #bits(31) reserved: uint; }; value: uint; }; }
export type DISPLAYCONFIG_COLOR_ENCODING = enum { DISPLAYCONFIG_COLOR_ENCODING_RGB = 0; DISPLAYCONFIG_COLOR_ENCODING_YCBCR444 = 1; DISPLAYCONFIG_COLOR_ENCODING_YCBCR422 = 2; DISPLAYCONFIG_COLOR_ENCODING_YCBCR420 = 3; DISPLAYCONFIG_COLOR_ENCODING_INTENSITY = 4; DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32; }
export type DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO = struct { header: DISPLAYCONFIG_DEVICE_INFO_HEADER; _2: struct #union { _1: struct { #bits(1) advancedColorSupported: uint; #bits(1) advancedColorEnabled: uint; #bits(1) wideColorEnforced: uint; #bits(1) advancedColorForceDisabled: uint; #bits(28) reserved: uint; }; value: uint; }; colorEncoding: DISPLAYCONFIG_COLOR_ENCODING; bitsPerColorChannel: uint; }
export type DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE = struct { header: DISPLAYCONFIG_DEVICE_INFO_HEADER; _2: struct #union { _1: struct { #bits(1) enableAdvancedColor: uint; #bits(31) reserved: uint; }; value: uint; }; }
export type DISPLAYCONFIG_SDR_WHITE_LEVEL = struct { header: DISPLAYCONFIG_DEVICE_INFO_HEADER; SDRWhiteLevel: ulong; }
export type RGNDATAHEADER = struct { dwSize: ulong; iType: ulong; nCount: ulong; nRgnSize: ulong; rcBound: RECT; }
export type RGNDATA = struct { rdh: RGNDATAHEADER; Buffer: [1; char]; }
export type ABC = struct { abcA: int; abcB: uint; abcC: int; }
export type ABCFLOAT = struct { abcfA: float; abcfB: float; abcfC: float; }
export type OUTLINETEXTMETRICA = struct { otmSize: uint; otmTextMetrics: TEXTMETRICA; otmFiller: char; otmPanoseNumber: PANOSE; otmfsSelection: uint; otmfsType: uint; otmsCharSlopeRise: int; otmsCharSlopeRun: int; otmItalicAngle: int; otmEMSquare: uint; otmAscent: int; otmDescent: int; otmLineGap: uint; otmsCapEmHeight: uint; otmsXHeight: uint; otmrcFontBox: RECT; otmMacAscent: int; otmMacDescent: int; otmMacLineGap: uint; otmusMinimumPPEM: uint; otmptSubscriptSize: POINT; otmptSubscriptOffset: POINT; otmptSuperscriptSize: POINT; otmptSuperscriptOffset: POINT; otmsStrikeoutSize: uint; otmsStrikeoutPosition: int; otmsUnderscoreSize: int; otmsUnderscorePosition: int; otmpFamilyName: *char; otmpFaceName: *char; otmpStyleName: *char; otmpFullName: *char; }
export type OUTLINETEXTMETRICW = struct { otmSize: uint; otmTextMetrics: TEXTMETRICW; otmFiller: char; otmPanoseNumber: PANOSE; otmfsSelection: uint; otmfsType: uint; otmsCharSlopeRise: int; otmsCharSlopeRun: int; otmItalicAngle: int; otmEMSquare: uint; otmAscent: int; otmDescent: int; otmLineGap: uint; otmsCapEmHeight: uint; otmsXHeight: uint; otmrcFontBox: RECT; otmMacAscent: int; otmMacDescent: int; otmMacLineGap: uint; otmusMinimumPPEM: uint; otmptSubscriptSize: POINT; otmptSubscriptOffset: POINT; otmptSuperscriptSize: POINT; otmptSuperscriptOffset: POINT; otmsStrikeoutSize: uint; otmsStrikeoutPosition: int; otmsUnderscoreSize: int; otmsUnderscorePosition: int; otmpFamilyName: *char; otmpFaceName: *char; otmpStyleName: *char; otmpFullName: *char; }
export type POLYTEXTA = struct { x: int; y: int; n: uint; lpstr: *char; uiFlags: uint; rcl: RECT; pdx: *int; }
export type POLYTEXTW = struct { x: int; y: int; n: uint; lpstr: *ushort; uiFlags: uint; rcl: RECT; pdx: *int; }
export type FIXED = struct { fract: ushort; value: short; }
export type MAT2 = struct { eM11: FIXED; eM12: FIXED; eM21: FIXED; eM22: FIXED; }
export type GLYPHMETRICS = struct { gmBlackBoxX: uint; gmBlackBoxY: uint; gmptGlyphOrigin: POINT; gmCellIncX: short; gmCellIncY: short; }
export type POINTFX = struct { x: FIXED; y: FIXED; }
export type TTPOLYCURVE = struct { wType: ushort; cpfx: ushort; apfx: [1; POINTFX]; }
export type TTPOLYGONHEADER = struct { cb: ulong; dwType: ulong; pfxStart: POINTFX; }
export type GCP_RESULTSA = struct { lStructSize: ulong; lpOutString: *char; lpOrder: *uint; lpDx: *int; lpCaretPos: *int; lpClass: *char; lpGlyphs: *ushort; nGlyphs: uint; nMaxFit: int; }
export type GCP_RESULTSW = struct { lStructSize: ulong; lpOutString: *ushort; lpOrder: *uint; lpDx: *int; lpCaretPos: *int; lpClass: *char; lpGlyphs: *ushort; nGlyphs: uint; nMaxFit: int; }
export type RASTERIZER_STATUS = struct { nSize: short; wFlags: short; nLanguageID: short; }
export type PIXELFORMATDESCRIPTOR = struct { nSize: ushort; nVersion: ushort; dwFlags: ulong; iPixelType: char; cColorBits: char; cRedBits: char; cRedShift: char; cGreenBits: char; cGreenShift: char; cBlueBits: char; cBlueShift: char; cAlphaBits: char; cAlphaShift: char; cAccumBits: char; cAccumRedBits: char; cAccumGreenBits: char; cAccumBlueBits: char; cAccumAlphaBits: char; cDepthBits: char; cStencilBits: char; cAuxBuffers: char; iLayerType: char; bReserved: char; dwLayerMask: ulong; dwVisibleMask: ulong; dwDamageMask: ulong; }
export type WCRANGE = struct { wcLow: ushort; cGlyphs: ushort; }
export type GLYPHSET = struct { cbThis: ulong; flAccel: ulong; cGlyphsSupported: ulong; cRanges: ulong; ranges: [1; WCRANGE]; }
export type DESIGNVECTOR = struct { dvReserved: ulong; dvNumAxes: ulong; dvValues: [16; long]; }
export type AXISINFOA = struct { axMinValue: long; axMaxValue: long; axAxisName: [16; char]; }
export type AXISINFOW = struct { axMinValue: long; axMaxValue: long; axAxisName: [16; ushort]; }
export type AXESLISTA = struct { axlReserved: ulong; axlNumAxes: ulong; axlAxisInfo: [16; AXISINFOA]; }
export type AXESLISTW = struct { axlReserved: ulong; axlNumAxes: ulong; axlAxisInfo: [16; AXISINFOW]; }
export type ENUMLOGFONTEXDVA = struct { elfEnumLogfontEx: ENUMLOGFONTEXA; elfDesignVector: DESIGNVECTOR; }
export type ENUMLOGFONTEXDVW = struct { elfEnumLogfontEx: ENUMLOGFONTEXW; elfDesignVector: DESIGNVECTOR; }
export type ENUMTEXTMETRICA = struct { etmNewTextMetricEx: NEWTEXTMETRICEXA; etmAxesList: AXESLISTA; }
export type ENUMTEXTMETRICW = struct { etmNewTextMetricEx: NEWTEXTMETRICEXW; etmAxesList: AXESLISTW; }
export type TRIVERTEX = struct { x: long; y: long; Red: ushort; Green: ushort; Blue: ushort; Alpha: ushort; }
export type GRADIENT_TRIANGLE = struct { Vertex1: ulong; Vertex2: ulong; Vertex3: ulong; }
export type GRADIENT_RECT = struct { UpperLeft: ulong; LowerRight: ulong; }
export type BLENDFUNCTION = struct { BlendOp: char; BlendFlags: char; SourceConstantAlpha: char; AlphaFormat: char; }
export type DIBSECTION = struct { dsBm: BITMAP; dsBmih: BITMAPINFOHEADER; dsBitfields: [3; ulong]; dshSection: *; dsOffset: ulong; }
export type COLORADJUSTMENT = struct { caSize: ushort; caFlags: ushort; caIlluminantIndex: ushort; caRedGamma: ushort; caGreenGamma: ushort; caBlueGamma: ushort; caReferenceBlack: ushort; caReferenceWhite: ushort; caContrast: short; caBrightness: short; caColorfulness: short; caRedGreenTint: short; }
export type DOCINFOA = struct { cbSize: int; lpszDocName: *char; lpszOutput: *char; lpszDatatype: *char; fwType: ulong; }
export type DOCINFOW = struct { cbSize: int; lpszDocName: *ushort; lpszOutput: *ushort; lpszDatatype: *ushort; fwType: ulong; }
export type KERNINGPAIR = struct { wFirst: ushort; wSecond: ushort; iKernAmount: int; }
export type EMR = struct { iType: ulong; nSize: ulong; }
export type EMRTEXT = struct { ptlReference: POINTL; nChars: ulong; offString: ulong; fOptions: ulong; rcl: RECTL; offDx: ulong; }
export type EMRREALIZEPALETTE = struct { emr: EMR; }
export type EMRSETTEXTALIGN = struct { emr: EMR; iMode: ulong; }
export type EMRSETMITERLIMIT = struct { emr: EMR; eMiterLimit: float; }
export type EMRRESTOREDC = struct { emr: EMR; iRelative: long; }
export type EMRSETARCDIRECTION = struct { emr: EMR; iArcDirection: ulong; }
export type EMRSETMAPPERFLAGS = struct { emr: EMR; dwFlags: ulong; }
export type EMRSETTEXTCOLOR = struct { emr: EMR; crColor: ulong; }
export type EMRDELETEOBJECT = struct { emr: EMR; ihObject: ulong; }
export type EMRSELECTPALETTE = struct { emr: EMR; ihPal: ulong; }
export type EMRRESIZEPALETTE = struct { emr: EMR; ihPal: ulong; cEntries: ulong; }
export type EMRSETPALETTEENTRIES = struct { emr: EMR; ihPal: ulong; iStart: ulong; cEntries: ulong; aPalEntries: [1; PALETTEENTRY]; }
export type EMRSETCOLORADJUSTMENT = struct { emr: EMR; ColorAdjustment: COLORADJUSTMENT; }
export type EMRGDICOMMENT = struct { emr: EMR; cbData: ulong; Data: [1; char]; }
export type EMREOF = struct { emr: EMR; nPalEntries: ulong; offPalEntries: ulong; nSizeLast: ulong; }
export type EMRMOVETOEX = struct { emr: EMR; ptl: POINTL; }
export type EMROFFSETCLIPRGN = struct { emr: EMR; ptlOffset: POINTL; }
export type EMRSTROKEPATH = struct { emr: EMR; rclBounds: RECTL; }
export type EMRINTERSECTCLIPRECT = struct { emr: EMR; rclClip: RECTL; }
export type EMRSETBRUSHORGEX = struct { emr: EMR; ptlOrigin: POINTL; }
export type EMRSETWINDOWEXTEX = struct { emr: EMR; szlExtent: SIZE; }
export type EMRSCALEWINDOWEXTEX = struct { emr: EMR; xNum: long; xDenom: long; yNum: long; yDenom: long; }
export type EMRSETWORLDTRANSFORM = struct { emr: EMR; xform: XFORM; }
export type EMRMODIFYWORLDTRANSFORM = struct { emr: EMR; xform: XFORM; iMode: ulong; }
export type EMRSETPIXELV = struct { emr: EMR; ptlPixel: POINTL; crColor: ulong; }
export type EMREXTFLOODFILL = struct { emr: EMR; ptlStart: POINTL; crColor: ulong; iMode: ulong; }
export type EMRRECTANGLE = struct { emr: EMR; rclBox: RECTL; }
export type EMRROUNDRECT = struct { emr: EMR; rclBox: RECTL; szlCorner: SIZE; }
export type EMRPIE = struct { emr: EMR; rclBox: RECTL; ptlStart: POINTL; ptlEnd: POINTL; }
export type EMRANGLEARC = struct { emr: EMR; ptlCenter: POINTL; nRadius: ulong; eStartAngle: float; eSweepAngle: float; }
export type EMRPOLYLINETO = struct { emr: EMR; rclBounds: RECTL; cptl: ulong; aptl: [1; POINTL]; }
export type EMRPOLYLINETO16 = struct { emr: EMR; rclBounds: RECTL; cpts: ulong; apts: [1; POINTS]; }
export type EMRPOLYDRAW = struct { emr: EMR; rclBounds: RECTL; cptl: ulong; aptl: [1; POINTL]; abTypes: [1; char]; }
export type EMRPOLYDRAW16 = struct { emr: EMR; rclBounds: RECTL; cpts: ulong; apts: [1; POINTS]; abTypes: [1; char]; }
export type EMRPOLYPOLYGON = struct { emr: EMR; rclBounds: RECTL; nPolys: ulong; cptl: ulong; aPolyCounts: [1; ulong]; aptl: [1; POINTL]; }
export type EMRPOLYPOLYGON16 = struct { emr: EMR; rclBounds: RECTL; nPolys: ulong; cpts: ulong; aPolyCounts: [1; ulong]; apts: [1; POINTS]; }
export type EMRPAINTRGN = struct { emr: EMR; rclBounds: RECTL; cbRgnData: ulong; RgnData: [1; char]; }
export type EMRFILLRGN = struct { emr: EMR; rclBounds: RECTL; cbRgnData: ulong; ihBrush: ulong; RgnData: [1; char]; }
export type EMRFRAMERGN = struct { emr: EMR; rclBounds: RECTL; cbRgnData: ulong; ihBrush: ulong; szlStroke: SIZE; RgnData: [1; char]; }
export type EMREXTSELECTCLIPRGN = struct { emr: EMR; cbRgnData: ulong; iMode: ulong; RgnData: [1; char]; }
export type EMREXTTEXTOUTW = struct { emr: EMR; rclBounds: RECTL; iGraphicsMode: ulong; exScale: float; eyScale: float; emrtext: EMRTEXT; }
export type EMRPOLYTEXTOUTW = struct { emr: EMR; rclBounds: RECTL; iGraphicsMode: ulong; exScale: float; eyScale: float; cStrings: long; aemrtext: [1; EMRTEXT]; }
export type EMRBITBLT = struct { emr: EMR; rclBounds: RECTL; xDest: long; yDest: long; cxDest: long; cyDest: long; dwRop: ulong; xSrc: long; ySrc: long; xformSrc: XFORM; crBkColorSrc: ulong; iUsageSrc: ulong; offBmiSrc: ulong; cbBmiSrc: ulong; offBitsSrc: ulong; cbBitsSrc: ulong; }
export type EMRSTRETCHBLT = struct { emr: EMR; rclBounds: RECTL; xDest: long; yDest: long; cxDest: long; cyDest: long; dwRop: ulong; xSrc: long; ySrc: long; xformSrc: XFORM; crBkColorSrc: ulong; iUsageSrc: ulong; offBmiSrc: ulong; cbBmiSrc: ulong; offBitsSrc: ulong; cbBitsSrc: ulong; cxSrc: long; cySrc: long; }
export type EMRMASKBLT = struct { emr: EMR; rclBounds: RECTL; xDest: long; yDest: long; cxDest: long; cyDest: long; dwRop: ulong; xSrc: long; ySrc: long; xformSrc: XFORM; crBkColorSrc: ulong; iUsageSrc: ulong; offBmiSrc: ulong; cbBmiSrc: ulong; offBitsSrc: ulong; cbBitsSrc: ulong; xMask: long; yMask: long; iUsageMask: ulong; offBmiMask: ulong; cbBmiMask: ulong; offBitsMask: ulong; cbBitsMask: ulong; }
export type EMRPLGBLT = struct { emr: EMR; rclBounds: RECTL; aptlDest: [3; POINTL]; xSrc: long; ySrc: long; cxSrc: long; cySrc: long; xformSrc: XFORM; crBkColorSrc: ulong; iUsageSrc: ulong; offBmiSrc: ulong; cbBmiSrc: ulong; offBitsSrc: ulong; cbBitsSrc: ulong; xMask: long; yMask: long; iUsageMask: ulong; offBmiMask: ulong; cbBmiMask: ulong; offBitsMask: ulong; cbBitsMask: ulong; }
export type EMRSETDIBITSTODEVICE = struct { emr: EMR; rclBounds: RECTL; xDest: long; yDest: long; xSrc: long; ySrc: long; cxSrc: long; cySrc: long; offBmiSrc: ulong; cbBmiSrc: ulong; offBitsSrc: ulong; cbBitsSrc: ulong; iUsageSrc: ulong; iStartScan: ulong; cScans: ulong; }
export type EMRSTRETCHDIBITS = struct { emr: EMR; rclBounds: RECTL; xDest: long; yDest: long; xSrc: long; ySrc: long; cxSrc: long; cySrc: long; offBmiSrc: ulong; cbBmiSrc: ulong; offBitsSrc: ulong; cbBitsSrc: ulong; iUsageSrc: ulong; dwRop: ulong; cxDest: long; cyDest: long; }
export type EMREXTCREATEFONTINDIRECTW = struct { emr: EMR; ihFont: ulong; elfw: EXTLOGFONTW; }
export type EMRCREATEPALETTE = struct { emr: EMR; ihPal: ulong; lgpl: LOGPALETTE; }
export type EMRCREATEPEN = struct { emr: EMR; ihPen: ulong; lopn: LOGPEN; }
export type EMREXTCREATEPEN = struct { emr: EMR; ihPen: ulong; offBmi: ulong; cbBmi: ulong; offBits: ulong; cbBits: ulong; elp: EXTLOGPEN32; }
export type EMRCREATEBRUSHINDIRECT = struct { emr: EMR; ihBrush: ulong; lb: LOGBRUSH32; }
export type EMRCREATEMONOBRUSH = struct { emr: EMR; ihBrush: ulong; iUsage: ulong; offBmi: ulong; cbBmi: ulong; offBits: ulong; cbBits: ulong; }
export type EMRCREATEDIBPATTERNBRUSHPT = struct { emr: EMR; ihBrush: ulong; iUsage: ulong; offBmi: ulong; cbBmi: ulong; offBits: ulong; cbBits: ulong; }
export type EMRFORMAT = struct { dSignature: ulong; nVersion: ulong; cbData: ulong; offData: ulong; }
export type EMRGLSRECORD = struct { emr: EMR; cbData: ulong; Data: [1; char]; }
export type EMRGLSBOUNDEDRECORD = struct { emr: EMR; rclBounds: RECTL; cbData: ulong; Data: [1; char]; }
export type EMRPIXELFORMAT = struct { emr: EMR; pfd: PIXELFORMATDESCRIPTOR; }
export type EMRCREATECOLORSPACE = struct { emr: EMR; ihCS: ulong; lcs: LOGCOLORSPACEA; }
export type EMRDELETECOLORSPACE = struct { emr: EMR; ihCS: ulong; }
export type EMRDRAWESCAPE = struct { emr: EMR; iEscape: int; cbEscData: int; EscData: [1; char]; }
export type EMRNAMEDESCAPE = struct { emr: EMR; iEscape: int; cbDriver: int; cbEscData: int; EscData: [1; char]; }
export type EMRSETICMPROFILEW = struct { emr: EMR; dwFlags: ulong; cbName: ulong; cbData: ulong; Data: [1; char]; }
export type EMRCREATECOLORSPACEW = struct { emr: EMR; ihCS: ulong; lcs: LOGCOLORSPACEW; dwFlags: ulong; cbData: ulong; Data: [1; char]; }
export type EMRCOLORMATCHTOTARGET = struct { emr: EMR; dwAction: ulong; dwFlags: ulong; cbName: ulong; cbData: ulong; Data: [1; char]; }
export type EMRCOLORCORRECTPALETTE = struct { emr: EMR; ihPalette: ulong; nFirstEntry: ulong; nPalEntries: ulong; nReserved: ulong; }
export type EMRALPHABLEND = struct { emr: EMR; rclBounds: RECTL; xDest: long; yDest: long; cxDest: long; cyDest: long; dwRop: ulong; xSrc: long; ySrc: long; xformSrc: XFORM; crBkColorSrc: ulong; iUsageSrc: ulong; offBmiSrc: ulong; cbBmiSrc: ulong; offBitsSrc: ulong; cbBitsSrc: ulong; cxSrc: long; cySrc: long; }
export type EMRGRADIENTFILL = struct { emr: EMR; rclBounds: RECTL; nVer: ulong; nTri: ulong; ulMode: ulong; Ver: [1; TRIVERTEX]; }
export type EMRTRANSPARENTBLT = struct { emr: EMR; rclBounds: RECTL; xDest: long; yDest: long; cxDest: long; cyDest: long; dwRop: ulong; xSrc: long; ySrc: long; xformSrc: XFORM; crBkColorSrc: ulong; iUsageSrc: ulong; offBmiSrc: ulong; cbBmiSrc: ulong; offBitsSrc: ulong; cbBitsSrc: ulong; cxSrc: long; cySrc: long; }
export type POINTFLOAT = struct { x: float; y: float; }
export type GLYPHMETRICSFLOAT = struct { gmfBlackBoxX: float; gmfBlackBoxY: float; gmfptGlyphOrigin: POINTFLOAT; gmfCellIncX: float; gmfCellIncY: float; }
export type LAYERPLANEDESCRIPTOR = struct { nSize: ushort; nVersion: ushort; dwFlags: ulong; iPixelType: char; cColorBits: char; cRedBits: char; cRedShift: char; cGreenBits: char; cGreenShift: char; cBlueBits: char; cBlueShift: char; cAlphaBits: char; cAlphaShift: char; cAccumBits: char; cAccumRedBits: char; cAccumGreenBits: char; cAccumBlueBits: char; cAccumAlphaBits: char; cDepthBits: char; cStencilBits: char; cAuxBuffers: char; iLayerPlane: char; bReserved: char; crTransparent: ulong; }
export type WGLSWAP = struct { hdc: *s_HDC__; uiFlags: uint; }
export type CBT_CREATEWNDA = struct { lpcs: *CREATESTRUCTA; hwndInsertAfter: *s_HWND__; }
export type CBT_CREATEWNDW = struct { lpcs: *CREATESTRUCTW; hwndInsertAfter: *s_HWND__; }
export type CBTACTIVATESTRUCT = struct { fMouse: int; hWndActive: *s_HWND__; }
export type WTSSESSION_NOTIFICATION = struct { cbSize: ulong; dwSessionId: ulong; }
export type SHELLHOOKINFO = struct { hwnd: *s_HWND__; rc: RECT; }
export type EVENTMSG = struct { message: uint; paramL: uint; paramH: uint; time: ulong; hwnd: *s_HWND__; }
export type CWPSTRUCT = struct { lParam: int64; wParam: uint64; message: uint; hwnd: *s_HWND__; }
export type CWPRETSTRUCT = struct { lResult: int64; lParam: int64; wParam: uint64; message: uint; hwnd: *s_HWND__; }
export type KBDLLHOOKSTRUCT = struct { vkCode: ulong; scanCode: ulong; flags: ulong; time: ulong; dwExtraInfo: uint64; }
export type MSLLHOOKSTRUCT = struct { pt: POINT; mouseData: ulong; flags: ulong; time: ulong; dwExtraInfo: uint64; }
export type DEBUGHOOKINFO = struct { idThread: ulong; idThreadInstaller: ulong; lParam: int64; wParam: uint64; code: int; }
export type MOUSEHOOKSTRUCT = struct { pt: POINT; hwnd: *s_HWND__; wHitTestCode: uint; dwExtraInfo: uint64; }
export type MOUSEHOOKSTRUCTEX = struct { _0: MOUSEHOOKSTRUCT; mouseData: ulong; }
export type HARDWAREHOOKSTRUCT = struct { hwnd: *s_HWND__; message: uint; wParam: uint64; lParam: int64; }
export type MOUSEMOVEPOINT = struct { x: int; y: int; time: ulong; dwExtraInfo: uint64; }
export type USEROBJECTFLAGS = struct { fInherit: int; fReserved: int; dwFlags: ulong; }
export type WNDCLASSEXA = struct { cbSize: uint; style: uint; lpfnWndProc: def (*s_HWND__, uint, uint64, int64) -> (int64); cbClsExtra: int; cbWndExtra: int; hInstance: *s_HINSTANCE__; hIcon: *s_HICON__; hCursor: *s_HICON__; hbrBackground: *s_HBRUSH__; lpszMenuName: *char; lpszClassName: *char; hIconSm: *s_HICON__; }
export type WNDCLASSEXW = struct { cbSize: uint; style: uint; lpfnWndProc: def (*s_HWND__, uint, uint64, int64) -> (int64); cbClsExtra: int; cbWndExtra: int; hInstance: *s_HINSTANCE__; hIcon: *s_HICON__; hCursor: *s_HICON__; hbrBackground: *s_HBRUSH__; lpszMenuName: *ushort; lpszClassName: *ushort; hIconSm: *s_HICON__; }
export type WNDCLASSA = struct { style: uint; lpfnWndProc: def (*s_HWND__, uint, uint64, int64) -> (int64); cbClsExtra: int; cbWndExtra: int; hInstance: *s_HINSTANCE__; hIcon: *s_HICON__; hCursor: *s_HICON__; hbrBackground: *s_HBRUSH__; lpszMenuName: *char; lpszClassName: *char; }
export type WNDCLASSW = struct { style: uint; lpfnWndProc: def (*s_HWND__, uint, uint64, int64) -> (int64); cbClsExtra: int; cbWndExtra: int; hInstance: *s_HINSTANCE__; hIcon: *s_HICON__; hCursor: *s_HICON__; hbrBackground: *s_HBRUSH__; lpszMenuName: *ushort; lpszClassName: *ushort; }
export type MSG = struct { hwnd: *s_HWND__; message: uint; wParam: uint64; lParam: int64; time: ulong; pt: POINT; }
export type MINMAXINFO = struct { ptReserved: POINT; ptMaxSize: POINT; ptMaxPosition: POINT; ptMinTrackSize: POINT; ptMaxTrackSize: POINT; }
export type COPYDATASTRUCT = struct { dwData: uint64; cbData: ulong; lpData: *; }
export type MDINEXTMENU = struct { hmenuIn: *s_HMENU__; hmenuNext: *s_HMENU__; hwndNext: *s_HWND__; }
export type POWERBROADCAST_SETTING = struct { PowerSetting: GUID; DataLength: ulong; Data: [1; char]; }
export type WINDOWPOS = struct { hwnd: *s_HWND__; hwndInsertAfter: *s_HWND__; x: int; y: int; cx: int; cy: int; flags: uint; }
export type NCCALCSIZE_PARAMS = struct { rgrc: [3; RECT]; lppos: *WINDOWPOS; }
export type TRACKMOUSEEVENT = struct { cbSize: ulong; dwFlags: ulong; hwndTrack: *s_HWND__; dwHoverTime: ulong; }
export type ACCEL = struct { fVirt: char; key: ushort; cmd: ushort; }
export type PAINTSTRUCT = struct { hdc: *s_HDC__; fErase: int; rcPaint: RECT; fRestore: int; fIncUpdate: int; rgbReserved: [32; char]; }
export type CREATESTRUCTA = struct { lpCreateParams: *; hInstance: *s_HINSTANCE__; hMenu: *s_HMENU__; hwndParent: *s_HWND__; cy: int; cx: int; y: int; x: int; style: long; lpszName: *char; lpszClass: *char; dwExStyle: ulong; }
export type CREATESTRUCTW = struct { lpCreateParams: *; hInstance: *s_HINSTANCE__; hMenu: *s_HMENU__; hwndParent: *s_HWND__; cy: int; cx: int; y: int; x: int; style: long; lpszName: *ushort; lpszClass: *ushort; dwExStyle: ulong; }
export type WINDOWPLACEMENT = struct { length: uint; flags: uint; showCmd: uint; ptMinPosition: POINT; ptMaxPosition: POINT; rcNormalPosition: RECT; }
export type NMHDR = struct { hwndFrom: *s_HWND__; idFrom: uint64; code: uint; }
export type STYLESTRUCT = struct { styleOld: ulong; styleNew: ulong; }
export type MEASUREITEMSTRUCT = struct { CtlType: uint; CtlID: uint; itemID: uint; itemWidth: uint; itemHeight: uint; itemData: uint64; }
export type DRAWITEMSTRUCT = struct { CtlType: uint; CtlID: uint; itemID: uint; itemAction: uint; itemState: uint; hwndItem: *s_HWND__; hDC: *s_HDC__; rcItem: RECT; itemData: uint64; }
export type DELETEITEMSTRUCT = struct { CtlType: uint; CtlID: uint; itemID: uint; hwndItem: *s_HWND__; itemData: uint64; }
export type COMPAREITEMSTRUCT = struct { CtlType: uint; CtlID: uint; hwndItem: *s_HWND__; itemID1: uint; itemData1: uint64; itemID2: uint; itemData2: uint64; dwLocaleId: ulong; }
export type BSMINFO = struct { cbSize: uint; hdesk: *s_HDESK__; hwnd: *s_HWND__; luid: LUID; }
export type UPDATELAYEREDWINDOWINFO = struct { cbSize: ulong; hdcDst: *s_HDC__; pptDst: *POINT; psize: *SIZE; hdcSrc: *s_HDC__; pptSrc: *POINT; crKey: ulong; pblend: *BLENDFUNCTION; dwFlags: ulong; prcDirty: *RECT; }
export type FLASHWINFO = struct { cbSize: uint; hwnd: *s_HWND__; dwFlags: ulong; uCount: uint; dwTimeout: ulong; }
export type DLGTEMPLATE = struct { style: ulong; dwExtendedStyle: ulong; cdit: ushort; x: short; y: short; cx: short; cy: short; }
export type DLGITEMTEMPLATE = struct { style: ulong; dwExtendedStyle: ulong; x: short; y: short; cx: short; cy: short; id: ushort; }
export type DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS = enum { DCDC_DEFAULT = 0; DCDC_DISABLE_FONT_UPDATE = 1; DCDC_DISABLE_RELAYOUT = 2; }
export type DIALOG_DPI_CHANGE_BEHAVIORS = enum { DDC_DEFAULT = 0; DDC_DISABLE_ALL = 1; DDC_DISABLE_RESIZE = 2; DDC_DISABLE_CONTROL_RELAYOUT = 4; }
export type MOUSEINPUT = struct { dx: long; dy: long; mouseData: ulong; dwFlags: ulong; time: ulong; dwExtraInfo: uint64; }
export type KEYBDINPUT = struct { wVk: ushort; wScan: ushort; dwFlags: ulong; time: ulong; dwExtraInfo: uint64; }
export type HARDWAREINPUT = struct { uMsg: ulong; wParamL: ushort; wParamH: ushort; }
export type INPUT = struct { type_: ulong; _2: struct #union { mi: MOUSEINPUT; ki: KEYBDINPUT; hi: HARDWAREINPUT; }; }
export type TOUCHINPUT = struct { x: long; y: long; hSource: *; dwID: ulong; dwFlags: ulong; dwMask: ulong; dwTime: ulong; dwExtraInfo: uint64; cxContact: ulong; cyContact: ulong; }
export type POINTER_BUTTON_CHANGE_TYPE = enum { POINTER_CHANGE_NONE; POINTER_CHANGE_FIRSTBUTTON_DOWN; POINTER_CHANGE_FIRSTBUTTON_UP; POINTER_CHANGE_SECONDBUTTON_DOWN; POINTER_CHANGE_SECONDBUTTON_UP; POINTER_CHANGE_THIRDBUTTON_DOWN; POINTER_CHANGE_THIRDBUTTON_UP; POINTER_CHANGE_FOURTHBUTTON_DOWN; POINTER_CHANGE_FOURTHBUTTON_UP; POINTER_CHANGE_FIFTHBUTTON_DOWN; POINTER_CHANGE_FIFTHBUTTON_UP; }
export type POINTER_INFO = struct { pointerType: ulong; pointerId: uint; frameId: uint; pointerFlags: uint; sourceDevice: *; hwndTarget: *s_HWND__; ptPixelLocation: POINT; ptHimetricLocation: POINT; ptPixelLocationRaw: POINT; ptHimetricLocationRaw: POINT; dwTime: ulong; historyCount: uint; InputData: int; dwKeyStates: ulong; PerformanceCount: uint64; ButtonChangeType: POINTER_BUTTON_CHANGE_TYPE; }
export type POINTER_TOUCH_INFO = struct { pointerInfo: POINTER_INFO; touchFlags: uint; touchMask: uint; rcContact: RECT; rcContactRaw: RECT; orientation: uint; pressure: uint; }
export type POINTER_PEN_INFO = struct { pointerInfo: POINTER_INFO; penFlags: uint; penMask: uint; pressure: uint; rotation: uint; tiltX: int; tiltY: int; }
export type POINTER_FEEDBACK_MODE = enum { POINTER_FEEDBACK_DEFAULT = 1; POINTER_FEEDBACK_INDIRECT = 2; POINTER_FEEDBACK_NONE = 3; }
export type USAGE_PROPERTIES = struct { level: ushort; page: ushort; usage: ushort; logicalMinimum: int; logicalMaximum: int; unit: ushort; exponent: ushort; count: char; physicalMinimum: int; physicalMaximum: int; }
export type POINTER_TYPE_INFO = struct { type_: ulong; _2: struct #union { touchInfo: POINTER_TOUCH_INFO; penInfo: POINTER_PEN_INFO; }; }
export type INPUT_INJECTION_VALUE = struct { page: ushort; usage: ushort; value: int; index: ushort; }
export type TOUCH_HIT_TESTING_PROXIMITY_EVALUATION = struct { score: ushort; adjustedPoint: POINT; }
export type TOUCH_HIT_TESTING_INPUT = struct { pointerId: uint; point: POINT; boundingBox: RECT; nonOccludedBoundingBox: RECT; orientation: uint; }
export type FEEDBACK_TYPE = enum { FEEDBACK_TOUCH_CONTACTVISUALIZATION = 1; FEEDBACK_PEN_BARRELVISUALIZATION = 2; FEEDBACK_PEN_TAP = 3; FEEDBACK_PEN_DOUBLETAP = 4; FEEDBACK_PEN_PRESSANDHOLD = 5; FEEDBACK_PEN_RIGHTTAP = 6; FEEDBACK_TOUCH_TAP = 7; FEEDBACK_TOUCH_DOUBLETAP = 8; FEEDBACK_TOUCH_PRESSANDHOLD = 9; FEEDBACK_TOUCH_RIGHTTAP = 10; FEEDBACK_GESTURE_PRESSANDTAP = 11; FEEDBACK_MAX; }
export type INPUT_TRANSFORM = struct { _1: struct #union { _1: struct { _11: float; _12: float; _13: float; _14: float; _21: float; _22: float; _23: float; _24: float; _31: float; _32: float; _33: float; _34: float; _41: float; _42: float; _43: float; _44: float; }; m: [4; [4; float]]; }; }
export type LASTINPUTINFO = struct { cbSize: uint; dwTime: ulong; }
export type TPMPARAMS = struct { cbSize: uint; rcExclude: RECT; }
export type MENUINFO = struct { cbSize: ulong; fMask: ulong; dwStyle: ulong; cyMax: uint; hbrBack: *s_HBRUSH__; dwContextHelpID: ulong; dwMenuData: uint64; }
export type MENUGETOBJECTINFO = struct { dwFlags: ulong; uPos: uint; hmenu: *s_HMENU__; riid: *; pvObj: *; }
export type MENUITEMINFOA = struct { cbSize: uint; fMask: uint; fType: uint; fState: uint; wID: uint; hSubMenu: *s_HMENU__; hbmpChecked: *s_HBITMAP__; hbmpUnchecked: *s_HBITMAP__; dwItemData: uint64; dwTypeData: *char; cch: uint; hbmpItem: *s_HBITMAP__; }
export type MENUITEMINFOW = struct { cbSize: uint; fMask: uint; fType: uint; fState: uint; wID: uint; hSubMenu: *s_HMENU__; hbmpChecked: *s_HBITMAP__; hbmpUnchecked: *s_HBITMAP__; dwItemData: uint64; dwTypeData: *ushort; cch: uint; hbmpItem: *s_HBITMAP__; }
export type DROPSTRUCT = struct { hwndSource: *s_HWND__; hwndSink: *s_HWND__; wFmt: ulong; dwData: uint64; ptDrop: POINT; dwControlData: ulong; }
export type DRAWTEXTPARAMS = struct { cbSize: uint; iTabLength: int; iLeftMargin: int; iRightMargin: int; uiLengthDrawn: uint; }
export type HELPINFO = struct { cbSize: uint; iContextType: int; iCtrlId: int; hItemHandle: *; dwContextId: uint64; MousePos: POINT; }
export type MSGBOXPARAMSA = struct { cbSize: uint; hwndOwner: *s_HWND__; hInstance: *s_HINSTANCE__; lpszText: *char; lpszCaption: *char; dwStyle: ulong; lpszIcon: *char; dwContextHelpId: uint64; lpfnMsgBoxCallback: def (*HELPINFO) -> (); dwLanguageId: ulong; }
export type MSGBOXPARAMSW = struct { cbSize: uint; hwndOwner: *s_HWND__; hInstance: *s_HINSTANCE__; lpszText: *ushort; lpszCaption: *ushort; dwStyle: ulong; lpszIcon: *ushort; dwContextHelpId: uint64; lpfnMsgBoxCallback: def (*HELPINFO) -> (); dwLanguageId: ulong; }
export type MENUITEMTEMPLATEHEADER = struct { versionNumber: ushort; offset: ushort; }
export type MENUITEMTEMPLATE = struct { mtOption: ushort; mtID: ushort; mtString: [1; ushort]; }
export type ICONINFO = struct { fIcon: int; xHotspot: ulong; yHotspot: ulong; hbmMask: *s_HBITMAP__; hbmColor: *s_HBITMAP__; }
export type CURSORSHAPE = struct { xHotSpot: int; yHotSpot: int; cx: int; cy: int; cbWidth: int; Planes: char; BitsPixel: char; }
export type ICONINFOEXA = struct { cbSize: ulong; fIcon: int; xHotspot: ulong; yHotspot: ulong; hbmMask: *s_HBITMAP__; hbmColor: *s_HBITMAP__; wResID: ushort; szModName: [260; char]; szResName: [260; char]; }
export type ICONINFOEXW = struct { cbSize: ulong; fIcon: int; xHotspot: ulong; yHotspot: ulong; hbmMask: *s_HBITMAP__; hbmColor: *s_HBITMAP__; wResID: ushort; szModName: [260; ushort]; szResName: [260; ushort]; }
export type EDIT_CONTROL_FEATURE = enum { EDIT_CONTROL_FEATURE_ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT = 0; EDIT_CONTROL_FEATURE_PASTE_NOTIFICATIONS = 1; }
export type SCROLLINFO = struct { cbSize: uint; fMask: uint; nMin: int; nMax: int; nPage: uint; nPos: int; nTrackPos: int; }
export type MDICREATESTRUCTA = struct { szClass: *char; szTitle: *char; hOwner: *; x: int; y: int; cx: int; cy: int; style: ulong; lParam: int64; }
export type MDICREATESTRUCTW = struct { szClass: *ushort; szTitle: *ushort; hOwner: *; x: int; y: int; cx: int; cy: int; style: ulong; lParam: int64; }
export type CLIENTCREATESTRUCT = struct { hWindowMenu: *; idFirstChild: uint; }
export type MULTIKEYHELPA = struct { mkSize: ulong; mkKeylist: char; szKeyphrase: [1; char]; }
export type MULTIKEYHELPW = struct { mkSize: ulong; mkKeylist: ushort; szKeyphrase: [1; ushort]; }
export type HELPWININFOA = struct { wStructSize: int; x: int; y: int; dx: int; dy: int; wMax: int; rgchMember: [2; char]; }
export type HELPWININFOW = struct { wStructSize: int; x: int; y: int; dx: int; dy: int; wMax: int; rgchMember: [2; ushort]; }
export type TOUCHPREDICTIONPARAMETERS = struct { cbSize: uint; dwLatency: uint; dwSampleTime: uint; bUseHWTimeStamp: uint; }
export type HANDEDNESS = enum { HANDEDNESS_LEFT = 0; HANDEDNESS_RIGHT; }
export type NONCLIENTMETRICSA = struct { cbSize: uint; iBorderWidth: int; iScrollWidth: int; iScrollHeight: int; iCaptionWidth: int; iCaptionHeight: int; lfCaptionFont: LOGFONTA; iSmCaptionWidth: int; iSmCaptionHeight: int; lfSmCaptionFont: LOGFONTA; iMenuWidth: int; iMenuHeight: int; lfMenuFont: LOGFONTA; lfStatusFont: LOGFONTA; lfMessageFont: LOGFONTA; iPaddedBorderWidth: int; }
export type NONCLIENTMETRICSW = struct { cbSize: uint; iBorderWidth: int; iScrollWidth: int; iScrollHeight: int; iCaptionWidth: int; iCaptionHeight: int; lfCaptionFont: LOGFONTW; iSmCaptionWidth: int; iSmCaptionHeight: int; lfSmCaptionFont: LOGFONTW; iMenuWidth: int; iMenuHeight: int; lfMenuFont: LOGFONTW; lfStatusFont: LOGFONTW; lfMessageFont: LOGFONTW; iPaddedBorderWidth: int; }
export type MINIMIZEDMETRICS = struct { cbSize: uint; iWidth: int; iHorzGap: int; iVertGap: int; iArrange: int; }
export type ICONMETRICSA = struct { cbSize: uint; iHorzSpacing: int; iVertSpacing: int; iTitleWrap: int; lfFont: LOGFONTA; }
export type ICONMETRICSW = struct { cbSize: uint; iHorzSpacing: int; iVertSpacing: int; iTitleWrap: int; lfFont: LOGFONTW; }
export type ANIMATIONINFO = struct { cbSize: uint; iMinAnimate: int; }
export type SERIALKEYSA = struct { cbSize: uint; dwFlags: ulong; lpszActivePort: *char; lpszPort: *char; iBaudRate: uint; iPortState: uint; iActive: uint; }
export type SERIALKEYSW = struct { cbSize: uint; dwFlags: ulong; lpszActivePort: *ushort; lpszPort: *ushort; iBaudRate: uint; iPortState: uint; iActive: uint; }
export type HIGHCONTRASTA = struct { cbSize: uint; dwFlags: ulong; lpszDefaultScheme: *char; }
export type HIGHCONTRASTW = struct { cbSize: uint; dwFlags: ulong; lpszDefaultScheme: *ushort; }
export type VIDEOPARAMETERS = struct { Guid: GUID; dwOffset: ulong; dwCommand: ulong; dwFlags: ulong; dwMode: ulong; dwTVStandard: ulong; dwAvailableModes: ulong; dwAvailableTVStandard: ulong; dwFlickerFilter: ulong; dwOverScanX: ulong; dwOverScanY: ulong; dwMaxUnscaledX: ulong; dwMaxUnscaledY: ulong; dwPositionX: ulong; dwPositionY: ulong; dwBrightness: ulong; dwContrast: ulong; dwCPType: ulong; dwCPCommand: ulong; dwCPStandard: ulong; dwCPKey: ulong; bCP_APSTriggerBits: ulong; bOEMCopyProtection: [256; char]; }
export type FILTERKEYS = struct { cbSize: uint; dwFlags: ulong; iWaitMSec: ulong; iDelayMSec: ulong; iRepeatMSec: ulong; iBounceMSec: ulong; }
export type STICKYKEYS = struct { cbSize: uint; dwFlags: ulong; }
export type MOUSEKEYS = struct { cbSize: uint; dwFlags: ulong; iMaxSpeed: ulong; iTimeToMaxSpeed: ulong; iCtrlSpeed: ulong; dwReserved1: ulong; dwReserved2: ulong; }
export type ACCESSTIMEOUT = struct { cbSize: uint; dwFlags: ulong; iTimeOutMSec: ulong; }
export type SOUNDSENTRYA = struct { cbSize: uint; dwFlags: ulong; iFSTextEffect: ulong; iFSTextEffectMSec: ulong; iFSTextEffectColorBits: ulong; iFSGrafEffect: ulong; iFSGrafEffectMSec: ulong; iFSGrafEffectColor: ulong; iWindowsEffect: ulong; iWindowsEffectMSec: ulong; lpszWindowsEffectDLL: *char; iWindowsEffectOrdinal: ulong; }
export type SOUNDSENTRYW = struct { cbSize: uint; dwFlags: ulong; iFSTextEffect: ulong; iFSTextEffectMSec: ulong; iFSTextEffectColorBits: ulong; iFSGrafEffect: ulong; iFSGrafEffectMSec: ulong; iFSGrafEffectColor: ulong; iWindowsEffect: ulong; iWindowsEffectMSec: ulong; lpszWindowsEffectDLL: *ushort; iWindowsEffectOrdinal: ulong; }
export type TOGGLEKEYS = struct { cbSize: uint; dwFlags: ulong; }
export type AUDIODESCRIPTION = struct { cbSize: uint; Enabled: int; Locale: ulong; }
export type MONITORINFO = struct { cbSize: ulong; rcMonitor: RECT; rcWork: RECT; dwFlags: ulong; }
export type MONITORINFOEXA = struct { _0: MONITORINFO; szDevice: [32; char]; }
export type MONITORINFOEXW = struct { _0: MONITORINFO; szDevice: [32; ushort]; }
export type GUITHREADINFO = struct { cbSize: ulong; flags: ulong; hwndActive: *s_HWND__; hwndFocus: *s_HWND__; hwndCapture: *s_HWND__; hwndMenuOwner: *s_HWND__; hwndMoveSize: *s_HWND__; hwndCaret: *s_HWND__; rcCaret: RECT; }
export type CURSORINFO = struct { cbSize: ulong; flags: ulong; hCursor: *s_HICON__; ptScreenPos: POINT; }
export type WINDOWINFO = struct { cbSize: ulong; rcWindow: RECT; rcClient: RECT; dwStyle: ulong; dwExStyle: ulong; dwWindowStatus: ulong; cxWindowBorders: uint; cyWindowBorders: uint; atomWindowType: ushort; wCreatorVersion: ushort; }
export type TITLEBARINFO = struct { cbSize: ulong; rcTitleBar: RECT; rgstate: [6; ulong]; }
export type TITLEBARINFOEX = struct { cbSize: ulong; rcTitleBar: RECT; rgstate: [6; ulong]; rgrect: [6; RECT]; }
export type MENUBARINFO = struct { cbSize: ulong; rcBar: RECT; hMenu: *s_HMENU__; hwndMenu: *s_HWND__; #bits(1) fBarFocused: int; #bits(1) fFocused: int; #bits(30) fUnused: int; }
export type SCROLLBARINFO = struct { cbSize: ulong; rcScrollBar: RECT; dxyLineButton: int; xyThumbTop: int; xyThumbBottom: int; reserved: int; rgstate: [6; ulong]; }
export type COMBOBOXINFO = struct { cbSize: ulong; rcItem: RECT; rcButton: RECT; stateButton: ulong; hwndCombo: *s_HWND__; hwndItem: *s_HWND__; hwndList: *s_HWND__; }
export type ALTTABINFO = struct { cbSize: ulong; cItems: int; cColumns: int; cRows: int; iColFocus: int; iRowFocus: int; cxItem: int; cyItem: int; ptStart: POINT; }
export type RAWINPUTHEADER = struct { dwType: ulong; dwSize: ulong; hDevice: *; wParam: uint64; }
export type RAWMOUSE = struct { usFlags: ushort; _2: struct #union { ulButtons: ulong; _2: struct { usButtonFlags: ushort; usButtonData: ushort; }; }; ulRawButtons: ulong; lLastX: long; lLastY: long; ulExtraInformation: ulong; }
export type RAWKEYBOARD = struct { MakeCode: ushort; Flags: ushort; Reserved: ushort; VKey: ushort; Message: uint; ExtraInformation: ulong; }
export type RAWHID = struct { dwSizeHid: ulong; dwCount: ulong; bRawData: [1; char]; }
export type RAWINPUT = struct { header: RAWINPUTHEADER; data: struct #union { mouse: RAWMOUSE; keyboard: RAWKEYBOARD; hid: RAWHID; }; }
export type RID_DEVICE_INFO_MOUSE = struct { dwId: ulong; dwNumberOfButtons: ulong; dwSampleRate: ulong; fHasHorizontalWheel: int; }
export type RID_DEVICE_INFO_KEYBOARD = struct { dwType: ulong; dwSubType: ulong; dwKeyboardMode: ulong; dwNumberOfFunctionKeys: ulong; dwNumberOfIndicators: ulong; dwNumberOfKeysTotal: ulong; }
export type RID_DEVICE_INFO_HID = struct { dwVendorId: ulong; dwProductId: ulong; dwVersionNumber: ulong; usUsagePage: ushort; usUsage: ushort; }
export type RID_DEVICE_INFO = struct { cbSize: ulong; dwType: ulong; _3: struct #union { mouse: RID_DEVICE_INFO_MOUSE; keyboard: RID_DEVICE_INFO_KEYBOARD; hid: RID_DEVICE_INFO_HID; }; }
export type RAWINPUTDEVICE = struct { usUsagePage: ushort; usUsage: ushort; dwFlags: ulong; hwndTarget: *s_HWND__; }
export type RAWINPUTDEVICELIST = struct { hDevice: *; dwType: ulong; }
export type POINTER_DEVICE_TYPE = enum { POINTER_DEVICE_TYPE_INTEGRATED_PEN = 1; POINTER_DEVICE_TYPE_EXTERNAL_PEN = 2; POINTER_DEVICE_TYPE_TOUCH = 3; POINTER_DEVICE_TYPE_TOUCH_PAD = 4; POINTER_DEVICE_TYPE_MAX; }
export type POINTER_DEVICE_INFO = struct { displayOrientation: ulong; device: *; pointerDeviceType: POINTER_DEVICE_TYPE; monitor: *s_HMONITOR__; startingCursorId: ulong; maxActiveContacts: ushort; productString: [520; ushort]; }
export type POINTER_DEVICE_PROPERTY = struct { logicalMin: int; logicalMax: int; physicalMin: int; physicalMax: int; unit: uint; unitExponent: uint; usagePageId: ushort; usageId: ushort; }
export type POINTER_DEVICE_CURSOR_TYPE = enum { POINTER_DEVICE_CURSOR_TYPE_UNKNOWN = 0; POINTER_DEVICE_CURSOR_TYPE_TIP = 1; POINTER_DEVICE_CURSOR_TYPE_ERASER = 2; POINTER_DEVICE_CURSOR_TYPE_MAX; }
export type POINTER_DEVICE_CURSOR_INFO = struct { cursorId: uint; cursor: POINTER_DEVICE_CURSOR_TYPE; }
export type CHANGEFILTERSTRUCT = struct { cbSize: ulong; ExtStatus: ulong; }
export type GESTUREINFO = struct { cbSize: uint; dwFlags: ulong; dwID: ulong; hwndTarget: *s_HWND__; ptsLocation: POINTS; dwInstanceID: ulong; dwSequenceID: ulong; ullArguments: uint64; cbExtraArgs: uint; }
export type GESTURENOTIFYSTRUCT = struct { cbSize: uint; dwFlags: ulong; hwndTarget: *s_HWND__; ptsLocation: POINTS; dwInstanceID: ulong; }
export type GESTURECONFIG = struct { dwID: ulong; dwWant: ulong; dwBlock: ulong; }
export type INPUT_MESSAGE_DEVICE_TYPE = enum { IMDT_UNAVAILABLE = 0; IMDT_KEYBOARD = 1; IMDT_MOUSE = 2; IMDT_TOUCH = 4; IMDT_PEN = 8; IMDT_TOUCHPAD = 16; }
export type INPUT_MESSAGE_ORIGIN_ID = enum { IMO_UNAVAILABLE = 0; IMO_HARDWARE = 1; IMO_INJECTED = 2; IMO_SYSTEM = 4; }
export type INPUT_MESSAGE_SOURCE = struct { deviceType: INPUT_MESSAGE_DEVICE_TYPE; originId: INPUT_MESSAGE_ORIGIN_ID; }
export type AR_STATE = enum { AR_ENABLED = 0; AR_DISABLED = 1; AR_SUPPRESSED = 2; AR_REMOTESESSION = 4; AR_MULTIMON = 8; AR_NOSENSOR = 16; AR_NOT_SUPPORTED = 32; AR_DOCKED = 64; AR_LAPTOP = 128; }
export type ORIENTATION_PREFERENCE = enum { ORIENTATION_PREFERENCE_NONE = 0; ORIENTATION_PREFERENCE_LANDSCAPE = 1; ORIENTATION_PREFERENCE_PORTRAIT = 2; ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED = 4; ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED = 8; }
export type CPINFO = struct { MaxCharSize: uint; DefaultChar: [2; char]; LeadByte: [12; char]; }
export type CPINFOEXA = struct { MaxCharSize: uint; DefaultChar: [2; char]; LeadByte: [12; char]; UnicodeDefaultChar: ushort; CodePage: uint; CodePageName: [260; char]; }
export type CPINFOEXW = struct { MaxCharSize: uint; DefaultChar: [2; char]; LeadByte: [12; char]; UnicodeDefaultChar: ushort; CodePage: uint; CodePageName: [260; ushort]; }
export type NUMBERFMTA = struct { NumDigits: uint; LeadingZero: uint; Grouping: uint; lpDecimalSep: *char; lpThousandSep: *char; NegativeOrder: uint; }
export type NUMBERFMTW = struct { NumDigits: uint; LeadingZero: uint; Grouping: uint; lpDecimalSep: *ushort; lpThousandSep: *ushort; NegativeOrder: uint; }
export type CURRENCYFMTA = struct { NumDigits: uint; LeadingZero: uint; Grouping: uint; lpDecimalSep: *char; lpThousandSep: *char; NegativeOrder: uint; PositiveOrder: uint; lpCurrencySymbol: *char; }
export type CURRENCYFMTW = struct { NumDigits: uint; LeadingZero: uint; Grouping: uint; lpDecimalSep: *ushort; lpThousandSep: *ushort; NegativeOrder: uint; PositiveOrder: uint; lpCurrencySymbol: *ushort; }
export type NLSVERSIONINFO = struct { dwNLSVersionInfoSize: ulong; dwNLSVersion: ulong; dwDefinedVersion: ulong; dwEffectiveId: ulong; guidCustomVersion: GUID; }
export type NLSVERSIONINFOEX = struct { dwNLSVersionInfoSize: ulong; dwNLSVersion: ulong; dwDefinedVersion: ulong; dwEffectiveId: ulong; guidCustomVersion: GUID; }
export type NORM_FORM = enum { NormalizationOther = 0; NormalizationC = 1; NormalizationD = 2; NormalizationKC = 5; NormalizationKD = 6; }
export type FILEMUIINFO = struct { dwSize: ulong; dwVersion: ulong; dwFileType: ulong; pChecksum: [16; char]; pServiceChecksum: [16; char]; dwLanguageNameOffset: ulong; dwTypeIDMainSize: ulong; dwTypeIDMainOffset: ulong; dwTypeNameMainOffset: ulong; dwTypeIDMUISize: ulong; dwTypeIDMUIOffset: ulong; dwTypeNameMUIOffset: ulong; abBuffer: [8; char]; }
export type COORD = struct { X: short; Y: short; }
export type SMALL_RECT = struct { Left: short; Top: short; Right: short; Bottom: short; }
export type KEY_EVENT_RECORD = struct { bKeyDown: int; wRepeatCount: ushort; wVirtualKeyCode: ushort; wVirtualScanCode: ushort; uChar: struct #union { UnicodeChar: ushort; AsciiChar: char; }; dwControlKeyState: ulong; }
export type MOUSE_EVENT_RECORD = struct { dwMousePosition: COORD; dwButtonState: ulong; dwControlKeyState: ulong; dwEventFlags: ulong; }
export type WINDOW_BUFFER_SIZE_RECORD = struct { dwSize: COORD; }
export type MENU_EVENT_RECORD = struct { dwCommandId: uint; }
export type FOCUS_EVENT_RECORD = struct { bSetFocus: int; }
export type INPUT_RECORD = struct { EventType: ushort; Event: struct #union { KeyEvent: KEY_EVENT_RECORD; MouseEvent: MOUSE_EVENT_RECORD; WindowBufferSizeEvent: WINDOW_BUFFER_SIZE_RECORD; MenuEvent: MENU_EVENT_RECORD; FocusEvent: FOCUS_EVENT_RECORD; }; }
export type CHAR_INFO = struct { Char: struct #union { UnicodeChar: ushort; AsciiChar: char; }; Attributes: ushort; }
export type CONSOLE_FONT_INFO = struct { nFont: ulong; dwFontSize: COORD; }
export type CONSOLE_READCONSOLE_CONTROL = struct { nLength: ulong; nInitialChars: ulong; dwCtrlWakeupMask: ulong; dwControlKeyState: ulong; }
export type CONSOLE_CURSOR_INFO = struct { dwSize: ulong; bVisible: int; }
export type CONSOLE_SCREEN_BUFFER_INFO = struct { dwSize: COORD; dwCursorPosition: COORD; wAttributes: ushort; srWindow: SMALL_RECT; dwMaximumWindowSize: COORD; }
export type CONSOLE_SCREEN_BUFFER_INFOEX = struct { cbSize: ulong; dwSize: COORD; dwCursorPosition: COORD; wAttributes: ushort; srWindow: SMALL_RECT; dwMaximumWindowSize: COORD; wPopupAttributes: ushort; bFullscreenSupported: int; ColorTable: [16; ulong]; }
export type CONSOLE_FONT_INFOEX = struct { cbSize: ulong; nFont: ulong; dwFontSize: COORD; FontFamily: uint; FontWeight: uint; FaceName: [32; ushort]; }
export type CONSOLE_SELECTION_INFO = struct { dwFlags: ulong; dwSelectionAnchor: COORD; srSelection: SMALL_RECT; }
export type CONSOLE_HISTORY_INFO = struct { cbSize: uint; HistoryBufferSize: uint; NumberOfHistoryBuffers: uint; dwFlags: ulong; }
export type VS_FIXEDFILEINFO = struct { dwSignature: ulong; dwStrucVersion: ulong; dwFileVersionMS: ulong; dwFileVersionLS: ulong; dwProductVersionMS: ulong; dwProductVersionLS: ulong; dwFileFlagsMask: ulong; dwFileFlags: ulong; dwFileOS: ulong; dwFileType: ulong; dwFileSubtype: ulong; dwFileDateMS: ulong; dwFileDateLS: ulong; }
export type PVALUEA = struct { pv_valuename: *char; pv_valuelen: int; pv_value_context: *; pv_type: ulong; }
export type PVALUEW = struct { pv_valuename: *ushort; pv_valuelen: int; pv_value_context: *; pv_type: ulong; }
export type REG_PROVIDER = struct { pi_R0_1val: *ulong; pi_R0_allvals: *ulong; pi_R3_1val: *ulong; pi_R3_allvals: *ulong; pi_flags: ulong; pi_key_context: *; }
export type VALENTA = struct { ve_valuename: *char; ve_valuelen: ulong; ve_valueptr: uint64; ve_type: ulong; }
export type VALENTW = struct { ve_valuename: *ushort; ve_valuelen: ulong; ve_valueptr: uint64; ve_type: ulong; }
export type NETRESOURCEA = struct { dwScope: ulong; dwType: ulong; dwDisplayType: ulong; dwUsage: ulong; lpLocalName: *char; lpRemoteName: *char; lpComment: *char; lpProvider: *char; }
export type NETRESOURCEW = struct { dwScope: ulong; dwType: ulong; dwDisplayType: ulong; dwUsage: ulong; lpLocalName: *ushort; lpRemoteName: *ushort; lpComment: *ushort; lpProvider: *ushort; }
export type CONNECTDLGSTRUCTA = struct { cbStructure: ulong; hwndOwner: *s_HWND__; lpConnRes: *NETRESOURCEA; dwFlags: ulong; dwDevNum: ulong; }
export type CONNECTDLGSTRUCTW = struct { cbStructure: ulong; hwndOwner: *s_HWND__; lpConnRes: *NETRESOURCEW; dwFlags: ulong; dwDevNum: ulong; }
export type DISCDLGSTRUCTA = struct { cbStructure: ulong; hwndOwner: *s_HWND__; lpLocalName: *char; lpRemoteName: *char; dwFlags: ulong; }
export type DISCDLGSTRUCTW = struct { cbStructure: ulong; hwndOwner: *s_HWND__; lpLocalName: *ushort; lpRemoteName: *ushort; dwFlags: ulong; }
export type UNIVERSAL_NAME_INFOA = struct { lpUniversalName: *char; }
export type UNIVERSAL_NAME_INFOW = struct { lpUniversalName: *ushort; }
export type REMOTE_NAME_INFOA = struct { lpUniversalName: *char; lpConnectionName: *char; lpRemainingPath: *char; }
export type REMOTE_NAME_INFOW = struct { lpUniversalName: *ushort; lpConnectionName: *ushort; lpRemainingPath: *ushort; }
export type NETINFOSTRUCT = struct { cbStructure: ulong; dwProviderVersion: ulong; dwStatus: ulong; dwCharacteristics: ulong; dwHandle: uint64; wNetType: ushort; dwPrinters: ulong; dwDrives: ulong; }
export type NETCONNECTINFOSTRUCT = struct { cbStructure: ulong; dwFlags: ulong; dwSpeed: ulong; dwDelay: ulong; dwOptDataSize: ulong; }
export type DDEACK = struct { #bits(8) bAppReturnCode: ushort; #bits(6) reserved: ushort; #bits(1) fBusy: ushort; #bits(1) fAck: ushort; }
export type DDEADVISE = struct { #bits(14) reserved: ushort; #bits(1) fDeferUpd: ushort; #bits(1) fAckReq: ushort; cfFormat: short; }
export type DDEDATA = struct { #bits(12) unused: ushort; #bits(1) fResponse: ushort; #bits(1) fRelease: ushort; #bits(1) reserved: ushort; #bits(1) fAckReq: ushort; cfFormat: short; Value: [1; char]; }
export type DDEPOKE = struct { #bits(13) unused: ushort; #bits(1) fRelease: ushort; #bits(2) fReserved: ushort; cfFormat: short; Value: [1; char]; }
export type DDELN = struct { #bits(13) unused: ushort; #bits(1) fRelease: ushort; #bits(1) fDeferUpd: ushort; #bits(1) fAckReq: ushort; cfFormat: short; }
export type DDEUP = struct { #bits(12) unused: ushort; #bits(1) fAck: ushort; #bits(1) fRelease: ushort; #bits(1) fReserved: ushort; #bits(1) fAckReq: ushort; cfFormat: short; rgb: [1; char]; }
export type HSZPAIR = struct { hszSvc: *s_HSZ__; hszTopic: *s_HSZ__; }
export type CONVCONTEXT = struct { cb: uint; wFlags: uint; wCountryID: uint; iCodePage: int; dwLangID: ulong; dwSecurity: ulong; qos: SECURITY_QUALITY_OF_SERVICE; }
export type CONVINFO = struct { cb: ulong; hUser: uint64; hConvPartner: *s_HCONV__; hszSvcPartner: *s_HSZ__; hszServiceReq: *s_HSZ__; hszTopic: *s_HSZ__; hszItem: *s_HSZ__; wFmt: uint; wType: uint; wStatus: uint; wConvst: uint; wLastError: uint; hConvList: *s_HCONVLIST__; ConvCtxt: CONVCONTEXT; hwnd: *s_HWND__; hwndPartner: *s_HWND__; }
export type DDEML_MSG_HOOK_DATA = struct { uiLo: uint64; uiHi: uint64; cbData: ulong; Data: [8; ulong]; }
export type MONMSGSTRUCT = struct { cb: uint; hwndTo: *s_HWND__; dwTime: ulong; hTask: *; wMsg: uint; wParam: uint64; lParam: int64; dmhd: DDEML_MSG_HOOK_DATA; }
export type MONCBSTRUCT = struct { cb: uint; dwTime: ulong; hTask: *; dwRet: ulong; wType: uint; wFmt: uint; hConv: *s_HCONV__; hsz1: *s_HSZ__; hsz2: *s_HSZ__; hData: *s_HDDEDATA__; dwData1: uint64; dwData2: uint64; cc: CONVCONTEXT; cbData: ulong; Data: [8; ulong]; }
export type MONHSZSTRUCTA = struct { cb: uint; fsAction: int; dwTime: ulong; hsz: *s_HSZ__; hTask: *; str: [1; char]; }
export type MONHSZSTRUCTW = struct { cb: uint; fsAction: int; dwTime: ulong; hsz: *s_HSZ__; hTask: *; str: [1; ushort]; }
export type MONERRSTRUCT = struct { cb: uint; wLastError: uint; dwTime: ulong; hTask: *; }
export type MONLINKSTRUCT = struct { cb: uint; dwTime: ulong; hTask: *; fEstablished: int; fNoData: int; hszSvc: *s_HSZ__; hszTopic: *s_HSZ__; hszItem: *s_HSZ__; wFmt: uint; fServer: int; hConvServer: *s_HCONV__; hConvClient: *s_HCONV__; }
export type MONCONVSTRUCT = struct { cb: uint; fConnect: int; dwTime: ulong; hTask: *; hszSvc: *s_HSZ__; hszTopic: *s_HSZ__; hConvClient: *s_HCONV__; hConvServer: *s_HCONV__; }
export type CRGB = struct { bRed: char; bGreen: char; bBlue: char; bExtra: char; }
export type MMTIME = struct { wType: uint; u: struct #union { ms: ulong; sample: ulong; cb: ulong; ticks: ulong; smpte: struct { hour: char; min: char; sec: char; frame: char; fps: char; dummy: char; pad: [2; char]; }; midi: struct { songptrpos: ulong; }; }; }
export type MCI_GENERIC_PARMS = struct { dwCallback: uint64; }
export type MCI_OPEN_PARMSA = struct { dwCallback: uint64; wDeviceID: uint; lpstrDeviceType: *char; lpstrElementName: *char; lpstrAlias: *char; }
export type MCI_OPEN_PARMSW = struct { dwCallback: uint64; wDeviceID: uint; lpstrDeviceType: *ushort; lpstrElementName: *ushort; lpstrAlias: *ushort; }
export type MCI_PLAY_PARMS = struct { dwCallback: uint64; dwFrom: ulong; dwTo: ulong; }
export type MCI_SEEK_PARMS = struct { dwCallback: uint64; dwTo: ulong; }
export type MCI_STATUS_PARMS = struct { dwCallback: uint64; dwReturn: uint64; dwItem: ulong; dwTrack: ulong; }
export type MCI_INFO_PARMSA = struct { dwCallback: uint64; lpstrReturn: *char; dwRetSize: ulong; }
export type MCI_INFO_PARMSW = struct { dwCallback: uint64; lpstrReturn: *ushort; dwRetSize: ulong; }
export type MCI_GETDEVCAPS_PARMS = struct { dwCallback: uint64; dwReturn: ulong; dwItem: ulong; }
export type MCI_SYSINFO_PARMSA = struct { dwCallback: uint64; lpstrReturn: *char; dwRetSize: ulong; dwNumber: ulong; wDeviceType: uint; }
export type MCI_SYSINFO_PARMSW = struct { dwCallback: uint64; lpstrReturn: *ushort; dwRetSize: ulong; dwNumber: ulong; wDeviceType: uint; }
export type MCI_SET_PARMS = struct { dwCallback: uint64; dwTimeFormat: ulong; dwAudio: ulong; }
export type MCI_BREAK_PARMS = struct { dwCallback: uint64; nVirtKey: int; hwndBreak: *s_HWND__; }
export type MCI_SAVE_PARMSA = struct { dwCallback: uint64; lpfilename: *char; }
export type MCI_SAVE_PARMSW = struct { dwCallback: uint64; lpfilename: *ushort; }
export type MCI_LOAD_PARMSA = struct { dwCallback: uint64; lpfilename: *char; }
export type MCI_LOAD_PARMSW = struct { dwCallback: uint64; lpfilename: *ushort; }
export type MCI_RECORD_PARMS = struct { dwCallback: uint64; dwFrom: ulong; dwTo: ulong; }
export type MCI_VD_PLAY_PARMS = struct { dwCallback: uint64; dwFrom: ulong; dwTo: ulong; dwSpeed: ulong; }
export type MCI_VD_STEP_PARMS = struct { dwCallback: uint64; dwFrames: ulong; }
export type MCI_VD_ESCAPE_PARMSA = struct { dwCallback: uint64; lpstrCommand: *char; }
export type MCI_VD_ESCAPE_PARMSW = struct { dwCallback: uint64; lpstrCommand: *ushort; }
export type MCI_WAVE_OPEN_PARMSA = struct { dwCallback: uint64; wDeviceID: uint; lpstrDeviceType: *char; lpstrElementName: *char; lpstrAlias: *char; dwBufferSeconds: ulong; }
export type MCI_WAVE_OPEN_PARMSW = struct { dwCallback: uint64; wDeviceID: uint; lpstrDeviceType: *ushort; lpstrElementName: *ushort; lpstrAlias: *ushort; dwBufferSeconds: ulong; }
export type MCI_WAVE_DELETE_PARMS = struct { dwCallback: uint64; dwFrom: ulong; dwTo: ulong; }
export type MCI_WAVE_SET_PARMS = struct { dwCallback: uint64; dwTimeFormat: ulong; dwAudio: ulong; wInput: uint; wOutput: uint; wFormatTag: ushort; wReserved2: ushort; nChannels: ushort; wReserved3: ushort; nSamplesPerSec: ulong; nAvgBytesPerSec: ulong; nBlockAlign: ushort; wReserved4: ushort; wBitsPerSample: ushort; wReserved5: ushort; }
export type MCI_SEQ_SET_PARMS = struct { dwCallback: uint64; dwTimeFormat: ulong; dwAudio: ulong; dwTempo: ulong; dwPort: ulong; dwSlave: ulong; dwMaster: ulong; dwOffset: ulong; }
export type MCI_ANIM_OPEN_PARMSA = struct { dwCallback: uint64; wDeviceID: uint; lpstrDeviceType: *char; lpstrElementName: *char; lpstrAlias: *char; dwStyle: ulong; hWndParent: *s_HWND__; }
export type MCI_ANIM_OPEN_PARMSW = struct { dwCallback: uint64; wDeviceID: uint; lpstrDeviceType: *ushort; lpstrElementName: *ushort; lpstrAlias: *ushort; dwStyle: ulong; hWndParent: *s_HWND__; }
export type MCI_ANIM_PLAY_PARMS = struct { dwCallback: uint64; dwFrom: ulong; dwTo: ulong; dwSpeed: ulong; }
export type MCI_ANIM_STEP_PARMS = struct { dwCallback: uint64; dwFrames: ulong; }
export type MCI_ANIM_WINDOW_PARMSA = struct { dwCallback: uint64; hWnd: *s_HWND__; nCmdShow: uint; lpstrText: *char; }
export type MCI_ANIM_WINDOW_PARMSW = struct { dwCallback: uint64; hWnd: *s_HWND__; nCmdShow: uint; lpstrText: *ushort; }
export type MCI_ANIM_RECT_PARMS = struct { dwCallback: uint64; rc: RECT; }
export type MCI_ANIM_UPDATE_PARMS = struct { dwCallback: uint64; rc: RECT; hDC: *s_HDC__; }
export type MCI_OVLY_OPEN_PARMSA = struct { dwCallback: uint64; wDeviceID: uint; lpstrDeviceType: *char; lpstrElementName: *char; lpstrAlias: *char; dwStyle: ulong; hWndParent: *s_HWND__; }
export type MCI_OVLY_OPEN_PARMSW = struct { dwCallback: uint64; wDeviceID: uint; lpstrDeviceType: *ushort; lpstrElementName: *ushort; lpstrAlias: *ushort; dwStyle: ulong; hWndParent: *s_HWND__; }
export type MCI_OVLY_WINDOW_PARMSA = struct { dwCallback: uint64; hWnd: *s_HWND__; nCmdShow: uint; lpstrText: *char; }
export type MCI_OVLY_WINDOW_PARMSW = struct { dwCallback: uint64; hWnd: *s_HWND__; nCmdShow: uint; lpstrText: *ushort; }
export type MCI_OVLY_RECT_PARMS = struct { dwCallback: uint64; rc: RECT; }
export type MCI_OVLY_SAVE_PARMSA = struct { dwCallback: uint64; lpfilename: *char; rc: RECT; }
export type MCI_OVLY_SAVE_PARMSW = struct { dwCallback: uint64; lpfilename: *ushort; rc: RECT; }
export type MCI_OVLY_LOAD_PARMSA = struct { dwCallback: uint64; lpfilename: *char; rc: RECT; }
export type MCI_OVLY_LOAD_PARMSW = struct { dwCallback: uint64; lpfilename: *ushort; rc: RECT; }
export type DRVCONFIGINFOEX = struct { dwDCISize: ulong; lpszDCISectionName: *ushort; lpszDCIAliasName: *ushort; dnDevNode: ulong; }
export type DRVCONFIGINFO = struct { dwDCISize: ulong; lpszDCISectionName: *ushort; lpszDCIAliasName: *ushort; }
export type MMIOINFO = struct { dwFlags: ulong; fccIOProc: ulong; pIOProc: *int64; wErrorRet: uint; htask: *s_HTASK__; cchBuffer: long; pchBuffer: *char; pchNext: *char; pchEndRead: *char; pchEndWrite: *char; lBufOffset: long; lDiskOffset: long; adwInfo: [3; ulong]; dwReserved1: ulong; dwReserved2: ulong; hmmio: *s_HMMIO__; }
export type MMCKINFO = struct { ckid: ulong; cksize: ulong; fccType: ulong; dwDataOffset: ulong; dwFlags: ulong; }
export type WAVEHDR = struct { lpData: *char; dwBufferLength: ulong; dwBytesRecorded: ulong; dwUser: uint64; dwFlags: ulong; dwLoops: ulong; lpNext: *WAVEHDR; reserved: uint64; }
export type WAVEOUTCAPSA = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; char]; dwFormats: ulong; wChannels: ushort; wReserved1: ushort; dwSupport: ulong; }
export type WAVEOUTCAPSW = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; ushort]; dwFormats: ulong; wChannels: ushort; wReserved1: ushort; dwSupport: ulong; }
export type WAVEOUTCAPS2A = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; char]; dwFormats: ulong; wChannels: ushort; wReserved1: ushort; dwSupport: ulong; ManufacturerGuid: GUID; ProductGuid: GUID; NameGuid: GUID; }
export type WAVEOUTCAPS2W = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; ushort]; dwFormats: ulong; wChannels: ushort; wReserved1: ushort; dwSupport: ulong; ManufacturerGuid: GUID; ProductGuid: GUID; NameGuid: GUID; }
export type WAVEINCAPSA = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; char]; dwFormats: ulong; wChannels: ushort; wReserved1: ushort; }
export type WAVEINCAPSW = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; ushort]; dwFormats: ulong; wChannels: ushort; wReserved1: ushort; }
export type WAVEINCAPS2A = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; char]; dwFormats: ulong; wChannels: ushort; wReserved1: ushort; ManufacturerGuid: GUID; ProductGuid: GUID; NameGuid: GUID; }
export type WAVEINCAPS2W = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; ushort]; dwFormats: ulong; wChannels: ushort; wReserved1: ushort; ManufacturerGuid: GUID; ProductGuid: GUID; NameGuid: GUID; }
export type WAVEFORMAT = struct { wFormatTag: ushort; nChannels: ushort; nSamplesPerSec: ulong; nAvgBytesPerSec: ulong; nBlockAlign: ushort; }
export type PCMWAVEFORMAT = struct { wf: WAVEFORMAT; wBitsPerSample: ushort; }
export type WAVEFORMATEX = struct { wFormatTag: ushort; nChannels: ushort; nSamplesPerSec: ulong; nAvgBytesPerSec: ulong; nBlockAlign: ushort; wBitsPerSample: ushort; cbSize: ushort; }
export type MIDIOUTCAPSA = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; char]; wTechnology: ushort; wVoices: ushort; wNotes: ushort; wChannelMask: ushort; dwSupport: ulong; }
export type MIDIOUTCAPSW = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; ushort]; wTechnology: ushort; wVoices: ushort; wNotes: ushort; wChannelMask: ushort; dwSupport: ulong; }
export type MIDIOUTCAPS2A = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; char]; wTechnology: ushort; wVoices: ushort; wNotes: ushort; wChannelMask: ushort; dwSupport: ulong; ManufacturerGuid: GUID; ProductGuid: GUID; NameGuid: GUID; }
export type MIDIOUTCAPS2W = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; ushort]; wTechnology: ushort; wVoices: ushort; wNotes: ushort; wChannelMask: ushort; dwSupport: ulong; ManufacturerGuid: GUID; ProductGuid: GUID; NameGuid: GUID; }
export type MIDIINCAPSA = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; char]; dwSupport: ulong; }
export type MIDIINCAPSW = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; ushort]; dwSupport: ulong; }
export type MIDIINCAPS2A = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; char]; dwSupport: ulong; ManufacturerGuid: GUID; ProductGuid: GUID; NameGuid: GUID; }
export type MIDIINCAPS2W = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; ushort]; dwSupport: ulong; ManufacturerGuid: GUID; ProductGuid: GUID; NameGuid: GUID; }
export type MIDIHDR = struct { lpData: *char; dwBufferLength: ulong; dwBytesRecorded: ulong; dwUser: uint64; dwFlags: ulong; lpNext: *MIDIHDR; reserved: uint64; dwOffset: ulong; dwReserved: [8; uint64]; }
export type MIDIEVENT = struct { dwDeltaTime: ulong; dwStreamID: ulong; dwEvent: ulong; dwParms: [1; ulong]; }
export type MIDISTRMBUFFVER = struct { dwVersion: ulong; dwMid: ulong; dwOEMVersion: ulong; }
export type MIDIPROPTIMEDIV = struct { cbStruct: ulong; dwTimeDiv: ulong; }
export type MIDIPROPTEMPO = struct { cbStruct: ulong; dwTempo: ulong; }
export type AUXCAPSA = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; char]; wTechnology: ushort; wReserved1: ushort; dwSupport: ulong; }
export type AUXCAPSW = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; ushort]; wTechnology: ushort; wReserved1: ushort; dwSupport: ulong; }
export type AUXCAPS2A = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; char]; wTechnology: ushort; wReserved1: ushort; dwSupport: ulong; ManufacturerGuid: GUID; ProductGuid: GUID; NameGuid: GUID; }
export type AUXCAPS2W = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; ushort]; wTechnology: ushort; wReserved1: ushort; dwSupport: ulong; ManufacturerGuid: GUID; ProductGuid: GUID; NameGuid: GUID; }
export type MIXERCAPSA = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; char]; fdwSupport: ulong; cDestinations: ulong; }
export type MIXERCAPSW = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; ushort]; fdwSupport: ulong; cDestinations: ulong; }
export type MIXERCAPS2A = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; char]; fdwSupport: ulong; cDestinations: ulong; ManufacturerGuid: GUID; ProductGuid: GUID; NameGuid: GUID; }
export type MIXERCAPS2W = struct { wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; ushort]; fdwSupport: ulong; cDestinations: ulong; ManufacturerGuid: GUID; ProductGuid: GUID; NameGuid: GUID; }
export type MIXERLINEA = struct { cbStruct: ulong; dwDestination: ulong; dwSource: ulong; dwLineID: ulong; fdwLine: ulong; dwUser: uint64; dwComponentType: ulong; cChannels: ulong; cConnections: ulong; cControls: ulong; szShortName: [16; char]; szName: [64; char]; Target: struct { dwType: ulong; dwDeviceID: ulong; wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; char]; }; }
export type MIXERLINEW = struct { cbStruct: ulong; dwDestination: ulong; dwSource: ulong; dwLineID: ulong; fdwLine: ulong; dwUser: uint64; dwComponentType: ulong; cChannels: ulong; cConnections: ulong; cControls: ulong; szShortName: [16; ushort]; szName: [64; ushort]; Target: struct { dwType: ulong; dwDeviceID: ulong; wMid: ushort; wPid: ushort; vDriverVersion: uint; szPname: [32; ushort]; }; }
export type MIXERCONTROLA = struct { cbStruct: ulong; dwControlID: ulong; dwControlType: ulong; fdwControl: ulong; cMultipleItems: ulong; szShortName: [16; char]; szName: [64; char]; Bounds: struct #union { _2: struct { lMinimum: long; lMaximum: long; }; _6: struct { dwMinimum: ulong; dwMaximum: ulong; }; dwReserved: [6; ulong]; }; Metrics: struct #union { cSteps: ulong; cbCustomData: ulong; dwReserved: [6; ulong]; }; }
export type MIXERCONTROLW = struct { cbStruct: ulong; dwControlID: ulong; dwControlType: ulong; fdwControl: ulong; cMultipleItems: ulong; szShortName: [16; ushort]; szName: [64; ushort]; Bounds: struct #union { _2: struct { lMinimum: long; lMaximum: long; }; _6: struct { dwMinimum: ulong; dwMaximum: ulong; }; dwReserved: [6; ulong]; }; Metrics: struct #union { cSteps: ulong; cbCustomData: ulong; dwReserved: [6; ulong]; }; }
export type MIXERLINECONTROLSA = struct { cbStruct: ulong; dwLineID: ulong; _4: struct #union { dwControlID: ulong; dwControlType: ulong; }; cControls: ulong; cbmxctrl: ulong; pamxctrl: *MIXERCONTROLA; }
export type MIXERLINECONTROLSW = struct { cbStruct: ulong; dwLineID: ulong; _4: struct #union { dwControlID: ulong; dwControlType: ulong; }; cControls: ulong; cbmxctrl: ulong; pamxctrl: *MIXERCONTROLW; }
export type MIXERCONTROLDETAILS = struct { cbStruct: ulong; dwControlID: ulong; cChannels: ulong; _5: struct #union { hwndOwner: *s_HWND__; cMultipleItems: ulong; }; cbDetails: ulong; paDetails: *; }
export type MIXERCONTROLDETAILS_LISTTEXTA = struct { dwParam1: ulong; dwParam2: ulong; szName: [64; char]; }
export type MIXERCONTROLDETAILS_LISTTEXTW = struct { dwParam1: ulong; dwParam2: ulong; szName: [64; ushort]; }
export type MIXERCONTROLDETAILS_BOOLEAN = struct { fValue: long; }
export type MIXERCONTROLDETAILS_SIGNED = struct { lValue: long; }
export type MIXERCONTROLDETAILS_UNSIGNED = struct { dwValue: ulong; }
export type TIMECAPS = struct { wPeriodMin: uint; wPeriodMax: uint; }
export type JOYCAPSA = struct { wMid: ushort; wPid: ushort; szPname: [32; char]; wXmin: uint; wXmax: uint; wYmin: uint; wYmax: uint; wZmin: uint; wZmax: uint; wNumButtons: uint; wPeriodMin: uint; wPeriodMax: uint; wRmin: uint; wRmax: uint; wUmin: uint; wUmax: uint; wVmin: uint; wVmax: uint; wCaps: uint; wMaxAxes: uint; wNumAxes: uint; wMaxButtons: uint; szRegKey: [32; char]; szOEMVxD: [260; char]; }
export type JOYCAPSW = struct { wMid: ushort; wPid: ushort; szPname: [32; ushort]; wXmin: uint; wXmax: uint; wYmin: uint; wYmax: uint; wZmin: uint; wZmax: uint; wNumButtons: uint; wPeriodMin: uint; wPeriodMax: uint; wRmin: uint; wRmax: uint; wUmin: uint; wUmax: uint; wVmin: uint; wVmax: uint; wCaps: uint; wMaxAxes: uint; wNumAxes: uint; wMaxButtons: uint; szRegKey: [32; ushort]; szOEMVxD: [260; ushort]; }
export type JOYCAPS2A = struct { wMid: ushort; wPid: ushort; szPname: [32; char]; wXmin: uint; wXmax: uint; wYmin: uint; wYmax: uint; wZmin: uint; wZmax: uint; wNumButtons: uint; wPeriodMin: uint; wPeriodMax: uint; wRmin: uint; wRmax: uint; wUmin: uint; wUmax: uint; wVmin: uint; wVmax: uint; wCaps: uint; wMaxAxes: uint; wNumAxes: uint; wMaxButtons: uint; szRegKey: [32; char]; szOEMVxD: [260; char]; ManufacturerGuid: GUID; ProductGuid: GUID; NameGuid: GUID; }
export type JOYCAPS2W = struct { wMid: ushort; wPid: ushort; szPname: [32; ushort]; wXmin: uint; wXmax: uint; wYmin: uint; wYmax: uint; wZmin: uint; wZmax: uint; wNumButtons: uint; wPeriodMin: uint; wPeriodMax: uint; wRmin: uint; wRmax: uint; wUmin: uint; wUmax: uint; wVmin: uint; wVmax: uint; wCaps: uint; wMaxAxes: uint; wNumAxes: uint; wMaxButtons: uint; szRegKey: [32; ushort]; szOEMVxD: [260; ushort]; ManufacturerGuid: GUID; ProductGuid: GUID; NameGuid: GUID; }
export type JOYINFO = struct { wXpos: uint; wYpos: uint; wZpos: uint; wButtons: uint; }
export type JOYINFOEX = struct { dwSize: ulong; dwFlags: ulong; dwXpos: ulong; dwYpos: ulong; dwZpos: ulong; dwRpos: ulong; dwUpos: ulong; dwVpos: ulong; dwButtons: ulong; dwButtonNumber: ulong; dwPOV: ulong; dwReserved1: ulong; dwReserved2: ulong; }
export type NCB = struct { ncb_command: char; ncb_retcode: char; ncb_lsn: char; ncb_num: char; ncb_buffer: *char; ncb_length: ushort; ncb_callname: [16; char]; ncb_name: [16; char]; ncb_rto: char; ncb_sto: char; ncb_post: def (*NCB) -> (); ncb_lana_num: char; ncb_cmd_cplt: char; ncb_reserve: [18; char]; ncb_event: *; }
export type ADAPTER_STATUS = struct { adapter_address: [6; char]; rev_major: char; reserved0: char; adapter_type: char; rev_minor: char; duration: ushort; frmr_recv: ushort; frmr_xmit: ushort; iframe_recv_err: ushort; xmit_aborts: ushort; xmit_success: ulong; recv_success: ulong; iframe_xmit_err: ushort; recv_buff_unavail: ushort; t1_timeouts: ushort; ti_timeouts: ushort; reserved1: ulong; free_ncbs: ushort; max_cfg_ncbs: ushort; max_ncbs: ushort; xmit_buf_unavail: ushort; max_dgram_size: ushort; pending_sess: ushort; max_cfg_sess: ushort; max_sess: ushort; max_sess_pkt_size: ushort; name_count: ushort; }
export type NAME_BUFFER = struct { name: [16; char]; name_num: char; name_flags: char; }
export type SESSION_HEADER = struct { sess_name: char; num_sess: char; rcv_dg_outstanding: char; rcv_any_outstanding: char; }
export type SESSION_BUFFER = struct { lsn: char; state: char; local_name: [16; char]; remote_name: [16; char]; rcvs_outstanding: char; sends_outstanding: char; }
export type LANA_ENUM = struct { length: char; lana: [255; char]; }
export type FIND_NAME_HEADER = struct { node_count: ushort; reserved: char; unique_group: char; }
export type FIND_NAME_BUFFER = struct { length: char; access_control: char; frame_control: char; destination_addr: [6; char]; source_addr: [6; char]; routing_info: [18; char]; }
export type ACTION_HEADER = struct { transport_id: ulong; action_code: ushort; reserved: ushort; }
export type RPC_BINDING_VECTOR = struct { Count: ulong; BindingH: [1; *]; }
export type UUID_VECTOR = struct { Count: ulong; Uuid: [1; *GUID]; }
export type RPC_IF_ID = struct { Uuid: GUID; VersMajor: ushort; VersMinor: ushort; }
export type RPC_PROTSEQ_VECTORA = struct { Count: uint; Protseq: [1; *char]; }
export type RPC_PROTSEQ_VECTORW = struct { Count: uint; Protseq: [1; *ushort]; }
export type RPC_POLICY = struct { Length: uint; EndpointFlags: ulong; NICFlags: ulong; }
export type RPC_STATS_VECTOR = struct { Count: uint; Stats: [1; ulong]; }
export type RPC_IF_ID_VECTOR = struct { Count: ulong; IfId: [1; *RPC_IF_ID]; }
export type RPC_SECURITY_QOS = struct { Version: ulong; Capabilities: ulong; IdentityTracking: ulong; ImpersonationType: ulong; }
export type SEC_WINNT_AUTH_IDENTITY_W = struct { User: *ushort; UserLength: ulong; Domain: *ushort; DomainLength: ulong; Password: *ushort; PasswordLength: ulong; Flags: ulong; }
export type SEC_WINNT_AUTH_IDENTITY_A = struct { User: *char; UserLength: ulong; Domain: *char; DomainLength: ulong; Password: *char; PasswordLength: ulong; Flags: ulong; }
export type RPC_HTTP_TRANSPORT_CREDENTIALS_W = struct { TransportCredentials: *SEC_WINNT_AUTH_IDENTITY_W; Flags: ulong; AuthenticationTarget: ulong; NumberOfAuthnSchemes: ulong; AuthnSchemes: *ulong; ServerCertificateSubject: *ushort; }
export type RPC_HTTP_TRANSPORT_CREDENTIALS_A = struct { TransportCredentials: *SEC_WINNT_AUTH_IDENTITY_A; Flags: ulong; AuthenticationTarget: ulong; NumberOfAuthnSchemes: ulong; AuthnSchemes: *ulong; ServerCertificateSubject: *char; }
export type RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W = struct { TransportCredentials: *SEC_WINNT_AUTH_IDENTITY_W; Flags: ulong; AuthenticationTarget: ulong; NumberOfAuthnSchemes: ulong; AuthnSchemes: *ulong; ServerCertificateSubject: *ushort; ProxyCredentials: *SEC_WINNT_AUTH_IDENTITY_W; NumberOfProxyAuthnSchemes: ulong; ProxyAuthnSchemes: *ulong; }
export type RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A = struct { TransportCredentials: *SEC_WINNT_AUTH_IDENTITY_A; Flags: ulong; AuthenticationTarget: ulong; NumberOfAuthnSchemes: ulong; AuthnSchemes: *ulong; ServerCertificateSubject: *char; ProxyCredentials: *SEC_WINNT_AUTH_IDENTITY_A; NumberOfProxyAuthnSchemes: ulong; ProxyAuthnSchemes: *ulong; }
export type RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W = struct { TransportCredentials: *; Flags: ulong; AuthenticationTarget: ulong; NumberOfAuthnSchemes: ulong; AuthnSchemes: *ulong; ServerCertificateSubject: *ushort; ProxyCredentials: *; NumberOfProxyAuthnSchemes: ulong; ProxyAuthnSchemes: *ulong; }
export type RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A = struct { TransportCredentials: *; Flags: ulong; AuthenticationTarget: ulong; NumberOfAuthnSchemes: ulong; AuthnSchemes: *ulong; ServerCertificateSubject: *char; ProxyCredentials: *; NumberOfProxyAuthnSchemes: ulong; ProxyAuthnSchemes: *ulong; }
export type RPC_SECURITY_QOS_V2_W = struct { Version: ulong; Capabilities: ulong; IdentityTracking: ulong; ImpersonationType: ulong; AdditionalSecurityInfoType: ulong; u: struct #union { HttpCredentials: *RPC_HTTP_TRANSPORT_CREDENTIALS_W; }; }
export type RPC_SECURITY_QOS_V2_A = struct { Version: ulong; Capabilities: ulong; IdentityTracking: ulong; ImpersonationType: ulong; AdditionalSecurityInfoType: ulong; u: struct #union { HttpCredentials: *RPC_HTTP_TRANSPORT_CREDENTIALS_A; }; }
export type RPC_SECURITY_QOS_V3_W = struct { Version: ulong; Capabilities: ulong; IdentityTracking: ulong; ImpersonationType: ulong; AdditionalSecurityInfoType: ulong; u: struct #union { HttpCredentials: *RPC_HTTP_TRANSPORT_CREDENTIALS_W; }; Sid: *; }
export type RPC_SECURITY_QOS_V3_A = struct { Version: ulong; Capabilities: ulong; IdentityTracking: ulong; ImpersonationType: ulong; AdditionalSecurityInfoType: ulong; u: struct #union { HttpCredentials: *RPC_HTTP_TRANSPORT_CREDENTIALS_A; }; Sid: *; }
export type RPC_SECURITY_QOS_V4_W = struct { Version: ulong; Capabilities: ulong; IdentityTracking: ulong; ImpersonationType: ulong; AdditionalSecurityInfoType: ulong; u: struct #union { HttpCredentials: *RPC_HTTP_TRANSPORT_CREDENTIALS_W; }; Sid: *; EffectiveOnly: uint; }
export type RPC_SECURITY_QOS_V4_A = struct { Version: ulong; Capabilities: ulong; IdentityTracking: ulong; ImpersonationType: ulong; AdditionalSecurityInfoType: ulong; u: struct #union { HttpCredentials: *RPC_HTTP_TRANSPORT_CREDENTIALS_A; }; Sid: *; EffectiveOnly: uint; }
export type RPC_SECURITY_QOS_V5_W = struct { Version: ulong; Capabilities: ulong; IdentityTracking: ulong; ImpersonationType: ulong; AdditionalSecurityInfoType: ulong; u: struct #union { HttpCredentials: *RPC_HTTP_TRANSPORT_CREDENTIALS_W; }; Sid: *; EffectiveOnly: uint; ServerSecurityDescriptor: *; }
export type RPC_SECURITY_QOS_V5_A = struct { Version: ulong; Capabilities: ulong; IdentityTracking: ulong; ImpersonationType: ulong; AdditionalSecurityInfoType: ulong; u: struct #union { HttpCredentials: *RPC_HTTP_TRANSPORT_CREDENTIALS_A; }; Sid: *; EffectiveOnly: uint; ServerSecurityDescriptor: *; }
export type RPC_BINDING_HANDLE_TEMPLATE_V1_W = struct { Version: ulong; Flags: ulong; ProtocolSequence: ulong; NetworkAddress: *ushort; StringEndpoint: *ushort; u1: struct #union { Reserved: *ushort; }; ObjectUuid: GUID; }
export type RPC_BINDING_HANDLE_TEMPLATE_V1_A = struct { Version: ulong; Flags: ulong; ProtocolSequence: ulong; NetworkAddress: *char; StringEndpoint: *char; u1: struct #union { Reserved: *char; }; ObjectUuid: GUID; }
export type RPC_BINDING_HANDLE_SECURITY_V1_W = struct { Version: ulong; ServerPrincName: *ushort; AuthnLevel: ulong; AuthnSvc: ulong; AuthIdentity: *SEC_WINNT_AUTH_IDENTITY_W; SecurityQos: *RPC_SECURITY_QOS; }
export type RPC_BINDING_HANDLE_SECURITY_V1_A = struct { Version: ulong; ServerPrincName: *char; AuthnLevel: ulong; AuthnSvc: ulong; AuthIdentity: *SEC_WINNT_AUTH_IDENTITY_A; SecurityQos: *RPC_SECURITY_QOS; }
export type RPC_BINDING_HANDLE_OPTIONS_V1 = struct { Version: ulong; Flags: ulong; ComTimeout: ulong; CallTimeout: ulong; }
export type RPC_HTTP_REDIRECTOR_STAGE = enum { RPCHTTP_RS_REDIRECT = 1; RPCHTTP_RS_ACCESS_1; RPCHTTP_RS_SESSION; RPCHTTP_RS_ACCESS_2; RPCHTTP_RS_INTERFACE; }
export type RPC_CLIENT_INFORMATION1 = struct { UserName: *char; ComputerName: *char; Privilege: ushort; AuthFlags: ulong; }
export type RPC_ENDPOINT_TEMPLATEW = struct { Version: ulong; ProtSeq: *ushort; Endpoint: *ushort; SecurityDescriptor: *; Backlog: ulong; }
export type RPC_ENDPOINT_TEMPLATEA = struct { Version: ulong; ProtSeq: *char; Endpoint: *char; SecurityDescriptor: *; Backlog: ulong; }
export type RPC_INTERFACE_TEMPLATEA = struct { Version: ulong; IfSpec: *; MgrTypeUuid: *GUID; MgrEpv: *; Flags: uint; MaxCalls: uint; MaxRpcSize: uint; IfCallback: *long; UuidVector: *UUID_VECTOR; Annotation: *char; SecurityDescriptor: *; }
export type RPC_INTERFACE_TEMPLATEW = struct { Version: ulong; IfSpec: *; MgrTypeUuid: *GUID; MgrEpv: *; Flags: uint; MaxCalls: uint; MaxRpcSize: uint; IfCallback: *long; UuidVector: *UUID_VECTOR; Annotation: *ushort; SecurityDescriptor: *; }
export type RPC_VERSION = struct { MajorVersion: ushort; MinorVersion: ushort; }
export type RPC_SYNTAX_IDENTIFIER = struct { SyntaxGUID: GUID; SyntaxVersion: RPC_VERSION; }
export type RPC_MESSAGE = struct { Handle: *; DataRepresentation: ulong; Buffer: *; BufferLength: uint; ProcNum: uint; TransferSyntax: *RPC_SYNTAX_IDENTIFIER; RpcInterfaceInformation: *; ReservedForRuntime: *; ManagerEpv: *; ImportContext: *; RpcFlags: ulong; }
export type RPC_DISPATCH_TABLE = struct { DispatchTableCount: uint; DispatchTable: *def (*RPC_MESSAGE) -> (); Reserved: int64; }
export type RPC_PROTSEQ_ENDPOINT = struct { RpcProtocolSequence: *char; Endpoint: *char; }
export type RPC_SERVER_INTERFACE = struct { Length: uint; InterfaceId: RPC_SYNTAX_IDENTIFIER; TransferSyntax: RPC_SYNTAX_IDENTIFIER; DispatchTable: *RPC_DISPATCH_TABLE; RpcProtseqEndpointCount: uint; RpcProtseqEndpoint: *RPC_PROTSEQ_ENDPOINT; DefaultManagerEpv: *; InterpreterInfo: *; Flags: uint; }
export type RPC_CLIENT_INTERFACE = struct { Length: uint; InterfaceId: RPC_SYNTAX_IDENTIFIER; TransferSyntax: RPC_SYNTAX_IDENTIFIER; DispatchTable: *RPC_DISPATCH_TABLE; RpcProtseqEndpointCount: uint; RpcProtseqEndpoint: *RPC_PROTSEQ_ENDPOINT; Reserved: uint64; InterpreterInfo: *; Flags: uint; }
export type LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION = enum { MarshalDirectionMarshal; MarshalDirectionUnmarshal; }
export type RPC_SEC_CONTEXT_KEY_INFO = struct { EncryptAlgorithm: ulong; KeySize: ulong; SignatureAlgorithm: ulong; }
export type RPC_TRANSFER_SYNTAX = struct { Uuid: GUID; VersMajor: ushort; VersMinor: ushort; }
export type RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR = struct { BufferSize: ulong; Buffer: *char; }
export type RDR_CALLOUT_STATE = struct { LastError: long; LastEEInfo: *; LastCalledStage: RPC_HTTP_REDIRECTOR_STAGE; ServerName: *ushort; ServerPort: *ushort; RemoteUser: *ushort; AuthType: *ushort; ResourceTypePresent: char; SessionIdPresent: char; InterfacePresent: char; ResourceType: GUID; SessionId: GUID; Interface: RPC_SYNTAX_IDENTIFIER; CertContext: *; }
export type RpcPerfCounters = enum { RpcCurrentUniqueUser = 1; RpcBackEndConnectionAttempts; RpcBackEndConnectionFailed; RpcRequestsPerSecond; RpcIncomingConnections; RpcIncomingBandwidth; RpcOutgoingBandwidth; RpcAttemptedLbsDecisions; RpcFailedLbsDecisions; RpcAttemptedLbsMessages; RpcFailedLbsMessages; RpcLastCounter; }
export type I_RpcProxyCallbackInterface = struct { IsValidMachineFn: def (*ushort, *ushort, ulong) -> (long); GetClientAddressFn: def (*, *char, *ulong) -> (long); GetConnectionTimeoutFn: def (*ulong) -> (long); PerformCalloutFn: def (*, *RDR_CALLOUT_STATE, RPC_HTTP_REDIRECTOR_STAGE) -> (long); FreeCalloutStateFn: def (*RDR_CALLOUT_STATE) -> (); GetClientSessionAndResourceUUIDFn: def (*, *int, *GUID, *int, *GUID) -> (long); ProxyFilterIfFn: def (*, *GUID, ushort, *int) -> (long); RpcProxyUpdatePerfCounterFn: def (RpcPerfCounters, int, ulong) -> (); RpcProxyUpdatePerfCounterBackendServerFn: def (*ushort, int) -> (); }
export type RPC_NOTIFICATION_TYPES = enum { RpcNotificationTypeNone; RpcNotificationTypeEvent; RpcNotificationTypeApc; RpcNotificationTypeIoc; RpcNotificationTypeHwnd; RpcNotificationTypeCallback; }
export type RPC_ASYNC_EVENT = enum { RpcCallComplete; RpcSendComplete; RpcReceiveComplete; RpcClientDisconnect; RpcClientCancel; }
export type RPC_ASYNC_NOTIFICATION_INFO = struct #union { APC: struct { NotificationRoutine: *; hThread: *; }; IOC: struct { hIOPort: *; dwNumberOfBytesTransferred: ulong; dwCompletionKey: uint64; lpOverlapped: *OVERLAPPED; }; HWND: struct { hWnd: *s_HWND__; Msg: uint; }; hEvent: *; NotificationRoutine: *; }
export type RPC_ASYNC_STATE = struct { Size: uint; Signature: ulong; Lock: long; Flags: ulong; StubInfo: *; UserInfo: *; RuntimeInfo: *; Event: RPC_ASYNC_EVENT; NotificationType: RPC_NOTIFICATION_TYPES; u: RPC_ASYNC_NOTIFICATION_INFO; Reserved: [4; int64]; }
export type ExtendedErrorParamTypes = enum { eeptAnsiString = 1; eeptUnicodeString; eeptLongVal; eeptShortVal; eeptPointerVal; eeptNone; eeptBinary; }
export type BinaryParam = struct { Buffer: *; Size: short; }
export type RPC_EE_INFO_PARAM = struct { ParameterType: ExtendedErrorParamTypes; u: struct #union { AnsiString: *char; UnicodeString: *ushort; LVal: long; SVal: short; PVal: uint64; BVal: BinaryParam; }; }
export type RPC_EXTENDED_ERROR_INFO = struct { Version: ulong; ComputerName: *ushort; ProcessID: ulong; u: struct #union { SystemTime: SYSTEMTIME; FileTime: FILETIME; }; GeneratingComponent: ulong; Status: ulong; DetectionLocation: ushort; Flags: ushort; NumberOfParameters: int; Parameters: [4; RPC_EE_INFO_PARAM]; }
export type RPC_ERROR_ENUM_HANDLE = struct { Signature: ulong; CurrentPos: *; Head: *; }
export type RpcLocalAddressFormat = enum { rlafInvalid = 0; rlafIPv4; rlafIPv6; }
export type RPC_CALL_LOCAL_ADDRESS_V1 = struct { Version: uint; Buffer: *; BufferSize: ulong; AddressFormat: RpcLocalAddressFormat; }
export type RPC_CALL_ATTRIBUTES_V1_W = struct { Version: uint; Flags: ulong; ServerPrincipalNameBufferLength: ulong; ServerPrincipalName: *ushort; ClientPrincipalNameBufferLength: ulong; ClientPrincipalName: *ushort; AuthenticationLevel: ulong; AuthenticationService: ulong; NullSession: int; }
export type RPC_CALL_ATTRIBUTES_V1_A = struct { Version: uint; Flags: ulong; ServerPrincipalNameBufferLength: ulong; ServerPrincipalName: *char; ClientPrincipalNameBufferLength: ulong; ClientPrincipalName: *char; AuthenticationLevel: ulong; AuthenticationService: ulong; NullSession: int; }
export type RpcCallType = enum { rctInvalid = 0; rctNormal; rctTraining; rctGuaranteed; }
export type RpcCallClientLocality = enum { rcclInvalid = 0; rcclLocal; rcclRemote; rcclClientUnknownLocality; }
export type RPC_CALL_ATTRIBUTES_V2_W = struct { Version: uint; Flags: ulong; ServerPrincipalNameBufferLength: ulong; ServerPrincipalName: *ushort; ClientPrincipalNameBufferLength: ulong; ClientPrincipalName: *ushort; AuthenticationLevel: ulong; AuthenticationService: ulong; NullSession: int; KernelModeCaller: int; ProtocolSequence: ulong; IsClientLocal: RpcCallClientLocality; ClientPID: *; CallStatus: ulong; CallType: RpcCallType; CallLocalAddress: *RPC_CALL_LOCAL_ADDRESS_V1; OpNum: ushort; InterfaceUuid: GUID; }
export type RPC_CALL_ATTRIBUTES_V2_A = struct { Version: uint; Flags: ulong; ServerPrincipalNameBufferLength: ulong; ServerPrincipalName: *char; ClientPrincipalNameBufferLength: ulong; ClientPrincipalName: *char; AuthenticationLevel: ulong; AuthenticationService: ulong; NullSession: int; KernelModeCaller: int; ProtocolSequence: ulong; IsClientLocal: ulong; ClientPID: *; CallStatus: ulong; CallType: RpcCallType; CallLocalAddress: *RPC_CALL_LOCAL_ADDRESS_V1; OpNum: ushort; InterfaceUuid: GUID; }
export type RPC_CALL_ATTRIBUTES_V3_W = struct { Version: uint; Flags: ulong; ServerPrincipalNameBufferLength: ulong; ServerPrincipalName: *ushort; ClientPrincipalNameBufferLength: ulong; ClientPrincipalName: *ushort; AuthenticationLevel: ulong; AuthenticationService: ulong; NullSession: int; KernelModeCaller: int; ProtocolSequence: ulong; IsClientLocal: RpcCallClientLocality; ClientPID: *; CallStatus: ulong; CallType: RpcCallType; CallLocalAddress: *RPC_CALL_LOCAL_ADDRESS_V1; OpNum: ushort; InterfaceUuid: GUID; ClientIdentifierBufferLength: ulong; ClientIdentifier: *char; }
export type RPC_CALL_ATTRIBUTES_V3_A = struct { Version: uint; Flags: ulong; ServerPrincipalNameBufferLength: ulong; ServerPrincipalName: *char; ClientPrincipalNameBufferLength: ulong; ClientPrincipalName: *char; AuthenticationLevel: ulong; AuthenticationService: ulong; NullSession: int; KernelModeCaller: int; ProtocolSequence: ulong; IsClientLocal: ulong; ClientPID: *; CallStatus: ulong; CallType: RpcCallType; CallLocalAddress: *RPC_CALL_LOCAL_ADDRESS_V1; OpNum: ushort; InterfaceUuid: GUID; ClientIdentifierBufferLength: ulong; ClientIdentifier: *char; }
export type RPC_NOTIFICATIONS = enum { RpcNotificationCallNone = 0; RpcNotificationClientDisconnect = 1; RpcNotificationCallCancel = 2; }
export type DRAGINFOA = struct { uSize: uint; pt: POINT; fNC: int; lpFileList: *char; grfKeyState: ulong; }
export type DRAGINFOW = struct { uSize: uint; pt: POINT; fNC: int; lpFileList: *ushort; grfKeyState: ulong; }
export type APPBARDATA = struct { cbSize: ulong; hWnd: *s_HWND__; uCallbackMessage: uint; uEdge: uint; rc: RECT; lParam: int64; }
export type SHFILEOPSTRUCTA = struct { hwnd: *s_HWND__; wFunc: uint; pFrom: *char; pTo: *char; fFlags: ushort; fAnyOperationsAborted: int; hNameMappings: *; lpszProgressTitle: *char; }
export type SHFILEOPSTRUCTW = struct { hwnd: *s_HWND__; wFunc: uint; pFrom: *ushort; pTo: *ushort; fFlags: ushort; fAnyOperationsAborted: int; hNameMappings: *; lpszProgressTitle: *ushort; }
export type SHNAMEMAPPINGA = struct { pszOldPath: *char; pszNewPath: *char; cchOldPath: int; cchNewPath: int; }
export type SHNAMEMAPPINGW = struct { pszOldPath: *ushort; pszNewPath: *ushort; cchOldPath: int; cchNewPath: int; }
export type SHELLEXECUTEINFOA = struct { cbSize: ulong; fMask: ulong; hwnd: *s_HWND__; lpVerb: *char; lpFile: *char; lpParameters: *char; lpDirectory: *char; nShow: int; hInstApp: *s_HINSTANCE__; lpIDList: *; lpClass: *char; hkeyClass: *s_HKEY__; dwHotKey: ulong; _14: struct #union { hIcon: *; hMonitor: *; }; hProcess: *; }
export type SHELLEXECUTEINFOW = struct { cbSize: ulong; fMask: ulong; hwnd: *s_HWND__; lpVerb: *ushort; lpFile: *ushort; lpParameters: *ushort; lpDirectory: *ushort; nShow: int; hInstApp: *s_HINSTANCE__; lpIDList: *; lpClass: *ushort; hkeyClass: *s_HKEY__; dwHotKey: ulong; _14: struct #union { hIcon: *; hMonitor: *; }; hProcess: *; }
export type SHCREATEPROCESSINFOW = struct { cbSize: ulong; fMask: ulong; hwnd: *s_HWND__; pszFile: *ushort; pszParameters: *ushort; pszCurrentDirectory: *ushort; hUserToken: *; lpProcessAttributes: *SECURITY_ATTRIBUTES; lpThreadAttributes: *SECURITY_ATTRIBUTES; bInheritHandles: int; dwCreationFlags: ulong; lpStartupInfo: *STARTUPINFOW; lpProcessInformation: *PROCESS_INFORMATION; }
export type ASSOCCLASS = enum { ASSOCCLASS_SHELL_KEY = 0; ASSOCCLASS_PROGID_KEY; ASSOCCLASS_PROGID_STR; ASSOCCLASS_CLSID_KEY; ASSOCCLASS_CLSID_STR; ASSOCCLASS_APP_KEY; ASSOCCLASS_APP_STR; ASSOCCLASS_SYSTEM_STR; ASSOCCLASS_FOLDER; ASSOCCLASS_STAR; ASSOCCLASS_FIXED_PROGID_STR; ASSOCCLASS_PROTOCOL_STR; }
export type ASSOCIATIONELEMENT = struct { ac: ASSOCCLASS; hkClass: *s_HKEY__; pszClass: *ushort; }
export type SHQUERYRBINFO = struct { cbSize: ulong; i64Size: int64; i64NumItems: int64; }
export type QUERY_USER_NOTIFICATION_STATE = enum { QUNS_NOT_PRESENT = 1; QUNS_BUSY = 2; QUNS_RUNNING_D3D_FULL_SCREEN = 3; QUNS_PRESENTATION_MODE = 4; QUNS_ACCEPTS_NOTIFICATIONS = 5; QUNS_QUIET_TIME = 6; QUNS_APP = 7; }
export type NOTIFYICONDATAA = struct { cbSize: ulong; hWnd: *s_HWND__; uID: uint; uFlags: uint; uCallbackMessage: uint; hIcon: *s_HICON__; szTip: [128; char]; dwState: ulong; dwStateMask: ulong; szInfo: [256; char]; _11: struct #union { uTimeout: uint; uVersion: uint; }; szInfoTitle: [64; char]; dwInfoFlags: ulong; guidItem: GUID; hBalloonIcon: *s_HICON__; }
export type NOTIFYICONDATAW = struct { cbSize: ulong; hWnd: *s_HWND__; uID: uint; uFlags: uint; uCallbackMessage: uint; hIcon: *s_HICON__; szTip: [128; ushort]; dwState: ulong; dwStateMask: ulong; szInfo: [256; ushort]; _11: struct #union { uTimeout: uint; uVersion: uint; }; szInfoTitle: [64; ushort]; dwInfoFlags: ulong; guidItem: GUID; hBalloonIcon: *s_HICON__; }
export type NOTIFYICONIDENTIFIER = struct { cbSize: ulong; hWnd: *s_HWND__; uID: uint; guidItem: GUID; }
export type SHFILEINFOA = struct { hIcon: *s_HICON__; iIcon: int; dwAttributes: ulong; szDisplayName: [260; char]; szTypeName: [80; char]; }
export type SHFILEINFOW = struct { hIcon: *s_HICON__; iIcon: int; dwAttributes: ulong; szDisplayName: [260; ushort]; szTypeName: [80; ushort]; }
export type SHSTOCKICONINFO = struct { cbSize: ulong; hIcon: *s_HICON__; iSysImageIndex: int; iIcon: int; szPath: [260; ushort]; }
export type SHSTOCKICONID = enum { SIID_DOCNOASSOC = 0; SIID_DOCASSOC = 1; SIID_APPLICATION = 2; SIID_FOLDER = 3; SIID_FOLDEROPEN = 4; SIID_DRIVE525 = 5; SIID_DRIVE35 = 6; SIID_DRIVEREMOVE = 7; SIID_DRIVEFIXED = 8; SIID_DRIVENET = 9; SIID_DRIVENETDISABLED = 10; SIID_DRIVECD = 11; SIID_DRIVERAM = 12; SIID_WORLD = 13; SIID_SERVER = 15; SIID_PRINTER = 16; SIID_MYNETWORK = 17; SIID_FIND = 22; SIID_HELP = 23; SIID_SHARE = 28; SIID_LINK = 29; SIID_SLOWFILE = 30; SIID_RECYCLER = 31; SIID_RECYCLERFULL = 32; SIID_MEDIACDAUDIO = 40; SIID_LOCK = 47; SIID_AUTOLIST = 49; SIID_PRINTERNET = 50; SIID_SERVERSHARE = 51; SIID_PRINTERFAX = 52; SIID_PRINTERFAXNET = 53; SIID_PRINTERFILE = 54; SIID_STACK = 55; SIID_MEDIASVCD = 56; SIID_STUFFEDFOLDER = 57; SIID_DRIVEUNKNOWN = 58; SIID_DRIVEDVD = 59; SIID_MEDIADVD = 60; SIID_MEDIADVDRAM = 61; SIID_MEDIADVDRW = 62; SIID_MEDIADVDR = 63; SIID_MEDIADVDROM = 64; SIID_MEDIACDAUDIOPLUS = 65; SIID_MEDIACDRW = 66; SIID_MEDIACDR = 67; SIID_MEDIACDBURN = 68; SIID_MEDIABLANKCD = 69; SIID_MEDIACDROM = 70; SIID_AUDIOFILES = 71; SIID_IMAGEFILES = 72; SIID_VIDEOFILES = 73; SIID_MIXEDFILES = 74; SIID_FOLDERBACK = 75; SIID_FOLDERFRONT = 76; SIID_SHIELD = 77; SIID_WARNING = 78; SIID_INFO = 79; SIID_ERROR = 80; SIID_KEY = 81; SIID_SOFTWARE = 82; SIID_RENAME = 83; SIID_DELETE = 84; SIID_MEDIAAUDIODVD = 85; SIID_MEDIAMOVIEDVD = 86; SIID_MEDIAENHANCEDCD = 87; SIID_MEDIAENHANCEDDVD = 88; SIID_MEDIAHDDVD = 89; SIID_MEDIABLURAY = 90; SIID_MEDIAVCD = 91; SIID_MEDIADVDPLUSR = 92; SIID_MEDIADVDPLUSRW = 93; SIID_DESKTOPPC = 94; SIID_MOBILEPC = 95; SIID_USERS = 96; SIID_MEDIASMARTMEDIA = 97; SIID_MEDIACOMPACTFLASH = 98; SIID_DEVICECELLPHONE = 99; SIID_DEVICECAMERA = 100; SIID_DEVICEVIDEOCAMERA = 101; SIID_DEVICEAUDIOPLAYER = 102; SIID_NETWORKCONNECT = 103; SIID_INTERNET = 104; SIID_ZIPFILE = 105; SIID_SETTINGS = 106; SIID_DRIVEHDDVD = 132; SIID_DRIVEBD = 133; SIID_MEDIAHDDVDROM = 134; SIID_MEDIAHDDVDR = 135; SIID_MEDIAHDDVDRAM = 136; SIID_MEDIABDROM = 137; SIID_MEDIABDR = 138; SIID_MEDIABDRE = 139; SIID_CLUSTEREDDRIVE = 140; SIID_MAX_ICONS = 181; }
export type OPEN_PRINTER_PROPS_INFOA = struct { dwSize: ulong; pszSheetName: *char; uSheetIndex: uint; dwFlags: ulong; bModal: int; }
export type OPEN_PRINTER_PROPS_INFOW = struct { dwSize: ulong; pszSheetName: *ushort; uSheetIndex: uint; dwFlags: ulong; bModal: int; }
export type NC_ADDRESS = struct { pAddrInfo: *s_NET_ADDRESS_INFO_; PortNumber: ushort; PrefixLength: char; }
export type PERF_DATA_BLOCK = struct { Signature: [4; ushort]; LittleEndian: ulong; Version: ulong; Revision: ulong; TotalByteLength: ulong; HeaderLength: ulong; NumObjectTypes: ulong; DefaultObject: long; SystemTime: SYSTEMTIME; PerfTime: LARGE_INTEGER; PerfFreq: LARGE_INTEGER; PerfTime100nSec: LARGE_INTEGER; SystemNameLength: ulong; SystemNameOffset: ulong; }
export type PERF_OBJECT_TYPE = struct { TotalByteLength: ulong; DefinitionLength: ulong; HeaderLength: ulong; ObjectNameTitleIndex: ulong; ObjectNameTitle: ulong; ObjectHelpTitleIndex: ulong; ObjectHelpTitle: ulong; DetailLevel: ulong; NumCounters: ulong; DefaultCounter: long; NumInstances: long; CodePage: ulong; PerfTime: LARGE_INTEGER; PerfFreq: LARGE_INTEGER; }
export type PERF_COUNTER_DEFINITION = struct { ByteLength: ulong; CounterNameTitleIndex: ulong; CounterNameTitle: ulong; CounterHelpTitleIndex: ulong; CounterHelpTitle: ulong; DefaultScale: long; DetailLevel: ulong; CounterType: ulong; CounterSize: ulong; CounterOffset: ulong; }
export type PERF_INSTANCE_DEFINITION = struct { ByteLength: ulong; ParentObjectTitleIndex: ulong; ParentObjectInstance: ulong; UniqueID: long; NameOffset: ulong; NameLength: ulong; }
export type PERF_COUNTER_BLOCK = struct { ByteLength: ulong; }
export type fd_set = struct { fd_count: uint; fd_array: [64; uint64]; }
export type IN_ADDR = struct { S_un: struct #union { S_un_b: struct { s_b1: char; s_b2: char; s_b3: char; s_b4: char; }; S_un_w: struct { s_w1: ushort; s_w2: ushort; }; S_addr: ulong; }; }
export type WSADATA = struct { wVersion: ushort; wHighVersion: ushort; iMaxSockets: ushort; iMaxUdpDg: ushort; lpVendorInfo: *char; szDescription: [257; char]; szSystemStatus: [129; char]; }
export type TRANSMIT_FILE_BUFFERS = struct { Head: *; HeadLength: ulong; Tail: *; TailLength: ulong; }
export type s_sockaddr = struct { sa_family: ushort; sa_data: [14; char]; }
export type s_sockaddr_in = struct { sin_family: short; sin_port: ushort; sin_addr: IN_ADDR; sin_zero: [8; char]; }
export type s_linger = struct { l_onoff: ushort; l_linger: ushort; }
export type s_hostent = struct { h_name: *char; h_aliases: **char; h_addrtype: short; h_length: short; h_addr_list: **char; }
export type s_servent = struct { s_name: *char; s_aliases: **char; s_proto: *char; s_port: short; }
export type s_protoent = struct { p_name: *char; p_aliases: **char; p_proto: short; }
export type s_timeval = struct { tv_sec: long; tv_usec: long; }
export type CMS_KEY_INFO = struct { dwVersion: ulong; Algid: uint; pbOID: *char; cbOID: ulong; }
export type HMAC_INFO = struct { HashAlgid: uint; pbInnerString: *char; cbInnerString: ulong; pbOuterString: *char; cbOuterString: ulong; }
export type SCHANNEL_ALG = struct { dwUse: ulong; Algid: uint; cBits: ulong; dwFlags: ulong; dwReserved: ulong; }
export type PROV_ENUMALGS = struct { aiAlgid: uint; dwBitLen: ulong; dwNameLen: ulong; szName: [20; char]; }
export type PROV_ENUMALGS_EX = struct { aiAlgid: uint; dwDefaultLen: ulong; dwMinLen: ulong; dwMaxLen: ulong; dwProtocols: ulong; dwNameLen: ulong; szName: [20; char]; dwLongNameLen: ulong; szLongName: [40; char]; }
export type PUBLICKEYSTRUC = struct { bType: char; bVersion: char; reserved: ushort; aiKeyAlg: uint; }
export type RSAPUBKEY = struct { magic: ulong; bitlen: ulong; pubexp: ulong; }
export type TEKPUBKEY = struct { magic: ulong; bitlen: ulong; }
export type DSSSEED = struct { counter: ulong; seed: [20; char]; }
export type DSSPUBKEY_VER3 = struct { magic: ulong; bitlenP: ulong; bitlenQ: ulong; bitlenJ: ulong; DSSSeed: DSSSEED; }
export type DSSPRIVKEY_VER3 = struct { magic: ulong; bitlenP: ulong; bitlenQ: ulong; bitlenJ: ulong; bitlenX: ulong; DSSSeed: DSSSEED; }
export type KEY_TYPE_SUBTYPE = struct { dwKeySpec: ulong; Type: GUID; Subtype: GUID; }
export type CERT_FORTEZZA_DATA_PROP = struct { SerialNumber: [8; char]; CertIndex: int; CertLabel: [36; char]; }
export type CRYPT_RC4_KEY_STATE = struct { Key: [16; char]; SBox: [256; char]; i: char; j: char; }
export type CRYPT_DES_KEY_STATE = struct { Key: [8; char]; IV: [8; char]; Feedback: [8; char]; }
export type CRYPT_3DES_KEY_STATE = struct { Key: [24; char]; IV: [8; char]; Feedback: [8; char]; }
export type CRYPT_AES_128_KEY_STATE = struct { Key: [16; char]; IV: [16; char]; EncryptionState: [16; [11; char]]; DecryptionState: [16; [11; char]]; Feedback: [16; char]; }
export type CRYPT_AES_256_KEY_STATE = struct { Key: [32; char]; IV: [16; char]; EncryptionState: [16; [15; char]]; DecryptionState: [16; [15; char]]; Feedback: [16; char]; }
export type CRYPT_ATTR_BLOB = struct { cbData: ulong; pbData: *char; }
export type CMS_DH_KEY_INFO = struct { dwVersion: ulong; Algid: uint; pszContentEncObjId: *char; PubInfo: CRYPT_ATTR_BLOB; pReserved: *; }
export type BCRYPT_KEY_LENGTHS_STRUCT = struct { dwMinLength: ulong; dwMaxLength: ulong; dwIncrement: ulong; }
export type BCRYPT_OID = struct { cbOID: ulong; pbOID: *char; }
export type BCRYPT_OID_LIST = struct { dwOIDCount: ulong; pOIDs: *BCRYPT_OID; }
export type BCRYPT_PKCS1_PADDING_INFO = struct { pszAlgId: *ushort; }
export type BCRYPT_PSS_PADDING_INFO = struct { pszAlgId: *ushort; cbSalt: ulong; }
export type BCRYPT_OAEP_PADDING_INFO = struct { pszAlgId: *ushort; pbLabel: *char; cbLabel: ulong; }
export type BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO = struct { cbSize: ulong; dwInfoVersion: ulong; pbNonce: *char; cbNonce: ulong; pbAuthData: *char; cbAuthData: ulong; pbTag: *char; cbTag: ulong; pbMacContext: *char; cbMacContext: ulong; cbAAD: ulong; cbData: uint64; dwFlags: ulong; }
export type BCryptBuffer = struct { cbBuffer: ulong; BufferType: ulong; pvBuffer: *; }
export type BCryptBufferDesc = struct { ulVersion: ulong; cBuffers: ulong; pBuffers: *BCryptBuffer; }
export type BCRYPT_KEY_BLOB = struct { Magic: ulong; }
export type BCRYPT_RSAKEY_BLOB = struct { Magic: ulong; BitLength: ulong; cbPublicExp: ulong; cbModulus: ulong; cbPrime1: ulong; cbPrime2: ulong; }
export type BCRYPT_ECCKEY_BLOB = struct { dwMagic: ulong; cbKey: ulong; }
export type SSL_ECCKEY_BLOB = struct { dwCurveType: ulong; cbKey: ulong; }
export type ECC_CURVE_TYPE_ENUM = enum { BCRYPT_ECC_PRIME_SHORT_WEIERSTRASS_CURVE = 1; BCRYPT_ECC_PRIME_TWISTED_EDWARDS_CURVE = 2; BCRYPT_ECC_PRIME_MONTGOMERY_CURVE = 3; }
export type ECC_CURVE_ALG_ID_ENUM = enum { BCRYPT_NO_CURVE_GENERATION_ALG_ID = 0; }
export type BCRYPT_ECCFULLKEY_BLOB = struct { dwMagic: ulong; dwVersion: ulong; dwCurveType: ECC_CURVE_TYPE_ENUM; dwCurveGenerationAlgId: ECC_CURVE_ALG_ID_ENUM; cbFieldLength: ulong; cbSubgroupOrder: ulong; cbCofactor: ulong; cbSeed: ulong; }
export type BCRYPT_DH_KEY_BLOB = struct { dwMagic: ulong; cbKey: ulong; }
export type BCRYPT_DH_PARAMETER_HEADER = struct { cbLength: ulong; dwMagic: ulong; cbKeyLength: ulong; }
export type BCRYPT_DSA_KEY_BLOB = struct { dwMagic: ulong; cbKey: ulong; Count: [4; char]; Seed: [20; char]; q: [20; char]; }
export type HASHALGORITHM_ENUM = enum { DSA_HASH_ALGORITHM_SHA1; DSA_HASH_ALGORITHM_SHA256; DSA_HASH_ALGORITHM_SHA512; }
export type DSAFIPSVERSION_ENUM = enum { DSA_FIPS186_2; DSA_FIPS186_3; }
export type BCRYPT_DSA_KEY_BLOB_V2 = struct { dwMagic: ulong; cbKey: ulong; hashAlgorithm: HASHALGORITHM_ENUM; standardVersion: DSAFIPSVERSION_ENUM; cbSeedLength: ulong; cbGroupSize: ulong; Count: [4; char]; }
export type BCRYPT_KEY_DATA_BLOB_HEADER = struct { dwMagic: ulong; dwVersion: ulong; cbKeyData: ulong; }
export type BCRYPT_DSA_PARAMETER_HEADER = struct { cbLength: ulong; dwMagic: ulong; cbKeyLength: ulong; Count: [4; char]; Seed: [20; char]; q: [20; char]; }
export type BCRYPT_DSA_PARAMETER_HEADER_V2 = struct { cbLength: ulong; dwMagic: ulong; cbKeyLength: ulong; hashAlgorithm: HASHALGORITHM_ENUM; standardVersion: DSAFIPSVERSION_ENUM; cbSeedLength: ulong; cbGroupSize: ulong; Count: [4; char]; }
export type BCRYPT_ECC_CURVE_NAMES = struct { dwEccCurveNames: ulong; pEccCurveNames: **ushort; }
export type BCRYPT_HASH_OPERATION_TYPE = enum { BCRYPT_HASH_OPERATION_HASH_DATA = 1; BCRYPT_HASH_OPERATION_FINISH_HASH = 2; }
export type BCRYPT_MULTI_HASH_OPERATION = struct { iHash: ulong; hashOperation: BCRYPT_HASH_OPERATION_TYPE; pbBuffer: *char; cbBuffer: ulong; }
export type BCRYPT_MULTI_OPERATION_TYPE = enum { BCRYPT_OPERATION_TYPE_HASH = 1; }
export type BCRYPT_MULTI_OBJECT_LENGTH_STRUCT = struct { cbPerObject: ulong; cbPerElement: ulong; }
export type BCRYPT_ALGORITHM_IDENTIFIER = struct { pszName: *ushort; dwClass: ulong; dwFlags: ulong; }
export type BCRYPT_PROVIDER_NAME = struct { pszProviderName: *ushort; }
export type BCRYPT_INTERFACE_VERSION = struct { MajorVersion: ushort; MinorVersion: ushort; }
export type CRYPT_INTERFACE_REG = struct { dwInterface: ulong; dwFlags: ulong; cFunctions: ulong; rgpszFunctions: **ushort; }
export type CRYPT_IMAGE_REG = struct { pszImage: *ushort; cInterfaces: ulong; rgpInterfaces: **CRYPT_INTERFACE_REG; }
export type CRYPT_PROVIDER_REG = struct { cAliases: ulong; rgpszAliases: **ushort; pUM: *CRYPT_IMAGE_REG; pKM: *CRYPT_IMAGE_REG; }
export type CRYPT_PROVIDERS = struct { cProviders: ulong; rgpszProviders: **ushort; }
export type CRYPT_CONTEXT_CONFIG = struct { dwFlags: ulong; dwReserved: ulong; }
export type CRYPT_CONTEXT_FUNCTION_CONFIG = struct { dwFlags: ulong; dwReserved: ulong; }
export type CRYPT_CONTEXTS = struct { cContexts: ulong; rgpszContexts: **ushort; }
export type CRYPT_CONTEXT_FUNCTIONS = struct { cFunctions: ulong; rgpszFunctions: **ushort; }
export type CRYPT_CONTEXT_FUNCTION_PROVIDERS = struct { cProviders: ulong; rgpszProviders: **ushort; }
export type CRYPT_PROPERTY_REF = struct { pszProperty: *ushort; cbValue: ulong; pbValue: *char; }
export type CRYPT_IMAGE_REF = struct { pszImage: *ushort; dwFlags: ulong; }
export type CRYPT_PROVIDER_REF = struct { dwInterface: ulong; pszFunction: *ushort; pszProvider: *ushort; cProperties: ulong; rgpProperties: **CRYPT_PROPERTY_REF; pUM: *CRYPT_IMAGE_REF; pKM: *CRYPT_IMAGE_REF; }
export type CRYPT_PROVIDER_REFS = struct { cProviders: ulong; rgpProviders: **CRYPT_PROVIDER_REF; }
export type NCRYPT_ALLOC_PARA = struct { cbSize: ulong; pfnAlloc: def (uint64) -> (*); pfnFree: def (*) -> (); }
export type NCRYPT_CIPHER_PADDING_INFO = struct { cbSize: ulong; dwFlags: ulong; pbIV: *char; cbIV: ulong; pbOtherInfo: *char; cbOtherInfo: ulong; }
export type NCRYPT_PLATFORM_ATTEST_PADDING_INFO = struct { magic: ulong; pcrMask: ulong; }
export type NCRYPT_KEY_ATTEST_PADDING_INFO = struct { magic: ulong; pbKeyBlob: *char; cbKeyBlob: ulong; pbKeyAuth: *char; cbKeyAuth: ulong; }
export type NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES = struct { Version: ulong; Flags: ulong; cbPublicKeyBlob: ulong; }
export type NCRYPT_VSM_KEY_ATTESTATION_STATEMENT = struct { Magic: ulong; Version: ulong; cbSignature: ulong; cbReport: ulong; cbAttributes: ulong; }
export type NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS = struct { Version: ulong; TrustletId: uint64; MinSvn: ulong; FlagsMask: ulong; FlagsExpected: ulong; #bits(1) AllowDebugging: ulong; #bits(31) Reserved: ulong; }
export type NCRYPT_EXPORTED_ISOLATED_KEY_HEADER = struct { Version: ulong; KeyUsage: ulong; #bits(1) PerBootKey: ulong; #bits(31) Reserved: ulong; cbAlgName: ulong; cbNonce: ulong; cbAuthTag: ulong; cbWrappingKey: ulong; cbIsolatedKey: ulong; }
export type NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE = struct { Header: NCRYPT_EXPORTED_ISOLATED_KEY_HEADER; }
export type NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT = struct { Magic: uint; Version: uint; HeaderSize: uint; cbCertifyInfo: uint; cbSignature: uint; cbTpmPublic: uint; }
export type NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT = struct { Magic: ulong; Version: ulong; pcrAlg: ulong; cbSignature: ulong; cbQuote: ulong; cbPcrs: ulong; }
export type NCryptAlgorithmName = struct { pszName: *ushort; dwClass: ulong; dwAlgOperations: ulong; dwFlags: ulong; }
export type NCryptKeyName = struct { pszName: *ushort; pszAlgid: *ushort; dwLegacyKeySpec: ulong; dwFlags: ulong; }
export type NCryptProviderName = struct { pszName: *ushort; pszComment: *ushort; }
export type NCRYPT_UI_POLICY = struct { dwVersion: ulong; dwFlags: ulong; pszCreationTitle: *ushort; pszFriendlyName: *ushort; pszDescription: *ushort; }
export type NCRYPT_KEY_ACCESS_POLICY_BLOB = struct { dwVersion: ulong; dwPolicyFlags: ulong; cbUserSid: ulong; cbApplicationSid: ulong; }
export type NCRYPT_SUPPORTED_LENGTHS = struct { dwMinLength: ulong; dwMaxLength: ulong; dwIncrement: ulong; dwDefaultLength: ulong; }
export type NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO = struct { dwVersion: ulong; iExpiration: int; pabNonce: [32; char]; pabPolicyRef: [32; char]; pabHMAC: [32; char]; }
export type NCRYPT_PCP_TPM_FW_VERSION_INFO = struct { major1: ushort; major2: ushort; minor1: ushort; minor2: ushort; }
export type NCRYPT_PCP_RAW_POLICYDIGEST_INFO = struct { dwVersion: ulong; cbDigest: ulong; }
export type NCRYPT_KEY_BLOB_HEADER = struct { cbSize: ulong; dwMagic: ulong; cbAlgName: ulong; cbKeyData: ulong; }
export type NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER = struct { magic: ulong; cbHeader: ulong; cbPublic: ulong; cbPrivate: ulong; cbName: ulong; }
export type CRYPT_BIT_BLOB = struct { cbData: ulong; pbData: *char; cUnusedBits: ulong; }
export type CRYPT_ALGORITHM_IDENTIFIER = struct { pszObjId: *char; Parameters: CRYPT_ATTR_BLOB; }
export type CRYPT_OBJID_TABLE = struct { dwAlgId: ulong; pszObjId: *char; }
export type CRYPT_HASH_INFO = struct { HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; Hash: CRYPT_ATTR_BLOB; }
export type CERT_EXTENSION = struct { pszObjId: *char; fCritical: int; Value: CRYPT_ATTR_BLOB; }
export type CRYPT_ATTRIBUTE_TYPE_VALUE = struct { pszObjId: *char; Value: CRYPT_ATTR_BLOB; }
export type CRYPT_ATTRIBUTE = struct { pszObjId: *char; cValue: ulong; rgValue: *CRYPT_ATTR_BLOB; }
export type CRYPT_ATTRIBUTES = struct { cAttr: ulong; rgAttr: *CRYPT_ATTRIBUTE; }
export type CERT_RDN_ATTR = struct { pszObjId: *char; dwValueType: ulong; Value: CRYPT_ATTR_BLOB; }
export type CERT_RDN = struct { cRDNAttr: ulong; rgRDNAttr: *CERT_RDN_ATTR; }
export type CERT_NAME_INFO = struct { cRDN: ulong; rgRDN: *CERT_RDN; }
export type CERT_NAME_VALUE = struct { dwValueType: ulong; Value: CRYPT_ATTR_BLOB; }
export type CERT_PUBLIC_KEY_INFO = struct { Algorithm: CRYPT_ALGORITHM_IDENTIFIER; PublicKey: CRYPT_BIT_BLOB; }
export type CRYPT_ECC_PRIVATE_KEY_INFO = struct { dwVersion: ulong; PrivateKey: CRYPT_ATTR_BLOB; szCurveOid: *char; PublicKey: CRYPT_BIT_BLOB; }
export type CRYPT_PRIVATE_KEY_INFO = struct { Version: ulong; Algorithm: CRYPT_ALGORITHM_IDENTIFIER; PrivateKey: CRYPT_ATTR_BLOB; pAttributes: *CRYPT_ATTRIBUTES; }
export type CRYPT_ENCRYPTED_PRIVATE_KEY_INFO = struct { EncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; EncryptedPrivateKey: CRYPT_ATTR_BLOB; }
export type CRYPT_PRIVATE_KEY_BLOB_AND_PARAMS = struct { PrivateKey: CRYPT_ATTR_BLOB; pResolvehCryptProvFunc: def (*CRYPT_PRIVATE_KEY_INFO, *uint64, *) -> (int); pVoidResolveFunc: *; pDecryptPrivateKeyFunc: def (CRYPT_ALGORITHM_IDENTIFIER, CRYPT_ATTR_BLOB, *char, *ulong, *) -> (int); pVoidDecryptFunc: *; }
export type CRYPT_PKCS8_EXPORT_PARAMS = struct { hCryptProv: uint64; dwKeySpec: ulong; pszPrivateKeyObjId: *char; pEncryptPrivateKeyFunc: def (*CRYPT_ALGORITHM_IDENTIFIER, *CRYPT_ATTR_BLOB, *char, *ulong, *) -> (int); pVoidEncryptFunc: *; }
export type CERT_INFO = struct { dwVersion: ulong; SerialNumber: CRYPT_ATTR_BLOB; SignatureAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; Issuer: CRYPT_ATTR_BLOB; NotBefore: FILETIME; NotAfter: FILETIME; Subject: CRYPT_ATTR_BLOB; SubjectPublicKeyInfo: CERT_PUBLIC_KEY_INFO; IssuerUniqueId: CRYPT_BIT_BLOB; SubjectUniqueId: CRYPT_BIT_BLOB; cExtension: ulong; rgExtension: *CERT_EXTENSION; }
export type CRL_ENTRY = struct { SerialNumber: CRYPT_ATTR_BLOB; RevocationDate: FILETIME; cExtension: ulong; rgExtension: *CERT_EXTENSION; }
export type CRL_INFO = struct { dwVersion: ulong; SignatureAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; Issuer: CRYPT_ATTR_BLOB; ThisUpdate: FILETIME; NextUpdate: FILETIME; cCRLEntry: ulong; rgCRLEntry: *CRL_ENTRY; cExtension: ulong; rgExtension: *CERT_EXTENSION; }
export type CERT_OR_CRL_BLOB = struct { dwChoice: ulong; cbEncoded: ulong; pbEncoded: *char; }
export type CERT_OR_CRL_BUNDLE = struct { cItem: ulong; rgItem: *CERT_OR_CRL_BLOB; }
export type CERT_REQUEST_INFO = struct { dwVersion: ulong; Subject: CRYPT_ATTR_BLOB; SubjectPublicKeyInfo: CERT_PUBLIC_KEY_INFO; cAttribute: ulong; rgAttribute: *CRYPT_ATTRIBUTE; }
export type CERT_KEYGEN_REQUEST_INFO = struct { dwVersion: ulong; SubjectPublicKeyInfo: CERT_PUBLIC_KEY_INFO; pwszChallengeString: *ushort; }
export type CERT_SIGNED_CONTENT_INFO = struct { ToBeSigned: CRYPT_ATTR_BLOB; SignatureAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; Signature: CRYPT_BIT_BLOB; }
export type CERT_ENHKEY_USAGE = struct { cUsageIdentifier: ulong; rgpszUsageIdentifier: **char; }
export type CTL_ENTRY = struct { SubjectIdentifier: CRYPT_ATTR_BLOB; cAttribute: ulong; rgAttribute: *CRYPT_ATTRIBUTE; }
export type CTL_INFO = struct { dwVersion: ulong; SubjectUsage: CERT_ENHKEY_USAGE; ListIdentifier: CRYPT_ATTR_BLOB; SequenceNumber: CRYPT_ATTR_BLOB; ThisUpdate: FILETIME; NextUpdate: FILETIME; SubjectAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; cCTLEntry: ulong; rgCTLEntry: *CTL_ENTRY; cExtension: ulong; rgExtension: *CERT_EXTENSION; }
export type CRYPT_TIME_STAMP_REQUEST_INFO = struct { pszTimeStampAlgorithm: *char; pszContentType: *char; Content: CRYPT_ATTR_BLOB; cAttribute: ulong; rgAttribute: *CRYPT_ATTRIBUTE; }
export type CRYPT_ENROLLMENT_NAME_VALUE_PAIR = struct { pwszName: *ushort; pwszValue: *ushort; }
export type CRYPT_CSP_PROVIDER = struct { dwKeySpec: ulong; pwszProviderName: *ushort; Signature: CRYPT_BIT_BLOB; }
export type CRYPT_ENCODE_PARA = struct { cbSize: ulong; pfnAlloc: def (uint64) -> (*); pfnFree: def (*) -> (); }
export type CRYPT_DECODE_PARA = struct { cbSize: ulong; pfnAlloc: def (uint64) -> (*); pfnFree: def (*) -> (); }
export type CERT_EXTENSIONS = struct { cExtension: ulong; rgExtension: *CERT_EXTENSION; }
export type CERT_AUTHORITY_KEY_ID_INFO = struct { KeyId: CRYPT_ATTR_BLOB; CertIssuer: CRYPT_ATTR_BLOB; CertSerialNumber: CRYPT_ATTR_BLOB; }
export type CERT_PRIVATE_KEY_VALIDITY = struct { NotBefore: FILETIME; NotAfter: FILETIME; }
export type CERT_KEY_ATTRIBUTES_INFO = struct { KeyId: CRYPT_ATTR_BLOB; IntendedKeyUsage: CRYPT_BIT_BLOB; pPrivateKeyUsagePeriod: *CERT_PRIVATE_KEY_VALIDITY; }
export type CERT_POLICY_ID = struct { cCertPolicyElementId: ulong; rgpszCertPolicyElementId: **char; }
export type CERT_KEY_USAGE_RESTRICTION_INFO = struct { cCertPolicyId: ulong; rgCertPolicyId: *CERT_POLICY_ID; RestrictedKeyUsage: CRYPT_BIT_BLOB; }
export type CERT_OTHER_NAME = struct { pszObjId: *char; Value: CRYPT_ATTR_BLOB; }
export type CERT_ALT_NAME_ENTRY = struct { dwAltNameChoice: ulong; _2: struct #union { pOtherName: *CERT_OTHER_NAME; pwszRfc822Name: *ushort; pwszDNSName: *ushort; DirectoryName: CRYPT_ATTR_BLOB; pwszURL: *ushort; IPAddress: CRYPT_ATTR_BLOB; pszRegisteredID: *char; }; }
export type CERT_ALT_NAME_INFO = struct { cAltEntry: ulong; rgAltEntry: *CERT_ALT_NAME_ENTRY; }
export type CERT_BASIC_CONSTRAINTS_INFO = struct { SubjectType: CRYPT_BIT_BLOB; fPathLenConstraint: int; dwPathLenConstraint: ulong; cSubtreesConstraint: ulong; rgSubtreesConstraint: *CRYPT_ATTR_BLOB; }
export type CERT_BASIC_CONSTRAINTS2_INFO = struct { fCA: int; fPathLenConstraint: int; dwPathLenConstraint: ulong; }
export type CERT_POLICY_QUALIFIER_INFO = struct { pszPolicyQualifierId: *char; Qualifier: CRYPT_ATTR_BLOB; }
export type CERT_POLICY_INFO = struct { pszPolicyIdentifier: *char; cPolicyQualifier: ulong; rgPolicyQualifier: *CERT_POLICY_QUALIFIER_INFO; }
export type CERT_POLICIES_INFO = struct { cPolicyInfo: ulong; rgPolicyInfo: *CERT_POLICY_INFO; }
export type CERT_POLICY_QUALIFIER_NOTICE_REFERENCE = struct { pszOrganization: *char; cNoticeNumbers: ulong; rgNoticeNumbers: *int; }
export type CERT_POLICY_QUALIFIER_USER_NOTICE = struct { pNoticeReference: *CERT_POLICY_QUALIFIER_NOTICE_REFERENCE; pszDisplayText: *ushort; }
export type CPS_URLS = struct { pszURL: *ushort; pAlgorithm: *CRYPT_ALGORITHM_IDENTIFIER; pDigest: *CRYPT_ATTR_BLOB; }
export type CERT_POLICY95_QUALIFIER1 = struct { pszPracticesReference: *ushort; pszNoticeIdentifier: *char; pszNSINoticeIdentifier: *char; cCPSURLs: ulong; rgCPSURLs: *CPS_URLS; }
export type CERT_POLICY_MAPPING = struct { pszIssuerDomainPolicy: *char; pszSubjectDomainPolicy: *char; }
export type CERT_POLICY_MAPPINGS_INFO = struct { cPolicyMapping: ulong; rgPolicyMapping: *CERT_POLICY_MAPPING; }
export type CERT_POLICY_CONSTRAINTS_INFO = struct { fRequireExplicitPolicy: int; dwRequireExplicitPolicySkipCerts: ulong; fInhibitPolicyMapping: int; dwInhibitPolicyMappingSkipCerts: ulong; }
export type CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY = struct { pszObjId: *char; cValue: ulong; rgValue: *CRYPT_ATTR_BLOB; }
export type CRYPT_CONTENT_INFO = struct { pszObjId: *char; Content: CRYPT_ATTR_BLOB; }
export type CRYPT_SEQUENCE_OF_ANY = struct { cValue: ulong; rgValue: *CRYPT_ATTR_BLOB; }
export type CERT_AUTHORITY_KEY_ID2_INFO = struct { KeyId: CRYPT_ATTR_BLOB; AuthorityCertIssuer: CERT_ALT_NAME_INFO; AuthorityCertSerialNumber: CRYPT_ATTR_BLOB; }
export type CERT_ACCESS_DESCRIPTION = struct { pszAccessMethod: *char; AccessLocation: CERT_ALT_NAME_ENTRY; }
export type CERT_SUBJECT_INFO_ACCESS = struct { cAccDescr: ulong; rgAccDescr: *CERT_ACCESS_DESCRIPTION; }
export type CRL_DIST_POINT_NAME = struct { dwDistPointNameChoice: ulong; _2: struct #union { FullName: CERT_ALT_NAME_INFO; }; }
export type CRL_DIST_POINT = struct { DistPointName: CRL_DIST_POINT_NAME; ReasonFlags: CRYPT_BIT_BLOB; CRLIssuer: CERT_ALT_NAME_INFO; }
export type CRL_DIST_POINTS_INFO = struct { cDistPoint: ulong; rgDistPoint: *CRL_DIST_POINT; }
export type CROSS_CERT_DIST_POINTS_INFO = struct { dwSyncDeltaTime: ulong; cDistPoint: ulong; rgDistPoint: *CERT_ALT_NAME_INFO; }
export type CERT_PAIR = struct { Forward: CRYPT_ATTR_BLOB; Reverse: CRYPT_ATTR_BLOB; }
export type CRL_ISSUING_DIST_POINT = struct { DistPointName: CRL_DIST_POINT_NAME; fOnlyContainsUserCerts: int; fOnlyContainsCACerts: int; OnlySomeReasonFlags: CRYPT_BIT_BLOB; fIndirectCRL: int; }
export type CERT_GENERAL_SUBTREE = struct { Base: CERT_ALT_NAME_ENTRY; dwMinimum: ulong; fMaximum: int; dwMaximum: ulong; }
export type CERT_NAME_CONSTRAINTS_INFO = struct { cPermittedSubtree: ulong; rgPermittedSubtree: *CERT_GENERAL_SUBTREE; cExcludedSubtree: ulong; rgExcludedSubtree: *CERT_GENERAL_SUBTREE; }
export type CERT_DSS_PARAMETERS = struct { p: CRYPT_ATTR_BLOB; q: CRYPT_ATTR_BLOB; g: CRYPT_ATTR_BLOB; }
export type CERT_DH_PARAMETERS = struct { p: CRYPT_ATTR_BLOB; g: CRYPT_ATTR_BLOB; }
export type CERT_ECC_SIGNATURE = struct { r: CRYPT_ATTR_BLOB; s: CRYPT_ATTR_BLOB; }
export type CERT_X942_DH_VALIDATION_PARAMS = struct { seed: CRYPT_BIT_BLOB; pgenCounter: ulong; }
export type CERT_X942_DH_PARAMETERS = struct { p: CRYPT_ATTR_BLOB; g: CRYPT_ATTR_BLOB; q: CRYPT_ATTR_BLOB; j: CRYPT_ATTR_BLOB; pValidationParams: *CERT_X942_DH_VALIDATION_PARAMS; }
export type CRYPT_X942_OTHER_INFO = struct { pszContentEncryptionObjId: *char; rgbCounter: [4; char]; rgbKeyLength: [4; char]; PubInfo: CRYPT_ATTR_BLOB; }
export type CRYPT_ECC_CMS_SHARED_INFO = struct { Algorithm: CRYPT_ALGORITHM_IDENTIFIER; EntityUInfo: CRYPT_ATTR_BLOB; rgbSuppPubInfo: [4; char]; }
export type CRYPT_RC2_CBC_PARAMETERS = struct { dwVersion: ulong; fIV: int; rgbIV: [8; char]; }
export type CRYPT_SMIME_CAPABILITY = struct { pszObjId: *char; Parameters: CRYPT_ATTR_BLOB; }
export type CRYPT_SMIME_CAPABILITIES = struct { cCapability: ulong; rgCapability: *CRYPT_SMIME_CAPABILITY; }
export type CERT_QC_STATEMENT = struct { pszStatementId: *char; StatementInfo: CRYPT_ATTR_BLOB; }
export type CERT_QC_STATEMENTS_EXT_INFO = struct { cStatement: ulong; rgStatement: *CERT_QC_STATEMENT; }
export type CRYPT_MASK_GEN_ALGORITHM = struct { pszObjId: *char; HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; }
export type CRYPT_RSA_SSA_PSS_PARAMETERS = struct { HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; MaskGenAlgorithm: CRYPT_MASK_GEN_ALGORITHM; dwSaltLength: ulong; dwTrailerField: ulong; }
export type CRYPT_PSOURCE_ALGORITHM = struct { pszObjId: *char; EncodingParameters: CRYPT_ATTR_BLOB; }
export type CRYPT_RSAES_OAEP_PARAMETERS = struct { HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; MaskGenAlgorithm: CRYPT_MASK_GEN_ALGORITHM; PSourceAlgorithm: CRYPT_PSOURCE_ALGORITHM; }
export type CMC_TAGGED_ATTRIBUTE = struct { dwBodyPartID: ulong; Attribute: CRYPT_ATTRIBUTE; }
export type CMC_TAGGED_CERT_REQUEST = struct { dwBodyPartID: ulong; SignedCertRequest: CRYPT_ATTR_BLOB; }
export type CMC_TAGGED_REQUEST = struct { dwTaggedRequestChoice: ulong; _2: struct #union { pTaggedCertRequest: *CMC_TAGGED_CERT_REQUEST; }; }
export type CMC_TAGGED_CONTENT_INFO = struct { dwBodyPartID: ulong; EncodedContentInfo: CRYPT_ATTR_BLOB; }
export type CMC_TAGGED_OTHER_MSG = struct { dwBodyPartID: ulong; pszObjId: *char; Value: CRYPT_ATTR_BLOB; }
export type CMC_DATA_INFO = struct { cTaggedAttribute: ulong; rgTaggedAttribute: *CMC_TAGGED_ATTRIBUTE; cTaggedRequest: ulong; rgTaggedRequest: *CMC_TAGGED_REQUEST; cTaggedContentInfo: ulong; rgTaggedContentInfo: *CMC_TAGGED_CONTENT_INFO; cTaggedOtherMsg: ulong; rgTaggedOtherMsg: *CMC_TAGGED_OTHER_MSG; }
export type CMC_RESPONSE_INFO = struct { cTaggedAttribute: ulong; rgTaggedAttribute: *CMC_TAGGED_ATTRIBUTE; cTaggedContentInfo: ulong; rgTaggedContentInfo: *CMC_TAGGED_CONTENT_INFO; cTaggedOtherMsg: ulong; rgTaggedOtherMsg: *CMC_TAGGED_OTHER_MSG; }
export type CMC_PEND_INFO = struct { PendToken: CRYPT_ATTR_BLOB; PendTime: FILETIME; }
export type CMC_STATUS_INFO = struct { dwStatus: ulong; cBodyList: ulong; rgdwBodyList: *ulong; pwszStatusString: *ushort; dwOtherInfoChoice: ulong; _6: struct #union { dwFailInfo: ulong; pPendInfo: *CMC_PEND_INFO; }; }
export type CMC_ADD_EXTENSIONS_INFO = struct { dwCmcDataReference: ulong; cCertReference: ulong; rgdwCertReference: *ulong; cExtension: ulong; rgExtension: *CERT_EXTENSION; }
export type CMC_ADD_ATTRIBUTES_INFO = struct { dwCmcDataReference: ulong; cCertReference: ulong; rgdwCertReference: *ulong; cAttribute: ulong; rgAttribute: *CRYPT_ATTRIBUTE; }
export type CERT_TEMPLATE_EXT = struct { pszObjId: *char; dwMajorVersion: ulong; fMinorVersion: int; dwMinorVersion: ulong; }
export type CERT_HASHED_URL = struct { HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; Hash: CRYPT_ATTR_BLOB; pwszUrl: *ushort; }
export type CERT_LOGOTYPE_DETAILS = struct { pwszMimeType: *ushort; cHashedUrl: ulong; rgHashedUrl: *CERT_HASHED_URL; }
export type CERT_LOGOTYPE_REFERENCE = struct { cHashedUrl: ulong; rgHashedUrl: *CERT_HASHED_URL; }
export type CERT_LOGOTYPE_IMAGE_INFO = struct { dwLogotypeImageInfoChoice: ulong; dwFileSize: ulong; dwXSize: ulong; dwYSize: ulong; dwLogotypeImageResolutionChoice: ulong; _6: struct #union { dwNumBits: ulong; dwTableSize: ulong; }; pwszLanguage: *ushort; }
export type CERT_LOGOTYPE_IMAGE = struct { LogotypeDetails: CERT_LOGOTYPE_DETAILS; pLogotypeImageInfo: *CERT_LOGOTYPE_IMAGE_INFO; }
export type CERT_LOGOTYPE_AUDIO_INFO = struct { dwFileSize: ulong; dwPlayTime: ulong; dwChannels: ulong; dwSampleRate: ulong; pwszLanguage: *ushort; }
export type CERT_LOGOTYPE_AUDIO = struct { LogotypeDetails: CERT_LOGOTYPE_DETAILS; pLogotypeAudioInfo: *CERT_LOGOTYPE_AUDIO_INFO; }
export type CERT_LOGOTYPE_DATA = struct { cLogotypeImage: ulong; rgLogotypeImage: *CERT_LOGOTYPE_IMAGE; cLogotypeAudio: ulong; rgLogotypeAudio: *CERT_LOGOTYPE_AUDIO; }
export type CERT_LOGOTYPE_INFO = struct { dwLogotypeInfoChoice: ulong; _2: struct #union { pLogotypeDirectInfo: *CERT_LOGOTYPE_DATA; pLogotypeIndirectInfo: *CERT_LOGOTYPE_REFERENCE; }; }
export type CERT_OTHER_LOGOTYPE_INFO = struct { pszObjId: *char; LogotypeInfo: CERT_LOGOTYPE_INFO; }
export type CERT_LOGOTYPE_EXT_INFO = struct { cCommunityLogo: ulong; rgCommunityLogo: *CERT_LOGOTYPE_INFO; pIssuerLogo: *CERT_LOGOTYPE_INFO; pSubjectLogo: *CERT_LOGOTYPE_INFO; cOtherLogo: ulong; rgOtherLogo: *CERT_OTHER_LOGOTYPE_INFO; }
export type CERT_BIOMETRIC_DATA = struct { dwTypeOfBiometricDataChoice: ulong; _2: struct #union { dwPredefined: ulong; pszObjId: *char; }; HashedUrl: CERT_HASHED_URL; }
export type CERT_BIOMETRIC_EXT_INFO = struct { cBiometricData: ulong; rgBiometricData: *CERT_BIOMETRIC_DATA; }
export type OCSP_SIGNATURE_INFO = struct { SignatureAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; Signature: CRYPT_BIT_BLOB; cCertEncoded: ulong; rgCertEncoded: *CRYPT_ATTR_BLOB; }
export type OCSP_SIGNED_REQUEST_INFO = struct { ToBeSigned: CRYPT_ATTR_BLOB; pOptionalSignatureInfo: *OCSP_SIGNATURE_INFO; }
export type OCSP_CERT_ID = struct { HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; IssuerNameHash: CRYPT_ATTR_BLOB; IssuerKeyHash: CRYPT_ATTR_BLOB; SerialNumber: CRYPT_ATTR_BLOB; }
export type OCSP_REQUEST_ENTRY = struct { CertId: OCSP_CERT_ID; cExtension: ulong; rgExtension: *CERT_EXTENSION; }
export type OCSP_REQUEST_INFO = struct { dwVersion: ulong; pRequestorName: *CERT_ALT_NAME_ENTRY; cRequestEntry: ulong; rgRequestEntry: *OCSP_REQUEST_ENTRY; cExtension: ulong; rgExtension: *CERT_EXTENSION; }
export type OCSP_RESPONSE_INFO = struct { dwStatus: ulong; pszObjId: *char; Value: CRYPT_ATTR_BLOB; }
export type OCSP_BASIC_SIGNED_RESPONSE_INFO = struct { ToBeSigned: CRYPT_ATTR_BLOB; SignatureInfo: OCSP_SIGNATURE_INFO; }
export type OCSP_BASIC_REVOKED_INFO = struct { RevocationDate: FILETIME; dwCrlReasonCode: ulong; }
export type OCSP_BASIC_RESPONSE_ENTRY = struct { CertId: OCSP_CERT_ID; dwCertStatus: ulong; _3: struct #union { pRevokedInfo: *OCSP_BASIC_REVOKED_INFO; }; ThisUpdate: FILETIME; NextUpdate: FILETIME; cExtension: ulong; rgExtension: *CERT_EXTENSION; }
export type OCSP_BASIC_RESPONSE_INFO = struct { dwVersion: ulong; dwResponderIdChoice: ulong; _3: struct #union { ByNameResponderId: CRYPT_ATTR_BLOB; ByKeyResponderId: CRYPT_ATTR_BLOB; }; ProducedAt: FILETIME; cResponseEntry: ulong; rgResponseEntry: *OCSP_BASIC_RESPONSE_ENTRY; cExtension: ulong; rgExtension: *CERT_EXTENSION; }
export type CERT_SUPPORTED_ALGORITHM_INFO = struct { Algorithm: CRYPT_ALGORITHM_IDENTIFIER; IntendedKeyUsage: CRYPT_BIT_BLOB; IntendedCertPolicies: CERT_POLICIES_INFO; }
export type CERT_TPM_SPECIFICATION_INFO = struct { pwszFamily: *ushort; dwLevel: ulong; dwRevision: ulong; }
export type CRYPT_OID_FUNC_ENTRY = struct { pszOID: *char; pvFuncAddr: *; }
export type CRYPT_OID_INFO = struct { cbSize: ulong; pszOID: *char; pwszName: *ushort; dwGroupId: ulong; _5: struct #union { dwValue: ulong; Algid: uint; dwLength: ulong; }; ExtraInfo: CRYPT_ATTR_BLOB; }
export type CERT_STRONG_SIGN_SERIALIZED_INFO = struct { dwFlags: ulong; pwszCNGSignHashAlgids: *ushort; pwszCNGPubKeyMinBitLengths: *ushort; }
export type CERT_STRONG_SIGN_PARA = struct { cbSize: ulong; dwInfoChoice: ulong; _3: struct #union { pvInfo: *; pSerializedInfo: *CERT_STRONG_SIGN_SERIALIZED_INFO; pszOID: *char; }; }
export type CERT_ISSUER_SERIAL_NUMBER = struct { Issuer: CRYPT_ATTR_BLOB; SerialNumber: CRYPT_ATTR_BLOB; }
export type CERT_ID = struct { dwIdChoice: ulong; _2: struct #union { IssuerSerialNumber: CERT_ISSUER_SERIAL_NUMBER; KeyId: CRYPT_ATTR_BLOB; HashId: CRYPT_ATTR_BLOB; }; }
export type CMSG_SIGNER_ENCODE_INFO = struct { cbSize: ulong; pCertInfo: *CERT_INFO; _3: struct #union { hCryptProv: uint64; hNCryptKey: uint64; }; dwKeySpec: ulong; HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; pvHashAuxInfo: *; cAuthAttr: ulong; rgAuthAttr: *CRYPT_ATTRIBUTE; cUnauthAttr: ulong; rgUnauthAttr: *CRYPT_ATTRIBUTE; }
export type CMSG_SIGNED_ENCODE_INFO = struct { cbSize: ulong; cSigners: ulong; rgSigners: *CMSG_SIGNER_ENCODE_INFO; cCertEncoded: ulong; rgCertEncoded: *CRYPT_ATTR_BLOB; cCrlEncoded: ulong; rgCrlEncoded: *CRYPT_ATTR_BLOB; }
export type CMSG_RECIPIENT_ENCODE_INFO
export type CMSG_ENVELOPED_ENCODE_INFO = struct { cbSize: ulong; hCryptProv: uint64; ContentEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; pvEncryptionAuxInfo: *; cRecipients: ulong; rgpRecipients: **CERT_INFO; }
export type CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO = struct { cbSize: ulong; KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; pvKeyEncryptionAuxInfo: *; hCryptProv: uint64; RecipientPublicKey: CRYPT_BIT_BLOB; RecipientId: CERT_ID; }
export type CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO = struct { cbSize: ulong; RecipientPublicKey: CRYPT_BIT_BLOB; RecipientId: CERT_ID; Date: FILETIME; pOtherAttr: *CRYPT_ATTRIBUTE_TYPE_VALUE; }
export type CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO = struct { cbSize: ulong; KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; pvKeyEncryptionAuxInfo: *; KeyWrapAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; pvKeyWrapAuxInfo: *; hCryptProv: uint64; dwKeySpec: ulong; dwKeyChoice: ulong; _9: struct #union { pEphemeralAlgorithm: *CRYPT_ALGORITHM_IDENTIFIER; pSenderId: *CERT_ID; }; UserKeyingMaterial: CRYPT_ATTR_BLOB; cRecipientEncryptedKeys: ulong; rgpRecipientEncryptedKeys: **CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO; }
export type CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO = struct { cbSize: ulong; KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; pvKeyEncryptionAuxInfo: *; hCryptProv: uint64; dwKeyChoice: ulong; _6: struct #union { hKeyEncryptionKey: uint64; pvKeyEncryptionKey: *; }; KeyId: CRYPT_ATTR_BLOB; Date: FILETIME; pOtherAttr: *CRYPT_ATTRIBUTE_TYPE_VALUE; }
export type CMSG_RC2_AUX_INFO = struct { cbSize: ulong; dwBitLen: ulong; }
export type CMSG_SP3_COMPATIBLE_AUX_INFO = struct { cbSize: ulong; dwFlags: ulong; }
export type CMSG_RC4_AUX_INFO = struct { cbSize: ulong; dwBitLen: ulong; }
export type CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO = struct { cbSize: ulong; SignedInfo: CMSG_SIGNED_ENCODE_INFO; EnvelopedInfo: CMSG_ENVELOPED_ENCODE_INFO; }
export type CMSG_HASHED_ENCODE_INFO = struct { cbSize: ulong; hCryptProv: uint64; HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; pvHashAuxInfo: *; }
export type CMSG_ENCRYPTED_ENCODE_INFO = struct { cbSize: ulong; ContentEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; pvEncryptionAuxInfo: *; }
export type CMSG_STREAM_INFO = struct { cbContent: ulong; pfnStreamOutput: def (*, *char, ulong, int) -> (int); pvArg: *; }
export type CMSG_SIGNER_INFO = struct { dwVersion: ulong; Issuer: CRYPT_ATTR_BLOB; SerialNumber: CRYPT_ATTR_BLOB; HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; HashEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; EncryptedHash: CRYPT_ATTR_BLOB; AuthAttrs: CRYPT_ATTRIBUTES; UnauthAttrs: CRYPT_ATTRIBUTES; }
export type CMSG_CMS_SIGNER_INFO = struct { dwVersion: ulong; SignerId: CERT_ID; HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; HashEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; EncryptedHash: CRYPT_ATTR_BLOB; AuthAttrs: CRYPT_ATTRIBUTES; UnauthAttrs: CRYPT_ATTRIBUTES; }
export type CMSG_KEY_TRANS_RECIPIENT_INFO = struct { dwVersion: ulong; RecipientId: CERT_ID; KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; EncryptedKey: CRYPT_ATTR_BLOB; }
export type CMSG_RECIPIENT_ENCRYPTED_KEY_INFO = struct { RecipientId: CERT_ID; EncryptedKey: CRYPT_ATTR_BLOB; Date: FILETIME; pOtherAttr: *CRYPT_ATTRIBUTE_TYPE_VALUE; }
export type CMSG_KEY_AGREE_RECIPIENT_INFO = struct { dwVersion: ulong; dwOriginatorChoice: ulong; _3: struct #union { OriginatorCertId: CERT_ID; OriginatorPublicKeyInfo: CERT_PUBLIC_KEY_INFO; }; UserKeyingMaterial: CRYPT_ATTR_BLOB; KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; cRecipientEncryptedKeys: ulong; rgpRecipientEncryptedKeys: **CMSG_RECIPIENT_ENCRYPTED_KEY_INFO; }
export type CMSG_MAIL_LIST_RECIPIENT_INFO = struct { dwVersion: ulong; KeyId: CRYPT_ATTR_BLOB; KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; EncryptedKey: CRYPT_ATTR_BLOB; Date: FILETIME; pOtherAttr: *CRYPT_ATTRIBUTE_TYPE_VALUE; }
export type CMSG_CMS_RECIPIENT_INFO = struct { dwRecipientChoice: ulong; _2: struct #union { pKeyTrans: *CMSG_KEY_TRANS_RECIPIENT_INFO; pKeyAgree: *CMSG_KEY_AGREE_RECIPIENT_INFO; pMailList: *CMSG_MAIL_LIST_RECIPIENT_INFO; }; }
export type CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA = struct { cbSize: ulong; hCryptProv: uint64; dwSignerIndex: ulong; dwSignerType: ulong; pvSigner: *; }
export type CMSG_CTRL_DECRYPT_PARA = struct { cbSize: ulong; _2: struct #union { hCryptProv: uint64; hNCryptKey: uint64; }; dwKeySpec: ulong; dwRecipientIndex: ulong; }
export type CMSG_CTRL_KEY_TRANS_DECRYPT_PARA = struct { cbSize: ulong; _2: struct #union { hCryptProv: uint64; hNCryptKey: uint64; }; dwKeySpec: ulong; pKeyTrans: *CMSG_KEY_TRANS_RECIPIENT_INFO; dwRecipientIndex: ulong; }
export type CMSG_CTRL_KEY_AGREE_DECRYPT_PARA = struct { cbSize: ulong; _2: struct #union { hCryptProv: uint64; hNCryptKey: uint64; }; dwKeySpec: ulong; pKeyAgree: *CMSG_KEY_AGREE_RECIPIENT_INFO; dwRecipientIndex: ulong; dwRecipientEncryptedKeyIndex: ulong; OriginatorPublicKey: CRYPT_BIT_BLOB; }
export type CMSG_CTRL_MAIL_LIST_DECRYPT_PARA = struct { cbSize: ulong; hCryptProv: uint64; pMailList: *CMSG_MAIL_LIST_RECIPIENT_INFO; dwRecipientIndex: ulong; dwKeyChoice: ulong; _6: struct #union { hKeyEncryptionKey: uint64; pvKeyEncryptionKey: *; }; }
export type CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA = struct { cbSize: ulong; dwSignerIndex: ulong; blob: CRYPT_ATTR_BLOB; }
export type CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA = struct { cbSize: ulong; dwSignerIndex: ulong; dwUnauthAttrIndex: ulong; }
export type CMSG_CONTENT_ENCRYPT_INFO = struct { cbSize: ulong; hCryptProv: uint64; ContentEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; pvEncryptionAuxInfo: *; cRecipients: ulong; rgCmsRecipients: *s__CMSG_RECIPIENT_ENCODE_INFO; pfnAlloc: *; pfnFree: def (*) -> (); dwEncryptFlags: ulong; _10: struct #union { hContentEncryptKey: uint64; hCNGContentEncryptKey: *; }; dwFlags: ulong; fCNG: int; pbCNGContentEncryptKeyObject: *char; pbContentEncryptKey: *char; cbContentEncryptKey: ulong; }
export type CMSG_KEY_TRANS_ENCRYPT_INFO = struct { cbSize: ulong; dwRecipientIndex: ulong; KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; EncryptedKey: CRYPT_ATTR_BLOB; dwFlags: ulong; }
export type CMSG_KEY_AGREE_KEY_ENCRYPT_INFO = struct { cbSize: ulong; EncryptedKey: CRYPT_ATTR_BLOB; }
export type CMSG_KEY_AGREE_ENCRYPT_INFO = struct { cbSize: ulong; dwRecipientIndex: ulong; KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; UserKeyingMaterial: CRYPT_ATTR_BLOB; dwOriginatorChoice: ulong; _6: struct #union { OriginatorCertId: CERT_ID; OriginatorPublicKeyInfo: CERT_PUBLIC_KEY_INFO; }; cKeyAgreeKeyEncryptInfo: ulong; rgpKeyAgreeKeyEncryptInfo: **CMSG_KEY_AGREE_KEY_ENCRYPT_INFO; dwFlags: ulong; }
export type CMSG_MAIL_LIST_ENCRYPT_INFO = struct { cbSize: ulong; dwRecipientIndex: ulong; KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; EncryptedKey: CRYPT_ATTR_BLOB; dwFlags: ulong; }
export type CMSG_CNG_CONTENT_DECRYPT_INFO = struct { cbSize: ulong; ContentEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; pfnAlloc: *; pfnFree: def (*) -> (); hNCryptKey: uint64; pbContentEncryptKey: *char; cbContentEncryptKey: ulong; hCNGContentEncryptKey: *; pbCNGContentEncryptKeyObject: *char; }
export type CERT_CONTEXT = struct { dwCertEncodingType: ulong; pbCertEncoded: *char; cbCertEncoded: ulong; pCertInfo: *CERT_INFO; hCertStore: *; }
export type CRL_CONTEXT = struct { dwCertEncodingType: ulong; pbCrlEncoded: *char; cbCrlEncoded: ulong; pCrlInfo: *CRL_INFO; hCertStore: *; }
export type CTL_CONTEXT = struct { dwMsgAndCertEncodingType: ulong; pbCtlEncoded: *char; cbCtlEncoded: ulong; pCtlInfo: *CTL_INFO; hCertStore: *; hCryptMsg: *; pbCtlContent: *char; cbCtlContent: ulong; }
export type CertKeyType = enum { KeyTypeOther = 0; KeyTypeVirtualSmartCard = 1; KeyTypePhysicalSmartCard = 2; KeyTypePassport = 3; KeyTypePassportRemote = 4; KeyTypePassportSmartCard = 5; KeyTypeHardware = 6; KeyTypeSoftware = 7; KeyTypeSelfSigned = 8; }
export type CRYPT_KEY_PROV_PARAM = struct { dwParam: ulong; pbData: *char; cbData: ulong; dwFlags: ulong; }
export type CRYPT_KEY_PROV_INFO = struct { pwszContainerName: *ushort; pwszProvName: *ushort; dwProvType: ulong; dwFlags: ulong; cProvParam: ulong; rgProvParam: *CRYPT_KEY_PROV_PARAM; dwKeySpec: ulong; }
export type CERT_KEY_CONTEXT = struct { cbSize: ulong; _2: struct #union { hCryptProv: uint64; hNCryptKey: uint64; }; dwKeySpec: ulong; }
export type ROOT_INFO_LUID = struct { LowPart: ulong; HighPart: long; }
export type CRYPT_SMART_CARD_ROOT_INFO = struct { rgbCardID: [16; char]; luid: ROOT_INFO_LUID; }
export type CERT_SYSTEM_STORE_RELOCATE_PARA = struct { _1: struct #union { hKeyBase: *s_HKEY__; pvBase: *; }; _5: struct #union { pvSystemStore: *; pszSystemStore: *char; pwszSystemStore: *ushort; }; }
export type CERT_REGISTRY_STORE_CLIENT_GPT_PARA = struct { hKeyBase: *s_HKEY__; pwszRegPath: *ushort; }
export type CERT_REGISTRY_STORE_ROAMING_PARA = struct { hKey: *s_HKEY__; pwszStoreDirectory: *ushort; }
export type CERT_LDAP_STORE_OPENED_PARA = struct { pvLdapSessionHandle: *; pwszLdapUrl: *ushort; }
export type CERT_STORE_PROV_INFO = struct { cbSize: ulong; cStoreProvFunc: ulong; rgpvStoreProvFunc: **; hStoreProv: *; dwStoreProvFlags: ulong; hStoreProvFuncAddr2: *; }
export type CERT_STORE_PROV_FIND_INFO = struct { cbSize: ulong; dwMsgAndCertEncodingType: ulong; dwFindFlags: ulong; dwFindType: ulong; pvFindPara: *; }
export type CRL_FIND_ISSUED_FOR_PARA = struct { pSubjectCert: *CERT_CONTEXT; pIssuerCert: *CERT_CONTEXT; }
export type CTL_ANY_SUBJECT_INFO = struct { SubjectAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; SubjectIdentifier: CRYPT_ATTR_BLOB; }
export type CTL_FIND_USAGE_PARA = struct { cbSize: ulong; SubjectUsage: CERT_ENHKEY_USAGE; ListIdentifier: CRYPT_ATTR_BLOB; pSigner: *CERT_INFO; }
export type CTL_FIND_SUBJECT_PARA = struct { cbSize: ulong; pUsagePara: *CTL_FIND_USAGE_PARA; dwSubjectType: ulong; pvSubject: *; }
export type CERT_CREATE_CONTEXT_PARA = struct { cbSize: ulong; pfnFree: def (*) -> (); pvFree: *; pfnSort: def (ulong, ulong, ulong, *) -> (int); pvSort: *; }
export type CERT_SYSTEM_STORE_INFO = struct { cbSize: ulong; }
export type CERT_PHYSICAL_STORE_INFO = struct { cbSize: ulong; pszOpenStoreProvider: *char; dwOpenEncodingType: ulong; dwOpenFlags: ulong; OpenParameters: CRYPT_ATTR_BLOB; dwFlags: ulong; dwPriority: ulong; }
export type CTL_VERIFY_USAGE_PARA = struct { cbSize: ulong; ListIdentifier: CRYPT_ATTR_BLOB; cCtlStore: ulong; rghCtlStore: **; cSignerStore: ulong; rghSignerStore: **; }
export type CTL_VERIFY_USAGE_STATUS = struct { cbSize: ulong; dwError: ulong; dwFlags: ulong; ppCtl: **CTL_CONTEXT; dwCtlEntryIndex: ulong; ppSigner: **CERT_CONTEXT; dwSignerIndex: ulong; }
export type CERT_REVOCATION_CRL_INFO = struct { cbSize: ulong; pBaseCrlContext: *CRL_CONTEXT; pDeltaCrlContext: *CRL_CONTEXT; pCrlEntry: *CRL_ENTRY; fDeltaCrlEntry: int; }
export type CERT_REVOCATION_CHAIN_PARA
export type CERT_REVOCATION_PARA = struct { cbSize: ulong; pIssuerCert: *CERT_CONTEXT; cCertStore: ulong; rgCertStore: **; hCrlStore: *; pftTimeToUse: *FILETIME; }
export type CERT_REVOCATION_STATUS = struct { cbSize: ulong; dwIndex: ulong; dwError: ulong; dwReason: ulong; fHasFreshnessTime: int; dwFreshnessTime: ulong; }
export type CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO = struct { CertSignHashCNGAlgPropData: CRYPT_ATTR_BLOB; CertIssuerPubKeyBitLengthPropData: CRYPT_ATTR_BLOB; }
export type CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO = struct { cCNGHashAlgid: ulong; rgpwszCNGHashAlgid: **ushort; dwWeakIndex: ulong; }
export type CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA = struct { cOID: ulong; rgpszOID: **char; }
export type CRYPT_SIGN_MESSAGE_PARA = struct { cbSize: ulong; dwMsgEncodingType: ulong; pSigningCert: *CERT_CONTEXT; HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; pvHashAuxInfo: *; cMsgCert: ulong; rgpMsgCert: **CERT_CONTEXT; cMsgCrl: ulong; rgpMsgCrl: **CRL_CONTEXT; cAuthAttr: ulong; rgAuthAttr: *CRYPT_ATTRIBUTE; cUnauthAttr: ulong; rgUnauthAttr: *CRYPT_ATTRIBUTE; dwFlags: ulong; dwInnerContentType: ulong; }
export type CRYPT_VERIFY_MESSAGE_PARA = struct { cbSize: ulong; dwMsgAndCertEncodingType: ulong; hCryptProv: uint64; pfnGetSignerCertificate: def (*, ulong, *CERT_INFO, *) -> (*CERT_CONTEXT); pvGetArg: *; }
export type CRYPT_ENCRYPT_MESSAGE_PARA = struct { cbSize: ulong; dwMsgEncodingType: ulong; hCryptProv: uint64; ContentEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; pvEncryptionAuxInfo: *; dwFlags: ulong; dwInnerContentType: ulong; }
export type CRYPT_DECRYPT_MESSAGE_PARA = struct { cbSize: ulong; dwMsgAndCertEncodingType: ulong; cCertStore: ulong; rghCertStore: **; }
export type CRYPT_HASH_MESSAGE_PARA = struct { cbSize: ulong; dwMsgEncodingType: ulong; hCryptProv: uint64; HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; pvHashAuxInfo: *; }
export type CRYPT_KEY_SIGN_MESSAGE_PARA = struct { cbSize: ulong; dwMsgAndCertEncodingType: ulong; _3: struct #union { hCryptProv: uint64; hNCryptKey: uint64; }; dwKeySpec: ulong; HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; pvHashAuxInfo: *; PubKeyAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; }
export type CRYPT_KEY_VERIFY_MESSAGE_PARA = struct { cbSize: ulong; dwMsgEncodingType: ulong; hCryptProv: uint64; }
export type CERT_CHAIN = struct { cCerts: ulong; certs: *CRYPT_ATTR_BLOB; keyLocatorInfo: CRYPT_KEY_PROV_INFO; }
export type CRYPT_BLOB_ARRAY = struct { cBlob: ulong; rgBlob: *CRYPT_ATTR_BLOB; }
export type CRYPT_CREDENTIALS = struct { cbSize: ulong; pszCredentialsOid: *char; pvCredentials: *; }
export type CRYPT_PASSWORD_CREDENTIALSA = struct { cbSize: ulong; pszUsername: *char; pszPassword: *char; }
export type CRYPT_PASSWORD_CREDENTIALSW = struct { cbSize: ulong; pszUsername: *ushort; pszPassword: *ushort; }
export type CRYPTNET_URL_CACHE_PRE_FETCH_INFO = struct { cbSize: ulong; dwObjectType: ulong; dwError: ulong; dwReserved: ulong; ThisUpdateTime: FILETIME; NextUpdateTime: FILETIME; PublishTime: FILETIME; }
export type CRYPTNET_URL_CACHE_FLUSH_INFO = struct { cbSize: ulong; dwExemptSeconds: ulong; ExpireTime: FILETIME; }
export type CRYPTNET_URL_CACHE_RESPONSE_INFO = struct { cbSize: ulong; wResponseType: ushort; wResponseFlags: ushort; LastModifiedTime: FILETIME; dwMaxAge: ulong; pwszETag: *ushort; dwProxyId: ulong; }
export type CRYPT_RETRIEVE_AUX_INFO = struct { cbSize: ulong; pLastSyncTime: *FILETIME; dwMaxUrlRetrievalByteCount: ulong; pPreFetchInfo: *CRYPTNET_URL_CACHE_PRE_FETCH_INFO; pFlushInfo: *CRYPTNET_URL_CACHE_FLUSH_INFO; ppResponseInfo: **CRYPTNET_URL_CACHE_RESPONSE_INFO; pwszCacheFileNamePrefix: *ushort; pftCacheResync: *FILETIME; fProxyCacheRetrieval: int; dwHttpStatusCode: ulong; ppwszErrorResponseHeaders: **ushort; ppErrorContentBlob: **CRYPT_ATTR_BLOB; }
export type CRYPT_ASYNC_RETRIEVAL_COMPLETION = struct { pfnCompletion: def (*, ulong, *char, *char, *) -> (); pvCompletion: *; }
export type CRYPT_URL_ARRAY = struct { cUrl: ulong; rgwszUrl: **ushort; }
export type CRYPT_URL_INFO = struct { cbSize: ulong; dwSyncDeltaTime: ulong; cGroup: ulong; rgcGroupEntry: *ulong; }
export type CERT_CRL_CONTEXT_PAIR = struct { pCertContext: *CERT_CONTEXT; pCrlContext: *CRL_CONTEXT; }
export type CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO = struct { cbSize: ulong; iDeltaCrlIndicator: int; pftCacheResync: *FILETIME; pLastSyncTime: *FILETIME; pMaxAgeTime: *FILETIME; pChainPara: *s__CERT_REVOCATION_CHAIN_PARA; pDeltaCrlIndicator: *CRYPT_ATTR_BLOB; }
export type CERT_CHAIN_ENGINE_CONFIG = struct { cbSize: ulong; hRestrictedRoot: *; hRestrictedTrust: *; hRestrictedOther: *; cAdditionalStore: ulong; rghAdditionalStore: **; dwFlags: ulong; dwUrlRetrievalTimeout: ulong; MaximumCachedCertificates: ulong; CycleDetectionModulus: ulong; hExclusiveRoot: *; hExclusiveTrustedPeople: *; dwExclusiveFlags: ulong; }
export type CERT_TRUST_STATUS = struct { dwErrorStatus: ulong; dwInfoStatus: ulong; }
export type CERT_REVOCATION_INFO = struct { cbSize: ulong; dwRevocationResult: ulong; pszRevocationOid: *char; pvOidSpecificInfo: *; fHasFreshnessTime: int; dwFreshnessTime: ulong; pCrlInfo: *CERT_REVOCATION_CRL_INFO; }
export type CERT_TRUST_LIST_INFO = struct { cbSize: ulong; pCtlEntry: *CTL_ENTRY; pCtlContext: *CTL_CONTEXT; }
export type CERT_CHAIN_ELEMENT = struct { cbSize: ulong; pCertContext: *CERT_CONTEXT; TrustStatus: CERT_TRUST_STATUS; pRevocationInfo: *CERT_REVOCATION_INFO; pIssuanceUsage: *CERT_ENHKEY_USAGE; pApplicationUsage: *CERT_ENHKEY_USAGE; pwszExtendedErrorInfo: *ushort; }
export type CERT_SIMPLE_CHAIN = struct { cbSize: ulong; TrustStatus: CERT_TRUST_STATUS; cElement: ulong; rgpElement: **CERT_CHAIN_ELEMENT; pTrustListInfo: *CERT_TRUST_LIST_INFO; fHasRevocationFreshnessTime: int; dwRevocationFreshnessTime: ulong; }
export type CERT_CHAIN_CONTEXT
export type CERT_USAGE_MATCH = struct { dwType: ulong; Usage: CERT_ENHKEY_USAGE; }
export type CTL_USAGE_MATCH = struct { dwType: ulong; Usage: CERT_ENHKEY_USAGE; }
export type CERT_CHAIN_PARA = struct { cbSize: ulong; RequestedUsage: CERT_USAGE_MATCH; }
export type CRL_REVOCATION_INFO = struct { pCrlEntry: *CRL_ENTRY; pCrlContext: *CRL_CONTEXT; pCrlIssuerChain: *s__CERT_CHAIN_CONTEXT; }
export type CERT_CHAIN_FIND_BY_ISSUER_PARA = struct { cbSize: ulong; pszUsageIdentifier: *char; dwKeySpec: ulong; dwAcquirePrivateKeyFlags: ulong; cIssuer: ulong; rgIssuer: *CRYPT_ATTR_BLOB; pfnFindCallback: def (*CERT_CONTEXT, *) -> (int); pvFindArg: *; }
export type CERT_CHAIN_POLICY_PARA = struct { cbSize: ulong; dwFlags: ulong; pvExtraPolicyPara: *; }
export type CERT_CHAIN_POLICY_STATUS = struct { cbSize: ulong; dwError: ulong; lChainIndex: long; lElementIndex: long; pvExtraPolicyStatus: *; }
export type AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA = struct { cbSize: ulong; dwRegPolicySettings: ulong; pSignerInfo: *CMSG_SIGNER_INFO; }
export type AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS = struct { cbSize: ulong; fCommercial: int; }
export type AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA = struct { cbSize: ulong; dwRegPolicySettings: ulong; fCommercial: int; }
export type SSL_EXTRA_CERT_CHAIN_POLICY_PARA = struct { _1: struct #union { cbStruct: ulong; cbSize: ulong; }; dwAuthType: ulong; fdwChecks: ulong; pwszServerName: *ushort; }
export type EV_EXTRA_CERT_CHAIN_POLICY_PARA = struct { cbSize: ulong; dwRootProgramQualifierFlags: ulong; }
export type EV_EXTRA_CERT_CHAIN_POLICY_STATUS = struct { cbSize: ulong; dwQualifiers: ulong; dwIssuanceUsageIndex: ulong; }
export type SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS = struct { cbSize: ulong; dwErrorLevel: ulong; dwErrorCategory: ulong; dwReserved: ulong; wszErrorText: [256; ushort]; }
export type SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA = struct { cbSize: ulong; dwReserved: ulong; pwszServerName: *ushort; rgpszHpkpValue: [2; *char]; }
export type SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA = struct { cbSize: ulong; dwReserved: ulong; pwszServerName: *ushort; }
export type SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS = struct { cbSize: ulong; lError: long; wszErrorText: [512; ushort]; }
export type CRYPT_PKCS12_PBE_PARAMS = struct { iIterations: int; cbSalt: ulong; }
export type PKCS12_PBES2_EXPORT_PARAMS = struct { dwSize: ulong; hNcryptDescriptor: *; pwszPbes2Alg: *ushort; }
export type CERT_SERVER_OCSP_RESPONSE_CONTEXT
export type CERT_SERVER_OCSP_RESPONSE_OPEN_PARA = struct { cbSize: ulong; dwFlags: ulong; pcbUsedSize: *ulong; pwszOcspDirectory: *ushort; pfnUpdateCallback: def (*s__CERT_CHAIN_CONTEXT, *s__CERT_SERVER_OCSP_RESPONSE_CONTEXT, *CRL_CONTEXT, *CRL_CONTEXT, *, ulong) -> (); pvUpdateCallbackArg: *; }
export type CERT_SELECT_CHAIN_PARA = struct { hChainEngine: *; pTime: *FILETIME; hAdditionalStore: *; pChainPara: *CERT_CHAIN_PARA; dwFlags: ulong; }
export type CERT_SELECT_CRITERIA = struct { dwType: ulong; cPara: ulong; ppPara: **; }
export type CRYPT_TIMESTAMP_REQUEST = struct { dwVersion: ulong; HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; HashedMessage: CRYPT_ATTR_BLOB; pszTSAPolicyId: *char; Nonce: CRYPT_ATTR_BLOB; fCertReq: int; cExtension: ulong; rgExtension: *CERT_EXTENSION; }
export type CRYPT_TIMESTAMP_RESPONSE = struct { dwStatus: ulong; cFreeText: ulong; rgFreeText: **ushort; FailureInfo: CRYPT_BIT_BLOB; ContentInfo: CRYPT_ATTR_BLOB; }
export type CRYPT_TIMESTAMP_ACCURACY = struct { dwSeconds: ulong; dwMillis: ulong; dwMicros: ulong; }
export type CRYPT_TIMESTAMP_INFO = struct { dwVersion: ulong; pszTSAPolicyId: *char; HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER; HashedMessage: CRYPT_ATTR_BLOB; SerialNumber: CRYPT_ATTR_BLOB; ftTime: FILETIME; pvAccuracy: *CRYPT_TIMESTAMP_ACCURACY; fOrdering: int; Nonce: CRYPT_ATTR_BLOB; Tsa: CRYPT_ATTR_BLOB; cExtension: ulong; rgExtension: *CERT_EXTENSION; }
export type CRYPT_TIMESTAMP_CONTEXT = struct { cbEncoded: ulong; pbEncoded: *char; pTimeStamp: *CRYPT_TIMESTAMP_INFO; }
export type CRYPT_TIMESTAMP_PARA = struct { pszTSAPolicyId: *char; fRequestCerts: int; Nonce: CRYPT_ATTR_BLOB; cExtension: ulong; rgExtension: *CERT_EXTENSION; }
export type CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE = struct { cbSize: ulong; pfnGet: def (*, *CRYPT_ATTR_BLOB, ulong, *CRYPT_ATTR_BLOB, **char, *ulong, **ushort, **CRYPT_ATTR_BLOB) -> (int); pfnRelease: def (ulong, *) -> (); pfnFreePassword: def (*, *ushort) -> (); pfnFree: def (*, *char) -> (); pfnFreeIdentifier: def (*, *CRYPT_ATTR_BLOB) -> (); }
export type CRYPTPROTECT_PROMPTSTRUCT = struct { cbSize: ulong; dwPromptFlags: ulong; hwndApp: *s_HWND__; szPrompt: *ushort; }
export type EFS_CERTIFICATE_BLOB = struct { dwCertEncodingType: ulong; cbData: ulong; pbData: *char; }
export type EFS_HASH_BLOB = struct { cbData: ulong; pbData: *char; }
export type EFS_RPC_BLOB = struct { cbData: ulong; pbData: *char; }
export type EFS_PIN_BLOB = struct { cbPadding: ulong; cbData: ulong; pbData: *char; }
export type EFS_KEY_INFO = struct { dwVersion: ulong; Entropy: ulong; Algorithm: uint; KeyLength: ulong; }
export type EFS_COMPATIBILITY_INFO = struct { EfsVersion: ulong; }
export type EFS_VERSION_INFO = struct { EfsVersion: ulong; SubVersion: ulong; }
export type EFS_DECRYPTION_STATUS_INFO = struct { dwDecryptionError: ulong; dwHashOffset: ulong; cbHash: ulong; }
export type EFS_ENCRYPTION_STATUS_INFO = struct { bHasCurrentKey: int; dwEncryptionError: ulong; }
export type ENCRYPTION_CERTIFICATE = struct { cbTotalLength: ulong; pUserSid: *SID; pCertBlob: *EFS_CERTIFICATE_BLOB; }
export type ENCRYPTION_CERTIFICATE_HASH = struct { cbTotalLength: ulong; pUserSid: *SID; pHash: *EFS_HASH_BLOB; lpDisplayInformation: *ushort; }
export type ENCRYPTION_CERTIFICATE_HASH_LIST = struct { nCert_Hash: ulong; pUsers: **ENCRYPTION_CERTIFICATE_HASH; }
export type ENCRYPTION_CERTIFICATE_LIST = struct { nUsers: ulong; pUsers: **ENCRYPTION_CERTIFICATE; }
export type ENCRYPTED_FILE_METADATA_SIGNATURE = struct { dwEfsAccessType: ulong; pCertificatesAdded: *ENCRYPTION_CERTIFICATE_HASH_LIST; pEncryptionCertificate: *ENCRYPTION_CERTIFICATE; pEfsStreamSignature: *EFS_RPC_BLOB; }
export type ENCRYPTION_PROTECTOR = struct { cbTotalLength: ulong; pUserSid: *SID; lpProtectorDescriptor: *ushort; }
export type ENCRYPTION_PROTECTOR_LIST = struct { nProtectors: ulong; pProtectors: **ENCRYPTION_PROTECTOR; }
export type RPC_IMPORT_CONTEXT_P = struct { LookupContext: *; ProposedHandle: *; Bindings: *RPC_BINDING_VECTOR; }
export type SCONTEXT_QUEUE = struct { NumberOfObjects: ulong; ArrayOfObjects: *struct { pad: [2; *]; userContext: *; }; }
export type ARRAY_INFO = struct { Dimension: long; BufferConformanceMark: *ulong; BufferVarianceMark: *ulong; MaxCountArray: *ulong; OffsetArray: *ulong; ActualCountArray: *ulong; }
export type MIDL_SYNTAX_INFO = struct { TransferSyntax: RPC_SYNTAX_IDENTIFIER; DispatchTable: *RPC_DISPATCH_TABLE; ProcString: *char; FmtStringOffset: *ushort; TypeString: *char; aUserMarshalQuadruple: *; pMethodProperties: *MIDL_INTERFACE_METHOD_PROPERTIES; pReserved2: uint64; }
export type MIDL_STUB_MESSAGE = struct { RpcMsg: *RPC_MESSAGE; Buffer: *char; BufferStart: *char; BufferEnd: *char; BufferMark: *char; BufferLength: ulong; MemorySize: ulong; Memory: *char; IsClient: char; Pad: char; uFlags2: ushort; ReuseBuffer: int; pAllocAllNodesContext: *s_NDR_ALLOC_ALL_NODES_CONTEXT; pPointerQueueState: *s_NDR_POINTER_QUEUE_STATE; IgnoreEmbeddedPointers: int; PointerBufferMark: *char; CorrDespIncrement: char; uFlags: char; UniquePtrCount: ushort; MaxCount: uint64; Offset: ulong; ActualCount: ulong; pfnAllocate: *; pfnFree: def (*) -> (); StackTop: *char; pPresentedType: *char; pTransmitType: *char; SavedHandle: *; StubDesc: *MIDL_STUB_DESC; FullPtrXlatTables: *FULL_PTR_XLAT_TABLES; FullPtrRefId: ulong; PointerLength: ulong; #bits(1) fInDontFree: int; #bits(1) fDontCallFreeInst: int; #bits(1) fUnused1: int; #bits(1) fHasReturn: int; #bits(1) fHasExtensions: int; #bits(1) fHasNewCorrDesc: int; #bits(1) fIsIn: int; #bits(1) fIsOut: int; #bits(1) fIsOicf: int; #bits(1) fBufferValid: int; #bits(1) fHasMemoryValidateCallback: int; #bits(1) fInFree: int; #bits(1) fNeedMCCP: int; #bits(3) fUnused2: int; #bits(16) fUnused3: int; dwDestContext: ulong; pvDestContext: *; SavedContextHandles: *struct { pad: [2; *]; userContext: *; }; ParamNumber: long; pRpcChannelBuffer: *s_IRpcChannelBuffer; pArrayInfo: *ARRAY_INFO; SizePtrCountArray: *ulong; SizePtrOffsetArray: *ulong; SizePtrLengthArray: *ulong; pArgQueue: *; dwStubPhase: ulong; LowStackMark: *; pAsyncMsg: *s__NDR_ASYNC_MESSAGE; pCorrInfo: *s__NDR_CORRELATION_INFO; pCorrMemory: *char; pMemoryList: *; pCSInfo: int64; ConformanceMark: *char; VarianceMark: *char; Unused: int64; pContext: *s__NDR_PROC_CONTEXT; ContextHandleHash: *; pUserMarshalList: *; Reserved51_3: int64; Reserved51_4: int64; Reserved51_5: int64; }
export type GENERIC_BINDING_ROUTINE_PAIR = struct { pfnBind: *; pfnUnbind: def (*, *char) -> (); }
export type GENERIC_BINDING_INFO = struct { pObj: *; Size: uint; pfnBind: *; pfnUnbind: def (*, *char) -> (); }
export type XMIT_ROUTINE_QUINTUPLE = struct { pfnTranslateToXmit: def (*MIDL_STUB_MESSAGE) -> (); pfnTranslateFromXmit: def (*MIDL_STUB_MESSAGE) -> (); pfnFreeXmit: def (*MIDL_STUB_MESSAGE) -> (); pfnFreeInst: def (*MIDL_STUB_MESSAGE) -> (); }
export type USER_MARSHAL_ROUTINE_QUADRUPLE = struct { pfnBufferSize: def (*ulong, ulong, *) -> (ulong); pfnMarshall: *char; pfnUnmarshall: *char; pfnFree: def (*ulong, *) -> (); }
export type USER_MARSHAL_CB_TYPE = enum { USER_MARSHAL_CB_BUFFER_SIZE; USER_MARSHAL_CB_MARSHALL; USER_MARSHAL_CB_UNMARSHALL; USER_MARSHAL_CB_FREE; }
export type USER_MARSHAL_CB = struct { Flags: ulong; pStubMsg: *MIDL_STUB_MESSAGE; pReserve: *char; Signature: ulong; CBType: USER_MARSHAL_CB_TYPE; pFormat: *char; pTypeFormat: *char; }
export type MALLOC_FREE_STRUCT = struct { pfnAllocate: *; pfnFree: def (*) -> (); }
export type COMM_FAULT_OFFSETS = struct { CommOffset: short; FaultOffset: short; }
export type IDL_CS_CONVERT = enum { IDL_CS_NO_CONVERT; IDL_CS_IN_PLACE_CONVERT; IDL_CS_NEW_BUFFER_CONVERT; }
export type NDR_CS_SIZE_CONVERT_ROUTINES = struct { pfnNetSize: def (*, ulong, ulong, *IDL_CS_CONVERT, *ulong, *ulong) -> (); pfnToNetCs: def (*, ulong, *, ulong, *char, *ulong, *ulong) -> (); pfnLocalSize: def (*, ulong, ulong, *IDL_CS_CONVERT, *ulong, *ulong) -> (); pfnFromNetCs: def (*, ulong, *char, ulong, ulong, *, *ulong, *ulong) -> (); }
export type NDR_CS_ROUTINES = struct { pSizeConvertRoutines: *NDR_CS_SIZE_CONVERT_ROUTINES; pTagGettingRoutines: *def (*, int, *ulong, *ulong, *ulong, *ulong) -> (); }
export type NDR_EXPR_DESC = struct { pOffset: *ushort; pFormatExpr: *char; }
export type MIDL_STUB_DESC = struct { RpcInterfaceInformation: *; pfnAllocate: *; pfnFree: def (*) -> (); IMPLICIT_HANDLE_INFO: struct #union { pAutoHandle: **; pPrimitiveHandle: **; pGenericBindingInfo: *GENERIC_BINDING_INFO; }; apfnNdrRundownRoutines: *def (*) -> (); aGenericBindingRoutinePairs: *GENERIC_BINDING_ROUTINE_PAIR; apfnExprEval: *def (*MIDL_STUB_MESSAGE) -> (); aXmitQuintuple: *XMIT_ROUTINE_QUINTUPLE; pFormatTypes: *char; fCheckBounds: int; Version: ulong; pMallocFreeStruct: *MALLOC_FREE_STRUCT; MIDLVersion: long; CommFaultOffsets: *COMM_FAULT_OFFSETS; aUserMarshalQuadruple: *USER_MARSHAL_ROUTINE_QUADRUPLE; NotifyRoutineTable: *def () -> (); mFlags: uint64; CsRoutineTables: *NDR_CS_ROUTINES; ProxyServerInfo: *; pExprInfo: *NDR_EXPR_DESC; }
export type MIDL_FORMAT_STRING = struct { Pad: short; Format: *char; }
export type MIDL_METHOD_PROPERTY = struct { Id: ulong; Value: uint64; }
export type MIDL_METHOD_PROPERTY_MAP = struct { Count: ulong; Properties: *MIDL_METHOD_PROPERTY; }
export type MIDL_INTERFACE_METHOD_PROPERTIES = struct { MethodCount: ushort; MethodProperties: **MIDL_METHOD_PROPERTY_MAP; }
export type MIDL_SERVER_INFO = struct { pStubDesc: *MIDL_STUB_DESC; DispatchTable: *def () -> (long); ProcString: *char; FmtStringOffset: *ushort; ThunkTable: *def (*MIDL_STUB_MESSAGE) -> (); pTransferSyntax: *RPC_SYNTAX_IDENTIFIER; nCount: uint64; pSyntaxInfo: *MIDL_SYNTAX_INFO; }
export type MIDL_STUBLESS_PROXY_INFO = struct { pStubDesc: *MIDL_STUB_DESC; ProcFormatString: *char; FormatStringOffset: *ushort; pTransferSyntax: *RPC_SYNTAX_IDENTIFIER; nCount: uint64; pSyntaxInfo: *MIDL_SYNTAX_INFO; }
export type CLIENT_CALL_RETURN = struct #union { Pointer: *; Simple: int64; }
export type XLAT_SIDE = enum { XLAT_SERVER = 1; XLAT_CLIENT; }
export type FULL_PTR_XLAT_TABLES = struct { RefIdToPointer: *; PointerToRefId: *; NextRefId: ulong; XlatSide: XLAT_SIDE; }
export type system_handle_t = enum { SYSTEM_HANDLE_FILE = 0; SYSTEM_HANDLE_SEMAPHORE = 1; SYSTEM_HANDLE_EVENT = 2; SYSTEM_HANDLE_MUTEX = 3; SYSTEM_HANDLE_PROCESS = 4; SYSTEM_HANDLE_TOKEN = 5; SYSTEM_HANDLE_SECTION = 6; SYSTEM_HANDLE_REG_KEY = 7; SYSTEM_HANDLE_THREAD = 8; SYSTEM_HANDLE_COMPOSITION_OBJECT = 9; SYSTEM_HANDLE_SOCKET = 10; SYSTEM_HANDLE_JOB = 11; SYSTEM_HANDLE_PIPE = 12; SYSTEM_HANDLE_MAX = 12; SYSTEM_HANDLE_INVALID = 255; }
export type MIDL_INTERCEPTION_INFO = struct { Version: ulong; ProcString: *char; ProcFormatOffsetTable: *ushort; ProcCount: ulong; TypeString: *char; }
export type MIDL_WINRT_TYPE_SERIALIZATION_INFO = struct { Version: ulong; TypeFormatString: *char; FormatStringSize: ushort; TypeOffset: ushort; StubDesc: *MIDL_STUB_DESC; }
export type STUB_PHASE = enum { STUB_UNMARSHAL; STUB_CALL_SERVER; STUB_MARSHAL; STUB_CALL_SERVER_NO_HRESULT; }
export type PROXY_PHASE = enum { PROXY_CALCSIZE; PROXY_GETBUFFER; PROXY_MARSHAL; PROXY_SENDRECEIVE; PROXY_UNMARSHAL; }
export type NDR_USER_MARSHAL_INFO_LEVEL1 = struct { Buffer: *; BufferSize: ulong; pfnAllocate: *; pfnFree: def (*) -> (); pRpcChannelBuffer: *s_IRpcChannelBuffer; Reserved: [5; uint64]; }
export type NDR_USER_MARSHAL_INFO = struct { InformationLevel: ulong; _3: struct #union { Level1: NDR_USER_MARSHAL_INFO_LEVEL1; }; }
export type COAUTHIDENTITY = struct { User: *ushort; UserLength: ulong; Domain: *ushort; DomainLength: ulong; Password: *ushort; PasswordLength: ulong; Flags: ulong; }
export type COAUTHINFO = struct { dwAuthnSvc: ulong; dwAuthzSvc: ulong; pwszServerPrincName: *ushort; dwAuthnLevel: ulong; dwImpersonationLevel: ulong; pAuthIdentityData: *COAUTHIDENTITY; dwCapabilities: ulong; }
export type MEMCTX = enum { MEMCTX_TASK = 1; MEMCTX_SHARED = 2; MEMCTX_MACSYSTEM = 3; MEMCTX_UNKNOWN = (- 1); MEMCTX_SAME = (- 2); }
export type CLSCTX = enum { CLSCTX_INPROC_SERVER = 1; CLSCTX_INPROC_HANDLER = 2; CLSCTX_LOCAL_SERVER = 4; CLSCTX_INPROC_SERVER16 = 8; CLSCTX_REMOTE_SERVER = 16; CLSCTX_INPROC_HANDLER16 = 32; CLSCTX_RESERVED1 = 64; CLSCTX_RESERVED2 = 128; CLSCTX_RESERVED3 = 256; CLSCTX_RESERVED4 = 512; CLSCTX_NO_CODE_DOWNLOAD = 1024; CLSCTX_RESERVED5 = 2048; CLSCTX_NO_CUSTOM_MARSHAL = 4096; CLSCTX_ENABLE_CODE_DOWNLOAD = 8192; CLSCTX_NO_FAILURE_LOG = 16384; CLSCTX_DISABLE_AAA = 32768; CLSCTX_ENABLE_AAA = 65536; CLSCTX_FROM_DEFAULT_CONTEXT = 131072; CLSCTX_ACTIVATE_X86_SERVER = 262144; CLSCTX_ACTIVATE_32_BIT_SERVER = CLSCTX_ACTIVATE_X86_SERVER; CLSCTX_ACTIVATE_64_BIT_SERVER = 524288; CLSCTX_ENABLE_CLOAKING = 1048576; CLSCTX_APPCONTAINER = 4194304; CLSCTX_ACTIVATE_AAA_AS_IU = 8388608; CLSCTX_RESERVED6 = 16777216; CLSCTX_ACTIVATE_ARM32_SERVER = 33554432; CLSCTX_PS_DLL; }
export type MSHLFLAGS = enum { MSHLFLAGS_NORMAL = 0; MSHLFLAGS_TABLESTRONG = 1; MSHLFLAGS_TABLEWEAK = 2; MSHLFLAGS_NOPING = 4; MSHLFLAGS_RESERVED1 = 8; MSHLFLAGS_RESERVED2 = 16; MSHLFLAGS_RESERVED3 = 32; MSHLFLAGS_RESERVED4 = 64; }
export type MSHCTX = enum { MSHCTX_LOCAL = 0; MSHCTX_NOSHAREDMEM = 1; MSHCTX_DIFFERENTMACHINE = 2; MSHCTX_INPROC = 3; MSHCTX_CROSSCTX = 4; MSHCTX_RESERVED1 = 5; }
export type BYTE_BLOB = struct { clSize: ulong; abData: [1; char]; }
export type WORD_BLOB = struct { clSize: ulong; asData: [1; ushort]; }
export type DWORD_BLOB = struct { clSize: ulong; alData: [1; ulong]; }
export type FLAGGED_BYTE_BLOB = struct { fFlags: ulong; clSize: ulong; abData: [1; char]; }
export type FLAGGED_WORD_BLOB = struct { fFlags: ulong; clSize: ulong; asData: [1; ushort]; }
export type BYTE_SIZEDARR = struct { clSize: ulong; pData: *char; }
export type WORD_SIZEDARR = struct { clSize: ulong; pData: *ushort; }
export type DWORD_SIZEDARR = struct { clSize: ulong; pData: *ulong; }
export type HYPER_SIZEDARR = struct { clSize: ulong; pData: *int64; }
export type BLOB = struct { cbSize: ulong; pBlobData: *char; }
export type RemHGLOBAL = struct { fNullHGlobal: long; cbData: ulong; data: [1; char]; }
export type RemHMETAFILEPICT = struct { mm: long; xExt: long; yExt: long; cbData: ulong; data: [1; char]; }
export type RemHENHMETAFILE = struct { cbData: ulong; data: [1; char]; }
export type RemHBITMAP = struct { cbData: ulong; data: [1; char]; }
export type RemHPALETTE = struct { cbData: ulong; data: [1; char]; }
export type RemHBRUSH = struct { cbData: ulong; data: [1; char]; }
export type DVASPECT = enum { DVASPECT_CONTENT = 1; DVASPECT_THUMBNAIL = 2; DVASPECT_ICON = 4; DVASPECT_DOCPRINT = 8; }
export type STGC = enum { STGC_DEFAULT = 0; STGC_OVERWRITE = 1; STGC_ONLYIFCURRENT = 2; STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 4; STGC_CONSOLIDATE = 8; }
export type STGMOVE = enum { STGMOVE_MOVE = 0; STGMOVE_COPY = 1; STGMOVE_SHALLOWCOPY = 2; }
export type STATFLAG = enum { STATFLAG_DEFAULT = 0; STATFLAG_NONAME = 1; STATFLAG_NOOPEN = 2; }
export type u___MIDL_IWinTypes_0001 = struct #union { dwValue: ulong; pwszName: *ushort; }
export type userCLIPFORMAT = struct { fContext: long; u: u___MIDL_IWinTypes_0001; }
export type u___MIDL_IWinTypes_0002 = struct #union { hInproc: long; hRemote: *DWORD_BLOB; }
export type GDI_NONREMOTE = struct { fContext: long; u: u___MIDL_IWinTypes_0002; }
export type u___MIDL_IWinTypes_0003 = struct #union { hInproc: long; hRemote: *FLAGGED_BYTE_BLOB; hInproc64: int64; }
export type userHGLOBAL = struct { fContext: long; u: u___MIDL_IWinTypes_0003; }
export type u___MIDL_IWinTypes_0004 = struct #union { hInproc: long; hRemote: *BYTE_BLOB; hInproc64: int64; }
export type userHMETAFILE = struct { fContext: long; u: u___MIDL_IWinTypes_0004; }
export type remoteMETAFILEPICT = struct { mm: long; xExt: long; yExt: long; hMF: *userHMETAFILE; }
export type u___MIDL_IWinTypes_0005 = struct #union { hInproc: long; hRemote: *remoteMETAFILEPICT; hInproc64: int64; }
export type userHMETAFILEPICT = struct { fContext: long; u: u___MIDL_IWinTypes_0005; }
export type u___MIDL_IWinTypes_0006 = struct #union { hInproc: long; hRemote: *BYTE_BLOB; hInproc64: int64; }
export type userHENHMETAFILE = struct { fContext: long; u: u___MIDL_IWinTypes_0006; }
export type userBITMAP = struct { bmType: long; bmWidth: long; bmHeight: long; bmWidthBytes: long; bmPlanes: ushort; bmBitsPixel: ushort; cbSize: ulong; pBuffer: [1; char]; }
export type u___MIDL_IWinTypes_0007 = struct #union { hInproc: long; hRemote: *userBITMAP; hInproc64: int64; }
export type userHBITMAP = struct { fContext: long; u: u___MIDL_IWinTypes_0007; }
export type u___MIDL_IWinTypes_0008 = struct #union { hInproc: long; hRemote: *LOGPALETTE; hInproc64: int64; }
export type userHPALETTE = struct { fContext: long; u: u___MIDL_IWinTypes_0008; }
export type u___MIDL_IWinTypes_0009 = struct #union { hInproc: long; hRemote: long; }
export type RemotableHandle = struct { fContext: long; u: u___MIDL_IWinTypes_0009; }
export type CY = struct #union { _1: struct { Lo: ulong; Hi: long; }; int64: int64; }
export type DECIMAL = struct { wReserved: ushort; _2: struct #union { _1: struct { scale: char; sign: char; }; signscale: ushort; }; Hi32: ulong; _8: struct #union { _1: struct { Lo32: ulong; Mid32: ulong; }; Lo64: uint64; }; }
export type BSTRBLOB = struct { cbSize: ulong; pData: *char; }
export type CLIPDATA = struct { cbSize: ulong; ulClipFmt: long; pClipData: *char; }
export type PROPERTYKEY = struct { fmtid: GUID; pid: ulong; }
export type CSPLATFORM = struct { dwPlatformId: ulong; dwVersionHi: ulong; dwVersionLo: ulong; dwProcessorArch: ulong; }
export type QUERYCONTEXT = struct { dwContext: ulong; Platform: CSPLATFORM; Locale: ulong; dwVersionHi: ulong; dwVersionLo: ulong; }
export type TYSPEC = enum { TYSPEC_CLSID = 0; TYSPEC_FILEEXT = ((TYSPEC_CLSID + 1)); TYSPEC_MIMETYPE = ((TYSPEC_FILEEXT + 1)); TYSPEC_FILENAME = ((TYSPEC_MIMETYPE + 1)); TYSPEC_PROGID = ((TYSPEC_FILENAME + 1)); TYSPEC_PACKAGENAME = ((TYSPEC_PROGID + 1)); TYSPEC_OBJECTID = ((TYSPEC_PACKAGENAME + 1)); }
export type u___MIDL___MIDL_itf_wtypes_0000_0001_0005 = struct #union { clsid: GUID; pFileExt: *ushort; pMimeType: *ushort; pProgId: *ushort; pFileName: *ushort; ByName: struct { pPackageName: *ushort; PolicyId: GUID; }; ByObjectId: struct { ObjectId: GUID; PolicyId: GUID; }; }
export type uCLSSPEC = struct { tyspec: ulong; tagged_union: u___MIDL___MIDL_itf_wtypes_0000_0001_0005; }
export type STORAGE_HOTPLUG_INFO = struct { Size: ulong; MediaRemovable: char; MediaHotplug: char; DeviceHotplug: char; WriteCacheEnableOverride: char; }
export type STORAGE_DEVICE_NUMBER = struct { DeviceType: ulong; DeviceNumber: ulong; PartitionNumber: ulong; }
export type STORAGE_DEVICE_NUMBERS = struct { Version: ulong; Size: ulong; NumberOfDevices: ulong; Devices: [1; STORAGE_DEVICE_NUMBER]; }
export type STORAGE_DEVICE_NUMBER_EX = struct { Version: ulong; Size: ulong; Flags: ulong; DeviceType: ulong; DeviceNumber: ulong; DeviceGuid: GUID; PartitionNumber: ulong; }
export type STORAGE_BUS_RESET_REQUEST = struct { PathId: char; }
export type STORAGE_BREAK_RESERVATION_REQUEST = struct { Length: ulong; _unused: char; PathId: char; TargetId: char; Lun: char; }
export type PREVENT_MEDIA_REMOVAL = struct { PreventMediaRemoval: char; }
export type CLASS_MEDIA_CHANGE_CONTEXT = struct { MediaChangeCount: ulong; NewState: ulong; }
export type TAPE_STATISTICS = struct { Version: ulong; Flags: ulong; RecoveredWrites: LARGE_INTEGER; UnrecoveredWrites: LARGE_INTEGER; RecoveredReads: LARGE_INTEGER; UnrecoveredReads: LARGE_INTEGER; CompressionRatioReads: char; CompressionRatioWrites: char; }
export type TAPE_GET_STATISTICS = struct { Operation: ulong; }
export type STORAGE_MEDIA_TYPE = enum { DDS_4mm = 32; MiniQic; Travan; QIC; MP_8mm; AME_8mm; AIT1_8mm; DLT; NCTP; IBM_3480; IBM_3490E; IBM_Magstar_3590; IBM_Magstar_MP; STK_DATA_D3; SONY_DTF; DV_6mm; DMI; SONY_D2; CLEANER_CARTRIDGE; CD_ROM; CD_R; CD_RW; DVD_ROM; DVD_R; DVD_RW; MO_3_RW; MO_5_WO; MO_5_RW; MO_5_LIMDOW; PC_5_WO; PC_5_RW; PD_5_RW; ABL_5_WO; PINNACLE_APEX_5_RW; SONY_12_WO; PHILIPS_12_WO; HITACHI_12_WO; CYGNET_12_WO; KODAK_14_WO; MO_NFR_525; NIKON_12_RW; IOMEGA_ZIP; IOMEGA_JAZ; SYQUEST_EZ135; SYQUEST_EZFLYER; SYQUEST_SYJET; AVATAR_F2; MP2_8mm; DST_S; DST_M; DST_L; VXATape_1; VXATape_2; STK_9840; LTO_Ultrium; LTO_Accelis; DVD_RAM; AIT_8mm; ADR_1; ADR_2; STK_9940; SAIT; VXATape; }
export type STORAGE_BUS_TYPE = enum { BusTypeUnknown = 0; BusTypeScsi; BusTypeAtapi; BusTypeAta; BusType1394; BusTypeSsa; BusTypeFibre; BusTypeUsb; BusTypeRAID; BusTypeiScsi; BusTypeSas; BusTypeSata; BusTypeSd; BusTypeMmc; BusTypeVirtual; BusTypeFileBackedVirtual; BusTypeSpaces; BusTypeNvme; BusTypeSCM; BusTypeUfs; BusTypeMax; BusTypeMaxReserved = 127; }
export type DEVICE_MEDIA_INFO = struct { DeviceSpecific: struct #union { DiskInfo: struct { Cylinders: LARGE_INTEGER; MediaType: STORAGE_MEDIA_TYPE; TracksPerCylinder: ulong; SectorsPerTrack: ulong; BytesPerSector: ulong; NumberMediaSides: ulong; MediaCharacteristics: ulong; }; RemovableDiskInfo: struct { Cylinders: LARGE_INTEGER; MediaType: STORAGE_MEDIA_TYPE; TracksPerCylinder: ulong; SectorsPerTrack: ulong; BytesPerSector: ulong; NumberMediaSides: ulong; MediaCharacteristics: ulong; }; TapeInfo: struct { MediaType: STORAGE_MEDIA_TYPE; MediaCharacteristics: ulong; CurrentBlockSize: ulong; BusType: STORAGE_BUS_TYPE; BusSpecificData: struct #union { ScsiInformation: struct { MediumType: char; DensityCode: char; }; }; }; }; }
export type GET_MEDIA_TYPES = struct { DeviceType: ulong; MediaInfoCount: ulong; MediaInfo: [1; DEVICE_MEDIA_INFO]; }
export type STORAGE_PREDICT_FAILURE = struct { PredictFailure: ulong; VendorSpecific: [512; char]; }
export type STORAGE_FAILURE_PREDICTION_CONFIG = struct { Version: ulong; Size: ulong; Set: char; Enabled: char; Reserved: ushort; }
export type STORAGE_QUERY_TYPE = enum { PropertyStandardQuery = 0; PropertyExistsQuery; PropertyMaskQuery; PropertyQueryMaxDefined; }
export type STORAGE_SET_TYPE = enum { PropertyStandardSet = 0; PropertyExistsSet; PropertySetMaxDefined; }
export type STORAGE_PROPERTY_ID = enum { StorageDeviceProperty = 0; StorageAdapterProperty; StorageDeviceIdProperty; StorageDeviceUniqueIdProperty; StorageDeviceWriteCacheProperty; StorageMiniportProperty; StorageAccessAlignmentProperty; StorageDeviceSeekPenaltyProperty; StorageDeviceTrimProperty; StorageDeviceWriteAggregationProperty; StorageDeviceDeviceTelemetryProperty; StorageDeviceLBProvisioningProperty; StorageDevicePowerProperty; StorageDeviceCopyOffloadProperty; StorageDeviceResiliencyProperty; StorageDeviceMediumProductType; StorageAdapterRpmbProperty; StorageAdapterCryptoProperty; StorageDeviceIoCapabilityProperty = 48; StorageAdapterProtocolSpecificProperty; StorageDeviceProtocolSpecificProperty; StorageAdapterTemperatureProperty; StorageDeviceTemperatureProperty; StorageAdapterPhysicalTopologyProperty; StorageDevicePhysicalTopologyProperty; StorageDeviceAttributesProperty; StorageDeviceManagementStatus; StorageAdapterSerialNumberProperty; StorageDeviceLocationProperty; StorageDeviceNumaProperty; StorageDeviceZonedDeviceProperty; StorageDeviceUnsafeShutdownCount; StorageDeviceEnduranceProperty; }
export type STORAGE_PROPERTY_QUERY = struct { PropertyId: STORAGE_PROPERTY_ID; QueryType: STORAGE_QUERY_TYPE; AdditionalParameters: [1; char]; }
export type STORAGE_PROPERTY_SET = struct { PropertyId: STORAGE_PROPERTY_ID; SetType: STORAGE_SET_TYPE; AdditionalParameters: [1; char]; }
export type STORAGE_DESCRIPTOR_HEADER = struct { Version: ulong; Size: ulong; }
export type STORAGE_DEVICE_DESCRIPTOR = struct { Version: ulong; Size: ulong; DeviceType: char; DeviceTypeModifier: char; RemovableMedia: char; CommandQueueing: char; VendorIdOffset: ulong; ProductIdOffset: ulong; ProductRevisionOffset: ulong; SerialNumberOffset: ulong; BusType: STORAGE_BUS_TYPE; RawPropertiesLength: ulong; RawDeviceProperties: [1; char]; }
export type STORAGE_ADAPTER_DESCRIPTOR = struct { Version: ulong; Size: ulong; MaximumTransferLength: ulong; MaximumPhysicalPages: ulong; AlignmentMask: ulong; AdapterUsesPio: char; AdapterScansDown: char; CommandQueueing: char; AcceleratedTransfer: char; BusType: char; BusMajorVersion: ushort; BusMinorVersion: ushort; SrbType: char; AddressType: char; }
export type STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR = struct { Version: ulong; Size: ulong; BytesPerCacheLine: ulong; BytesOffsetForCacheAlignment: ulong; BytesPerLogicalSector: ulong; BytesPerPhysicalSector: ulong; BytesOffsetForSectorAlignment: ulong; }
export type STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR = struct { Version: ulong; Size: ulong; MediumProductType: ulong; }
export type STORAGE_PORT_CODE_SET = enum { StoragePortCodeSetReserved = 0; StoragePortCodeSetStorport = 1; StoragePortCodeSetSCSIport = 2; StoragePortCodeSetSpaceport = 3; StoragePortCodeSetATAport = 4; StoragePortCodeSetUSBport = 5; StoragePortCodeSetSBP2port = 6; StoragePortCodeSetSDport = 7; }
export type STORAGE_MINIPORT_DESCRIPTOR = struct { Version: ulong; Size: ulong; Portdriver: STORAGE_PORT_CODE_SET; LUNResetSupported: char; TargetResetSupported: char; IoTimeoutValue: ushort; ExtraIoInfoSupported: char; Reserved0: [3; char]; Reserved1: ulong; }
export type STORAGE_IDENTIFIER_CODE_SET = enum { StorageIdCodeSetReserved = 0; StorageIdCodeSetBinary = 1; StorageIdCodeSetAscii = 2; StorageIdCodeSetUtf8 = 3; }
export type STORAGE_IDENTIFIER_TYPE = enum { StorageIdTypeVendorSpecific = 0; StorageIdTypeVendorId = 1; StorageIdTypeEUI64 = 2; StorageIdTypeFCPHName = 3; StorageIdTypePortRelative = 4; StorageIdTypeTargetPortGroup = 5; StorageIdTypeLogicalUnitGroup = 6; StorageIdTypeMD5LogicalUnitIdentifier = 7; StorageIdTypeScsiNameString = 8; }
export type STORAGE_ID_NAA_FORMAT = enum { StorageIdNAAFormatIEEEExtended = 2; StorageIdNAAFormatIEEERegistered = 3; StorageIdNAAFormatIEEEERegisteredExtended = 5; }
export type STORAGE_ASSOCIATION_TYPE = enum { StorageIdAssocDevice = 0; StorageIdAssocPort = 1; StorageIdAssocTarget = 2; }
export type STORAGE_IDENTIFIER = struct { CodeSet: STORAGE_IDENTIFIER_CODE_SET; Type: STORAGE_IDENTIFIER_TYPE; IdentifierSize: ushort; NextOffset: ushort; Association: STORAGE_ASSOCIATION_TYPE; Identifier: [1; char]; }
export type STORAGE_DEVICE_ID_DESCRIPTOR = struct { Version: ulong; Size: ulong; NumberOfIdentifiers: ulong; Identifiers: [1; char]; }
export type DEVICE_SEEK_PENALTY_DESCRIPTOR = struct { Version: ulong; Size: ulong; IncursSeekPenalty: char; }
export type DEVICE_WRITE_AGGREGATION_DESCRIPTOR = struct { Version: ulong; Size: ulong; BenefitsFromWriteAggregation: char; }
export type DEVICE_TRIM_DESCRIPTOR = struct { Version: ulong; Size: ulong; TrimEnabled: char; }
export type DEVICE_LB_PROVISIONING_DESCRIPTOR = struct { Version: ulong; Size: ulong; #bits(1) ThinProvisioningEnabled: char; #bits(1) ThinProvisioningReadZeros: char; #bits(3) AnchorSupported: char; #bits(1) UnmapGranularityAlignmentValid: char; #bits(2) Reserved0: char; Reserved1: [7; char]; OptimalUnmapGranularity: uint64; UnmapGranularityAlignment: uint64; MaxUnmapLbaCount: ulong; MaxUnmapBlockDescriptorCount: ulong; }
export type STORAGE_LB_PROVISIONING_MAP_RESOURCES = struct { Size: ulong; Version: ulong; #bits(1) AvailableMappingResourcesValid: char; #bits(1) UsedMappingResourcesValid: char; #bits(6) Reserved0: char; Reserved1: [3; char]; #bits(2) AvailableMappingResourcesScope: char; #bits(2) UsedMappingResourcesScope: char; #bits(4) Reserved2: char; Reserved3: [3; char]; AvailableMappingResources: uint64; UsedMappingResources: uint64; }
export type DEVICE_POWER_DESCRIPTOR = struct { Version: ulong; Size: ulong; DeviceAttentionSupported: char; AsynchronousNotificationSupported: char; IdlePowerManagementEnabled: char; D3ColdEnabled: char; D3ColdSupported: char; NoVerifyDuringIdlePower: char; Reserved: [2; char]; IdleTimeoutInMS: ulong; }
export type DEVICE_COPY_OFFLOAD_DESCRIPTOR = struct { Version: ulong; Size: ulong; MaximumTokenLifetime: ulong; DefaultTokenLifetime: ulong; MaximumTransferSize: uint64; OptimalTransferCount: uint64; MaximumDataDescriptors: ulong; MaximumTransferLengthPerDescriptor: ulong; OptimalTransferLengthPerDescriptor: ulong; OptimalTransferLengthGranularity: ushort; Reserved: [2; char]; }
export type STORAGE_DEVICE_RESILIENCY_DESCRIPTOR = struct { Version: ulong; Size: ulong; NameOffset: ulong; NumberOfLogicalCopies: ulong; NumberOfPhysicalCopies: ulong; PhysicalDiskRedundancy: ulong; NumberOfColumns: ulong; Interleave: ulong; }
export type STORAGE_RPMB_FRAME_TYPE = enum { StorageRpmbFrameTypeUnknown = 0; StorageRpmbFrameTypeStandard; StorageRpmbFrameTypeMax; }
export type STORAGE_RPMB_DESCRIPTOR = struct { Version: ulong; Size: ulong; SizeInBytes: ulong; MaxReliableWriteSizeInBytes: ulong; FrameFormat: STORAGE_RPMB_FRAME_TYPE; }
export type STORAGE_CRYPTO_ALGORITHM_ID = enum { StorageCryptoAlgorithmUnknown = 0; StorageCryptoAlgorithmXTSAES = 1; StorageCryptoAlgorithmBitlockerAESCBC; StorageCryptoAlgorithmAESECB; StorageCryptoAlgorithmESSIVAESCBC; StorageCryptoAlgorithmMax; }
export type STORAGE_CRYPTO_KEY_SIZE = enum { StorageCryptoKeySizeUnknown = 0; StorageCryptoKeySize128Bits = 1; StorageCryptoKeySize192Bits; StorageCryptoKeySize256Bits; StorageCryptoKeySize512Bits; }
export type STORAGE_CRYPTO_CAPABILITY = struct { Version: ulong; Size: ulong; CryptoCapabilityIndex: ulong; AlgorithmId: STORAGE_CRYPTO_ALGORITHM_ID; KeySize: STORAGE_CRYPTO_KEY_SIZE; DataUnitSizeBitmask: ulong; }
export type STORAGE_CRYPTO_DESCRIPTOR = struct { Version: ulong; Size: ulong; NumKeysSupported: ulong; NumCryptoCapabilities: ulong; CryptoCapabilities: [1; STORAGE_CRYPTO_CAPABILITY]; }
export type STORAGE_TIER_MEDIA_TYPE = enum { StorageTierMediaTypeUnspecified = 0; StorageTierMediaTypeDisk = 1; StorageTierMediaTypeSsd = 2; StorageTierMediaTypeScm = 4; StorageTierMediaTypeMax; }
export type STORAGE_TIER_CLASS = enum { StorageTierClassUnspecified = 0; StorageTierClassCapacity; StorageTierClassPerformance; StorageTierClassMax; }
export type STORAGE_TIER = struct { Id: GUID; Name: [256; ushort]; Description: [256; ushort]; Flags: uint64; ProvisionedCapacity: uint64; MediaType: STORAGE_TIER_MEDIA_TYPE; Class: STORAGE_TIER_CLASS; }
export type STORAGE_DEVICE_TIERING_DESCRIPTOR = struct { Version: ulong; Size: ulong; Flags: ulong; TotalNumberOfTiers: ulong; NumberOfTiersReturned: ulong; Tiers: [1; STORAGE_TIER]; }
export type STORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR = struct { Version: ulong; Size: ulong; NumberOfFaultDomains: ulong; FaultDomainIds: [1; GUID]; }
export type STORAGE_PROTOCOL_TYPE = enum { ProtocolTypeUnknown = 0; ProtocolTypeScsi; ProtocolTypeAta; ProtocolTypeNvme; ProtocolTypeSd; ProtocolTypeUfs; ProtocolTypeProprietary = 126; ProtocolTypeMaxReserved = 127; }
export type STORAGE_PROTOCOL_NVME_DATA_TYPE = enum { NVMeDataTypeUnknown = 0; NVMeDataTypeIdentify; NVMeDataTypeLogPage; NVMeDataTypeFeature; }
export type STORAGE_PROTOCOL_ATA_DATA_TYPE = enum { AtaDataTypeUnknown = 0; AtaDataTypeIdentify; AtaDataTypeLogPage; }
export type STORAGE_PROTOCOL_UFS_DATA_TYPE = enum { UfsDataTypeUnknown = 0; UfsDataTypeQueryDescriptor; UfsDataTypeMax; }
export type STORAGE_PROTOCOL_SPECIFIC_DATA = struct { ProtocolType: STORAGE_PROTOCOL_TYPE; DataType: ulong; ProtocolDataRequestValue: ulong; ProtocolDataRequestSubValue: ulong; ProtocolDataOffset: ulong; ProtocolDataLength: ulong; FixedProtocolReturnData: ulong; ProtocolDataRequestSubValue2: ulong; ProtocolDataRequestSubValue3: ulong; Reserved: ulong; }
export type STORAGE_PROTOCOL_SPECIFIC_DATA_EXT = struct { ProtocolType: STORAGE_PROTOCOL_TYPE; DataType: ulong; ProtocolDataValue: ulong; ProtocolDataSubValue: ulong; ProtocolDataOffset: ulong; ProtocolDataLength: ulong; FixedProtocolReturnData: ulong; ProtocolDataSubValue2: ulong; ProtocolDataSubValue3: ulong; ProtocolDataSubValue4: ulong; ProtocolDataSubValue5: ulong; Reserved: [5; ulong]; }
export type STORAGE_PROTOCOL_DATA_DESCRIPTOR = struct { Version: ulong; Size: ulong; ProtocolSpecificData: STORAGE_PROTOCOL_SPECIFIC_DATA; }
export type STORAGE_PROTOCOL_DATA_DESCRIPTOR_EXT = struct { Version: ulong; Size: ulong; ProtocolSpecificData: STORAGE_PROTOCOL_SPECIFIC_DATA_EXT; }
export type STORAGE_TEMPERATURE_INFO = struct { Index: ushort; Temperature: short; OverThreshold: short; UnderThreshold: short; OverThresholdChangable: char; UnderThresholdChangable: char; EventGenerated: char; Reserved0: char; Reserved1: ulong; }
export type STORAGE_TEMPERATURE_DATA_DESCRIPTOR = struct { Version: ulong; Size: ulong; CriticalTemperature: short; WarningTemperature: short; InfoCount: ushort; Reserved0: [2; char]; Reserved1: [2; ulong]; TemperatureInfo: [1; STORAGE_TEMPERATURE_INFO]; }
export type STORAGE_TEMPERATURE_THRESHOLD = struct { Version: ulong; Size: ulong; Flags: ushort; Index: ushort; Threshold: short; OverThreshold: char; Reserved: char; }
export type STORAGE_DEVICE_FORM_FACTOR = enum { FormFactorUnknown = 0; FormFactor3_5; FormFactor2_5; FormFactor1_8; FormFactor1_8Less; FormFactorEmbedded; FormFactorMemoryCard; FormFactormSata; FormFactorM_2; FormFactorPCIeBoard; FormFactorDimm; }
export type STORAGE_COMPONENT_HEALTH_STATUS = enum { HealthStatusUnknown = 0; HealthStatusNormal; HealthStatusThrottled; HealthStatusWarning; HealthStatusDisabled; HealthStatusFailed; }
export type STORAGE_SPEC_VERSION = struct #union { _1: struct { MinorVersion: struct #union { _1: struct { SubMinor: char; Minor: char; }; AsUshort: ushort; }; MajorVersion: ushort; }; AsUlong: ulong; }
export type STORAGE_PHYSICAL_DEVICE_DATA = struct { DeviceId: ulong; Role: ulong; HealthStatus: STORAGE_COMPONENT_HEALTH_STATUS; CommandProtocol: STORAGE_PROTOCOL_TYPE; SpecVersion: STORAGE_SPEC_VERSION; FormFactor: STORAGE_DEVICE_FORM_FACTOR; Vendor: [8; char]; Model: [40; char]; FirmwareRevision: [16; char]; Capacity: uint64; PhysicalLocation: [32; char]; Reserved: [2; ulong]; }
export type STORAGE_PHYSICAL_ADAPTER_DATA = struct { AdapterId: ulong; HealthStatus: STORAGE_COMPONENT_HEALTH_STATUS; CommandProtocol: STORAGE_PROTOCOL_TYPE; SpecVersion: STORAGE_SPEC_VERSION; Vendor: [8; char]; Model: [40; char]; FirmwareRevision: [16; char]; PhysicalLocation: [32; char]; ExpanderConnected: char; Reserved0: [3; char]; Reserved1: [3; ulong]; }
export type STORAGE_PHYSICAL_NODE_DATA = struct { NodeId: ulong; AdapterCount: ulong; AdapterDataLength: ulong; AdapterDataOffset: ulong; DeviceCount: ulong; DeviceDataLength: ulong; DeviceDataOffset: ulong; Reserved: [3; ulong]; }
export type STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR = struct { Version: ulong; Size: ulong; NodeCount: ulong; Reserved: ulong; Node: [1; STORAGE_PHYSICAL_NODE_DATA]; }
export type STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR = struct { Version: ulong; Size: ulong; LunMaxIoCount: ulong; AdapterMaxIoCount: ulong; }
export type STORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR = struct { Version: ulong; Size: ulong; Attributes: uint64; }
export type STORAGE_DISK_HEALTH_STATUS = enum { DiskHealthUnknown = 0; DiskHealthUnhealthy; DiskHealthWarning; DiskHealthHealthy; DiskHealthMax; }
export type STORAGE_DISK_OPERATIONAL_STATUS = enum { DiskOpStatusNone = 0; DiskOpStatusUnknown; DiskOpStatusOk; DiskOpStatusPredictingFailure; DiskOpStatusInService; DiskOpStatusHardwareError; DiskOpStatusNotUsable; DiskOpStatusTransientError; DiskOpStatusMissing; }
export type STORAGE_OPERATIONAL_STATUS_REASON = enum { DiskOpReasonUnknown = 0; DiskOpReasonScsiSenseCode; DiskOpReasonMedia; DiskOpReasonIo; DiskOpReasonThresholdExceeded; DiskOpReasonLostData; DiskOpReasonEnergySource; DiskOpReasonConfiguration; DiskOpReasonDeviceController; DiskOpReasonMediaController; DiskOpReasonComponent; DiskOpReasonNVDIMM_N; DiskOpReasonBackgroundOperation; DiskOpReasonInvalidFirmware; DiskOpReasonHealthCheck; DiskOpReasonLostDataPersistence; DiskOpReasonDisabledByPlatform; DiskOpReasonLostWritePersistence; DiskOpReasonDataPersistenceLossImminent; DiskOpReasonWritePersistenceLossImminent; DiskOpReasonMax; }
export type STORAGE_OPERATIONAL_REASON = struct { Version: ulong; Size: ulong; Reason: STORAGE_OPERATIONAL_STATUS_REASON; RawBytes: struct #union { ScsiSenseKey: struct { SenseKey: char; ASC: char; ASCQ: char; Reserved: char; }; NVDIMM_N: struct { CriticalHealth: char; ModuleHealth: [2; char]; ErrorThresholdStatus: char; }; AsUlong: ulong; }; }
export type STORAGE_DEVICE_MANAGEMENT_STATUS = struct { Version: ulong; Size: ulong; Health: STORAGE_DISK_HEALTH_STATUS; NumberOfOperationalStatus: ulong; NumberOfAdditionalReasons: ulong; OperationalStatus: [16; STORAGE_DISK_OPERATIONAL_STATUS]; AdditionalReasons: [1; STORAGE_OPERATIONAL_REASON]; }
export type STORAGE_ADAPTER_SERIAL_NUMBER = struct { Version: ulong; Size: ulong; SerialNumber: [128; ushort]; }
export type STORAGE_ZONED_DEVICE_TYPES = enum { ZonedDeviceTypeUnknown = 0; ZonedDeviceTypeHostManaged; ZonedDeviceTypeHostAware; ZonedDeviceTypeDeviceManaged; }
export type STORAGE_ZONE_TYPES = enum { ZoneTypeUnknown = 0; ZoneTypeConventional = 1; ZoneTypeSequentialWriteRequired = 2; ZoneTypeSequentialWritePreferred = 3; ZoneTypeMax; }
export type STORAGE_ZONE_GROUP = struct { ZoneCount: ulong; ZoneType: STORAGE_ZONE_TYPES; ZoneSize: uint64; }
export type STORAGE_ZONED_DEVICE_DESCRIPTOR = struct { Version: ulong; Size: ulong; DeviceType: STORAGE_ZONED_DEVICE_TYPES; ZoneCount: ulong; ZoneAttributes: struct #union { SequentialRequiredZone: struct { MaxOpenZoneCount: ulong; UnrestrictedRead: char; Reserved: [3; char]; }; SequentialPreferredZone: struct { OptimalOpenZoneCount: ulong; Reserved: ulong; }; }; ZoneGroupCount: ulong; ZoneGroup: [1; STORAGE_ZONE_GROUP]; }
export type DEVICE_LOCATION = struct { Socket: ulong; Slot: ulong; Adapter: ulong; Port: ulong; _5: struct #union { _1: struct { Channel: ulong; Device: ulong; }; _5: struct { Target: ulong; Lun: ulong; }; }; }
export type STORAGE_DEVICE_LOCATION_DESCRIPTOR = struct { Version: ulong; Size: ulong; Location: DEVICE_LOCATION; StringOffset: ulong; }
export type STORAGE_DEVICE_NUMA_PROPERTY = struct { Version: ulong; Size: ulong; NumaNode: ulong; }
export type STORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT = struct { Version: ulong; Size: ulong; UnsafeShutdownCount: ulong; }
export type STORAGE_HW_ENDURANCE_INFO = struct { ValidFields: ulong; GroupId: ulong; Flags: struct { #bits(1) Shared: ulong; #bits(31) Reserved: ulong; }; LifePercentage: ulong; BytesReadCount: [16; char]; ByteWriteCount: [16; char]; }
export type STORAGE_HW_ENDURANCE_DATA_DESCRIPTOR = struct { Version: ulong; Size: ulong; EnduranceInfo: STORAGE_HW_ENDURANCE_INFO; }
export type DEVICE_DSM_RANGE = struct { StartingOffset: int64; LengthInBytes: uint64; }
export type DEVICE_DSM_INPUT = struct { Size: ulong; Action: ulong; Flags: ulong; ParameterBlockOffset: ulong; ParameterBlockLength: ulong; DataSetRangesOffset: ulong; DataSetRangesLength: ulong; }
export type DEVICE_DSM_OUTPUT = struct { Size: ulong; Action: ulong; Flags: ulong; OperationStatus: ulong; ExtendedError: ulong; TargetDetailedError: ulong; ReservedStatus: ulong; OutputBlockOffset: ulong; OutputBlockLength: ulong; }
export type DEVICE_DSM_DEFINITION = struct { Action: ulong; SingleRange: char; ParameterBlockAlignment: ulong; ParameterBlockLength: ulong; HasOutput: char; OutputBlockAlignment: ulong; OutputBlockLength: ulong; }
export type DEVICE_DSM_NOTIFICATION_PARAMETERS = struct { Size: ulong; Flags: ulong; NumFileTypeIDs: ulong; FileTypeID: [1; GUID]; }
export type STORAGE_OFFLOAD_TOKEN = struct { TokenType: [4; char]; Reserved: [2; char]; TokenIdLength: [2; char]; _4: struct #union { StorageOffloadZeroDataToken: struct { Reserved2: [504; char]; }; Token: [504; char]; }; }
export type DEVICE_DSM_OFFLOAD_READ_PARAMETERS = struct { Flags: ulong; TimeToLive: ulong; Reserved: [2; ulong]; }
export type STORAGE_OFFLOAD_READ_OUTPUT = struct { OffloadReadFlags: ulong; Reserved: ulong; LengthProtected: uint64; TokenLength: ulong; Token: STORAGE_OFFLOAD_TOKEN; }
export type DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS = struct { Flags: ulong; Reserved: ulong; TokenOffset: uint64; Token: STORAGE_OFFLOAD_TOKEN; }
export type STORAGE_OFFLOAD_WRITE_OUTPUT = struct { OffloadWriteFlags: ulong; Reserved: ulong; LengthCopied: uint64; }
export type DEVICE_DSM_ALLOCATION_PARAMETERS = struct { Version: ulong; Size: ulong; Flags: ulong; OutputVersion: ulong; }
export type DEVICE_DSM_ALLOCATION_OUTPUT = struct { Size: ulong; Version: ulong; SlabSizeInBytes: uint64; SlabOffsetDeltaInBytes: ulong; SlabAllocationBitMapBitCount: ulong; SlabAllocationBitMapLength: ulong; SlabAllocationBitMap: [1; ulong]; }
export type DEVICE_DSM_ALLOCATION_OUTPUT2 = struct { Size: ulong; Version: ulong; SlabSizeInBytes: uint64; SlabOffsetDeltaInBytes: uint64; SlabAllocationBitMapBitCount: ulong; SlabAllocationBitMapLength: ulong; SlabAllocationBitMap: [1; ulong]; }
export type DEVICE_DSM_REPAIR_PARAMETERS = struct { NumberOfRepairCopies: ulong; SourceCopy: ulong; RepairCopies: [1; ulong]; }
export type DEVICE_DSM_REPAIR_OUTPUT = struct { ParityExtent: DEVICE_DSM_RANGE; }
export type DEVICE_DSM_SCRUB_OUTPUT = struct { BytesProcessed: uint64; BytesRepaired: uint64; BytesFailed: uint64; }
export type DEVICE_DSM_SCRUB_OUTPUT2 = struct { BytesProcessed: uint64; BytesRepaired: uint64; BytesFailed: uint64; ParityExtent: DEVICE_DSM_RANGE; }
export type DEVICE_DSM_TIERING_QUERY_PARAMETERS = struct { Version: ulong; Size: ulong; Flags: ulong; NumberOfTierIds: ulong; TierIds: [1; GUID]; }
export type STORAGE_TIER_REGION = struct { TierId: GUID; Offset: uint64; Length: uint64; }
export type DEVICE_DSM_TIERING_QUERY_OUTPUT = struct { Version: ulong; Size: ulong; Flags: ulong; Reserved: ulong; Alignment: uint64; TotalNumberOfRegions: ulong; NumberOfRegionsReturned: ulong; Regions: [1; STORAGE_TIER_REGION]; }
export type DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS = struct { Size: ulong; TargetPriority: char; Reserved: [3; char]; }
export type DEVICE_DSM_TOPOLOGY_ID_QUERY_OUTPUT = struct { TopologyRangeBytes: uint64; TopologyId: [16; char]; }
export type DEVICE_STORAGE_ADDRESS_RANGE = struct { StartAddress: int64; LengthInBytes: uint64; }
export type DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT = struct { Version: ulong; Flags: ulong; TotalNumberOfRanges: ulong; NumberOfRangesReturned: ulong; Ranges: [1; DEVICE_STORAGE_ADDRESS_RANGE]; }
export type DEVICE_DSM_REPORT_ZONES_PARAMETERS = struct { Size: ulong; ReportOption: char; Partial: char; Reserved: [2; char]; }
export type STORAGE_ZONES_ATTRIBUTES = enum { ZonesAttributeTypeAndLengthMayDifferent = 0; ZonesAttributeTypeSameLengthSame = 1; ZonesAttributeTypeSameLastZoneLengthDifferent = 2; ZonesAttributeTypeMayDifferentLengthSame = 3; }
export type STORAGE_ZONE_CONDITION = enum { ZoneConditionConventional = 0; ZoneConditionEmpty = 1; ZoneConditionImplicitlyOpened = 2; ZoneConditionExplicitlyOpened = 3; ZoneConditionClosed = 4; ZoneConditionReadOnly = 13; ZoneConditionFull = 14; ZoneConditionOffline = 15; }
export type STORAGE_ZONE_DESCRIPTOR = struct { Size: ulong; ZoneType: STORAGE_ZONE_TYPES; ZoneCondition: STORAGE_ZONE_CONDITION; ResetWritePointerRecommend: char; Reserved0: [3; char]; ZoneSize: uint64; WritePointerOffset: uint64; }
export type DEVICE_DSM_REPORT_ZONES_OUTPUT = struct { Size: ulong; ZoneCount: ulong; Attributes: STORAGE_ZONES_ATTRIBUTES; Reserved0: ulong; ZoneDescriptors: [1; STORAGE_ZONE_DESCRIPTOR]; }
export type DEVICE_STORAGE_RANGE_ATTRIBUTES = struct { LengthInBytes: uint64; _2: struct #union { AllFlags: ulong; _2: struct { #bits(1) IsRangeBad: ulong; }; }; Reserved: ulong; }
export type DEVICE_DSM_RANGE_ERROR_OUTPUT = struct { Version: ulong; Flags: ulong; TotalNumberOfRanges: ulong; NumberOfRangesReturned: ulong; Ranges: [1; DEVICE_STORAGE_RANGE_ATTRIBUTES]; }
export type DEVICE_DSM_LOST_QUERY_PARAMETERS = struct { Version: ulong; Granularity: uint64; }
export type DEVICE_DSM_LOST_QUERY_OUTPUT = struct { Version: ulong; Size: ulong; Alignment: uint64; NumberOfBits: ulong; BitMap: [1; ulong]; }
export type DEVICE_DSM_FREE_SPACE_OUTPUT = struct { Version: ulong; FreeSpace: uint64; }
export type DEVICE_DSM_CONVERSION_OUTPUT = struct { Version: ulong; Source: GUID; }
export type STORAGE_GET_BC_PROPERTIES_OUTPUT = struct { MaximumRequestsPerPeriod: ulong; MinimumPeriod: ulong; MaximumRequestSize: uint64; EstimatedTimePerRequest: ulong; NumOutStandingRequests: ulong; RequestSize: uint64; }
export type STORAGE_ALLOCATE_BC_STREAM_INPUT = struct { Version: ulong; RequestsPerPeriod: ulong; Period: ulong; RetryFailures: char; Discardable: char; Reserved1: [2; char]; AccessType: ulong; AccessMode: ulong; }
export type STORAGE_ALLOCATE_BC_STREAM_OUTPUT = struct { RequestSize: uint64; NumOutStandingRequests: ulong; }
export type STORAGE_PRIORITY_HINT_SUPPORT = struct { SupportFlags: ulong; }
export type STORAGE_DIAGNOSTIC_LEVEL = enum { StorageDiagnosticLevelDefault = 0; StorageDiagnosticLevelMax; }
export type STORAGE_DIAGNOSTIC_TARGET_TYPE = enum { StorageDiagnosticTargetTypeUndefined = 0; StorageDiagnosticTargetTypePort; StorageDiagnosticTargetTypeMiniport; StorageDiagnosticTargetTypeHbaFirmware; StorageDiagnosticTargetTypeMax; }
export type STORAGE_DIAGNOSTIC_REQUEST = struct { Version: ulong; Size: ulong; Reserved: ulong; TargetType: STORAGE_DIAGNOSTIC_TARGET_TYPE; Level: STORAGE_DIAGNOSTIC_LEVEL; }
export type STORAGE_DIAGNOSTIC_DATA = struct { Version: ulong; Size: ulong; ProviderId: GUID; BufferSize: ulong; Reserved: ulong; DiagnosticDataBuffer: [1; char]; }
export type PHYSICAL_ELEMENT_STATUS_REQUEST = struct { Version: ulong; Size: ulong; StartingElement: ulong; Filter: char; ReportType: char; Reserved: [2; char]; }
export type PHYSICAL_ELEMENT_STATUS_DESCRIPTOR = struct { Version: ulong; Size: ulong; ElementIdentifier: ulong; PhysicalElementType: char; PhysicalElementHealth: char; Reserved1: [2; char]; AssociatedCapacity: uint64; Reserved2: [4; ulong]; }
export type PHYSICAL_ELEMENT_STATUS = struct { Version: ulong; Size: ulong; DescriptorCount: ulong; ReturnedDescriptorCount: ulong; ElementIdentifierBeingDepoped: ulong; Reserved: ulong; Descriptors: [1; PHYSICAL_ELEMENT_STATUS_DESCRIPTOR]; }
export type REMOVE_ELEMENT_AND_TRUNCATE_REQUEST = struct { Version: ulong; Size: ulong; RequestCapacity: uint64; ElementIdentifier: ulong; Reserved: ulong; }
export type DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE = enum { DeviceInternalStatusDataRequestTypeUndefined = 0; DeviceCurrentInternalStatusDataHeader; DeviceCurrentInternalStatusData; }
export type DEVICE_INTERNAL_STATUS_DATA_SET = enum { DeviceStatusDataSetUndefined = 0; DeviceStatusDataSet1; DeviceStatusDataSet2; DeviceStatusDataSet3; DeviceStatusDataSet4; DeviceStatusDataSetMax; }
export type GET_DEVICE_INTERNAL_STATUS_DATA_REQUEST = struct { Version: ulong; Size: ulong; RequestDataType: DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE; RequestDataSet: DEVICE_INTERNAL_STATUS_DATA_SET; }
export type DEVICE_INTERNAL_STATUS_DATA = struct { Version: ulong; Size: ulong; T10VendorId: uint64; DataSet1Length: ulong; DataSet2Length: ulong; DataSet3Length: ulong; DataSet4Length: ulong; StatusDataVersion: char; Reserved: [3; char]; ReasonIdentifier: [128; char]; StatusDataLength: ulong; StatusData: [1; char]; }
export type STORAGE_MEDIA_SERIAL_NUMBER_DATA = struct { Reserved: ushort; SerialNumberLength: ushort; SerialNumber: *char; }
export type STORAGE_READ_CAPACITY = struct { Version: ulong; Size: ulong; BlockLength: ulong; NumberOfBlocks: LARGE_INTEGER; DiskLength: LARGE_INTEGER; }
export type WRITE_CACHE_TYPE = enum { WriteCacheTypeUnknown; WriteCacheTypeNone; WriteCacheTypeWriteBack; WriteCacheTypeWriteThrough; }
export type WRITE_CACHE_ENABLE = enum { WriteCacheEnableUnknown; WriteCacheDisabled; WriteCacheEnabled; }
export type WRITE_CACHE_CHANGE = enum { WriteCacheChangeUnknown; WriteCacheNotChangeable; WriteCacheChangeable; }
export type WRITE_THROUGH = enum { WriteThroughUnknown; WriteThroughNotSupported; WriteThroughSupported; }
export type STORAGE_WRITE_CACHE_PROPERTY = struct { Version: ulong; Size: ulong; WriteCacheType: WRITE_CACHE_TYPE; WriteCacheEnabled: WRITE_CACHE_ENABLE; WriteCacheChangeable: WRITE_CACHE_CHANGE; WriteThroughSupported: WRITE_THROUGH; FlushCacheSupported: char; UserDefinedPowerProtection: char; NVCacheEnabled: char; }
export type PERSISTENT_RESERVE_COMMAND = struct { Version: ulong; Size: ulong; _3: struct #union { PR_IN: struct { #bits(5) ServiceAction: char; #bits(3) Reserved1: char; AllocationLength: ushort; }; PR_OUT: struct { #bits(5) ServiceAction: char; #bits(3) Reserved1: char; #bits(4) Type: char; #bits(4) Scope: char; ParameterList: *char; }; }; }
export type DEVICEDUMP_COLLECTION_TYPEIDE_NOTIFICATION_TYPE = enum { TCCollectionBugCheck = 1; TCCollectionApplicationRequested; TCCollectionDeviceRequested; }
export type DEVICEDUMP_SUBSECTION_POINTER = struct { dwSize: ulong; dwFlags: ulong; dwOffset: ulong; }
export type DEVICEDUMP_STRUCTURE_VERSION = struct { dwSignature: ulong; dwVersion: ulong; dwSize: ulong; }
export type DEVICEDUMP_SECTION_HEADER = struct { guidDeviceDataId: GUID; sOrganizationID: [16; char]; dwFirmwareRevision: ulong; sModelNumber: [32; char]; szDeviceManufacturingID: [32; char]; dwFlags: ulong; bRestrictedPrivateDataVersion: ulong; dwFirmwareIssueId: ulong; szIssueDescriptionString: [132; char]; }
export type GP_LOG_PAGE_DESCRIPTOR = struct { LogAddress: ushort; LogSectors: ushort; }
export type DEVICEDUMP_PUBLIC_SUBSECTION = struct { dwFlags: ulong; GPLogTable: [16; GP_LOG_PAGE_DESCRIPTOR]; szDescription: [16; char]; bData: [1; char]; }
export type DEVICEDUMP_RESTRICTED_SUBSECTION = struct { bData: [1; char]; }
export type DEVICEDUMP_PRIVATE_SUBSECTION = struct { dwFlags: ulong; GPLogId: GP_LOG_PAGE_DESCRIPTOR; bData: [1; char]; }
export type DEVICEDUMP_STORAGEDEVICE_DATA = struct { Descriptor: DEVICEDUMP_STRUCTURE_VERSION; SectionHeader: DEVICEDUMP_SECTION_HEADER; dwBufferSize: ulong; dwReasonForCollection: ulong; PublicData: DEVICEDUMP_SUBSECTION_POINTER; RestrictedData: DEVICEDUMP_SUBSECTION_POINTER; PrivateData: DEVICEDUMP_SUBSECTION_POINTER; }
export type DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD = struct { Cdb: [16; char]; Command: [16; char]; StartTime: uint64; EndTime: uint64; OperationStatus: ulong; OperationError: ulong; StackSpecific: struct #union { ExternalStack: struct { dwReserved: ulong; }; AtaPort: struct { dwAtaPortSpecific: ulong; }; StorPort: struct { SrbTag: ulong; }; }; }
export type DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP = struct { Descriptor: DEVICEDUMP_STRUCTURE_VERSION; dwReasonForCollection: ulong; cDriverName: [16; char]; uiNumRecords: ulong; RecordArray: [1; DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD]; }
export type STORAGE_IDLE_POWER = struct { Version: ulong; Size: ulong; #bits(1) WakeCapableHint: ulong; #bits(1) D3ColdSupported: ulong; #bits(30) Reserved: ulong; D3IdleTimeout: ulong; }
export type STORAGE_POWERUP_REASON_TYPE = enum { StoragePowerupUnknown = 0; StoragePowerupIO; StoragePowerupDeviceAttention; }
export type STORAGE_IDLE_POWERUP_REASON = struct { Version: ulong; Size: ulong; PowerupReason: STORAGE_POWERUP_REASON_TYPE; }
export type STORAGE_DEVICE_POWER_CAP_UNITS = enum { StorageDevicePowerCapUnitsPercent; StorageDevicePowerCapUnitsMilliwatts; }
export type STORAGE_DEVICE_POWER_CAP = struct { Version: ulong; Size: ulong; Units: STORAGE_DEVICE_POWER_CAP_UNITS; MaxPower: uint64; }
export type STORAGE_RPMB_DATA_FRAME = struct { Stuff: [196; char]; KeyOrMAC: [32; char]; Data: [256; char]; Nonce: [16; char]; WriteCounter: [4; char]; Address: [2; char]; BlockCount: [2; char]; OperationResult: [2; char]; RequestOrResponseType: [2; char]; }
export type STORAGE_RPMB_COMMAND_TYPE = enum { StorRpmbProgramAuthKey = 1; StorRpmbQueryWriteCounter = 2; StorRpmbAuthenticatedWrite = 3; StorRpmbAuthenticatedRead = 4; StorRpmbReadResultRequest = 5; StorRpmbAuthenticatedDeviceConfigWrite = 6; StorRpmbAuthenticatedDeviceConfigRead = 7; }
export type STORAGE_EVENT_NOTIFICATION = struct { Version: ulong; Size: ulong; Events: uint64; }
export type STORAGE_COUNTER_TYPE = enum { StorageCounterTypeUnknown = 0; StorageCounterTypeTemperatureCelsius; StorageCounterTypeTemperatureCelsiusMax; StorageCounterTypeReadErrorsTotal; StorageCounterTypeReadErrorsCorrected; StorageCounterTypeReadErrorsUncorrected; StorageCounterTypeWriteErrorsTotal; StorageCounterTypeWriteErrorsCorrected; StorageCounterTypeWriteErrorsUncorrected; StorageCounterTypeManufactureDate; StorageCounterTypeStartStopCycleCount; StorageCounterTypeStartStopCycleCountMax; StorageCounterTypeLoadUnloadCycleCount; StorageCounterTypeLoadUnloadCycleCountMax; StorageCounterTypeWearPercentage; StorageCounterTypeWearPercentageWarning; StorageCounterTypeWearPercentageMax; StorageCounterTypePowerOnHours; StorageCounterTypeReadLatency100NSMax; StorageCounterTypeWriteLatency100NSMax; StorageCounterTypeFlushLatency100NSMax; StorageCounterTypeMax; }
export type STORAGE_COUNTER = struct { Type: STORAGE_COUNTER_TYPE; Value: struct #union { ManufactureDate: struct { Week: ulong; Year: ulong; }; AsUlonglong: uint64; }; }
export type STORAGE_COUNTERS = struct { Version: ulong; Size: ulong; NumberOfCounters: ulong; Counters: [1; STORAGE_COUNTER]; }
export type STORAGE_HW_FIRMWARE_INFO_QUERY = struct { Version: ulong; Size: ulong; Flags: ulong; Reserved: ulong; }
export type STORAGE_HW_FIRMWARE_SLOT_INFO = struct { Version: ulong; Size: ulong; SlotNumber: char; #bits(1) ReadOnly: char; #bits(7) Reserved0: char; Reserved1: [6; char]; Revision: [16; char]; }
export type STORAGE_HW_FIRMWARE_INFO = struct { Version: ulong; Size: ulong; #bits(1) SupportUpgrade: char; #bits(7) Reserved0: char; SlotCount: char; ActiveSlot: char; PendingActivateSlot: char; FirmwareShared: char; Reserved: [3; char]; ImagePayloadAlignment: ulong; ImagePayloadMaxSize: ulong; Slot: [1; STORAGE_HW_FIRMWARE_SLOT_INFO]; }
export type STORAGE_HW_FIRMWARE_DOWNLOAD = struct { Version: ulong; Size: ulong; Flags: ulong; Slot: char; Reserved: [3; char]; Offset: uint64; BufferSize: uint64; ImageBuffer: [1; char]; }
export type STORAGE_HW_FIRMWARE_DOWNLOAD_V2 = struct { Version: ulong; Size: ulong; Flags: ulong; Slot: char; Reserved: [3; char]; Offset: uint64; BufferSize: uint64; ImageSize: ulong; Reserved2: ulong; ImageBuffer: [1; char]; }
export type STORAGE_HW_FIRMWARE_ACTIVATE = struct { Version: ulong; Size: ulong; Flags: ulong; Slot: char; Reserved0: [3; char]; }
export type STORAGE_PROTOCOL_COMMAND = struct { Version: ulong; Length: ulong; ProtocolType: STORAGE_PROTOCOL_TYPE; Flags: ulong; ReturnStatus: ulong; ErrorCode: ulong; CommandLength: ulong; ErrorInfoLength: ulong; DataToDeviceTransferLength: ulong; DataFromDeviceTransferLength: ulong; TimeOutValue: ulong; ErrorInfoOffset: ulong; DataToDeviceBufferOffset: ulong; DataFromDeviceBufferOffset: ulong; CommandSpecific: ulong; Reserved0: ulong; FixedProtocolReturnData: ulong; Reserved1: [3; ulong]; Command: [1; char]; }
export type STORAGE_ATTRIBUTE_MGMT_ACTION = enum { StorAttributeMgmt_ClearAttribute = 0; StorAttributeMgmt_SetAttribute = 1; StorAttributeMgmt_ResetAttribute = 2; }
export type STORAGE_ATTRIBUTE_MGMT = struct { Version: ulong; Size: ulong; Action: STORAGE_ATTRIBUTE_MGMT_ACTION; Attribute: ulong; }
export type SCM_PD_HEALTH_NOTIFICATION_DATA = struct { DeviceGuid: GUID; }
export type SCM_LOGICAL_DEVICE_INSTANCE = struct { Version: ulong; Size: ulong; DeviceGuid: GUID; SymbolicLink: [256; ushort]; }
export type SCM_LOGICAL_DEVICES = struct { Version: ulong; Size: ulong; DeviceCount: ulong; Devices: [1; SCM_LOGICAL_DEVICE_INSTANCE]; }
export type SCM_PHYSICAL_DEVICE_INSTANCE = struct { Version: ulong; Size: ulong; NfitHandle: ulong; SymbolicLink: [256; ushort]; }
export type SCM_PHYSICAL_DEVICES = struct { Version: ulong; Size: ulong; DeviceCount: ulong; Devices: [1; SCM_PHYSICAL_DEVICE_INSTANCE]; }
export type SCM_REGION_FLAG = enum { ScmRegionFlagNone = 0; ScmRegionFlagLabel = 1; }
export type SCM_REGION = struct { Version: ulong; Size: ulong; Flags: ulong; NfitHandle: ulong; LogicalDeviceGuid: GUID; AddressRangeType: GUID; AssociatedId: ulong; Length: uint64; StartingDPA: uint64; BaseSPA: uint64; SPAOffset: uint64; RegionOffset: uint64; }
export type SCM_REGIONS = struct { Version: ulong; Size: ulong; RegionCount: ulong; Regions: [1; SCM_REGION]; }
export type SCM_INTERLEAVED_PD_INFO = struct { DeviceHandle: ulong; DeviceGuid: GUID; }
export type SCM_LD_INTERLEAVE_SET_INFO = struct { Version: ulong; Size: ulong; InterleaveSetSize: ulong; InterleaveSet: [1; SCM_INTERLEAVED_PD_INFO]; }
export type SCM_PD_QUERY_TYPE = enum { ScmPhysicalDeviceQuery_Descriptor = 0; ScmPhysicalDeviceQuery_IsSupported; ScmPhysicalDeviceQuery_Max; }
export type SCM_PD_PROPERTY_ID = enum { ScmPhysicalDeviceProperty_DeviceInfo = 0; ScmPhysicalDeviceProperty_ManagementStatus; ScmPhysicalDeviceProperty_FirmwareInfo; ScmPhysicalDeviceProperty_LocationString; ScmPhysicalDeviceProperty_DeviceSpecificInfo; ScmPhysicalDeviceProperty_DeviceHandle; ScmPhysicalDeviceProperty_Max; }
export type SCM_PD_PROPERTY_QUERY = struct { Version: ulong; Size: ulong; PropertyId: SCM_PD_PROPERTY_ID; QueryType: SCM_PD_QUERY_TYPE; AdditionalParameters: [1; char]; }
export type SCM_PD_DESCRIPTOR_HEADER = struct { Version: ulong; Size: ulong; }
export type SCM_PD_DEVICE_HANDLE = struct { Version: ulong; Size: ulong; DeviceGuid: GUID; DeviceHandle: ulong; }
export type SCM_PD_DEVICE_INFO = struct { Version: ulong; Size: ulong; DeviceGuid: GUID; UnsafeShutdownCount: ulong; PersistentMemorySizeInBytes: uint64; VolatileMemorySizeInBytes: uint64; TotalMemorySizeInBytes: uint64; SlotNumber: ulong; DeviceHandle: ulong; PhysicalId: ushort; NumberOfFormatInterfaceCodes: char; FormatInterfaceCodes: [8; ushort]; VendorId: ulong; ProductId: ulong; SubsystemDeviceId: ulong; SubsystemVendorId: ulong; ManufacturingLocation: char; ManufacturingWeek: char; ManufacturingYear: char; SerialNumber4Byte: ulong; SerialNumberLengthInChars: ulong; SerialNumber: [1; char]; }
export type SCM_PD_DEVICE_SPECIFIC_PROPERTY = struct { Name: [128; ushort]; Value: int64; }
export type SCM_PD_DEVICE_SPECIFIC_INFO = struct { Version: ulong; Size: ulong; NumberOfProperties: ulong; DeviceSpecificProperties: [1; SCM_PD_DEVICE_SPECIFIC_PROPERTY]; }
export type SCM_PD_FIRMWARE_SLOT_INFO = struct { Version: ulong; Size: ulong; SlotNumber: char; #bits(1) ReadOnly: char; #bits(7) Reserved0: char; Reserved1: [6; char]; Revision: [32; char]; }
export type SCM_PD_FIRMWARE_INFO = struct { Version: ulong; Size: ulong; ActiveSlot: char; NextActiveSlot: char; SlotCount: char; Slots: [1; SCM_PD_FIRMWARE_SLOT_INFO]; }
export type SCM_PD_HEALTH_STATUS = enum { ScmPhysicalDeviceHealth_Unknown = 0; ScmPhysicalDeviceHealth_Unhealthy; ScmPhysicalDeviceHealth_Warning; ScmPhysicalDeviceHealth_Healthy; ScmPhysicalDeviceHealth_Max; }
export type SCM_PD_OPERATIONAL_STATUS = enum { ScmPhysicalDeviceOpStatus_Unknown = 0; ScmPhysicalDeviceOpStatus_Ok; ScmPhysicalDeviceOpStatus_PredictingFailure; ScmPhysicalDeviceOpStatus_InService; ScmPhysicalDeviceOpStatus_HardwareError; ScmPhysicalDeviceOpStatus_NotUsable; ScmPhysicalDeviceOpStatus_TransientError; ScmPhysicalDeviceOpStatus_Missing; ScmPhysicalDeviceOpStatus_Max; }
export type SCM_PD_OPERATIONAL_STATUS_REASON = enum { ScmPhysicalDeviceOpReason_Unknown = 0; ScmPhysicalDeviceOpReason_Media; ScmPhysicalDeviceOpReason_ThresholdExceeded; ScmPhysicalDeviceOpReason_LostData; ScmPhysicalDeviceOpReason_EnergySource; ScmPhysicalDeviceOpReason_Configuration; ScmPhysicalDeviceOpReason_DeviceController; ScmPhysicalDeviceOpReason_MediaController; ScmPhysicalDeviceOpReason_Component; ScmPhysicalDeviceOpReason_BackgroundOperation; ScmPhysicalDeviceOpReason_InvalidFirmware; ScmPhysicalDeviceOpReason_HealthCheck; ScmPhysicalDeviceOpReason_LostDataPersistence; ScmPhysicalDeviceOpReason_DisabledByPlatform; ScmPhysicalDeviceOpReason_PermanentError; ScmPhysicalDeviceOpReason_LostWritePersistence; ScmPhysicalDeviceOpReason_FatalError; ScmPhysicalDeviceOpReason_DataPersistenceLossImminent; ScmPhysicalDeviceOpReason_WritePersistenceLossImminent; ScmPhysicalDeviceOpReason_MediaRemainingSpareBlock; ScmPhysicalDeviceOpReason_PerformanceDegradation; ScmPhysicalDeviceOpReason_ExcessiveTemperature; ScmPhysicalDeviceOpReason_Max; }
export type SCM_PD_MANAGEMENT_STATUS = struct { Version: ulong; Size: ulong; Health: SCM_PD_HEALTH_STATUS; NumberOfOperationalStatus: ulong; NumberOfAdditionalReasons: ulong; OperationalStatus: [16; SCM_PD_OPERATIONAL_STATUS]; AdditionalReasons: [1; SCM_PD_OPERATIONAL_STATUS_REASON]; }
export type SCM_PD_LOCATION_STRING = struct { Version: ulong; Size: ulong; Location: [1; ushort]; }
export type SCM_PD_FIRMWARE_DOWNLOAD = struct { Version: ulong; Size: ulong; Flags: ulong; Slot: char; Reserved: [3; char]; Offset: uint64; FirmwareImageSizeInBytes: ulong; FirmwareImage: [1; char]; }
export type SCM_PD_FIRMWARE_ACTIVATE = struct { Version: ulong; Size: ulong; Flags: ulong; Slot: char; }
export type SCM_PD_PASSTHROUGH_INPUT = struct { Version: ulong; Size: ulong; ProtocolGuid: GUID; DataSize: ulong; Data: [1; char]; }
export type SCM_PD_PASSTHROUGH_OUTPUT = struct { Version: ulong; Size: ulong; ProtocolGuid: GUID; DataSize: ulong; Data: [1; char]; }
export type SCM_PD_PASSTHROUGH_INVDIMM_INPUT = struct { Opcode: ulong; OpcodeParametersLength: ulong; OpcodeParameters: [1; char]; }
export type SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT = struct { GeneralStatus: ushort; ExtendedStatus: ushort; OutputDataLength: ulong; OutputData: [1; char]; }
export type SCM_PD_REINITIALIZE_MEDIA_INPUT = struct { Version: ulong; Size: ulong; Options: struct { #bits(1) Overwrite: ulong; }; }
export type SCM_PD_MEDIA_REINITIALIZATION_STATUS = enum { ScmPhysicalDeviceReinit_Success = 0; ScmPhysicalDeviceReinit_RebootNeeded; ScmPhysicalDeviceReinit_ColdBootNeeded; ScmPhysicalDeviceReinit_Max; }
export type SCM_PD_REINITIALIZE_MEDIA_OUTPUT = struct { Version: ulong; Size: ulong; Status: SCM_PD_MEDIA_REINITIALIZATION_STATUS; }
export type MEDIA_TYPE = enum { Unknown; F5_1Pt2_512; F3_1Pt44_512; F3_2Pt88_512; F3_20Pt8_512; F3_720_512; F5_360_512; F5_320_512; F5_320_1024; F5_180_512; F5_160_512; RemovableMedia; FixedMedia; F3_120M_512; F3_640_512; F5_640_512; F5_720_512; F3_1Pt2_512; F3_1Pt23_1024; F5_1Pt23_1024; F3_128Mb_512; F3_230Mb_512; F8_256_128; F3_200Mb_512; F3_240M_512; F3_32M_512; }
export type FORMAT_PARAMETERS = struct { MediaType: MEDIA_TYPE; StartCylinderNumber: ulong; EndCylinderNumber: ulong; StartHeadNumber: ulong; EndHeadNumber: ulong; }
export type FORMAT_EX_PARAMETERS = struct { MediaType: MEDIA_TYPE; StartCylinderNumber: ulong; EndCylinderNumber: ulong; StartHeadNumber: ulong; EndHeadNumber: ulong; FormatGapLength: ushort; SectorsPerTrack: ushort; SectorNumber: [1; ushort]; }
export type DISK_GEOMETRY = struct { Cylinders: LARGE_INTEGER; MediaType: MEDIA_TYPE; TracksPerCylinder: ulong; SectorsPerTrack: ulong; BytesPerSector: ulong; }
export type PARTITION_INFORMATION = struct { StartingOffset: LARGE_INTEGER; PartitionLength: LARGE_INTEGER; HiddenSectors: ulong; PartitionNumber: ulong; PartitionType: char; BootIndicator: char; RecognizedPartition: char; RewritePartition: char; }
export type SET_PARTITION_INFORMATION = struct { PartitionType: char; }
export type DRIVE_LAYOUT_INFORMATION = struct { PartitionCount: ulong; Signature: ulong; PartitionEntry: [1; PARTITION_INFORMATION]; }
export type VERIFY_INFORMATION = struct { StartingOffset: LARGE_INTEGER; Length: ulong; }
export type REASSIGN_BLOCKS = struct { Reserved: ushort; Count: ushort; BlockNumber: [1; ulong]; }
export type REASSIGN_BLOCKS_EX = struct { Reserved: ushort; Count: ushort; BlockNumber: [1; LARGE_INTEGER]; }
export type PARTITION_STYLE = enum { PARTITION_STYLE_MBR; PARTITION_STYLE_GPT; PARTITION_STYLE_RAW; }
export type PARTITION_INFORMATION_GPT = struct { PartitionType: GUID; PartitionId: GUID; Attributes: uint64; Name: [36; ushort]; }
export type PARTITION_INFORMATION_MBR = struct { PartitionType: char; BootIndicator: char; RecognizedPartition: char; HiddenSectors: ulong; PartitionId: GUID; }
export type SET_PARTITION_INFORMATION_EX = struct { PartitionStyle: PARTITION_STYLE; _2: struct #union { Mbr: SET_PARTITION_INFORMATION; Gpt: PARTITION_INFORMATION_GPT; }; }
export type CREATE_DISK_GPT = struct { DiskId: GUID; MaxPartitionCount: ulong; }
export type CREATE_DISK_MBR = struct { Signature: ulong; }
export type CREATE_DISK = struct { PartitionStyle: PARTITION_STYLE; _2: struct #union { Mbr: CREATE_DISK_MBR; Gpt: CREATE_DISK_GPT; }; }
export type GET_LENGTH_INFORMATION = struct { Length: LARGE_INTEGER; }
export type PARTITION_INFORMATION_EX = struct { PartitionStyle: PARTITION_STYLE; StartingOffset: LARGE_INTEGER; PartitionLength: LARGE_INTEGER; PartitionNumber: ulong; RewritePartition: char; IsServicePartition: char; _7: struct #union { Mbr: PARTITION_INFORMATION_MBR; Gpt: PARTITION_INFORMATION_GPT; }; }
export type DRIVE_LAYOUT_INFORMATION_GPT = struct { DiskId: GUID; StartingUsableOffset: LARGE_INTEGER; UsableLength: LARGE_INTEGER; MaxPartitionCount: ulong; }
export type DRIVE_LAYOUT_INFORMATION_MBR = struct { Signature: ulong; CheckSum: ulong; }
export type DRIVE_LAYOUT_INFORMATION_EX = struct { PartitionStyle: ulong; PartitionCount: ulong; _3: struct #union { Mbr: DRIVE_LAYOUT_INFORMATION_MBR; Gpt: DRIVE_LAYOUT_INFORMATION_GPT; }; PartitionEntry: [1; PARTITION_INFORMATION_EX]; }
export type DETECTION_TYPE = enum { DetectNone; DetectInt13; DetectExInt13; }
export type DISK_INT13_INFO = struct { DriveSelect: ushort; MaxCylinders: ulong; SectorsPerTrack: ushort; MaxHeads: ushort; NumberDrives: ushort; }
export type DISK_EX_INT13_INFO = struct { ExBufferSize: ushort; ExFlags: ushort; ExCylinders: ulong; ExHeads: ulong; ExSectorsPerTrack: ulong; ExSectorsPerDrive: uint64; ExSectorSize: ushort; ExReserved: ushort; }
export type DISK_DETECTION_INFO = struct { SizeOfDetectInfo: ulong; DetectionType: DETECTION_TYPE; _3: struct #union { _1: struct { Int13: DISK_INT13_INFO; ExInt13: DISK_EX_INT13_INFO; }; }; }
export type DISK_PARTITION_INFO = struct { SizeOfPartitionInfo: ulong; PartitionStyle: PARTITION_STYLE; _3: struct #union { Mbr: struct { Signature: ulong; CheckSum: ulong; }; Gpt: struct { DiskId: GUID; }; }; }
export type DISK_GEOMETRY_EX = struct { Geometry: DISK_GEOMETRY; DiskSize: LARGE_INTEGER; Data: [1; char]; }
export type DISK_CONTROLLER_NUMBER = struct { ControllerNumber: ulong; DiskNumber: ulong; }
export type DISK_CACHE_RETENTION_PRIORITY = enum { EqualPriority; KeepPrefetchedData; KeepReadData; }
export type DISK_CACHE_INFORMATION = struct { ParametersSavable: char; ReadCacheEnabled: char; WriteCacheEnabled: char; ReadRetentionPriority: DISK_CACHE_RETENTION_PRIORITY; WriteRetentionPriority: DISK_CACHE_RETENTION_PRIORITY; DisablePrefetchTransferLength: ushort; PrefetchScalar: char; _8: struct #union { ScalarPrefetch: struct { Minimum: ushort; Maximum: ushort; MaximumBlocks: ushort; }; BlockPrefetch: struct { Minimum: ushort; Maximum: ushort; }; }; }
export type DISK_GROW_PARTITION = struct { PartitionNumber: ulong; BytesToGrow: LARGE_INTEGER; }
export type HISTOGRAM_BUCKET = struct { Reads: ulong; Writes: ulong; }
export type DISK_HISTOGRAM = struct { DiskSize: LARGE_INTEGER; Start: LARGE_INTEGER; End: LARGE_INTEGER; Average: LARGE_INTEGER; AverageRead: LARGE_INTEGER; AverageWrite: LARGE_INTEGER; Granularity: ulong; Size: ulong; ReadCount: ulong; WriteCount: ulong; Histogram: *HISTOGRAM_BUCKET; }
export type DISK_PERFORMANCE = struct { BytesRead: LARGE_INTEGER; BytesWritten: LARGE_INTEGER; ReadTime: LARGE_INTEGER; WriteTime: LARGE_INTEGER; IdleTime: LARGE_INTEGER; ReadCount: ulong; WriteCount: ulong; QueueDepth: ulong; SplitCount: ulong; QueryTime: LARGE_INTEGER; StorageDeviceNumber: ulong; StorageManagerName: [8; ushort]; }
export type DISK_RECORD = struct { ByteOffset: LARGE_INTEGER; StartTime: LARGE_INTEGER; EndTime: LARGE_INTEGER; VirtualAddress: *; NumberOfBytes: ulong; DeviceNumber: char; ReadRequest: char; }
export type DISK_LOGGING = struct { Function: char; BufferAddress: *; BufferSize: ulong; }
export type BIN_TYPES = enum { RequestSize; RequestLocation; }
export type BIN_RANGE = struct { StartValue: LARGE_INTEGER; Length: LARGE_INTEGER; }
export type PERF_BIN = struct { NumberOfBins: ulong; TypeOfBin: ulong; BinsRanges: [1; BIN_RANGE]; }
export type BIN_COUNT = struct { BinRange: BIN_RANGE; BinCount: ulong; }
export type BIN_RESULTS = struct { NumberOfBins: ulong; BinCounts: [1; BIN_COUNT]; }
export type GETVERSIONINPARAMS = struct { bVersion: char; bRevision: char; bReserved: char; bIDEDeviceMap: char; fCapabilities: ulong; dwReserved: [4; ulong]; }
export type IDEREGS = struct { bFeaturesReg: char; bSectorCountReg: char; bSectorNumberReg: char; bCylLowReg: char; bCylHighReg: char; bDriveHeadReg: char; bCommandReg: char; bReserved: char; }
export type SENDCMDINPARAMS = struct { cBufferSize: ulong; irDriveRegs: IDEREGS; bDriveNumber: char; bReserved: [3; char]; dwReserved: [4; ulong]; bBuffer: [1; char]; }
export type DRIVERSTATUS = struct { bDriverError: char; bIDEError: char; bReserved: [2; char]; dwReserved: [2; ulong]; }
export type SENDCMDOUTPARAMS = struct { cBufferSize: ulong; DriverStatus: DRIVERSTATUS; bBuffer: [1; char]; }
export type GET_DISK_ATTRIBUTES = struct { Version: ulong; Reserved1: ulong; Attributes: uint64; }
export type SET_DISK_ATTRIBUTES = struct { Version: ulong; Persist: char; Reserved1: [3; char]; Attributes: uint64; AttributesMask: uint64; Reserved2: [4; ulong]; }
export type ELEMENT_TYPE = enum { AllElements; ChangerTransport; ChangerSlot; ChangerIEPort; ChangerDrive; ChangerDoor; ChangerKeypad; ChangerMaxElement; }
export type CHANGER_ELEMENT = struct { ElementType: ELEMENT_TYPE; ElementAddress: ulong; }
export type CHANGER_ELEMENT_LIST = struct { Element: CHANGER_ELEMENT; NumberOfElements: ulong; }
export type GET_CHANGER_PARAMETERS = struct { Size: ulong; NumberTransportElements: ushort; NumberStorageElements: ushort; NumberCleanerSlots: ushort; NumberIEElements: ushort; NumberDataTransferElements: ushort; NumberOfDoors: ushort; FirstSlotNumber: ushort; FirstDriveNumber: ushort; FirstTransportNumber: ushort; FirstIEPortNumber: ushort; FirstCleanerSlotAddress: ushort; MagazineSize: ushort; DriveCleanTimeout: ulong; Features0: ulong; Features1: ulong; MoveFromTransport: char; MoveFromSlot: char; MoveFromIePort: char; MoveFromDrive: char; ExchangeFromTransport: char; ExchangeFromSlot: char; ExchangeFromIePort: char; ExchangeFromDrive: char; LockUnlockCapabilities: char; PositionCapabilities: char; Reserved1: [2; char]; Reserved2: [2; ulong]; }
export type CHANGER_PRODUCT_DATA = struct { VendorId: [8; char]; ProductId: [16; char]; Revision: [4; char]; SerialNumber: [32; char]; DeviceType: char; }
export type CHANGER_SET_ACCESS = struct { Element: CHANGER_ELEMENT; Control: ulong; }
export type CHANGER_READ_ELEMENT_STATUS = struct { ElementList: CHANGER_ELEMENT_LIST; VolumeTagInfo: char; }
export type CHANGER_ELEMENT_STATUS = struct { Element: CHANGER_ELEMENT; SrcElementAddress: CHANGER_ELEMENT; Flags: ulong; ExceptionCode: ulong; TargetId: char; Lun: char; Reserved: ushort; PrimaryVolumeID: [36; char]; AlternateVolumeID: [36; char]; }
export type CHANGER_ELEMENT_STATUS_EX = struct { Element: CHANGER_ELEMENT; SrcElementAddress: CHANGER_ELEMENT; Flags: ulong; ExceptionCode: ulong; TargetId: char; Lun: char; Reserved: ushort; PrimaryVolumeID: [36; char]; AlternateVolumeID: [36; char]; VendorIdentification: [8; char]; ProductIdentification: [16; char]; SerialNumber: [32; char]; }
export type CHANGER_INITIALIZE_ELEMENT_STATUS = struct { ElementList: CHANGER_ELEMENT_LIST; BarCodeScan: char; }
export type CHANGER_SET_POSITION = struct { Transport: CHANGER_ELEMENT; Destination: CHANGER_ELEMENT; Flip: char; }
export type CHANGER_EXCHANGE_MEDIUM = struct { Transport: CHANGER_ELEMENT; Source: CHANGER_ELEMENT; Destination1: CHANGER_ELEMENT; Destination2: CHANGER_ELEMENT; Flip1: char; Flip2: char; }
export type CHANGER_MOVE_MEDIUM = struct { Transport: CHANGER_ELEMENT; Source: CHANGER_ELEMENT; Destination: CHANGER_ELEMENT; Flip: char; }
export type CHANGER_SEND_VOLUME_TAG_INFORMATION = struct { StartingElement: CHANGER_ELEMENT; ActionCode: ulong; VolumeIDTemplate: [40; char]; }
export type READ_ELEMENT_ADDRESS_INFO = struct { NumberOfElements: ulong; ElementStatus: [1; CHANGER_ELEMENT_STATUS]; }
export type CHANGER_DEVICE_PROBLEM_TYPE = enum { DeviceProblemNone; DeviceProblemHardware; DeviceProblemCHMError; DeviceProblemDoorOpen; DeviceProblemCalibrationError; DeviceProblemTargetFailure; DeviceProblemCHMMoveError; DeviceProblemCHMZeroError; DeviceProblemCartridgeInsertError; DeviceProblemPositionError; DeviceProblemSensorError; DeviceProblemCartridgeEjectError; DeviceProblemGripperError; DeviceProblemDriveError; }
export type PATHNAME_BUFFER = struct { PathNameLength: ulong; Name: [1; ushort]; }
export type FSCTL_QUERY_FAT_BPB_BUFFER = struct { First0x24BytesOfBootSector: [36; char]; }
export type NTFS_VOLUME_DATA_BUFFER = struct { VolumeSerialNumber: LARGE_INTEGER; NumberSectors: LARGE_INTEGER; TotalClusters: LARGE_INTEGER; FreeClusters: LARGE_INTEGER; TotalReserved: LARGE_INTEGER; BytesPerSector: ulong; BytesPerCluster: ulong; BytesPerFileRecordSegment: ulong; ClustersPerFileRecordSegment: ulong; MftValidDataLength: LARGE_INTEGER; MftStartLcn: LARGE_INTEGER; Mft2StartLcn: LARGE_INTEGER; MftZoneStart: LARGE_INTEGER; MftZoneEnd: LARGE_INTEGER; }
export type NTFS_EXTENDED_VOLUME_DATA = struct { ByteCount: ulong; MajorVersion: ushort; MinorVersion: ushort; BytesPerPhysicalSector: ulong; LfsMajorVersion: ushort; LfsMinorVersion: ushort; MaxDeviceTrimExtentCount: ulong; MaxDeviceTrimByteCount: ulong; MaxVolumeTrimExtentCount: ulong; MaxVolumeTrimByteCount: ulong; }
export type REFS_VOLUME_DATA_BUFFER = struct { ByteCount: ulong; MajorVersion: ulong; MinorVersion: ulong; BytesPerPhysicalSector: ulong; VolumeSerialNumber: LARGE_INTEGER; NumberSectors: LARGE_INTEGER; TotalClusters: LARGE_INTEGER; FreeClusters: LARGE_INTEGER; TotalReserved: LARGE_INTEGER; BytesPerSector: ulong; BytesPerCluster: ulong; MaximumSizeOfResidentFile: LARGE_INTEGER; FastTierDataFillRatio: ushort; SlowTierDataFillRatio: ushort; DestagesFastTierToSlowTierRate: ulong; Reserved: [9; LARGE_INTEGER]; }
export type STARTING_LCN_INPUT_BUFFER = struct { StartingLcn: LARGE_INTEGER; }
export type STARTING_LCN_INPUT_BUFFER_EX = struct { StartingLcn: LARGE_INTEGER; Flags: ulong; }
export type VOLUME_BITMAP_BUFFER = struct { StartingLcn: LARGE_INTEGER; BitmapSize: LARGE_INTEGER; Buffer: [1; char]; }
export type STARTING_VCN_INPUT_BUFFER = struct { StartingVcn: LARGE_INTEGER; }
export type RETRIEVAL_POINTERS_BUFFER = struct { ExtentCount: ulong; StartingVcn: LARGE_INTEGER; Extents: struct { NextVcn: LARGE_INTEGER; Lcn: LARGE_INTEGER; }; }
export type RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER = struct { ExtentCount: ulong; StartingVcn: LARGE_INTEGER; Extents: struct { NextVcn: LARGE_INTEGER; Lcn: LARGE_INTEGER; ReferenceCount: ulong; }; }
export type RETRIEVAL_POINTER_COUNT = struct { ExtentCount: ulong; }
export type NTFS_FILE_RECORD_INPUT_BUFFER = struct { FileReferenceNumber: LARGE_INTEGER; }
export type NTFS_FILE_RECORD_OUTPUT_BUFFER = struct { FileReferenceNumber: LARGE_INTEGER; FileRecordLength: ulong; FileRecordBuffer: [1; char]; }
export type MOVE_FILE_DATA = struct { FileHandle: *; StartingVcn: LARGE_INTEGER; StartingLcn: LARGE_INTEGER; ClusterCount: ulong; }
export type MOVE_FILE_RECORD_DATA = struct { FileHandle: *; SourceFileRecord: LARGE_INTEGER; TargetFileRecord: LARGE_INTEGER; }
export type MOVE_FILE_DATA32 = struct { FileHandle: uint; StartingVcn: LARGE_INTEGER; StartingLcn: LARGE_INTEGER; ClusterCount: ulong; }
export type FIND_BY_SID_DATA = struct { Restart: ulong; Sid: SID; }
export type FIND_BY_SID_OUTPUT = struct { NextEntryOffset: ulong; FileIndex: ulong; FileNameLength: ulong; FileName: [1; ushort]; }
export type MFT_ENUM_DATA_V0 = struct { StartFileReferenceNumber: uint64; LowUsn: int64; HighUsn: int64; }
export type MFT_ENUM_DATA_V1 = struct { StartFileReferenceNumber: uint64; LowUsn: int64; HighUsn: int64; MinMajorVersion: ushort; MaxMajorVersion: ushort; }
export type CREATE_USN_JOURNAL_DATA = struct { MaximumSize: uint64; AllocationDelta: uint64; }
export type READ_FILE_USN_DATA = struct { MinMajorVersion: ushort; MaxMajorVersion: ushort; }
export type READ_USN_JOURNAL_DATA_V0 = struct { StartUsn: int64; ReasonMask: ulong; ReturnOnlyOnClose: ulong; Timeout: uint64; BytesToWaitFor: uint64; UsnJournalID: uint64; }
export type READ_USN_JOURNAL_DATA_V1 = struct { StartUsn: int64; ReasonMask: ulong; ReturnOnlyOnClose: ulong; Timeout: uint64; BytesToWaitFor: uint64; UsnJournalID: uint64; MinMajorVersion: ushort; MaxMajorVersion: ushort; }
export type USN_TRACK_MODIFIED_RANGES = struct { Flags: ulong; Unused: ulong; ChunkSize: uint64; FileSizeThreshold: int64; }
export type USN_RANGE_TRACK_OUTPUT = struct { Usn: int64; }
export type USN_RECORD_V2 = struct { RecordLength: ulong; MajorVersion: ushort; MinorVersion: ushort; FileReferenceNumber: uint64; ParentFileReferenceNumber: uint64; Usn: int64; TimeStamp: LARGE_INTEGER; Reason: ulong; SourceInfo: ulong; SecurityId: ulong; FileAttributes: ulong; FileNameLength: ushort; FileNameOffset: ushort; FileName: [1; ushort]; }
export type USN_RECORD_V3 = struct { RecordLength: ulong; MajorVersion: ushort; MinorVersion: ushort; FileReferenceNumber: FILE_ID_128; ParentFileReferenceNumber: FILE_ID_128; Usn: int64; TimeStamp: LARGE_INTEGER; Reason: ulong; SourceInfo: ulong; SecurityId: ulong; FileAttributes: ulong; FileNameLength: ushort; FileNameOffset: ushort; FileName: [1; ushort]; }
export type USN_RECORD_COMMON_HEADER = struct { RecordLength: ulong; MajorVersion: ushort; MinorVersion: ushort; }
export type USN_RECORD_EXTENT = struct { Offset: int64; Length: int64; }
export type USN_RECORD_V4 = struct { Header: USN_RECORD_COMMON_HEADER; FileReferenceNumber: FILE_ID_128; ParentFileReferenceNumber: FILE_ID_128; Usn: int64; Reason: ulong; SourceInfo: ulong; RemainingExtents: ulong; NumberOfExtents: ushort; ExtentSize: ushort; Extents: [1; USN_RECORD_EXTENT]; }
export type USN_RECORD_UNION = struct #union { Header: USN_RECORD_COMMON_HEADER; V2: USN_RECORD_V2; V3: USN_RECORD_V3; V4: USN_RECORD_V4; }
export type USN_JOURNAL_DATA_V0 = struct { UsnJournalID: uint64; FirstUsn: int64; NextUsn: int64; LowestValidUsn: int64; MaxUsn: int64; MaximumSize: uint64; AllocationDelta: uint64; }
export type USN_JOURNAL_DATA_V1 = struct { UsnJournalID: uint64; FirstUsn: int64; NextUsn: int64; LowestValidUsn: int64; MaxUsn: int64; MaximumSize: uint64; AllocationDelta: uint64; MinSupportedMajorVersion: ushort; MaxSupportedMajorVersion: ushort; }
export type USN_JOURNAL_DATA_V2 = struct { UsnJournalID: uint64; FirstUsn: int64; NextUsn: int64; LowestValidUsn: int64; MaxUsn: int64; MaximumSize: uint64; AllocationDelta: uint64; MinSupportedMajorVersion: ushort; MaxSupportedMajorVersion: ushort; Flags: ulong; RangeTrackChunkSize: uint64; RangeTrackFileSizeThreshold: int64; }
export type DELETE_USN_JOURNAL_DATA = struct { UsnJournalID: uint64; DeleteFlags: ulong; }
export type MARK_HANDLE_INFO = struct { _1: struct #union { UsnSourceInfo: ulong; CopyNumber: ulong; }; VolumeHandle: *; HandleInfo: ulong; }
export type MARK_HANDLE_INFO32 = struct { _1: struct #union { UsnSourceInfo: ulong; CopyNumber: ulong; }; VolumeHandle: uint; HandleInfo: ulong; }
export type BULK_SECURITY_TEST_DATA = struct { DesiredAccess: ulong; SecurityIds: [1; ulong]; }
export type FILE_PREFETCH = struct { Type: ulong; Count: ulong; Prefetch: [1; uint64]; }
export type FILE_PREFETCH_EX = struct { Type: ulong; Count: ulong; Context: *; Prefetch: [1; uint64]; }
export type FILESYSTEM_STATISTICS = struct { FileSystemType: ushort; Version: ushort; SizeOfCompleteStructure: ulong; UserFileReads: ulong; UserFileReadBytes: ulong; UserDiskReads: ulong; UserFileWrites: ulong; UserFileWriteBytes: ulong; UserDiskWrites: ulong; MetaDataReads: ulong; MetaDataReadBytes: ulong; MetaDataDiskReads: ulong; MetaDataWrites: ulong; MetaDataWriteBytes: ulong; MetaDataDiskWrites: ulong; }
export type FAT_STATISTICS = struct { CreateHits: ulong; SuccessfulCreates: ulong; FailedCreates: ulong; NonCachedReads: ulong; NonCachedReadBytes: ulong; NonCachedWrites: ulong; NonCachedWriteBytes: ulong; NonCachedDiskReads: ulong; NonCachedDiskWrites: ulong; }
export type EXFAT_STATISTICS = struct { CreateHits: ulong; SuccessfulCreates: ulong; FailedCreates: ulong; NonCachedReads: ulong; NonCachedReadBytes: ulong; NonCachedWrites: ulong; NonCachedWriteBytes: ulong; NonCachedDiskReads: ulong; NonCachedDiskWrites: ulong; }
export type NTFS_STATISTICS = struct { LogFileFullExceptions: ulong; OtherExceptions: ulong; MftReads: ulong; MftReadBytes: ulong; MftWrites: ulong; MftWriteBytes: ulong; MftWritesUserLevel: struct { Write: ushort; Create: ushort; SetInfo: ushort; Flush: ushort; }; MftWritesFlushForLogFileFull: ushort; MftWritesLazyWriter: ushort; MftWritesUserRequest: ushort; Mft2Writes: ulong; Mft2WriteBytes: ulong; Mft2WritesUserLevel: struct { Write: ushort; Create: ushort; SetInfo: ushort; Flush: ushort; }; Mft2WritesFlushForLogFileFull: ushort; Mft2WritesLazyWriter: ushort; Mft2WritesUserRequest: ushort; RootIndexReads: ulong; RootIndexReadBytes: ulong; RootIndexWrites: ulong; RootIndexWriteBytes: ulong; BitmapReads: ulong; BitmapReadBytes: ulong; BitmapWrites: ulong; BitmapWriteBytes: ulong; BitmapWritesFlushForLogFileFull: ushort; BitmapWritesLazyWriter: ushort; BitmapWritesUserRequest: ushort; BitmapWritesUserLevel: struct { Write: ushort; Create: ushort; SetInfo: ushort; }; MftBitmapReads: ulong; MftBitmapReadBytes: ulong; MftBitmapWrites: ulong; MftBitmapWriteBytes: ulong; MftBitmapWritesFlushForLogFileFull: ushort; MftBitmapWritesLazyWriter: ushort; MftBitmapWritesUserRequest: ushort; MftBitmapWritesUserLevel: struct { Write: ushort; Create: ushort; SetInfo: ushort; Flush: ushort; }; UserIndexReads: ulong; UserIndexReadBytes: ulong; UserIndexWrites: ulong; UserIndexWriteBytes: ulong; LogFileReads: ulong; LogFileReadBytes: ulong; LogFileWrites: ulong; LogFileWriteBytes: ulong; Allocate: struct { Calls: ulong; Clusters: ulong; Hints: ulong; RunsReturned: ulong; HintsHonored: ulong; HintsClusters: ulong; Cache: ulong; CacheClusters: ulong; CacheMiss: ulong; CacheMissClusters: ulong; }; DiskResourcesExhausted: ulong; }
export type FILESYSTEM_STATISTICS_EX = struct { FileSystemType: ushort; Version: ushort; SizeOfCompleteStructure: ulong; UserFileReads: uint64; UserFileReadBytes: uint64; UserDiskReads: uint64; UserFileWrites: uint64; UserFileWriteBytes: uint64; UserDiskWrites: uint64; MetaDataReads: uint64; MetaDataReadBytes: uint64; MetaDataDiskReads: uint64; MetaDataWrites: uint64; MetaDataWriteBytes: uint64; MetaDataDiskWrites: uint64; }
export type NTFS_STATISTICS_EX = struct { LogFileFullExceptions: ulong; OtherExceptions: ulong; MftReads: uint64; MftReadBytes: uint64; MftWrites: uint64; MftWriteBytes: uint64; MftWritesUserLevel: struct { Write: ulong; Create: ulong; SetInfo: ulong; Flush: ulong; }; MftWritesFlushForLogFileFull: ulong; MftWritesLazyWriter: ulong; MftWritesUserRequest: ulong; Mft2Writes: uint64; Mft2WriteBytes: uint64; Mft2WritesUserLevel: struct { Write: ulong; Create: ulong; SetInfo: ulong; Flush: ulong; }; Mft2WritesFlushForLogFileFull: ulong; Mft2WritesLazyWriter: ulong; Mft2WritesUserRequest: ulong; RootIndexReads: uint64; RootIndexReadBytes: uint64; RootIndexWrites: uint64; RootIndexWriteBytes: uint64; BitmapReads: uint64; BitmapReadBytes: uint64; BitmapWrites: uint64; BitmapWriteBytes: uint64; BitmapWritesFlushForLogFileFull: ulong; BitmapWritesLazyWriter: ulong; BitmapWritesUserRequest: ulong; BitmapWritesUserLevel: struct { Write: ulong; Create: ulong; SetInfo: ulong; Flush: ulong; }; MftBitmapReads: uint64; MftBitmapReadBytes: uint64; MftBitmapWrites: uint64; MftBitmapWriteBytes: uint64; MftBitmapWritesFlushForLogFileFull: ulong; MftBitmapWritesLazyWriter: ulong; MftBitmapWritesUserRequest: ulong; MftBitmapWritesUserLevel: struct { Write: ulong; Create: ulong; SetInfo: ulong; Flush: ulong; }; UserIndexReads: uint64; UserIndexReadBytes: uint64; UserIndexWrites: uint64; UserIndexWriteBytes: uint64; LogFileReads: uint64; LogFileReadBytes: uint64; LogFileWrites: uint64; LogFileWriteBytes: uint64; Allocate: struct { Calls: ulong; RunsReturned: ulong; Hints: ulong; HintsHonored: ulong; Cache: ulong; CacheMiss: ulong; Clusters: uint64; HintsClusters: uint64; CacheClusters: uint64; CacheMissClusters: uint64; }; DiskResourcesExhausted: ulong; VolumeTrimCount: uint64; VolumeTrimTime: uint64; VolumeTrimByteCount: uint64; FileLevelTrimCount: uint64; FileLevelTrimTime: uint64; FileLevelTrimByteCount: uint64; VolumeTrimSkippedCount: uint64; VolumeTrimSkippedByteCount: uint64; NtfsFillStatInfoFromMftRecordCalledCount: uint64; NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount: uint64; NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount: uint64; }
export type FILE_OBJECTID_BUFFER = struct { ObjectId: [16; char]; _2: struct #union { _1: struct { BirthVolumeId: [16; char]; BirthObjectId: [16; char]; DomainId: [16; char]; }; ExtendedInfo: [48; char]; }; }
export type FILE_SET_SPARSE_BUFFER = struct { SetSparse: char; }
export type FILE_ZERO_DATA_INFORMATION = struct { FileOffset: LARGE_INTEGER; BeyondFinalZero: LARGE_INTEGER; }
export type FILE_ZERO_DATA_INFORMATION_EX = struct { FileOffset: LARGE_INTEGER; BeyondFinalZero: LARGE_INTEGER; Flags: ulong; }
export type FILE_ALLOCATED_RANGE_BUFFER = struct { FileOffset: LARGE_INTEGER; Length: LARGE_INTEGER; }
export type ENCRYPTION_BUFFER = struct { EncryptionOperation: ulong; Private: [1; char]; }
export type DECRYPTION_STATUS_BUFFER = struct { NoEncryptedStreams: char; }
export type REQUEST_RAW_ENCRYPTED_DATA = struct { FileOffset: int64; Length: ulong; }
export type ENCRYPTED_DATA_INFO = struct { StartingFileOffset: uint64; OutputBufferOffset: ulong; BytesWithinFileSize: ulong; BytesWithinValidDataLength: ulong; CompressionFormat: ushort; DataUnitShift: char; ChunkShift: char; ClusterShift: char; EncryptionFormat: char; NumberOfDataBlocks: ushort; DataBlockSize: [1; ulong]; }
export type EXTENDED_ENCRYPTED_DATA_INFO = struct { ExtendedCode: ulong; Length: ulong; Flags: ulong; Reserved: ulong; }
export type PLEX_READ_DATA_REQUEST = struct { ByteOffset: LARGE_INTEGER; ByteLength: ulong; PlexNumber: ulong; }
export type SI_COPYFILE = struct { SourceFileNameLength: ulong; DestinationFileNameLength: ulong; Flags: ulong; FileNameBuffer: [1; ushort]; }
export type FILE_MAKE_COMPATIBLE_BUFFER = struct { CloseDisc: char; }
export type FILE_SET_DEFECT_MGMT_BUFFER = struct { Disable: char; }
export type FILE_QUERY_SPARING_BUFFER = struct { SparingUnitBytes: ulong; SoftwareSparing: char; TotalSpareBlocks: ulong; FreeSpareBlocks: ulong; }
export type FILE_QUERY_ON_DISK_VOL_INFO_BUFFER = struct { DirectoryCount: LARGE_INTEGER; FileCount: LARGE_INTEGER; FsFormatMajVersion: ushort; FsFormatMinVersion: ushort; FsFormatName: [12; ushort]; FormatTime: LARGE_INTEGER; LastUpdateTime: LARGE_INTEGER; CopyrightInfo: [34; ushort]; AbstractInfo: [34; ushort]; FormattingImplementationInfo: [34; ushort]; LastModifyingImplementationInfo: [34; ushort]; }
export type FILE_INITIATE_REPAIR_OUTPUT_BUFFER = struct { Hint1: uint64; Hint2: uint64; Clsn: uint64; Status: ulong; }
export type SHRINK_VOLUME_REQUEST_TYPES = enum { ShrinkPrepare = 1; ShrinkCommit; ShrinkAbort; }
export type SHRINK_VOLUME_INFORMATION = struct { ShrinkRequestType: SHRINK_VOLUME_REQUEST_TYPES; Flags: uint64; NewNumberOfSectors: int64; }
export type TXFS_MODIFY_RM = struct { Flags: ulong; LogContainerCountMax: ulong; LogContainerCountMin: ulong; LogContainerCount: ulong; LogGrowthIncrement: ulong; LogAutoShrinkPercentage: ulong; Reserved: uint64; LoggingMode: ushort; }
export type TXFS_QUERY_RM_INFORMATION = struct { BytesRequired: ulong; TailLsn: uint64; CurrentLsn: uint64; ArchiveTailLsn: uint64; LogContainerSize: uint64; HighestVirtualClock: LARGE_INTEGER; LogContainerCount: ulong; LogContainerCountMax: ulong; LogContainerCountMin: ulong; LogGrowthIncrement: ulong; LogAutoShrinkPercentage: ulong; Flags: ulong; LoggingMode: ushort; Reserved: ushort; RmState: ulong; LogCapacity: uint64; LogFree: uint64; TopsSize: uint64; TopsUsed: uint64; TransactionCount: uint64; OnePCCount: uint64; TwoPCCount: uint64; NumberLogFileFull: uint64; OldestTransactionAge: uint64; RMName: GUID; TmLogPathOffset: ulong; }
export type TXFS_ROLLFORWARD_REDO_INFORMATION = struct { LastVirtualClock: LARGE_INTEGER; LastRedoLsn: uint64; HighestRecoveryLsn: uint64; Flags: ulong; }
export type TXFS_START_RM_INFORMATION = struct { Flags: ulong; LogContainerSize: uint64; LogContainerCountMin: ulong; LogContainerCountMax: ulong; LogGrowthIncrement: ulong; LogAutoShrinkPercentage: ulong; TmLogPathOffset: ulong; TmLogPathLength: ushort; LoggingMode: ushort; LogPathLength: ushort; Reserved: ushort; LogPath: [1; ushort]; }
export type TXFS_GET_METADATA_INFO_OUT = struct { TxfFileId: struct { LowPart: int64; HighPart: int64; }; LockingTransaction: GUID; LastLsn: uint64; TransactionState: ulong; }
export type TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY = struct { Offset: uint64; NameFlags: ulong; FileId: int64; Reserved1: ulong; Reserved2: ulong; Reserved3: int64; FileName: [1; ushort]; }
export type TXFS_LIST_TRANSACTION_LOCKED_FILES = struct { KtmTransaction: GUID; NumberOfFiles: uint64; BufferSizeRequired: uint64; Offset: uint64; }
export type TXFS_LIST_TRANSACTIONS_ENTRY = struct { TransactionId: GUID; TransactionState: ulong; Reserved1: ulong; Reserved2: ulong; Reserved3: int64; }
export type TXFS_LIST_TRANSACTIONS = struct { NumberOfTransactions: uint64; BufferSizeRequired: uint64; }
export type TXFS_READ_BACKUP_INFORMATION_OUT = struct { _1: struct #union { BufferLength: ulong; Buffer: [1; char]; }; }
export type TXFS_WRITE_BACKUP_INFORMATION = struct { Buffer: [1; char]; }
export type TXFS_GET_TRANSACTED_VERSION = struct { ThisBaseVersion: ulong; LatestVersion: ulong; ThisMiniVersion: ushort; FirstMiniVersion: ushort; LatestMiniVersion: ushort; }
export type TXFS_SAVEPOINT_INFORMATION = struct { KtmTransaction: *; ActionCode: ulong; SavepointId: ulong; }
export type TXFS_CREATE_MINIVERSION_INFO = struct { StructureVersion: ushort; StructureLength: ushort; BaseVersion: ulong; MiniVersion: ushort; }
export type TXFS_TRANSACTION_ACTIVE_INFO = struct { TransactionsActiveAtSnapshot: char; }
export type BOOT_AREA_INFO = struct { BootSectorCount: ulong; BootSectors: struct { Offset: LARGE_INTEGER; }; }
export type RETRIEVAL_POINTER_BASE = struct { FileAreaOffset: LARGE_INTEGER; }
export type FILE_FS_PERSISTENT_VOLUME_INFORMATION = struct { VolumeFlags: ulong; FlagMask: ulong; Version: ulong; Reserved: ulong; }
export type FILE_SYSTEM_RECOGNITION_INFORMATION = struct { FileSystem: [9; char]; }
export type REQUEST_OPLOCK_INPUT_BUFFER = struct { StructureVersion: ushort; StructureLength: ushort; RequestedOplockLevel: ulong; Flags: ulong; }
export type REQUEST_OPLOCK_OUTPUT_BUFFER = struct { StructureVersion: ushort; StructureLength: ushort; OriginalOplockLevel: ulong; NewOplockLevel: ulong; Flags: ulong; AccessMode: ulong; ShareMode: ushort; }
export type VIRTUAL_STORAGE_TYPE = struct { DeviceId: ulong; VendorId: GUID; }
export type STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST = struct { RequestLevel: ulong; RequestFlags: ulong; }
export type STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY = struct { EntryLength: ulong; DependencyTypeFlags: ulong; ProviderSpecificFlags: ulong; VirtualStorageType: VIRTUAL_STORAGE_TYPE; }
export type STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY = struct { EntryLength: ulong; DependencyTypeFlags: ulong; ProviderSpecificFlags: ulong; VirtualStorageType: VIRTUAL_STORAGE_TYPE; AncestorLevel: ulong; HostVolumeNameOffset: ulong; HostVolumeNameSize: ulong; DependentVolumeNameOffset: ulong; DependentVolumeNameSize: ulong; RelativePathOffset: ulong; RelativePathSize: ulong; DependentDeviceNameOffset: ulong; DependentDeviceNameSize: ulong; }
export type STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE = struct { ResponseLevel: ulong; NumberEntries: ulong; _3: struct #union { Lev1Depends: *STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY; Lev2Depends: *STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY; }; }
export type SD_CHANGE_MACHINE_SID_INPUT = struct { CurrentMachineSIDOffset: ushort; CurrentMachineSIDLength: ushort; NewMachineSIDOffset: ushort; NewMachineSIDLength: ushort; }
export type SD_CHANGE_MACHINE_SID_OUTPUT = struct { NumSDChangedSuccess: uint64; NumSDChangedFail: uint64; NumSDUnused: uint64; NumSDTotal: uint64; NumMftSDChangedSuccess: uint64; NumMftSDChangedFail: uint64; NumMftSDTotal: uint64; }
export type SD_QUERY_STATS_INPUT = struct { Reserved: ulong; }
export type SD_QUERY_STATS_OUTPUT = struct { SdsStreamSize: uint64; SdsAllocationSize: uint64; SiiStreamSize: uint64; SiiAllocationSize: uint64; SdhStreamSize: uint64; SdhAllocationSize: uint64; NumSDTotal: uint64; NumSDUnused: uint64; }
export type SD_ENUM_SDS_INPUT = struct { StartingOffset: uint64; MaxSDEntriesToReturn: uint64; }
export type SD_ENUM_SDS_ENTRY = struct { Hash: ulong; SecurityId: ulong; Offset: uint64; Length: ulong; Descriptor: [1; char]; }
export type SD_ENUM_SDS_OUTPUT = struct { NextOffset: uint64; NumSDEntriesReturned: uint64; NumSDBytesReturned: uint64; SDEntry: [1; SD_ENUM_SDS_ENTRY]; }
export type SD_GLOBAL_CHANGE_INPUT = struct { Flags: ulong; ChangeType: ulong; _3: struct #union { SdChange: SD_CHANGE_MACHINE_SID_INPUT; SdQueryStats: SD_QUERY_STATS_INPUT; SdEnumSds: SD_ENUM_SDS_INPUT; }; }
export type SD_GLOBAL_CHANGE_OUTPUT = struct { Flags: ulong; ChangeType: ulong; _3: struct #union { SdChange: SD_CHANGE_MACHINE_SID_OUTPUT; SdQueryStats: SD_QUERY_STATS_OUTPUT; SdEnumSds: SD_ENUM_SDS_OUTPUT; }; }
export type LOOKUP_STREAM_FROM_CLUSTER_INPUT = struct { Flags: ulong; NumberOfClusters: ulong; Cluster: [1; LARGE_INTEGER]; }
export type LOOKUP_STREAM_FROM_CLUSTER_OUTPUT = struct { Offset: ulong; NumberOfMatches: ulong; BufferSizeRequired: ulong; }
export type LOOKUP_STREAM_FROM_CLUSTER_ENTRY = struct { OffsetToNext: ulong; Flags: ulong; Reserved: LARGE_INTEGER; Cluster: LARGE_INTEGER; FileName: [1; ushort]; }
export type FILE_TYPE_NOTIFICATION_INPUT = struct { Flags: ulong; NumFileTypeIDs: ulong; FileTypeID: [1; GUID]; }
export type CSV_MGMT_LOCK = struct { Flags: ulong; }
export type CSV_NAMESPACE_INFO = struct { Version: ulong; DeviceNumber: ulong; StartingOffset: LARGE_INTEGER; SectorSize: ulong; }
export type CSV_CONTROL_OP = enum { CsvControlStartRedirectFile = 2; CsvControlStopRedirectFile = 3; CsvControlQueryRedirectState = 4; CsvControlQueryFileRevision = 6; CsvControlQueryMdsPath = 8; CsvControlQueryFileRevisionFileId128 = 9; CsvControlQueryVolumeRedirectState = 10; CsvControlEnableUSNRangeModificationTracking = 13; CsvControlMarkHandleLocalVolumeMount = 14; CsvControlUnmarkHandleLocalVolumeMount = 15; CsvControlGetCsvFsMdsPathV2 = 18; CsvControlDisableCaching = 19; CsvControlEnableCaching = 20; CsvControlStartForceDFO = 21; CsvControlStopForceDFO = 22; }
export type CSV_CONTROL_PARAM = struct { Operation: CSV_CONTROL_OP; Unused: int64; }
export type CSV_QUERY_REDIRECT_STATE = struct { MdsNodeId: ulong; DsNodeId: ulong; FileRedirected: char; }
export type CSV_QUERY_FILE_REVISION = struct { FileId: int64; FileRevision: [3; int64]; }
export type CSV_QUERY_FILE_REVISION_FILE_ID_128 = struct { FileId: FILE_ID_128; FileRevision: [3; int64]; }
export type CSV_QUERY_MDS_PATH = struct { MdsNodeId: ulong; DsNodeId: ulong; PathLength: ulong; Path: [1; ushort]; }
export type CSVFS_DISK_CONNECTIVITY = enum { CsvFsDiskConnectivityNone = 0; CsvFsDiskConnectivityMdsNodeOnly = 1; CsvFsDiskConnectivitySubsetOfNodes = 2; CsvFsDiskConnectivityAllNodes = 3; }
export type CSV_QUERY_VOLUME_REDIRECT_STATE = struct { MdsNodeId: ulong; DsNodeId: ulong; IsDiskConnected: char; ClusterEnableDirectIo: char; DiskConnectivity: CSVFS_DISK_CONNECTIVITY; }
export type CSV_QUERY_MDS_PATH_V2 = struct { Version: int64; RequiredSize: ulong; MdsNodeId: ulong; DsNodeId: ulong; Flags: ulong; DiskConnectivity: CSVFS_DISK_CONNECTIVITY; VolumeId: GUID; IpAddressOffset: ulong; IpAddressLength: ulong; PathOffset: ulong; PathLength: ulong; }
export type CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT = struct { VetoedFromAltitudeIntegral: uint64; VetoedFromAltitudeDecimal: uint64; Reason: [256; ushort]; }
export type STORAGE_RESERVE_ID = enum { StorageReserveIdNone = 0; StorageReserveIdHard; StorageReserveIdSoft; StorageReserveIdUpdateScratch; StorageReserveIdMax; }
export type CSV_IS_OWNED_BY_CSVFS = struct { OwnedByCSVFS: char; }
export type FILE_LEVEL_TRIM_RANGE = struct { Offset: uint64; Length: uint64; }
export type FILE_LEVEL_TRIM = struct { Key: ulong; NumRanges: ulong; Ranges: [1; FILE_LEVEL_TRIM_RANGE]; }
export type FILE_LEVEL_TRIM_OUTPUT = struct { NumRangesProcessed: ulong; }
export type QUERY_FILE_LAYOUT_FILTER_TYPE = enum { QUERY_FILE_LAYOUT_FILTER_TYPE_NONE = 0; QUERY_FILE_LAYOUT_FILTER_TYPE_CLUSTERS = 1; QUERY_FILE_LAYOUT_FILTER_TYPE_FILEID = 2; QUERY_FILE_LAYOUT_FILTER_TYPE_STORAGE_RESERVE_ID = 3; QUERY_FILE_LAYOUT_NUM_FILTER_TYPES; }
export type CLUSTER_RANGE = struct { StartingCluster: LARGE_INTEGER; ClusterCount: LARGE_INTEGER; }
export type FILE_REFERENCE_RANGE = struct { StartingFileReferenceNumber: uint64; EndingFileReferenceNumber: uint64; }
export type QUERY_FILE_LAYOUT_INPUT = struct { _1: struct #union { FilterEntryCount: ulong; NumberOfPairs: ulong; }; Flags: ulong; FilterType: QUERY_FILE_LAYOUT_FILTER_TYPE; Reserved: ulong; Filter: struct #union { ClusterRanges: [1; CLUSTER_RANGE]; FileReferenceRanges: [1; FILE_REFERENCE_RANGE]; StorageReserveIds: [1; STORAGE_RESERVE_ID]; }; }
export type QUERY_FILE_LAYOUT_OUTPUT = struct { FileEntryCount: ulong; FirstFileOffset: ulong; Flags: ulong; Reserved: ulong; }
export type FILE_LAYOUT_ENTRY = struct { Version: ulong; NextFileOffset: ulong; Flags: ulong; FileAttributes: ulong; FileReferenceNumber: uint64; FirstNameOffset: ulong; FirstStreamOffset: ulong; ExtraInfoOffset: ulong; ExtraInfoLength: ulong; }
export type FILE_LAYOUT_NAME_ENTRY = struct { NextNameOffset: ulong; Flags: ulong; ParentFileReferenceNumber: uint64; FileNameLength: ulong; Reserved: ulong; FileName: [1; ushort]; }
export type FILE_LAYOUT_INFO_ENTRY = struct { BasicInformation: struct { CreationTime: LARGE_INTEGER; LastAccessTime: LARGE_INTEGER; LastWriteTime: LARGE_INTEGER; ChangeTime: LARGE_INTEGER; FileAttributes: ulong; }; OwnerId: ulong; SecurityId: ulong; Usn: int64; StorageReserveId: STORAGE_RESERVE_ID; }
export type STREAM_LAYOUT_ENTRY = struct { Version: ulong; NextStreamOffset: ulong; Flags: ulong; ExtentInformationOffset: ulong; AllocationSize: LARGE_INTEGER; EndOfFile: LARGE_INTEGER; StreamInformationOffset: ulong; AttributeTypeCode: ulong; AttributeFlags: ulong; StreamIdentifierLength: ulong; StreamIdentifier: [1; ushort]; }
export type STREAM_EXTENT_ENTRY = struct { Flags: ulong; ExtentInformation: struct #union { RetrievalPointers: RETRIEVAL_POINTERS_BUFFER; }; }
export type FSCTL_GET_INTEGRITY_INFORMATION_BUFFER = struct { ChecksumAlgorithm: ushort; Reserved: ushort; Flags: ulong; ChecksumChunkSizeInBytes: ulong; ClusterSizeInBytes: ulong; }
export type FSCTL_SET_INTEGRITY_INFORMATION_BUFFER = struct { ChecksumAlgorithm: ushort; Reserved: ushort; Flags: ulong; }
export type FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX = struct { EnableIntegrity: char; KeepIntegrityStateUnchanged: char; Reserved: ushort; Flags: ulong; Version: char; Reserved2: [7; char]; }
export type FSCTL_OFFLOAD_READ_INPUT = struct { Size: ulong; Flags: ulong; TokenTimeToLive: ulong; Reserved: ulong; FileOffset: uint64; CopyLength: uint64; }
export type FSCTL_OFFLOAD_READ_OUTPUT = struct { Size: ulong; Flags: ulong; TransferLength: uint64; Token: [512; char]; }
export type FSCTL_OFFLOAD_WRITE_INPUT = struct { Size: ulong; Flags: ulong; FileOffset: uint64; CopyLength: uint64; TransferOffset: uint64; Token: [512; char]; }
export type FSCTL_OFFLOAD_WRITE_OUTPUT = struct { Size: ulong; Flags: ulong; LengthWritten: uint64; }
export type SET_PURGE_FAILURE_MODE_INPUT = struct { Flags: ulong; }
export type REPAIR_COPIES_INPUT = struct { Size: ulong; Flags: ulong; FileOffset: LARGE_INTEGER; Length: ulong; SourceCopy: ulong; NumberOfRepairCopies: ulong; RepairCopies: [1; ulong]; }
export type REPAIR_COPIES_OUTPUT = struct { Size: ulong; Status: ulong; ResumeFileOffset: LARGE_INTEGER; }
export type FILE_REGION_INFO = struct { FileOffset: int64; Length: int64; Usage: ulong; Reserved: ulong; }
export type FILE_REGION_OUTPUT = struct { Flags: ulong; TotalRegionEntryCount: ulong; RegionEntryCount: ulong; Reserved: ulong; Region: [1; FILE_REGION_INFO]; }
export type FILE_REGION_INPUT = struct { FileOffset: int64; Length: int64; DesiredUsage: ulong; }
export type WRITE_USN_REASON_INPUT = struct { Flags: ulong; UsnReasonToWrite: ulong; }
export type FILE_STORAGE_TIER_MEDIA_TYPE = enum { FileStorageTierMediaTypeUnspecified = 0; FileStorageTierMediaTypeDisk = 1; FileStorageTierMediaTypeSsd = 2; FileStorageTierMediaTypeScm = 4; FileStorageTierMediaTypeMax; }
export type FILE_STORAGE_TIER_CLASS = enum { FileStorageTierClassUnspecified = 0; FileStorageTierClassCapacity; FileStorageTierClassPerformance; FileStorageTierClassMax; }
export type FILE_STORAGE_TIER = struct { Id: GUID; Name: [256; ushort]; Description: [256; ushort]; Flags: uint64; ProvisionedCapacity: uint64; MediaType: FILE_STORAGE_TIER_MEDIA_TYPE; Class: FILE_STORAGE_TIER_CLASS; }
export type FSCTL_QUERY_STORAGE_CLASSES_OUTPUT = struct { Version: ulong; Size: ulong; Flags: ulong; TotalNumberOfTiers: ulong; NumberOfTiersReturned: ulong; Tiers: [1; FILE_STORAGE_TIER]; }
export type s__DesiredStorageClass = struct { Class: FILE_STORAGE_TIER_CLASS; Flags: ulong; }
export type s__DataStream = struct { Length: ushort; Flags: ushort; Reserved: ulong; Vdl: uint64; }
export type s__Reparse = struct { Length: ushort; Flags: ushort; ReparseDataSize: ulong; ReparseDataOffset: ulong; }
export type s__Ea = struct { Length: ushort; Flags: ushort; EaSize: ulong; EaInformationOffset: ulong; }
export type u__StreamInformation = struct #union { DesiredStorageClass: s__DesiredStorageClass; DataStream: s__DataStream; Reparse: s__Reparse; Ea: s__Ea; }
export type STREAM_INFORMATION_ENTRY = struct { Version: ulong; Flags: ulong; StreamInformation: u__StreamInformation; }
export type FSCTL_QUERY_REGION_INFO_INPUT = struct { Version: ulong; Size: ulong; Flags: ulong; NumberOfTierIds: ulong; TierIds: [1; GUID]; }
export type FILE_STORAGE_TIER_REGION = struct { TierId: GUID; Offset: uint64; Length: uint64; }
export type FSCTL_QUERY_REGION_INFO_OUTPUT = struct { Version: ulong; Size: ulong; Flags: ulong; Reserved: ulong; Alignment: uint64; TotalNumberOfRegions: ulong; NumberOfRegionsReturned: ulong; Regions: [1; FILE_STORAGE_TIER_REGION]; }
export type FILE_DESIRED_STORAGE_CLASS_INFORMATION = struct { Class: FILE_STORAGE_TIER_CLASS; Flags: ulong; }
export type DUPLICATE_EXTENTS_DATA = struct { FileHandle: *; SourceFileOffset: LARGE_INTEGER; TargetFileOffset: LARGE_INTEGER; ByteCount: LARGE_INTEGER; }
export type DUPLICATE_EXTENTS_DATA32 = struct { FileHandle: uint; SourceFileOffset: LARGE_INTEGER; TargetFileOffset: LARGE_INTEGER; ByteCount: LARGE_INTEGER; }
export type DUPLICATE_EXTENTS_DATA_EX = struct { Size: uint64; FileHandle: *; SourceFileOffset: LARGE_INTEGER; TargetFileOffset: LARGE_INTEGER; ByteCount: LARGE_INTEGER; Flags: ulong; }
export type DUPLICATE_EXTENTS_DATA_EX32 = struct { Size: uint; FileHandle: uint; SourceFileOffset: LARGE_INTEGER; TargetFileOffset: LARGE_INTEGER; ByteCount: LARGE_INTEGER; Flags: ulong; }
export type REFS_SMR_VOLUME_GC_STATE = enum { SmrGcStateInactive = 0; SmrGcStatePaused = 1; SmrGcStateActive = 2; SmrGcStateActiveFullSpeed = 3; }
export type REFS_SMR_VOLUME_INFO_OUTPUT = struct { Version: ulong; Flags: ulong; SizeOfRandomlyWritableTier: LARGE_INTEGER; FreeSpaceInRandomlyWritableTier: LARGE_INTEGER; SizeofSMRTier: LARGE_INTEGER; FreeSpaceInSMRTier: LARGE_INTEGER; UsableFreeSpaceInSMRTier: LARGE_INTEGER; VolumeGcState: REFS_SMR_VOLUME_GC_STATE; VolumeGcLastStatus: ulong; Unused: [7; uint64]; }
export type REFS_SMR_VOLUME_GC_ACTION = enum { SmrGcActionStart = 1; SmrGcActionStartFullSpeed = 2; SmrGcActionPause = 3; SmrGcActionStop = 4; }
export type REFS_SMR_VOLUME_GC_METHOD = enum { SmrGcMethodCompaction = 1; SmrGcMethodCompression = 2; SmrGcMethodRotation = 3; }
export type REFS_SMR_VOLUME_GC_PARAMETERS = struct { Version: ulong; Flags: ulong; Action: REFS_SMR_VOLUME_GC_ACTION; Method: REFS_SMR_VOLUME_GC_METHOD; IoGranularity: ulong; CompressionFormat: ulong; Unused: [8; uint64]; }
export type STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER = struct { OptimalWriteSize: ulong; StreamGranularitySize: ulong; StreamIdMin: ulong; StreamIdMax: ulong; }
export type STREAMS_ASSOCIATE_ID_INPUT_BUFFER = struct { Flags: ulong; StreamId: ulong; }
export type STREAMS_QUERY_ID_OUTPUT_BUFFER = struct { StreamId: ulong; }
export type QUERY_BAD_RANGES_INPUT_RANGE = struct { StartOffset: uint64; LengthInBytes: uint64; }
export type QUERY_BAD_RANGES_INPUT = struct { Flags: ulong; NumRanges: ulong; Ranges: [1; QUERY_BAD_RANGES_INPUT_RANGE]; }
export type QUERY_BAD_RANGES_OUTPUT_RANGE = struct { Flags: ulong; Reserved: ulong; StartOffset: uint64; LengthInBytes: uint64; }
export type QUERY_BAD_RANGES_OUTPUT = struct { Flags: ulong; NumBadRanges: ulong; NextOffsetToLookUp: uint64; BadRanges: [1; QUERY_BAD_RANGES_OUTPUT_RANGE]; }
export type SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT = struct { Flags: ulong; AlignmentShift: ulong; FileOffsetToAlign: uint64; FallbackAlignmentShift: ulong; }
export type VIRTUAL_STORAGE_BEHAVIOR_CODE = enum { VirtualStorageBehaviorUndefined = 0; VirtualStorageBehaviorCacheWriteThrough = 1; VirtualStorageBehaviorCacheWriteBack = 2; }
export type VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT = struct { Size: ulong; BehaviorCode: VIRTUAL_STORAGE_BEHAVIOR_CODE; }
export type ENCRYPTION_KEY_CTRL_INPUT = struct { HeaderSize: ulong; StructureSize: ulong; KeyOffset: ushort; KeySize: ushort; DplLock: ulong; DplUserId: uint64; DplCredentialId: uint64; }
export type WOF_EXTERNAL_INFO = struct { Version: ulong; Provider: ulong; }
export type WOF_EXTERNAL_FILE_ID = struct { FileId: FILE_ID_128; }
export type WOF_VERSION_INFO = struct { WofVersion: ulong; }
export type WIM_PROVIDER_EXTERNAL_INFO = struct { Version: ulong; Flags: ulong; DataSourceId: LARGE_INTEGER; ResourceHash: [20; char]; }
export type WIM_PROVIDER_ADD_OVERLAY_INPUT = struct { WimType: ulong; WimIndex: ulong; WimFileNameOffset: ulong; WimFileNameLength: ulong; }
export type WIM_PROVIDER_UPDATE_OVERLAY_INPUT = struct { DataSourceId: LARGE_INTEGER; WimFileNameOffset: ulong; WimFileNameLength: ulong; }
export type WIM_PROVIDER_REMOVE_OVERLAY_INPUT = struct { DataSourceId: LARGE_INTEGER; }
export type WIM_PROVIDER_SUSPEND_OVERLAY_INPUT = struct { DataSourceId: LARGE_INTEGER; }
export type WIM_PROVIDER_OVERLAY_ENTRY = struct { NextEntryOffset: ulong; DataSourceId: LARGE_INTEGER; WimGuid: GUID; WimFileNameOffset: ulong; WimType: ulong; WimIndex: ulong; Flags: ulong; }
export type FILE_PROVIDER_EXTERNAL_INFO_V0 = struct { Version: ulong; Algorithm: ulong; }
export type FILE_PROVIDER_EXTERNAL_INFO_V1 = struct { Version: ulong; Algorithm: ulong; Flags: ulong; }
export type CONTAINER_VOLUME_STATE = struct { Flags: ulong; }
export type CONTAINER_ROOT_INFO_INPUT = struct { Flags: ulong; }
export type CONTAINER_ROOT_INFO_OUTPUT = struct { ContainerRootIdLength: ushort; ContainerRootId: [1; char]; }
export type VIRTUALIZATION_INSTANCE_INFO_INPUT = struct { NumberOfWorkerThreads: ulong; Flags: ulong; }
export type VIRTUALIZATION_INSTANCE_INFO_INPUT_EX = struct { HeaderSize: ushort; Flags: ulong; NotificationInfoSize: ulong; NotificationInfoOffset: ushort; ProviderMajorVersion: ushort; }
export type VIRTUALIZATION_INSTANCE_INFO_OUTPUT = struct { VirtualizationInstanceID: GUID; }
export type GET_FILTER_FILE_IDENTIFIER_INPUT = struct { AltitudeLength: ushort; Altitude: [1; ushort]; }
export type GET_FILTER_FILE_IDENTIFIER_OUTPUT = struct { FilterFileIdentifierLength: ushort; FilterFileIdentifier: [1; char]; }
export type DISK_EXTENT = struct { DiskNumber: ulong; StartingOffset: LARGE_INTEGER; ExtentLength: LARGE_INTEGER; }
export type VOLUME_DISK_EXTENTS = struct { NumberOfDiskExtents: ulong; Extents: [1; DISK_EXTENT]; }
export type VOLUME_GET_GPT_ATTRIBUTES_INFORMATION = struct { GptAttributes: uint64; }
export type IO_IRP_EXT_TRACK_OFFSET_HEADER = struct { Validation: ushort; Flags: ushort; TrackedOffsetCallback: def (*IO_IRP_EXT_TRACK_OFFSET_HEADER, *IO_IRP_EXT_TRACK_OFFSET_HEADER, int64) -> (); }
export type SCARD_IO_REQUEST = struct { dwProtocol: ulong; cbPciLength: ulong; }
export type SCARD_T0_COMMAND = struct { bCla: char; bIns: char; bP1: char; bP2: char; bP3: char; }
export type SCARD_T0_REQUEST = struct { ioRequest: SCARD_IO_REQUEST; bSw1: char; bSw2: char; _4: struct #union { CmdBytes: SCARD_T0_COMMAND; rgbHeader: [5; char]; }; }
export type SCARD_T1_REQUEST = struct { ioRequest: SCARD_IO_REQUEST; }
export type SCARD_READERSTATEA = struct { szReader: *char; pvUserData: *; dwCurrentState: ulong; dwEventState: ulong; cbAtr: ulong; rgbAtr: [36; char]; }
export type SCARD_READERSTATEW = struct { szReader: *ushort; pvUserData: *; dwCurrentState: ulong; dwEventState: ulong; cbAtr: ulong; rgbAtr: [36; char]; }
export type SCARD_ATRMASK = struct { cbAtr: ulong; rgbAtr: [36; char]; rgbMask: [36; char]; }
export type OPENCARD_SEARCH_CRITERIAA = struct { dwStructSize: ulong; lpstrGroupNames: *char; nMaxGroupNames: ulong; rgguidInterfaces: *GUID; cguidInterfaces: ulong; lpstrCardNames: *char; nMaxCardNames: ulong; lpfnCheck: def (uint64, uint64, *) -> (int); lpfnConnect: def (uint64, *char, *char, *) -> (uint64); lpfnDisconnect: def (uint64, uint64, *) -> (); pvUserData: *; dwShareMode: ulong; dwPreferredProtocols: ulong; }
export type OPENCARD_SEARCH_CRITERIAW = struct { dwStructSize: ulong; lpstrGroupNames: *ushort; nMaxGroupNames: ulong; rgguidInterfaces: *GUID; cguidInterfaces: ulong; lpstrCardNames: *ushort; nMaxCardNames: ulong; lpfnCheck: def (uint64, uint64, *) -> (int); lpfnConnect: def (uint64, *ushort, *ushort, *) -> (uint64); lpfnDisconnect: def (uint64, uint64, *) -> (); pvUserData: *; dwShareMode: ulong; dwPreferredProtocols: ulong; }
export type OPENCARDNAME_EXA = struct { dwStructSize: ulong; hSCardContext: uint64; hwndOwner: *s_HWND__; dwFlags: ulong; lpstrTitle: *char; lpstrSearchDesc: *char; hIcon: *s_HICON__; pOpenCardSearchCriteria: *OPENCARD_SEARCH_CRITERIAA; lpfnConnect: def (uint64, *char, *char, *) -> (uint64); pvUserData: *; dwShareMode: ulong; dwPreferredProtocols: ulong; lpstrRdr: *char; nMaxRdr: ulong; lpstrCard: *char; nMaxCard: ulong; dwActiveProtocol: ulong; hCardHandle: uint64; }
export type OPENCARDNAME_EXW = struct { dwStructSize: ulong; hSCardContext: uint64; hwndOwner: *s_HWND__; dwFlags: ulong; lpstrTitle: *ushort; lpstrSearchDesc: *ushort; hIcon: *s_HICON__; pOpenCardSearchCriteria: *OPENCARD_SEARCH_CRITERIAW; lpfnConnect: def (uint64, *ushort, *ushort, *) -> (uint64); pvUserData: *; dwShareMode: ulong; dwPreferredProtocols: ulong; lpstrRdr: *ushort; nMaxRdr: ulong; lpstrCard: *ushort; nMaxCard: ulong; dwActiveProtocol: ulong; hCardHandle: uint64; }
export type READER_SEL_REQUEST_MATCH_TYPE = enum { RSR_MATCH_TYPE_READER_AND_CONTAINER = 1; RSR_MATCH_TYPE_SERIAL_NUMBER; RSR_MATCH_TYPE_ALL_CARDS; }
export type READER_SEL_REQUEST = struct { dwShareMode: ulong; dwPreferredProtocols: ulong; MatchType: READER_SEL_REQUEST_MATCH_TYPE; _4: struct #union { ReaderAndContainerParameter: struct { cbReaderNameOffset: ulong; cchReaderNameLength: ulong; cbContainerNameOffset: ulong; cchContainerNameLength: ulong; dwDesiredCardModuleVersion: ulong; dwCspFlags: ulong; }; SerialNumberParameter: struct { cbSerialNumberOffset: ulong; cbSerialNumberLength: ulong; dwDesiredCardModuleVersion: ulong; }; }; }
export type READER_SEL_RESPONSE = struct { cbReaderNameOffset: ulong; cchReaderNameLength: ulong; cbCardNameOffset: ulong; cchCardNameLength: ulong; }
export type OPENCARDNAMEA = struct { dwStructSize: ulong; hwndOwner: *s_HWND__; hSCardContext: uint64; lpstrGroupNames: *char; nMaxGroupNames: ulong; lpstrCardNames: *char; nMaxCardNames: ulong; rgguidInterfaces: *GUID; cguidInterfaces: ulong; lpstrRdr: *char; nMaxRdr: ulong; lpstrCard: *char; nMaxCard: ulong; lpstrTitle: *char; dwFlags: ulong; pvUserData: *; dwShareMode: ulong; dwPreferredProtocols: ulong; dwActiveProtocol: ulong; lpfnConnect: def (uint64, *char, *char, *) -> (uint64); lpfnCheck: def (uint64, uint64, *) -> (int); lpfnDisconnect: def (uint64, uint64, *) -> (); hCardHandle: uint64; }
export type OPENCARDNAMEW = struct { dwStructSize: ulong; hwndOwner: *s_HWND__; hSCardContext: uint64; lpstrGroupNames: *ushort; nMaxGroupNames: ulong; lpstrCardNames: *ushort; nMaxCardNames: ulong; rgguidInterfaces: *GUID; cguidInterfaces: ulong; lpstrRdr: *ushort; nMaxRdr: ulong; lpstrCard: *ushort; nMaxCard: ulong; lpstrTitle: *ushort; dwFlags: ulong; pvUserData: *; dwShareMode: ulong; dwPreferredProtocols: ulong; dwActiveProtocol: ulong; lpfnConnect: def (uint64, *ushort, *ushort, *) -> (uint64); lpfnCheck: def (uint64, uint64, *) -> (int); lpfnDisconnect: def (uint64, uint64, *) -> (); hCardHandle: uint64; }
export type PROPSHEETPAGEA_V1 = struct { dwSize: ulong; dwFlags: ulong; hInstance: *s_HINSTANCE__; _5: struct #union { pszTemplate: *char; pResource: *DLGTEMPLATE; }; _9: struct #union { hIcon: *s_HICON__; pszIcon: *char; }; pszTitle: *char; pfnDlgProc: def (*s_HWND__, uint, uint64, int64) -> (int64); lParam: int64; pfnCallback: def (*s_HWND__, uint, *PROPSHEETPAGEA_V4) -> (uint); pcRefParent: *uint; }
export type PROPSHEETPAGEA_V2 = struct { dwSize: ulong; dwFlags: ulong; hInstance: *s_HINSTANCE__; _5: struct #union { pszTemplate: *char; pResource: *DLGTEMPLATE; }; _9: struct #union { hIcon: *s_HICON__; pszIcon: *char; }; pszTitle: *char; pfnDlgProc: def (*s_HWND__, uint, uint64, int64) -> (int64); lParam: int64; pfnCallback: def (*s_HWND__, uint, *PROPSHEETPAGEA_V4) -> (uint); pcRefParent: *uint; pszHeaderTitle: *char; pszHeaderSubTitle: *char; }
export type PROPSHEETPAGEA_V3 = struct { dwSize: ulong; dwFlags: ulong; hInstance: *s_HINSTANCE__; _5: struct #union { pszTemplate: *char; pResource: *DLGTEMPLATE; }; _9: struct #union { hIcon: *s_HICON__; pszIcon: *char; }; pszTitle: *char; pfnDlgProc: def (*s_HWND__, uint, uint64, int64) -> (int64); lParam: int64; pfnCallback: def (*s_HWND__, uint, *PROPSHEETPAGEA_V4) -> (uint); pcRefParent: *uint; pszHeaderTitle: *char; pszHeaderSubTitle: *char; hActCtx: *; }
export type PROPSHEETPAGEA_V4 = struct { dwSize: ulong; dwFlags: ulong; hInstance: *s_HINSTANCE__; _5: struct #union { pszTemplate: *char; pResource: *DLGTEMPLATE; }; _9: struct #union { hIcon: *s_HICON__; pszIcon: *char; }; pszTitle: *char; pfnDlgProc: def (*s_HWND__, uint, uint64, int64) -> (int64); lParam: int64; pfnCallback: def (*s_HWND__, uint, *PROPSHEETPAGEA_V4) -> (uint); pcRefParent: *uint; pszHeaderTitle: *char; pszHeaderSubTitle: *char; hActCtx: *; _21: struct #union { hbmHeader: *s_HBITMAP__; pszbmHeader: *char; }; }
export type PROPSHEETPAGEW_V1 = struct { dwSize: ulong; dwFlags: ulong; hInstance: *s_HINSTANCE__; _5: struct #union { pszTemplate: *ushort; pResource: *DLGTEMPLATE; }; _9: struct #union { hIcon: *s_HICON__; pszIcon: *ushort; }; pszTitle: *ushort; pfnDlgProc: def (*s_HWND__, uint, uint64, int64) -> (int64); lParam: int64; pfnCallback: def (*s_HWND__, uint, *PROPSHEETPAGEW_V4) -> (uint); pcRefParent: *uint; }
export type PROPSHEETPAGEW_V2 = struct { dwSize: ulong; dwFlags: ulong; hInstance: *s_HINSTANCE__; _5: struct #union { pszTemplate: *ushort; pResource: *DLGTEMPLATE; }; _9: struct #union { hIcon: *s_HICON__; pszIcon: *ushort; }; pszTitle: *ushort; pfnDlgProc: def (*s_HWND__, uint, uint64, int64) -> (int64); lParam: int64; pfnCallback: def (*s_HWND__, uint, *PROPSHEETPAGEW_V4) -> (uint); pcRefParent: *uint; pszHeaderTitle: *ushort; pszHeaderSubTitle: *ushort; }
export type PROPSHEETPAGEW_V3 = struct { dwSize: ulong; dwFlags: ulong; hInstance: *s_HINSTANCE__; _5: struct #union { pszTemplate: *ushort; pResource: *DLGTEMPLATE; }; _9: struct #union { hIcon: *s_HICON__; pszIcon: *ushort; }; pszTitle: *ushort; pfnDlgProc: def (*s_HWND__, uint, uint64, int64) -> (int64); lParam: int64; pfnCallback: def (*s_HWND__, uint, *PROPSHEETPAGEW_V4) -> (uint); pcRefParent: *uint; pszHeaderTitle: *ushort; pszHeaderSubTitle: *ushort; hActCtx: *; }
export type PROPSHEETPAGEW_V4 = struct { dwSize: ulong; dwFlags: ulong; hInstance: *s_HINSTANCE__; _5: struct #union { pszTemplate: *ushort; pResource: *DLGTEMPLATE; }; _9: struct #union { hIcon: *s_HICON__; pszIcon: *ushort; }; pszTitle: *ushort; pfnDlgProc: def (*s_HWND__, uint, uint64, int64) -> (int64); lParam: int64; pfnCallback: def (*s_HWND__, uint, *PROPSHEETPAGEW_V4) -> (uint); pcRefParent: *uint; pszHeaderTitle: *ushort; pszHeaderSubTitle: *ushort; hActCtx: *; _21: struct #union { hbmHeader: *s_HBITMAP__; pszbmHeader: *ushort; }; }
export type PROPSHEETHEADERA_V1 = struct { dwSize: ulong; dwFlags: ulong; hwndParent: *s_HWND__; hInstance: *s_HINSTANCE__; _6: struct #union { hIcon: *s_HICON__; pszIcon: *char; }; pszCaption: *char; nPages: uint; _12: struct #union { nStartPage: uint; pStartPage: *char; }; _16: struct #union { ppsp: *PROPSHEETPAGEA_V4; phpage: **s__PSP; }; pfnCallback: def (*s_HWND__, uint, int64) -> (int); }
export type PROPSHEETHEADERA_V2 = struct { dwSize: ulong; dwFlags: ulong; hwndParent: *s_HWND__; hInstance: *s_HINSTANCE__; _6: struct #union { hIcon: *s_HICON__; pszIcon: *char; }; pszCaption: *char; nPages: uint; _12: struct #union { nStartPage: uint; pStartPage: *char; }; _16: struct #union { ppsp: *PROPSHEETPAGEA_V4; phpage: **s__PSP; }; pfnCallback: def (*s_HWND__, uint, int64) -> (int); _21: struct #union { hbmWatermark: *s_HBITMAP__; pszbmWatermark: *char; }; hplWatermark: *s_HPALETTE__; _26: struct #union { hbmHeader: *s_HBITMAP__; pszbmHeader: *char; }; }
export type PROPSHEETHEADERW_V1 = struct { dwSize: ulong; dwFlags: ulong; hwndParent: *s_HWND__; hInstance: *s_HINSTANCE__; _6: struct #union { hIcon: *s_HICON__; pszIcon: *ushort; }; pszCaption: *ushort; nPages: uint; _12: struct #union { nStartPage: uint; pStartPage: *ushort; }; _16: struct #union { ppsp: *PROPSHEETPAGEW_V4; phpage: **s__PSP; }; pfnCallback: def (*s_HWND__, uint, int64) -> (int); }
export type PROPSHEETHEADERW_V2 = struct { dwSize: ulong; dwFlags: ulong; hwndParent: *s_HWND__; hInstance: *s_HINSTANCE__; _6: struct #union { hIcon: *s_HICON__; pszIcon: *ushort; }; pszCaption: *ushort; nPages: uint; _12: struct #union { nStartPage: uint; pStartPage: *ushort; }; _16: struct #union { ppsp: *PROPSHEETPAGEW_V4; phpage: **s__PSP; }; pfnCallback: def (*s_HWND__, uint, int64) -> (int); _21: struct #union { hbmWatermark: *s_HBITMAP__; pszbmWatermark: *ushort; }; hplWatermark: *s_HPALETTE__; _26: struct #union { hbmHeader: *s_HBITMAP__; pszbmHeader: *ushort; }; }
export type PSHNOTIFY = struct { hdr: NMHDR; lParam: int64; }
export type PRINTER_INFO_1A = struct { Flags: ulong; pDescription: *char; pName: *char; pComment: *char; }
export type PRINTER_INFO_1W = struct { Flags: ulong; pDescription: *ushort; pName: *ushort; pComment: *ushort; }
export type PRINTER_INFO_2A = struct { pServerName: *char; pPrinterName: *char; pShareName: *char; pPortName: *char; pDriverName: *char; pComment: *char; pLocation: *char; pDevMode: *DEVMODEA; pSepFile: *char; pPrintProcessor: *char; pDatatype: *char; pParameters: *char; pSecurityDescriptor: *; Attributes: ulong; Priority: ulong; DefaultPriority: ulong; StartTime: ulong; UntilTime: ulong; Status: ulong; cJobs: ulong; AveragePPM: ulong; }
export type PRINTER_INFO_2W = struct { pServerName: *ushort; pPrinterName: *ushort; pShareName: *ushort; pPortName: *ushort; pDriverName: *ushort; pComment: *ushort; pLocation: *ushort; pDevMode: *DEVMODEW; pSepFile: *ushort; pPrintProcessor: *ushort; pDatatype: *ushort; pParameters: *ushort; pSecurityDescriptor: *; Attributes: ulong; Priority: ulong; DefaultPriority: ulong; StartTime: ulong; UntilTime: ulong; Status: ulong; cJobs: ulong; AveragePPM: ulong; }
export type PRINTER_INFO_3 = struct { pSecurityDescriptor: *; }
export type PRINTER_INFO_4A = struct { pPrinterName: *char; pServerName: *char; Attributes: ulong; }
export type PRINTER_INFO_4W = struct { pPrinterName: *ushort; pServerName: *ushort; Attributes: ulong; }
export type PRINTER_INFO_5A = struct { pPrinterName: *char; pPortName: *char; Attributes: ulong; DeviceNotSelectedTimeout: ulong; TransmissionRetryTimeout: ulong; }
export type PRINTER_INFO_5W = struct { pPrinterName: *ushort; pPortName: *ushort; Attributes: ulong; DeviceNotSelectedTimeout: ulong; TransmissionRetryTimeout: ulong; }
export type PRINTER_INFO_6 = struct { dwStatus: ulong; }
export type PRINTER_INFO_7A = struct { pszObjectGUID: *char; dwAction: ulong; }
export type PRINTER_INFO_7W = struct { pszObjectGUID: *ushort; dwAction: ulong; }
export type PRINTER_INFO_8A = struct { pDevMode: *DEVMODEA; }
export type PRINTER_INFO_8W = struct { pDevMode: *DEVMODEW; }
export type PRINTER_INFO_9A = struct { pDevMode: *DEVMODEA; }
export type PRINTER_INFO_9W = struct { pDevMode: *DEVMODEW; }
export type JOB_INFO_1A = struct { JobId: ulong; pPrinterName: *char; pMachineName: *char; pUserName: *char; pDocument: *char; pDatatype: *char; pStatus: *char; Status: ulong; Priority: ulong; Position: ulong; TotalPages: ulong; PagesPrinted: ulong; Submitted: SYSTEMTIME; }
export type JOB_INFO_1W = struct { JobId: ulong; pPrinterName: *ushort; pMachineName: *ushort; pUserName: *ushort; pDocument: *ushort; pDatatype: *ushort; pStatus: *ushort; Status: ulong; Priority: ulong; Position: ulong; TotalPages: ulong; PagesPrinted: ulong; Submitted: SYSTEMTIME; }
export type JOB_INFO_2A = struct { JobId: ulong; pPrinterName: *char; pMachineName: *char; pUserName: *char; pDocument: *char; pNotifyName: *char; pDatatype: *char; pPrintProcessor: *char; pParameters: *char; pDriverName: *char; pDevMode: *DEVMODEA; pStatus: *char; pSecurityDescriptor: *; Status: ulong; Priority: ulong; Position: ulong; StartTime: ulong; UntilTime: ulong; TotalPages: ulong; Size: ulong; Submitted: SYSTEMTIME; Time: ulong; PagesPrinted: ulong; }
export type JOB_INFO_2W = struct { JobId: ulong; pPrinterName: *ushort; pMachineName: *ushort; pUserName: *ushort; pDocument: *ushort; pNotifyName: *ushort; pDatatype: *ushort; pPrintProcessor: *ushort; pParameters: *ushort; pDriverName: *ushort; pDevMode: *DEVMODEW; pStatus: *ushort; pSecurityDescriptor: *; Status: ulong; Priority: ulong; Position: ulong; StartTime: ulong; UntilTime: ulong; TotalPages: ulong; Size: ulong; Submitted: SYSTEMTIME; Time: ulong; PagesPrinted: ulong; }
export type JOB_INFO_3 = struct { JobId: ulong; NextJobId: ulong; Reserved: ulong; }
export type JOB_INFO_4A = struct { JobId: ulong; pPrinterName: *char; pMachineName: *char; pUserName: *char; pDocument: *char; pNotifyName: *char; pDatatype: *char; pPrintProcessor: *char; pParameters: *char; pDriverName: *char; pDevMode: *DEVMODEA; pStatus: *char; pSecurityDescriptor: *; Status: ulong; Priority: ulong; Position: ulong; StartTime: ulong; UntilTime: ulong; TotalPages: ulong; Size: ulong; Submitted: SYSTEMTIME; Time: ulong; PagesPrinted: ulong; SizeHigh: long; }
export type JOB_INFO_4W = struct { JobId: ulong; pPrinterName: *ushort; pMachineName: *ushort; pUserName: *ushort; pDocument: *ushort; pNotifyName: *ushort; pDatatype: *ushort; pPrintProcessor: *ushort; pParameters: *ushort; pDriverName: *ushort; pDevMode: *DEVMODEW; pStatus: *ushort; pSecurityDescriptor: *; Status: ulong; Priority: ulong; Position: ulong; StartTime: ulong; UntilTime: ulong; TotalPages: ulong; Size: ulong; Submitted: SYSTEMTIME; Time: ulong; PagesPrinted: ulong; SizeHigh: long; }
export type ADDJOB_INFO_1A = struct { Path: *char; JobId: ulong; }
export type ADDJOB_INFO_1W = struct { Path: *ushort; JobId: ulong; }
export type DRIVER_INFO_1A = struct { pName: *char; }
export type DRIVER_INFO_1W = struct { pName: *ushort; }
export type DRIVER_INFO_2A = struct { cVersion: ulong; pName: *char; pEnvironment: *char; pDriverPath: *char; pDataFile: *char; pConfigFile: *char; }
export type DRIVER_INFO_2W = struct { cVersion: ulong; pName: *ushort; pEnvironment: *ushort; pDriverPath: *ushort; pDataFile: *ushort; pConfigFile: *ushort; }
export type DRIVER_INFO_3A = struct { cVersion: ulong; pName: *char; pEnvironment: *char; pDriverPath: *char; pDataFile: *char; pConfigFile: *char; pHelpFile: *char; pDependentFiles: *char; pMonitorName: *char; pDefaultDataType: *char; }
export type DRIVER_INFO_3W = struct { cVersion: ulong; pName: *ushort; pEnvironment: *ushort; pDriverPath: *ushort; pDataFile: *ushort; pConfigFile: *ushort; pHelpFile: *ushort; pDependentFiles: *ushort; pMonitorName: *ushort; pDefaultDataType: *ushort; }
export type DRIVER_INFO_4A = struct { cVersion: ulong; pName: *char; pEnvironment: *char; pDriverPath: *char; pDataFile: *char; pConfigFile: *char; pHelpFile: *char; pDependentFiles: *char; pMonitorName: *char; pDefaultDataType: *char; pszzPreviousNames: *char; }
export type DRIVER_INFO_4W = struct { cVersion: ulong; pName: *ushort; pEnvironment: *ushort; pDriverPath: *ushort; pDataFile: *ushort; pConfigFile: *ushort; pHelpFile: *ushort; pDependentFiles: *ushort; pMonitorName: *ushort; pDefaultDataType: *ushort; pszzPreviousNames: *ushort; }
export type DRIVER_INFO_5A = struct { cVersion: ulong; pName: *char; pEnvironment: *char; pDriverPath: *char; pDataFile: *char; pConfigFile: *char; dwDriverAttributes: ulong; dwConfigVersion: ulong; dwDriverVersion: ulong; }
export type DRIVER_INFO_5W = struct { cVersion: ulong; pName: *ushort; pEnvironment: *ushort; pDriverPath: *ushort; pDataFile: *ushort; pConfigFile: *ushort; dwDriverAttributes: ulong; dwConfigVersion: ulong; dwDriverVersion: ulong; }
export type DRIVER_INFO_6A = struct { cVersion: ulong; pName: *char; pEnvironment: *char; pDriverPath: *char; pDataFile: *char; pConfigFile: *char; pHelpFile: *char; pDependentFiles: *char; pMonitorName: *char; pDefaultDataType: *char; pszzPreviousNames: *char; ftDriverDate: FILETIME; dwlDriverVersion: uint64; pszMfgName: *char; pszOEMUrl: *char; pszHardwareID: *char; pszProvider: *char; }
export type DRIVER_INFO_6W = struct { cVersion: ulong; pName: *ushort; pEnvironment: *ushort; pDriverPath: *ushort; pDataFile: *ushort; pConfigFile: *ushort; pHelpFile: *ushort; pDependentFiles: *ushort; pMonitorName: *ushort; pDefaultDataType: *ushort; pszzPreviousNames: *ushort; ftDriverDate: FILETIME; dwlDriverVersion: uint64; pszMfgName: *ushort; pszOEMUrl: *ushort; pszHardwareID: *ushort; pszProvider: *ushort; }
export type DRIVER_INFO_8A = struct { cVersion: ulong; pName: *char; pEnvironment: *char; pDriverPath: *char; pDataFile: *char; pConfigFile: *char; pHelpFile: *char; pDependentFiles: *char; pMonitorName: *char; pDefaultDataType: *char; pszzPreviousNames: *char; ftDriverDate: FILETIME; dwlDriverVersion: uint64; pszMfgName: *char; pszOEMUrl: *char; pszHardwareID: *char; pszProvider: *char; pszPrintProcessor: *char; pszVendorSetup: *char; pszzColorProfiles: *char; pszInfPath: *char; dwPrinterDriverAttributes: ulong; pszzCoreDriverDependencies: *char; ftMinInboxDriverVerDate: FILETIME; dwlMinInboxDriverVerVersion: uint64; }
export type DRIVER_INFO_8W = struct { cVersion: ulong; pName: *ushort; pEnvironment: *ushort; pDriverPath: *ushort; pDataFile: *ushort; pConfigFile: *ushort; pHelpFile: *ushort; pDependentFiles: *ushort; pMonitorName: *ushort; pDefaultDataType: *ushort; pszzPreviousNames: *ushort; ftDriverDate: FILETIME; dwlDriverVersion: uint64; pszMfgName: *ushort; pszOEMUrl: *ushort; pszHardwareID: *ushort; pszProvider: *ushort; pszPrintProcessor: *ushort; pszVendorSetup: *ushort; pszzColorProfiles: *ushort; pszInfPath: *ushort; dwPrinterDriverAttributes: ulong; pszzCoreDriverDependencies: *ushort; ftMinInboxDriverVerDate: FILETIME; dwlMinInboxDriverVerVersion: uint64; }
export type DOC_INFO_1A = struct { pDocName: *char; pOutputFile: *char; pDatatype: *char; }
export type DOC_INFO_1W = struct { pDocName: *ushort; pOutputFile: *ushort; pDatatype: *ushort; }
export type FORM_INFO_1A = struct { Flags: ulong; pName: *char; Size: SIZE; ImageableArea: RECTL; }
export type FORM_INFO_1W = struct { Flags: ulong; pName: *ushort; Size: SIZE; ImageableArea: RECTL; }
export type FORM_INFO_2A = struct { Flags: ulong; pName: *char; Size: SIZE; ImageableArea: RECTL; pKeyword: *char; StringType: ulong; pMuiDll: *char; dwResourceId: ulong; pDisplayName: *char; wLangId: ushort; }
export type FORM_INFO_2W = struct { Flags: ulong; pName: *ushort; Size: SIZE; ImageableArea: RECTL; pKeyword: *char; StringType: ulong; pMuiDll: *ushort; dwResourceId: ulong; pDisplayName: *ushort; wLangId: ushort; }
export type DOC_INFO_2A = struct { pDocName: *char; pOutputFile: *char; pDatatype: *char; dwMode: ulong; JobId: ulong; }
export type DOC_INFO_2W = struct { pDocName: *ushort; pOutputFile: *ushort; pDatatype: *ushort; dwMode: ulong; JobId: ulong; }
export type DOC_INFO_3A = struct { pDocName: *char; pOutputFile: *char; pDatatype: *char; dwFlags: ulong; }
export type DOC_INFO_3W = struct { pDocName: *ushort; pOutputFile: *ushort; pDatatype: *ushort; dwFlags: ulong; }
export type PRINTPROCESSOR_INFO_1A = struct { pName: *char; }
export type PRINTPROCESSOR_INFO_1W = struct { pName: *ushort; }
export type PRINTPROCESSOR_CAPS_1 = struct { dwLevel: ulong; dwNupOptions: ulong; dwPageOrderFlags: ulong; dwNumberOfCopies: ulong; }
export type PRINTPROCESSOR_CAPS_2 = struct { dwLevel: ulong; dwNupOptions: ulong; dwPageOrderFlags: ulong; dwNumberOfCopies: ulong; dwDuplexHandlingCaps: ulong; dwNupDirectionCaps: ulong; dwNupBorderCaps: ulong; dwBookletHandlingCaps: ulong; dwScalingCaps: ulong; }
export type PORT_INFO_1A = struct { pName: *char; }
export type PORT_INFO_1W = struct { pName: *ushort; }
export type PORT_INFO_2A = struct { pPortName: *char; pMonitorName: *char; pDescription: *char; fPortType: ulong; Reserved: ulong; }
export type PORT_INFO_2W = struct { pPortName: *ushort; pMonitorName: *ushort; pDescription: *ushort; fPortType: ulong; Reserved: ulong; }
export type PORT_INFO_3A = struct { dwStatus: ulong; pszStatus: *char; dwSeverity: ulong; }
export type PORT_INFO_3W = struct { dwStatus: ulong; pszStatus: *ushort; dwSeverity: ulong; }
export type MONITOR_INFO_1A = struct { pName: *char; }
export type MONITOR_INFO_1W = struct { pName: *ushort; }
export type MONITOR_INFO_2A = struct { pName: *char; pEnvironment: *char; pDLLName: *char; }
export type MONITOR_INFO_2W = struct { pName: *ushort; pEnvironment: *ushort; pDLLName: *ushort; }
export type DATATYPES_INFO_1A = struct { pName: *char; }
export type DATATYPES_INFO_1W = struct { pName: *ushort; }
export type PRINTER_DEFAULTSA = struct { pDatatype: *char; pDevMode: *DEVMODEA; DesiredAccess: ulong; }
export type PRINTER_DEFAULTSW = struct { pDatatype: *ushort; pDevMode: *DEVMODEW; DesiredAccess: ulong; }
export type PRINTER_ENUM_VALUESA = struct { pValueName: *char; cbValueName: ulong; dwType: ulong; pData: *char; cbData: ulong; }
export type PRINTER_ENUM_VALUESW = struct { pValueName: *ushort; cbValueName: ulong; dwType: ulong; pData: *char; cbData: ulong; }
export type PRINTER_NOTIFY_OPTIONS_TYPE = struct { Type: ushort; Reserved0: ushort; Reserved1: ulong; Reserved2: ulong; Count: ulong; pFields: *ushort; }
export type PRINTER_NOTIFY_OPTIONS = struct { Version: ulong; Flags: ulong; Count: ulong; pTypes: *PRINTER_NOTIFY_OPTIONS_TYPE; }
export type PRINTER_NOTIFY_INFO_DATA = struct { Type: ushort; Field: ushort; Reserved: ulong; Id: ulong; NotifyData: struct #union { adwData: [2; ulong]; Data: struct { cbBuf: ulong; pBuf: *; }; }; }
export type PRINTER_NOTIFY_INFO = struct { Version: ulong; Flags: ulong; Count: ulong; aData: [1; PRINTER_NOTIFY_INFO_DATA]; }
export type BINARY_CONTAINER = struct { cbBuf: ulong; pData: *char; }
export type BIDI_DATA = struct { dwBidiType: ulong; u: struct #union { bData: int; iData: long; sData: *ushort; fData: float; biData: BINARY_CONTAINER; }; }
export type BIDI_REQUEST_DATA = struct { dwReqNumber: ulong; pSchema: *ushort; data: BIDI_DATA; }
export type BIDI_REQUEST_CONTAINER = struct { Version: ulong; Flags: ulong; Count: ulong; aData: [1; BIDI_REQUEST_DATA]; }
export type BIDI_RESPONSE_DATA = struct { dwResult: ulong; dwReqNumber: ulong; pSchema: *ushort; data: BIDI_DATA; }
export type BIDI_RESPONSE_CONTAINER = struct { Version: ulong; Flags: ulong; Count: ulong; aData: [1; BIDI_RESPONSE_DATA]; }
export type BIDI_TYPE = enum { BIDI_NULL = 0; BIDI_INT = 1; BIDI_FLOAT = 2; BIDI_BOOL = 3; BIDI_STRING = 4; BIDI_TEXT = 5; BIDI_ENUM = 6; BIDI_BLOB = 7; }
export type PROVIDOR_INFO_1A = struct { pName: *char; pEnvironment: *char; pDLLName: *char; }
export type PROVIDOR_INFO_1W = struct { pName: *ushort; pEnvironment: *ushort; pDLLName: *ushort; }
export type PROVIDOR_INFO_2A = struct { pOrder: *char; }
export type PROVIDOR_INFO_2W = struct { pOrder: *ushort; }
export type PRINTER_OPTION_FLAGS = enum { PRINTER_OPTION_NO_CACHE = (1 << 0); PRINTER_OPTION_CACHE = (1 << 1); PRINTER_OPTION_CLIENT_CHANGE = (1 << 2); PRINTER_OPTION_NO_CLIENT_DATA = (1 << 3); }
export type PRINTER_OPTIONSA = struct { cbSize: uint; dwFlags: ulong; }
export type PRINTER_OPTIONSW = struct { cbSize: uint; dwFlags: ulong; }
export type PRINTER_CONNECTION_INFO_1A = struct { dwFlags: ulong; pszDriverName: *char; }
export type PRINTER_CONNECTION_INFO_1W = struct { dwFlags: ulong; pszDriverName: *ushort; }
export type CORE_PRINTER_DRIVERA = struct { CoreDriverGUID: GUID; ftDriverDate: FILETIME; dwlDriverVersion: uint64; szPackageID: [260; char]; }
export type CORE_PRINTER_DRIVERW = struct { CoreDriverGUID: GUID; ftDriverDate: FILETIME; dwlDriverVersion: uint64; szPackageID: [260; ushort]; }
export type EPrintPropertyType = enum { kPropertyTypeString = 1; kPropertyTypeInt32; kPropertyTypeInt64; kPropertyTypeByte; kPropertyTypeTime; kPropertyTypeDevMode; kPropertyTypeSD; kPropertyTypeNotificationReply; kPropertyTypeNotificationOptions; kPropertyTypeBuffer; }
export type EPrintXPSJobProgress = enum { kAddingDocumentSequence = 0; kDocumentSequenceAdded = 1; kAddingFixedDocument = 2; kFixedDocumentAdded = 3; kAddingFixedPage = 4; kFixedPageAdded = 5; kResourceAdded = 6; kFontAdded = 7; kImageAdded = 8; kXpsDocumentCommitted = 9; }
export type EPrintXPSJobOperation = enum { kJobProduction = 1; kJobConsumption; }
export type PrintPropertyValue = struct { ePropertyType: EPrintPropertyType; value: struct #union { propertyByte: char; propertyString: *ushort; propertyInt32: long; propertyInt64: int64; propertyBlob: struct { cbBuf: ulong; pBuf: *; }; }; }
export type PrintNamedProperty = struct { propertyName: *ushort; propertyValue: PrintPropertyValue; }
export type PrintPropertiesCollection = struct { numberOfProperties: ulong; propertiesCollection: *PrintNamedProperty; }
export type PRINT_EXECUTION_CONTEXT = enum { PRINT_EXECUTION_CONTEXT_APPLICATION = 0; PRINT_EXECUTION_CONTEXT_SPOOLER_SERVICE = 1; PRINT_EXECUTION_CONTEXT_SPOOLER_ISOLATION_HOST = 2; PRINT_EXECUTION_CONTEXT_FILTER_PIPELINE = 3; PRINT_EXECUTION_CONTEXT_WOW64 = 4; }
export type PRINT_EXECUTION_DATA = struct { context: PRINT_EXECUTION_CONTEXT; clientAppPID: ulong; }
export type div_t = struct { quot: int; rem: int; }
export type ldiv_t = struct { quot: long; rem: long; }
export type lldiv_t = struct { quot: int64; rem: int64; }
export type _LDOUBLE = struct { ld: [10; char]; }
export type _CRT_DOUBLE = struct { x: double; }
export type _CRT_FLOAT = struct { f: float; }
export type _LONGDOUBLE = struct { x: float80; }
export type _LDBL12 = struct { ld12: [12; char]; }
export type REGCLS = enum { REGCLS_SINGLEUSE = 0; REGCLS_MULTIPLEUSE = 1; REGCLS_MULTI_SEPARATE = 2; REGCLS_SUSPENDED = 4; REGCLS_SURROGATE = 8; REGCLS_AGILE = 16; }
export type s_IRpcStubBuffer = struct { lpVtbl: *IRpcStubBufferVtbl; }
export type s_IRpcChannelBuffer = struct { lpVtbl: *IRpcChannelBufferVtbl; }
export type COINITBASE = enum { COINITBASE_MULTITHREADED = 0; }
export type IUnknown
export type AsyncIUnknown
export type IClassFactory
export type IUnknownVtbl = struct { QueryInterface: def (*s_IUnknown, *GUID, **) -> (long); AddRef: def (*s_IUnknown) -> (ulong); Release: def (*s_IUnknown) -> (ulong); }
export type AsyncIUnknownVtbl = struct { QueryInterface: def (*s_AsyncIUnknown, *GUID, **) -> (long); AddRef: def (*s_AsyncIUnknown) -> (ulong); Release: def (*s_AsyncIUnknown) -> (ulong); Begin_QueryInterface: def (*s_AsyncIUnknown, *GUID) -> (long); Finish_QueryInterface: def (*s_AsyncIUnknown, **) -> (long); Begin_AddRef: def (*s_AsyncIUnknown) -> (long); Finish_AddRef: def (*s_AsyncIUnknown) -> (ulong); Begin_Release: def (*s_AsyncIUnknown) -> (long); Finish_Release: def (*s_AsyncIUnknown) -> (ulong); }
export type IClassFactoryVtbl = struct { QueryInterface: def (*s_IClassFactory, *GUID, **) -> (long); AddRef: def (*s_IClassFactory) -> (ulong); Release: def (*s_IClassFactory) -> (ulong); CreateInstance: def (*s_IClassFactory, *s_IUnknown, *GUID, **) -> (long); LockServer: def (*s_IClassFactory, int) -> (long); }
export type IMarshal
export type INoMarshal
export type IAgileObject
export type IActivationFilter
export type IMarshal2
export type IMalloc
export type IStdMarshalInfo
export type IExternalConnection
export type IMultiQI
export type AsyncIMultiQI
export type IInternalUnknown
export type IEnumUnknown
export type IEnumString
export type ISequentialStream
export type IStream
export type IRpcChannelBuffer2
export type IAsyncRpcChannelBuffer
export type IRpcChannelBuffer3
export type IRpcSyntaxNegotiate
export type IRpcProxyBuffer
export type IPSFactoryBuffer
export type IChannelHook
export type IClientSecurity
export type IServerSecurity
export type IRpcOptions
export type IGlobalOptions
export type ISurrogate
export type IGlobalInterfaceTable
export type ISynchronize
export type ISynchronizeHandle
export type ISynchronizeEvent
export type ISynchronizeContainer
export type ISynchronizeMutex
export type ICancelMethodCalls
export type IAsyncManager
export type ICallFactory
export type IRpcHelper
export type IReleaseMarshalBuffers
export type IWaitMultiple
export type IAddrTrackingControl
export type IAddrExclusionControl
export type IPipeByte
export type AsyncIPipeByte
export type IPipeLong
export type AsyncIPipeLong
export type IPipeDouble
export type AsyncIPipeDouble
export type IEnumContextProps
export type IContext
export type IObjContext
export type IComThreadingInfo
export type IProcessInitControl
export type IFastRundown
export type IMarshalingStream
export type IAgileReference
export type COSERVERINFO = struct { dwReserved1: ulong; pwszName: *ushort; pAuthInfo: *COAUTHINFO; dwReserved2: ulong; }
export type IMarshalVtbl = struct { QueryInterface: def (*s_IMarshal, *GUID, **) -> (long); AddRef: def (*s_IMarshal) -> (ulong); Release: def (*s_IMarshal) -> (ulong); GetUnmarshalClass: def (*s_IMarshal, *GUID, *, ulong, *, ulong, *GUID) -> (long); GetMarshalSizeMax: def (*s_IMarshal, *GUID, *, ulong, *, ulong, *ulong) -> (long); MarshalInterface: def (*s_IMarshal, *s_IStream, *GUID, *, ulong, *, ulong) -> (long); UnmarshalInterface: def (*s_IMarshal, *s_IStream, *GUID, **) -> (long); ReleaseMarshalData: def (*s_IMarshal, *s_IStream) -> (long); DisconnectObject: def (*s_IMarshal, ulong) -> (long); }
export type INoMarshalVtbl = struct { QueryInterface: def (*s_INoMarshal, *GUID, **) -> (long); AddRef: def (*s_INoMarshal) -> (ulong); Release: def (*s_INoMarshal) -> (ulong); }
export type IAgileObjectVtbl = struct { QueryInterface: def (*s_IAgileObject, *GUID, **) -> (long); AddRef: def (*s_IAgileObject) -> (ulong); Release: def (*s_IAgileObject) -> (ulong); }
export type ACTIVATIONTYPE = enum { ACTIVATIONTYPE_UNCATEGORIZED = 0; ACTIVATIONTYPE_FROM_MONIKER = 1; ACTIVATIONTYPE_FROM_DATA = 2; ACTIVATIONTYPE_FROM_STORAGE = 4; ACTIVATIONTYPE_FROM_STREAM = 8; ACTIVATIONTYPE_FROM_FILE = 16; }
export type IActivationFilterVtbl = struct { QueryInterface: def (*s_IActivationFilter, *GUID, **) -> (long); AddRef: def (*s_IActivationFilter) -> (ulong); Release: def (*s_IActivationFilter) -> (ulong); HandleActivation: def (*s_IActivationFilter, ulong, *GUID, *GUID) -> (long); }
export type IMarshal2Vtbl = struct { QueryInterface: def (*s_IMarshal2, *GUID, **) -> (long); AddRef: def (*s_IMarshal2) -> (ulong); Release: def (*s_IMarshal2) -> (ulong); GetUnmarshalClass: def (*s_IMarshal2, *GUID, *, ulong, *, ulong, *GUID) -> (long); GetMarshalSizeMax: def (*s_IMarshal2, *GUID, *, ulong, *, ulong, *ulong) -> (long); MarshalInterface: def (*s_IMarshal2, *s_IStream, *GUID, *, ulong, *, ulong) -> (long); UnmarshalInterface: def (*s_IMarshal2, *s_IStream, *GUID, **) -> (long); ReleaseMarshalData: def (*s_IMarshal2, *s_IStream) -> (long); DisconnectObject: def (*s_IMarshal2, ulong) -> (long); }
export type IMallocVtbl = struct { QueryInterface: def (*s_IMalloc, *GUID, **) -> (long); AddRef: def (*s_IMalloc) -> (ulong); Release: def (*s_IMalloc) -> (ulong); Alloc: *; Realloc: *; Free: def (*s_IMalloc, *) -> (); GetSize: def (*s_IMalloc, *) -> (uint64); DidAlloc: def (*s_IMalloc, *) -> (int); HeapMinimize: def (*s_IMalloc) -> (); }
export type IStdMarshalInfoVtbl = struct { QueryInterface: def (*s_IStdMarshalInfo, *GUID, **) -> (long); AddRef: def (*s_IStdMarshalInfo) -> (ulong); Release: def (*s_IStdMarshalInfo) -> (ulong); GetClassForHandler: def (*s_IStdMarshalInfo, ulong, *, *GUID) -> (long); }
export type EXTCONN = enum { EXTCONN_STRONG = 1; EXTCONN_WEAK = 2; EXTCONN_CALLABLE = 4; }
export type IExternalConnectionVtbl = struct { QueryInterface: def (*s_IExternalConnection, *GUID, **) -> (long); AddRef: def (*s_IExternalConnection) -> (ulong); Release: def (*s_IExternalConnection) -> (ulong); AddConnection: def (*s_IExternalConnection, ulong, ulong) -> (ulong); ReleaseConnection: def (*s_IExternalConnection, ulong, ulong, int) -> (ulong); }
export type MULTI_QI = struct { pIID: *GUID; pItf: *s_IUnknown; hr: long; }
export type IMultiQIVtbl = struct { QueryInterface: def (*s_IMultiQI, *GUID, **) -> (long); AddRef: def (*s_IMultiQI) -> (ulong); Release: def (*s_IMultiQI) -> (ulong); QueryMultipleInterfaces: def (*s_IMultiQI, ulong, *MULTI_QI) -> (long); }
export type AsyncIMultiQIVtbl = struct { QueryInterface: def (*s_AsyncIMultiQI, *GUID, **) -> (long); AddRef: def (*s_AsyncIMultiQI) -> (ulong); Release: def (*s_AsyncIMultiQI) -> (ulong); Begin_QueryMultipleInterfaces: def (*s_AsyncIMultiQI, ulong, *MULTI_QI) -> (long); Finish_QueryMultipleInterfaces: def (*s_AsyncIMultiQI, *MULTI_QI) -> (long); }
export type IInternalUnknownVtbl = struct { QueryInterface: def (*s_IInternalUnknown, *GUID, **) -> (long); AddRef: def (*s_IInternalUnknown) -> (ulong); Release: def (*s_IInternalUnknown) -> (ulong); QueryInternalInterface: def (*s_IInternalUnknown, *GUID, **) -> (long); }
export type IEnumUnknownVtbl = struct { QueryInterface: def (*s_IEnumUnknown, *GUID, **) -> (long); AddRef: def (*s_IEnumUnknown) -> (ulong); Release: def (*s_IEnumUnknown) -> (ulong); Next: def (*s_IEnumUnknown, ulong, **s_IUnknown, *ulong) -> (long); Skip: def (*s_IEnumUnknown, ulong) -> (long); Reset: def (*s_IEnumUnknown) -> (long); Clone: def (*s_IEnumUnknown, **s_IEnumUnknown) -> (long); }
export type IEnumStringVtbl = struct { QueryInterface: def (*s_IEnumString, *GUID, **) -> (long); AddRef: def (*s_IEnumString) -> (ulong); Release: def (*s_IEnumString) -> (ulong); Next: def (*s_IEnumString, ulong, **ushort, *ulong) -> (long); Skip: def (*s_IEnumString, ulong) -> (long); Reset: def (*s_IEnumString) -> (long); Clone: def (*s_IEnumString, **s_IEnumString) -> (long); }
export type ISequentialStreamVtbl = struct { QueryInterface: def (*s_ISequentialStream, *GUID, **) -> (long); AddRef: def (*s_ISequentialStream) -> (ulong); Release: def (*s_ISequentialStream) -> (ulong); Read: def (*s_ISequentialStream, *, ulong, *ulong) -> (long); Write: def (*s_ISequentialStream, *, ulong, *ulong) -> (long); }
export type STATSTG = struct { pwcsName: *ushort; type_: ulong; cbSize: ULARGE_INTEGER; mtime: FILETIME; ctime: FILETIME; atime: FILETIME; grfMode: ulong; grfLocksSupported: ulong; clsid: GUID; grfStateBits: ulong; reserved: ulong; }
export type STGTY = enum { STGTY_STORAGE = 1; STGTY_STREAM = 2; STGTY_LOCKBYTES = 3; STGTY_PROPERTY = 4; }
export type STREAM_SEEK = enum { STREAM_SEEK_SET = 0; STREAM_SEEK_CUR = 1; STREAM_SEEK_END = 2; }
export type LOCKTYPE = enum { LOCK_WRITE = 1; LOCK_EXCLUSIVE = 2; LOCK_ONLYONCE = 4; }
export type IStreamVtbl = struct { QueryInterface: def (*s_IStream, *GUID, **) -> (long); AddRef: def (*s_IStream) -> (ulong); Release: def (*s_IStream) -> (ulong); Read: def (*s_IStream, *, ulong, *ulong) -> (long); Write: def (*s_IStream, *, ulong, *ulong) -> (long); Seek: def (*s_IStream, LARGE_INTEGER, ulong, *ULARGE_INTEGER) -> (long); SetSize: def (*s_IStream, ULARGE_INTEGER) -> (long); CopyTo: def (*s_IStream, *s_IStream, ULARGE_INTEGER, *ULARGE_INTEGER, *ULARGE_INTEGER) -> (long); Commit: def (*s_IStream, ulong) -> (long); Revert: def (*s_IStream) -> (long); LockRegion: def (*s_IStream, ULARGE_INTEGER, ULARGE_INTEGER, ulong) -> (long); UnlockRegion: def (*s_IStream, ULARGE_INTEGER, ULARGE_INTEGER, ulong) -> (long); Stat: def (*s_IStream, *STATSTG, ulong) -> (long); Clone: def (*s_IStream, **s_IStream) -> (long); }
export type RPCOLEMESSAGE = struct { reserved1: *; dataRepresentation: ulong; Buffer: *; cbBuffer: ulong; iMethod: ulong; reserved2: [5; *]; rpcFlags: ulong; }
export type IRpcChannelBufferVtbl = struct { QueryInterface: def (*s_IRpcChannelBuffer, *GUID, **) -> (long); AddRef: def (*s_IRpcChannelBuffer) -> (ulong); Release: def (*s_IRpcChannelBuffer) -> (ulong); GetBuffer: def (*s_IRpcChannelBuffer, *RPCOLEMESSAGE, *GUID) -> (long); SendReceive: def (*s_IRpcChannelBuffer, *RPCOLEMESSAGE, *ulong) -> (long); FreeBuffer: def (*s_IRpcChannelBuffer, *RPCOLEMESSAGE) -> (long); GetDestCtx: def (*s_IRpcChannelBuffer, *ulong, **) -> (long); IsConnected: def (*s_IRpcChannelBuffer) -> (long); }
export type IRpcChannelBuffer2Vtbl = struct { QueryInterface: def (*s_IRpcChannelBuffer2, *GUID, **) -> (long); AddRef: def (*s_IRpcChannelBuffer2) -> (ulong); Release: def (*s_IRpcChannelBuffer2) -> (ulong); GetBuffer: def (*s_IRpcChannelBuffer2, *RPCOLEMESSAGE, *GUID) -> (long); SendReceive: def (*s_IRpcChannelBuffer2, *RPCOLEMESSAGE, *ulong) -> (long); FreeBuffer: def (*s_IRpcChannelBuffer2, *RPCOLEMESSAGE) -> (long); GetDestCtx: def (*s_IRpcChannelBuffer2, *ulong, **) -> (long); IsConnected: def (*s_IRpcChannelBuffer2) -> (long); GetProtocolVersion: def (*s_IRpcChannelBuffer2, *ulong) -> (long); }
export type IAsyncRpcChannelBufferVtbl = struct { QueryInterface: def (*s_IAsyncRpcChannelBuffer, *GUID, **) -> (long); AddRef: def (*s_IAsyncRpcChannelBuffer) -> (ulong); Release: def (*s_IAsyncRpcChannelBuffer) -> (ulong); GetBuffer: def (*s_IAsyncRpcChannelBuffer, *RPCOLEMESSAGE, *GUID) -> (long); SendReceive: def (*s_IAsyncRpcChannelBuffer, *RPCOLEMESSAGE, *ulong) -> (long); FreeBuffer: def (*s_IAsyncRpcChannelBuffer, *RPCOLEMESSAGE) -> (long); GetDestCtx: def (*s_IAsyncRpcChannelBuffer, *ulong, **) -> (long); IsConnected: def (*s_IAsyncRpcChannelBuffer) -> (long); GetProtocolVersion: def (*s_IAsyncRpcChannelBuffer, *ulong) -> (long); Send: def (*s_IAsyncRpcChannelBuffer, *RPCOLEMESSAGE, *s_ISynchronize, *ulong) -> (long); Receive: def (*s_IAsyncRpcChannelBuffer, *RPCOLEMESSAGE, *ulong) -> (long); GetDestCtxEx: def (*s_IAsyncRpcChannelBuffer, *RPCOLEMESSAGE, *ulong, **) -> (long); }
export type IRpcChannelBuffer3Vtbl = struct { QueryInterface: def (*s_IRpcChannelBuffer3, *GUID, **) -> (long); AddRef: def (*s_IRpcChannelBuffer3) -> (ulong); Release: def (*s_IRpcChannelBuffer3) -> (ulong); GetBuffer: def (*s_IRpcChannelBuffer3, *RPCOLEMESSAGE, *GUID) -> (long); SendReceive: def (*s_IRpcChannelBuffer3, *RPCOLEMESSAGE, *ulong) -> (long); FreeBuffer: def (*s_IRpcChannelBuffer3, *RPCOLEMESSAGE) -> (long); GetDestCtx: def (*s_IRpcChannelBuffer3, *ulong, **) -> (long); IsConnected: def (*s_IRpcChannelBuffer3) -> (long); GetProtocolVersion: def (*s_IRpcChannelBuffer3, *ulong) -> (long); Send: def (*s_IRpcChannelBuffer3, *RPCOLEMESSAGE, *ulong) -> (long); Receive: def (*s_IRpcChannelBuffer3, *RPCOLEMESSAGE, ulong, *ulong) -> (long); Cancel: def (*s_IRpcChannelBuffer3, *RPCOLEMESSAGE) -> (long); GetCallContext: def (*s_IRpcChannelBuffer3, *RPCOLEMESSAGE, *GUID, **) -> (long); GetDestCtxEx: def (*s_IRpcChannelBuffer3, *RPCOLEMESSAGE, *ulong, **) -> (long); GetState: def (*s_IRpcChannelBuffer3, *RPCOLEMESSAGE, *ulong) -> (long); RegisterAsync: def (*s_IRpcChannelBuffer3, *RPCOLEMESSAGE, *s_IAsyncManager) -> (long); }
export type IRpcSyntaxNegotiateVtbl = struct { QueryInterface: def (*s_IRpcSyntaxNegotiate, *GUID, **) -> (long); AddRef: def (*s_IRpcSyntaxNegotiate) -> (ulong); Release: def (*s_IRpcSyntaxNegotiate) -> (ulong); NegotiateSyntax: def (*s_IRpcSyntaxNegotiate, *RPCOLEMESSAGE) -> (long); }
export type IRpcProxyBufferVtbl = struct { QueryInterface: def (*s_IRpcProxyBuffer, *GUID, **) -> (long); AddRef: def (*s_IRpcProxyBuffer) -> (ulong); Release: def (*s_IRpcProxyBuffer) -> (ulong); Connect: def (*s_IRpcProxyBuffer, *s_IRpcChannelBuffer) -> (long); Disconnect: def (*s_IRpcProxyBuffer) -> (); }
export type IRpcStubBufferVtbl = struct { QueryInterface: def (*s_IRpcStubBuffer, *GUID, **) -> (long); AddRef: def (*s_IRpcStubBuffer) -> (ulong); Release: def (*s_IRpcStubBuffer) -> (ulong); Connect: def (*s_IRpcStubBuffer, *s_IUnknown) -> (long); Disconnect: def (*s_IRpcStubBuffer) -> (); Invoke: def (*s_IRpcStubBuffer, *RPCOLEMESSAGE, *s_IRpcChannelBuffer) -> (long); IsIIDSupported: *s_IRpcStubBuffer; CountRefs: def (*s_IRpcStubBuffer) -> (ulong); DebugServerQueryInterface: def (*s_IRpcStubBuffer, **) -> (long); DebugServerRelease: def (*s_IRpcStubBuffer, *) -> (); }
export type IPSFactoryBufferVtbl = struct { QueryInterface: def (*s_IPSFactoryBuffer, *GUID, **) -> (long); AddRef: def (*s_IPSFactoryBuffer) -> (ulong); Release: def (*s_IPSFactoryBuffer) -> (ulong); CreateProxy: def (*s_IPSFactoryBuffer, *s_IUnknown, *GUID, **s_IRpcProxyBuffer, **) -> (long); CreateStub: def (*s_IPSFactoryBuffer, *GUID, *s_IUnknown, **s_IRpcStubBuffer) -> (long); }
export type SChannelHookCallInfo = struct { iid: GUID; cbSize: ulong; uCausality: GUID; dwServerPid: ulong; iMethod: ulong; pObject: *; }
export type IChannelHookVtbl = struct { QueryInterface: def (*s_IChannelHook, *GUID, **) -> (long); AddRef: def (*s_IChannelHook) -> (ulong); Release: def (*s_IChannelHook) -> (ulong); ClientGetSize: def (*s_IChannelHook, *GUID, *GUID, *ulong) -> (); ClientFillBuffer: def (*s_IChannelHook, *GUID, *GUID, *ulong, *) -> (); ClientNotify: def (*s_IChannelHook, *GUID, *GUID, ulong, *, ulong, long) -> (); ServerNotify: def (*s_IChannelHook, *GUID, *GUID, ulong, *, ulong) -> (); ServerGetSize: def (*s_IChannelHook, *GUID, *GUID, long, *ulong) -> (); ServerFillBuffer: def (*s_IChannelHook, *GUID, *GUID, *ulong, *, long) -> (); }
export type SOLE_AUTHENTICATION_SERVICE = struct { dwAuthnSvc: ulong; dwAuthzSvc: ulong; pPrincipalName: *ushort; hr: long; }
export type EOLE_AUTHENTICATION_CAPABILITIES = enum { EOAC_NONE = 0; EOAC_MUTUAL_AUTH = 1; EOAC_STATIC_CLOAKING = 32; EOAC_DYNAMIC_CLOAKING = 64; EOAC_ANY_AUTHORITY = 128; EOAC_MAKE_FULLSIC = 256; EOAC_DEFAULT = 2048; EOAC_SECURE_REFS = 2; EOAC_ACCESS_CONTROL = 4; EOAC_APPID = 8; EOAC_DYNAMIC = 16; EOAC_REQUIRE_FULLSIC = 512; EOAC_AUTO_IMPERSONATE = 1024; EOAC_DISABLE_AAA = 4096; EOAC_NO_CUSTOM_MARSHAL = 8192; EOAC_RESERVED1 = 16384; }
export type SOLE_AUTHENTICATION_INFO = struct { dwAuthnSvc: ulong; dwAuthzSvc: ulong; pAuthInfo: *; }
export type SOLE_AUTHENTICATION_LIST = struct { cAuthInfo: ulong; aAuthInfo: *SOLE_AUTHENTICATION_INFO; }
export type IClientSecurityVtbl = struct { QueryInterface: def (*s_IClientSecurity, *GUID, **) -> (long); AddRef: def (*s_IClientSecurity) -> (ulong); Release: def (*s_IClientSecurity) -> (ulong); QueryBlanket: def (*s_IClientSecurity, *s_IUnknown, *ulong, *ulong, **ushort, *ulong, *ulong, **, *ulong) -> (long); SetBlanket: def (*s_IClientSecurity, *s_IUnknown, ulong, ulong, *ushort, ulong, ulong, *, ulong) -> (long); CopyProxy: def (*s_IClientSecurity, *s_IUnknown, **s_IUnknown) -> (long); }
export type IServerSecurityVtbl = struct { QueryInterface: def (*s_IServerSecurity, *GUID, **) -> (long); AddRef: def (*s_IServerSecurity) -> (ulong); Release: def (*s_IServerSecurity) -> (ulong); QueryBlanket: def (*s_IServerSecurity, *ulong, *ulong, **ushort, *ulong, *ulong, **, *ulong) -> (long); ImpersonateClient: def (*s_IServerSecurity) -> (long); RevertToSelf: def (*s_IServerSecurity) -> (long); IsImpersonating: def (*s_IServerSecurity) -> (int); }
export type RPCOPT_PROPERTIES = enum { COMBND_RPCTIMEOUT = 1; COMBND_SERVER_LOCALITY = 2; COMBND_RESERVED1 = 4; COMBND_RESERVED2 = 5; COMBND_RESERVED3 = 8; COMBND_RESERVED4 = 16; }
export type RPCOPT_SERVER_LOCALITY_VALUES = enum { SERVER_LOCALITY_PROCESS_LOCAL = 0; SERVER_LOCALITY_MACHINE_LOCAL = 1; SERVER_LOCALITY_REMOTE = 2; }
export type IRpcOptionsVtbl = struct { QueryInterface: def (*s_IRpcOptions, *GUID, **) -> (long); AddRef: def (*s_IRpcOptions) -> (ulong); Release: def (*s_IRpcOptions) -> (ulong); Set: def (*s_IRpcOptions, *s_IUnknown, RPCOPT_PROPERTIES, uint64) -> (long); Query: def (*s_IRpcOptions, *s_IUnknown, RPCOPT_PROPERTIES, *uint64) -> (long); }
export type GLOBALOPT_PROPERTIES = enum { COMGLB_EXCEPTION_HANDLING = 1; COMGLB_APPID = 2; COMGLB_RPC_THREADPOOL_SETTING = 3; COMGLB_RO_SETTINGS = 4; COMGLB_UNMARSHALING_POLICY = 5; COMGLB_PROPERTIES_RESERVED1 = 6; COMGLB_PROPERTIES_RESERVED2 = 7; COMGLB_PROPERTIES_RESERVED3 = 8; }
export type GLOBALOPT_EH_VALUES = enum { COMGLB_EXCEPTION_HANDLE = 0; COMGLB_EXCEPTION_DONOT_HANDLE_FATAL = 1; COMGLB_EXCEPTION_DONOT_HANDLE = COMGLB_EXCEPTION_DONOT_HANDLE_FATAL; COMGLB_EXCEPTION_DONOT_HANDLE_ANY = 2; }
export type GLOBALOPT_RPCTP_VALUES = enum { COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL = 0; COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL = 1; }
export type GLOBALOPT_RO_FLAGS = enum { COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES = 1; COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES = 2; COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES = 4; COMGLB_FAST_RUNDOWN = 8; COMGLB_RESERVED1 = 16; COMGLB_RESERVED2 = 32; COMGLB_RESERVED3 = 64; COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES = 128; COMGLB_RESERVED4 = 256; COMGLB_RESERVED5 = 512; COMGLB_RESERVED6 = 1024; }
export type GLOBALOPT_UNMARSHALING_POLICY_VALUES = enum { COMGLB_UNMARSHALING_POLICY_NORMAL = 0; COMGLB_UNMARSHALING_POLICY_STRONG = 1; COMGLB_UNMARSHALING_POLICY_HYBRID = 2; }
export type IGlobalOptionsVtbl = struct { QueryInterface: def (*s_IGlobalOptions, *GUID, **) -> (long); AddRef: def (*s_IGlobalOptions) -> (ulong); Release: def (*s_IGlobalOptions) -> (ulong); Set: def (*s_IGlobalOptions, GLOBALOPT_PROPERTIES, uint64) -> (long); Query: def (*s_IGlobalOptions, GLOBALOPT_PROPERTIES, *uint64) -> (long); }
export type ISurrogateVtbl = struct { QueryInterface: def (*s_ISurrogate, *GUID, **) -> (long); AddRef: def (*s_ISurrogate) -> (ulong); Release: def (*s_ISurrogate) -> (ulong); LoadDllServer: def (*s_ISurrogate, *GUID) -> (long); FreeSurrogate: def (*s_ISurrogate) -> (long); }
export type IGlobalInterfaceTableVtbl = struct { QueryInterface: def (*s_IGlobalInterfaceTable, *GUID, **) -> (long); AddRef: def (*s_IGlobalInterfaceTable) -> (ulong); Release: def (*s_IGlobalInterfaceTable) -> (ulong); RegisterInterfaceInGlobal: def (*s_IGlobalInterfaceTable, *s_IUnknown, *GUID, *ulong) -> (long); RevokeInterfaceFromGlobal: def (*s_IGlobalInterfaceTable, ulong) -> (long); GetInterfaceFromGlobal: def (*s_IGlobalInterfaceTable, ulong, *GUID, **) -> (long); }
export type ISynchronizeVtbl = struct { QueryInterface: def (*s_ISynchronize, *GUID, **) -> (long); AddRef: def (*s_ISynchronize) -> (ulong); Release: def (*s_ISynchronize) -> (ulong); Wait: def (*s_ISynchronize, ulong, ulong) -> (long); Signal: def (*s_ISynchronize) -> (long); Reset: def (*s_ISynchronize) -> (long); }
export type ISynchronizeHandleVtbl = struct { QueryInterface: def (*s_ISynchronizeHandle, *GUID, **) -> (long); AddRef: def (*s_ISynchronizeHandle) -> (ulong); Release: def (*s_ISynchronizeHandle) -> (ulong); GetHandle: def (*s_ISynchronizeHandle, **) -> (long); }
export type ISynchronizeEventVtbl = struct { QueryInterface: def (*s_ISynchronizeEvent, *GUID, **) -> (long); AddRef: def (*s_ISynchronizeEvent) -> (ulong); Release: def (*s_ISynchronizeEvent) -> (ulong); GetHandle: def (*s_ISynchronizeEvent, **) -> (long); SetEventHandle: def (*s_ISynchronizeEvent, **) -> (long); }
export type ISynchronizeContainerVtbl = struct { QueryInterface: def (*s_ISynchronizeContainer, *GUID, **) -> (long); AddRef: def (*s_ISynchronizeContainer) -> (ulong); Release: def (*s_ISynchronizeContainer) -> (ulong); AddSynchronize: def (*s_ISynchronizeContainer, *s_ISynchronize) -> (long); WaitMultiple: def (*s_ISynchronizeContainer, ulong, ulong, **s_ISynchronize) -> (long); }
export type ISynchronizeMutexVtbl = struct { QueryInterface: def (*s_ISynchronizeMutex, *GUID, **) -> (long); AddRef: def (*s_ISynchronizeMutex) -> (ulong); Release: def (*s_ISynchronizeMutex) -> (ulong); Wait: def (*s_ISynchronizeMutex, ulong, ulong) -> (long); Signal: def (*s_ISynchronizeMutex) -> (long); Reset: def (*s_ISynchronizeMutex) -> (long); ReleaseMutex: def (*s_ISynchronizeMutex) -> (long); }
export type ICancelMethodCallsVtbl = struct { QueryInterface: def (*s_ICancelMethodCalls, *GUID, **) -> (long); AddRef: def (*s_ICancelMethodCalls) -> (ulong); Release: def (*s_ICancelMethodCalls) -> (ulong); Cancel: def (*s_ICancelMethodCalls, ulong) -> (long); TestCancel: def (*s_ICancelMethodCalls) -> (long); }
export type DCOM_CALL_STATE = enum { DCOM_NONE = 0; DCOM_CALL_COMPLETE = 1; DCOM_CALL_CANCELED = 2; }
export type IAsyncManagerVtbl = struct { QueryInterface: def (*s_IAsyncManager, *GUID, **) -> (long); AddRef: def (*s_IAsyncManager) -> (ulong); Release: def (*s_IAsyncManager) -> (ulong); CompleteCall: def (*s_IAsyncManager, long) -> (long); GetCallContext: def (*s_IAsyncManager, *GUID, **) -> (long); GetState: def (*s_IAsyncManager, *ulong) -> (long); }
export type ICallFactoryVtbl = struct { QueryInterface: def (*s_ICallFactory, *GUID, **) -> (long); AddRef: def (*s_ICallFactory) -> (ulong); Release: def (*s_ICallFactory) -> (ulong); CreateCall: def (*s_ICallFactory, *GUID, *s_IUnknown, *GUID, **s_IUnknown) -> (long); }
export type IRpcHelperVtbl = struct { QueryInterface: def (*s_IRpcHelper, *GUID, **) -> (long); AddRef: def (*s_IRpcHelper) -> (ulong); Release: def (*s_IRpcHelper) -> (ulong); GetDCOMProtocolVersion: def (*s_IRpcHelper, *ulong) -> (long); GetIIDFromOBJREF: def (*s_IRpcHelper, *, **GUID) -> (long); }
export type IReleaseMarshalBuffersVtbl = struct { QueryInterface: def (*s_IReleaseMarshalBuffers, *GUID, **) -> (long); AddRef: def (*s_IReleaseMarshalBuffers) -> (ulong); Release: def (*s_IReleaseMarshalBuffers) -> (ulong); ReleaseMarshalBuffer: def (*s_IReleaseMarshalBuffers, *RPCOLEMESSAGE, ulong, *s_IUnknown) -> (long); }
export type IWaitMultipleVtbl = struct { QueryInterface: def (*s_IWaitMultiple, *GUID, **) -> (long); AddRef: def (*s_IWaitMultiple) -> (ulong); Release: def (*s_IWaitMultiple) -> (ulong); WaitMultiple: def (*s_IWaitMultiple, ulong, **s_ISynchronize) -> (long); AddSynchronize: def (*s_IWaitMultiple, *s_ISynchronize) -> (long); }
export type IAddrTrackingControlVtbl = struct { QueryInterface: def (*s_IAddrTrackingControl, *GUID, **) -> (long); AddRef: def (*s_IAddrTrackingControl) -> (ulong); Release: def (*s_IAddrTrackingControl) -> (ulong); EnableCOMDynamicAddrTracking: def (*s_IAddrTrackingControl) -> (long); DisableCOMDynamicAddrTracking: def (*s_IAddrTrackingControl) -> (long); }
export type IAddrExclusionControlVtbl = struct { QueryInterface: def (*s_IAddrExclusionControl, *GUID, **) -> (long); AddRef: def (*s_IAddrExclusionControl) -> (ulong); Release: def (*s_IAddrExclusionControl) -> (ulong); GetCurrentAddrExclusionList: def (*s_IAddrExclusionControl, *GUID, **) -> (long); UpdateAddrExclusionList: def (*s_IAddrExclusionControl, *s_IUnknown) -> (long); }
export type IPipeByteVtbl = struct { QueryInterface: def (*s_IPipeByte, *GUID, **) -> (long); AddRef: def (*s_IPipeByte) -> (ulong); Release: def (*s_IPipeByte) -> (ulong); Pull: def (*s_IPipeByte, *char, ulong, *ulong) -> (long); Push: def (*s_IPipeByte, *char, ulong) -> (long); }
export type AsyncIPipeByteVtbl = struct { QueryInterface: def (*s_AsyncIPipeByte, *GUID, **) -> (long); AddRef: def (*s_AsyncIPipeByte) -> (ulong); Release: def (*s_AsyncIPipeByte) -> (ulong); Begin_Pull: def (*s_AsyncIPipeByte, ulong) -> (long); Finish_Pull: def (*s_AsyncIPipeByte, *char, *ulong) -> (long); Begin_Push: def (*s_AsyncIPipeByte, *char, ulong) -> (long); Finish_Push: def (*s_AsyncIPipeByte) -> (long); }
export type IPipeLongVtbl = struct { QueryInterface: def (*s_IPipeLong, *GUID, **) -> (long); AddRef: def (*s_IPipeLong) -> (ulong); Release: def (*s_IPipeLong) -> (ulong); Pull: def (*s_IPipeLong, *long, ulong, *ulong) -> (long); Push: def (*s_IPipeLong, *long, ulong) -> (long); }
export type AsyncIPipeLongVtbl = struct { QueryInterface: def (*s_AsyncIPipeLong, *GUID, **) -> (long); AddRef: def (*s_AsyncIPipeLong) -> (ulong); Release: def (*s_AsyncIPipeLong) -> (ulong); Begin_Pull: def (*s_AsyncIPipeLong, ulong) -> (long); Finish_Pull: def (*s_AsyncIPipeLong, *long, *ulong) -> (long); Begin_Push: def (*s_AsyncIPipeLong, *long, ulong) -> (long); Finish_Push: def (*s_AsyncIPipeLong) -> (long); }
export type IPipeDoubleVtbl = struct { QueryInterface: def (*s_IPipeDouble, *GUID, **) -> (long); AddRef: def (*s_IPipeDouble) -> (ulong); Release: def (*s_IPipeDouble) -> (ulong); Pull: def (*s_IPipeDouble, *double, ulong, *ulong) -> (long); Push: def (*s_IPipeDouble, *double, ulong) -> (long); }
export type AsyncIPipeDoubleVtbl = struct { QueryInterface: def (*s_AsyncIPipeDouble, *GUID, **) -> (long); AddRef: def (*s_AsyncIPipeDouble) -> (ulong); Release: def (*s_AsyncIPipeDouble) -> (ulong); Begin_Pull: def (*s_AsyncIPipeDouble, ulong) -> (long); Finish_Pull: def (*s_AsyncIPipeDouble, *double, *ulong) -> (long); Begin_Push: def (*s_AsyncIPipeDouble, *double, ulong) -> (long); Finish_Push: def (*s_AsyncIPipeDouble) -> (long); }
export type APTTYPEQUALIFIER = enum { APTTYPEQUALIFIER_NONE = 0; APTTYPEQUALIFIER_IMPLICIT_MTA = 1; APTTYPEQUALIFIER_NA_ON_MTA = 2; APTTYPEQUALIFIER_NA_ON_STA = 3; APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA = 4; APTTYPEQUALIFIER_NA_ON_MAINSTA = 5; APTTYPEQUALIFIER_APPLICATION_STA = 6; APTTYPEQUALIFIER_RESERVED_1 = 7; }
export type APTTYPE = enum { APTTYPE_CURRENT = (- 1); APTTYPE_STA = 0; APTTYPE_MTA = 1; APTTYPE_NA = 2; APTTYPE_MAINSTA = 3; }
export type THDTYPE = enum { THDTYPE_BLOCKMESSAGES = 0; THDTYPE_PROCESSMESSAGES = 1; }
export type IComThreadingInfoVtbl = struct { QueryInterface: def (*s_IComThreadingInfo, *GUID, **) -> (long); AddRef: def (*s_IComThreadingInfo) -> (ulong); Release: def (*s_IComThreadingInfo) -> (ulong); GetCurrentApartmentType: def (*s_IComThreadingInfo, *APTTYPE) -> (long); GetCurrentThreadType: def (*s_IComThreadingInfo, *THDTYPE) -> (long); GetCurrentLogicalThreadId: def (*s_IComThreadingInfo, *GUID) -> (long); SetCurrentLogicalThreadId: def (*s_IComThreadingInfo, *GUID) -> (long); }
export type IProcessInitControlVtbl = struct { QueryInterface: def (*s_IProcessInitControl, *GUID, **) -> (long); AddRef: def (*s_IProcessInitControl) -> (ulong); Release: def (*s_IProcessInitControl) -> (ulong); ResetInitializerTimeout: def (*s_IProcessInitControl, ulong) -> (long); }
export type IFastRundownVtbl = struct { QueryInterface: def (*s_IFastRundown, *GUID, **) -> (long); AddRef: def (*s_IFastRundown) -> (ulong); Release: def (*s_IFastRundown) -> (ulong); }
export type CO_MARSHALING_CONTEXT_ATTRIBUTES = enum { CO_MARSHALING_SOURCE_IS_APP_CONTAINER = 0; CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_1; CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_2; CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_3; CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_4; CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_5; CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_6; CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_7; CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_8; CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_9; CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_10; CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_11; CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_12; CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_13; CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_14; CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_15; CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_16; CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_17; CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_18; }
export type IMarshalingStreamVtbl = struct { QueryInterface: def (*s_IMarshalingStream, *GUID, **) -> (long); AddRef: def (*s_IMarshalingStream) -> (ulong); Release: def (*s_IMarshalingStream) -> (ulong); Read: def (*s_IMarshalingStream, *, ulong, *ulong) -> (long); Write: def (*s_IMarshalingStream, *, ulong, *ulong) -> (long); Seek: def (*s_IMarshalingStream, LARGE_INTEGER, ulong, *ULARGE_INTEGER) -> (long); SetSize: def (*s_IMarshalingStream, ULARGE_INTEGER) -> (long); CopyTo: def (*s_IMarshalingStream, *s_IStream, ULARGE_INTEGER, *ULARGE_INTEGER, *ULARGE_INTEGER) -> (long); Commit: def (*s_IMarshalingStream, ulong) -> (long); Revert: def (*s_IMarshalingStream) -> (long); LockRegion: def (*s_IMarshalingStream, ULARGE_INTEGER, ULARGE_INTEGER, ulong) -> (long); UnlockRegion: def (*s_IMarshalingStream, ULARGE_INTEGER, ULARGE_INTEGER, ulong) -> (long); Stat: def (*s_IMarshalingStream, *STATSTG, ulong) -> (long); Clone: def (*s_IMarshalingStream, **s_IStream) -> (long); GetMarshalingContextAttribute: def (*s_IMarshalingStream, CO_MARSHALING_CONTEXT_ATTRIBUTES, *uint64) -> (long); }
export type IAgileReferenceVtbl = struct { QueryInterface: def (*s_IAgileReference, *GUID, **) -> (long); AddRef: def (*s_IAgileReference) -> (ulong); Release: def (*s_IAgileReference) -> (ulong); Resolve: def (*s_IAgileReference, *GUID, **) -> (long); }
export type ServerInformation = struct { dwServerPid: ulong; dwServerTid: ulong; ui64ServerAddress: uint64; }
export type STDMSHLFLAGS = enum { SMEXF_SERVER = 1; SMEXF_HANDLER = 2; }
export type PROPVARIANT
export type COWAIT_FLAGS = enum { COWAIT_DEFAULT = 0; COWAIT_WAITALL = 1; COWAIT_ALERTABLE = 2; COWAIT_INPUTAVAILABLE = 4; COWAIT_DISPATCH_CALLS = 8; COWAIT_DISPATCH_WINDOW_MESSAGES = 16; }
export type CWMO_FLAGS = enum { CWMO_DEFAULT = 0; CWMO_DISPATCH_CALLS = 1; CWMO_DISPATCH_WINDOW_MESSAGES = 2; }
export type IMallocSpy
export type IBindCtx
export type IEnumMoniker
export type IRunnableObject
export type IRunningObjectTable
export type IPersist
export type IPersistStream
export type IMoniker
export type IROTData
export type IEnumSTATSTG
export type IStorage
export type IPersistFile
export type IPersistStorage
export type ILockBytes
export type IEnumFORMATETC
export type IEnumSTATDATA
export type IRootStorage
export type IAdviseSink
export type AsyncIAdviseSink
export type IAdviseSink2
export type AsyncIAdviseSink2
export type IDataObject
export type IDataAdviseHolder
export type IMessageFilter
export type IClassActivator
export type IFillLockBytes
export type IProgressNotify
export type ILayoutStorage
export type IBlockingLock
export type ITimeAndNoticeControl
export type IOplockStorage
export type IDirectWriterLock
export type IUrlMon
export type IForegroundTransfer
export type IThumbnailExtractor
export type IDummyHICONIncluder
export type IProcessLock
export type ISurrogateService
export type IInitializeSpy
export type IApartmentShutdown
export type IMallocSpyVtbl = struct { QueryInterface: def (*s_IMallocSpy, *GUID, **) -> (long); AddRef: def (*s_IMallocSpy) -> (ulong); Release: def (*s_IMallocSpy) -> (ulong); PreAlloc: def (*s_IMallocSpy, uint64) -> (uint64); PostAlloc: *; PreFree: *; PostFree: def (*s_IMallocSpy, int) -> (); PreRealloc: def (*s_IMallocSpy, *, uint64, **, int) -> (uint64); PostRealloc: *; PreGetSize: *; PostGetSize: def (*s_IMallocSpy, uint64, int) -> (uint64); PreDidAlloc: *; PostDidAlloc: def (*s_IMallocSpy, *, int, int) -> (int); PreHeapMinimize: def (*s_IMallocSpy) -> (); PostHeapMinimize: def (*s_IMallocSpy) -> (); }
export type BIND_OPTS = struct { cbStruct: ulong; grfFlags: ulong; grfMode: ulong; dwTickCountDeadline: ulong; }
export type BIND_OPTS2 = struct { cbStruct: ulong; grfFlags: ulong; grfMode: ulong; dwTickCountDeadline: ulong; dwTrackFlags: ulong; dwClassContext: ulong; locale: ulong; pServerInfo: *COSERVERINFO; }
export type BIND_OPTS3 = struct { cbStruct: ulong; grfFlags: ulong; grfMode: ulong; dwTickCountDeadline: ulong; dwTrackFlags: ulong; dwClassContext: ulong; locale: ulong; pServerInfo: *COSERVERINFO; hwnd: *s_HWND__; }
export type BIND_FLAGS = enum { BIND_MAYBOTHERUSER = 1; BIND_JUSTTESTEXISTENCE = 2; }
export type IBindCtxVtbl = struct { QueryInterface: def (*s_IBindCtx, *GUID, **) -> (long); AddRef: def (*s_IBindCtx) -> (ulong); Release: def (*s_IBindCtx) -> (ulong); RegisterObjectBound: def (*s_IBindCtx, *s_IUnknown) -> (long); RevokeObjectBound: def (*s_IBindCtx, *s_IUnknown) -> (long); ReleaseBoundObjects: def (*s_IBindCtx) -> (long); SetBindOptions: def (*s_IBindCtx, *BIND_OPTS) -> (long); GetBindOptions: def (*s_IBindCtx, *BIND_OPTS) -> (long); GetRunningObjectTable: def (*s_IBindCtx, **s_IRunningObjectTable) -> (long); RegisterObjectParam: def (*s_IBindCtx, *ushort, *s_IUnknown) -> (long); GetObjectParam: def (*s_IBindCtx, *ushort, **s_IUnknown) -> (long); EnumObjectParam: def (*s_IBindCtx, **s_IEnumString) -> (long); RevokeObjectParam: def (*s_IBindCtx, *ushort) -> (long); }
export type IEnumMonikerVtbl = struct { QueryInterface: def (*s_IEnumMoniker, *GUID, **) -> (long); AddRef: def (*s_IEnumMoniker) -> (ulong); Release: def (*s_IEnumMoniker) -> (ulong); Next: def (*s_IEnumMoniker, ulong, **s_IMoniker, *ulong) -> (long); Skip: def (*s_IEnumMoniker, ulong) -> (long); Reset: def (*s_IEnumMoniker) -> (long); Clone: def (*s_IEnumMoniker, **s_IEnumMoniker) -> (long); }
export type IRunnableObjectVtbl = struct { QueryInterface: def (*s_IRunnableObject, *GUID, **) -> (long); AddRef: def (*s_IRunnableObject) -> (ulong); Release: def (*s_IRunnableObject) -> (ulong); GetRunningClass: def (*s_IRunnableObject, *GUID) -> (long); Run: def (*s_IRunnableObject, *s_IBindCtx) -> (long); IsRunning: def (*s_IRunnableObject) -> (int); LockRunning: def (*s_IRunnableObject, int, int) -> (long); SetContainedObject: def (*s_IRunnableObject, int) -> (long); }
export type IRunningObjectTableVtbl = struct { QueryInterface: def (*s_IRunningObjectTable, *GUID, **) -> (long); AddRef: def (*s_IRunningObjectTable) -> (ulong); Release: def (*s_IRunningObjectTable) -> (ulong); Register: def (*s_IRunningObjectTable, ulong, *s_IUnknown, *s_IMoniker, *ulong) -> (long); Revoke: def (*s_IRunningObjectTable, ulong) -> (long); IsRunning: def (*s_IRunningObjectTable, *s_IMoniker) -> (long); GetObjectA: def (*s_IRunningObjectTable, *s_IMoniker, **s_IUnknown) -> (long); NoteChangeTime: def (*s_IRunningObjectTable, ulong, *FILETIME) -> (long); GetTimeOfLastChange: def (*s_IRunningObjectTable, *s_IMoniker, *FILETIME) -> (long); EnumRunning: def (*s_IRunningObjectTable, **s_IEnumMoniker) -> (long); }
export type IPersistVtbl = struct { QueryInterface: def (*s_IPersist, *GUID, **) -> (long); AddRef: def (*s_IPersist) -> (ulong); Release: def (*s_IPersist) -> (ulong); GetClassID: def (*s_IPersist, *GUID) -> (long); }
export type IPersistStreamVtbl = struct { QueryInterface: def (*s_IPersistStream, *GUID, **) -> (long); AddRef: def (*s_IPersistStream) -> (ulong); Release: def (*s_IPersistStream) -> (ulong); GetClassID: def (*s_IPersistStream, *GUID) -> (long); IsDirty: def (*s_IPersistStream) -> (long); Load: def (*s_IPersistStream, *s_IStream) -> (long); Save: def (*s_IPersistStream, *s_IStream, int) -> (long); GetSizeMax: def (*s_IPersistStream, *ULARGE_INTEGER) -> (long); }
export type MKSYS = enum { MKSYS_NONE = 0; MKSYS_GENERICCOMPOSITE = 1; MKSYS_FILEMONIKER = 2; MKSYS_ANTIMONIKER = 3; MKSYS_ITEMMONIKER = 4; MKSYS_POINTERMONIKER = 5; MKSYS_CLASSMONIKER = 7; MKSYS_OBJREFMONIKER = 8; MKSYS_SESSIONMONIKER = 9; MKSYS_LUAMONIKER = 10; }
export type MKRREDUCE = enum { MKRREDUCE_ONE = ((3 << 16)); MKRREDUCE_TOUSER = ((2 << 16)); MKRREDUCE_THROUGHUSER = ((1 << 16)); MKRREDUCE_ALL = 0; }
export type IMonikerVtbl = struct { QueryInterface: def (*s_IMoniker, *GUID, **) -> (long); AddRef: def (*s_IMoniker) -> (ulong); Release: def (*s_IMoniker) -> (ulong); GetClassID: def (*s_IMoniker, *GUID) -> (long); IsDirty: def (*s_IMoniker) -> (long); Load: def (*s_IMoniker, *s_IStream) -> (long); Save: def (*s_IMoniker, *s_IStream, int) -> (long); GetSizeMax: def (*s_IMoniker, *ULARGE_INTEGER) -> (long); BindToObject: def (*s_IMoniker, *s_IBindCtx, *s_IMoniker, *GUID, **) -> (long); BindToStorage: def (*s_IMoniker, *s_IBindCtx, *s_IMoniker, *GUID, **) -> (long); Reduce: def (*s_IMoniker, *s_IBindCtx, ulong, **s_IMoniker, **s_IMoniker) -> (long); ComposeWith: def (*s_IMoniker, *s_IMoniker, int, **s_IMoniker) -> (long); Enum: def (*s_IMoniker, int, **s_IEnumMoniker) -> (long); IsEqual: def (*s_IMoniker, *s_IMoniker) -> (long); Hash: def (*s_IMoniker, *ulong) -> (long); IsRunning: def (*s_IMoniker, *s_IBindCtx, *s_IMoniker, *s_IMoniker) -> (long); GetTimeOfLastChange: def (*s_IMoniker, *s_IBindCtx, *s_IMoniker, *FILETIME) -> (long); Inverse: def (*s_IMoniker, **s_IMoniker) -> (long); CommonPrefixWith: def (*s_IMoniker, *s_IMoniker, **s_IMoniker) -> (long); RelativePathTo: def (*s_IMoniker, *s_IMoniker, **s_IMoniker) -> (long); GetDisplayName: def (*s_IMoniker, *s_IBindCtx, *s_IMoniker, **ushort) -> (long); ParseDisplayName: def (*s_IMoniker, *s_IBindCtx, *s_IMoniker, *ushort, *ulong, **s_IMoniker) -> (long); IsSystemMoniker: def (*s_IMoniker, *ulong) -> (long); }
export type IROTDataVtbl = struct { QueryInterface: def (*s_IROTData, *GUID, **) -> (long); AddRef: def (*s_IROTData) -> (ulong); Release: def (*s_IROTData) -> (ulong); GetComparisonData: def (*s_IROTData, *char, ulong, *ulong) -> (long); }
export type IEnumSTATSTGVtbl = struct { QueryInterface: def (*s_IEnumSTATSTG, *GUID, **) -> (long); AddRef: def (*s_IEnumSTATSTG) -> (ulong); Release: def (*s_IEnumSTATSTG) -> (ulong); Next: def (*s_IEnumSTATSTG, ulong, *STATSTG, *ulong) -> (long); Skip: def (*s_IEnumSTATSTG, ulong) -> (long); Reset: def (*s_IEnumSTATSTG) -> (long); Clone: def (*s_IEnumSTATSTG, **s_IEnumSTATSTG) -> (long); }
export type RemSNB = struct { ulCntStr: ulong; ulCntChar: ulong; rgString: [1; ushort]; }
export type IStorageVtbl = struct { QueryInterface: def (*s_IStorage, *GUID, **) -> (long); AddRef: def (*s_IStorage) -> (ulong); Release: def (*s_IStorage) -> (ulong); CreateStream: def (*s_IStorage, *ushort, ulong, ulong, ulong, **s_IStream) -> (long); OpenStream: def (*s_IStorage, *ushort, *, ulong, ulong, **s_IStream) -> (long); CreateStorage: def (*s_IStorage, *ushort, ulong, ulong, ulong, **s_IStorage) -> (long); OpenStorage: def (*s_IStorage, *ushort, *s_IStorage, ulong, **ushort, ulong, **s_IStorage) -> (long); CopyTo: def (*s_IStorage, ulong, *GUID, **ushort, *s_IStorage) -> (long); MoveElementTo: def (*s_IStorage, *ushort, *s_IStorage, *ushort, ulong) -> (long); Commit: def (*s_IStorage, ulong) -> (long); Revert: def (*s_IStorage) -> (long); EnumElements: def (*s_IStorage, ulong, *, ulong, **s_IEnumSTATSTG) -> (long); DestroyElement: def (*s_IStorage, *ushort) -> (long); RenameElement: def (*s_IStorage, *ushort, *ushort) -> (long); SetElementTimes: def (*s_IStorage, *ushort, *FILETIME, *FILETIME, *FILETIME) -> (long); SetClass: def (*s_IStorage, *GUID) -> (long); SetStateBits: def (*s_IStorage, ulong, ulong) -> (long); Stat: def (*s_IStorage, *STATSTG, ulong) -> (long); }
export type IPersistFileVtbl = struct { QueryInterface: def (*s_IPersistFile, *GUID, **) -> (long); AddRef: def (*s_IPersistFile) -> (ulong); Release: def (*s_IPersistFile) -> (ulong); GetClassID: def (*s_IPersistFile, *GUID) -> (long); IsDirty: def (*s_IPersistFile) -> (long); Load: def (*s_IPersistFile, *ushort, ulong) -> (long); Save: def (*s_IPersistFile, *ushort, int) -> (long); SaveCompleted: def (*s_IPersistFile, *ushort) -> (long); GetCurFile: def (*s_IPersistFile, **ushort) -> (long); }
export type IPersistStorageVtbl = struct { QueryInterface: def (*s_IPersistStorage, *GUID, **) -> (long); AddRef: def (*s_IPersistStorage) -> (ulong); Release: def (*s_IPersistStorage) -> (ulong); GetClassID: def (*s_IPersistStorage, *GUID) -> (long); IsDirty: def (*s_IPersistStorage) -> (long); InitNew: def (*s_IPersistStorage, *s_IStorage) -> (long); Load: def (*s_IPersistStorage, *s_IStorage) -> (long); Save: def (*s_IPersistStorage, *s_IStorage, int) -> (long); SaveCompleted: def (*s_IPersistStorage, *s_IStorage) -> (long); HandsOffStorage: def (*s_IPersistStorage) -> (long); }
export type ILockBytesVtbl = struct { QueryInterface: def (*s_ILockBytes, *GUID, **) -> (long); AddRef: def (*s_ILockBytes) -> (ulong); Release: def (*s_ILockBytes) -> (ulong); ReadAt: def (*s_ILockBytes, ULARGE_INTEGER, *, ulong, *ulong) -> (long); WriteAt: def (*s_ILockBytes, ULARGE_INTEGER, *, ulong, *ulong) -> (long); Flush: def (*s_ILockBytes) -> (long); SetSize: def (*s_ILockBytes, ULARGE_INTEGER) -> (long); LockRegion: def (*s_ILockBytes, ULARGE_INTEGER, ULARGE_INTEGER, ulong) -> (long); UnlockRegion: def (*s_ILockBytes, ULARGE_INTEGER, ULARGE_INTEGER, ulong) -> (long); Stat: def (*s_ILockBytes, *STATSTG, ulong) -> (long); }
export type DVTARGETDEVICE = struct { tdSize: ulong; tdDriverNameOffset: ushort; tdDeviceNameOffset: ushort; tdPortNameOffset: ushort; tdExtDevmodeOffset: ushort; tdData: [1; char]; }
export type FORMATETC = struct { cfFormat: ushort; ptd: *DVTARGETDEVICE; dwAspect: ulong; lindex: long; tymed: ulong; }
export type IEnumFORMATETCVtbl = struct { QueryInterface: def (*s_IEnumFORMATETC, *GUID, **) -> (long); AddRef: def (*s_IEnumFORMATETC) -> (ulong); Release: def (*s_IEnumFORMATETC) -> (ulong); Next: def (*s_IEnumFORMATETC, ulong, *FORMATETC, *ulong) -> (long); Skip: def (*s_IEnumFORMATETC, ulong) -> (long); Reset: def (*s_IEnumFORMATETC) -> (long); Clone: def (*s_IEnumFORMATETC, **s_IEnumFORMATETC) -> (long); }
export type ADVF = enum { ADVF_NODATA = 1; ADVF_PRIMEFIRST = 2; ADVF_ONLYONCE = 4; ADVF_DATAONSTOP = 64; ADVFCACHE_NOHANDLER = 8; ADVFCACHE_FORCEBUILTIN = 16; ADVFCACHE_ONSAVE = 32; }
export type STATDATA = struct { formatetc: FORMATETC; advf: ulong; pAdvSink: *s_IAdviseSink; dwConnection: ulong; }
export type IEnumSTATDATAVtbl = struct { QueryInterface: def (*s_IEnumSTATDATA, *GUID, **) -> (long); AddRef: def (*s_IEnumSTATDATA) -> (ulong); Release: def (*s_IEnumSTATDATA) -> (ulong); Next: def (*s_IEnumSTATDATA, ulong, *STATDATA, *ulong) -> (long); Skip: def (*s_IEnumSTATDATA, ulong) -> (long); Reset: def (*s_IEnumSTATDATA) -> (long); Clone: def (*s_IEnumSTATDATA, **s_IEnumSTATDATA) -> (long); }
export type IRootStorageVtbl = struct { QueryInterface: def (*s_IRootStorage, *GUID, **) -> (long); AddRef: def (*s_IRootStorage) -> (ulong); Release: def (*s_IRootStorage) -> (ulong); SwitchToFile: def (*s_IRootStorage, *ushort) -> (long); }
export type TYMED = enum { TYMED_HGLOBAL = 1; TYMED_FILE = 2; TYMED_ISTREAM = 4; TYMED_ISTORAGE = 8; TYMED_GDI = 16; TYMED_MFPICT = 32; TYMED_ENHMF = 64; TYMED_NULL = 0; }
export type RemSTGMEDIUM = struct { tymed: ulong; dwHandleType: ulong; pData: ulong; pUnkForRelease: ulong; cbData: ulong; data: [1; char]; }
export type uSTGMEDIUM = struct { tymed: ulong; _3: struct #union { hBitmap: *s_HBITMAP__; hMetaFilePict: *; hEnhMetaFile: *s_HENHMETAFILE__; hGlobal: *; lpszFileName: *ushort; pstm: *s_IStream; pstg: *s_IStorage; }; pUnkForRelease: *s_IUnknown; }
export type u___MIDL_IAdviseSink_0002 = struct #union { hBitmap: *userHBITMAP; hPalette: *userHPALETTE; hGeneric: *userHGLOBAL; }
export type GDI_OBJECT = struct { ObjectType: ulong; u: u___MIDL_IAdviseSink_0002; }
export type u___MIDL_IAdviseSink_0003 = struct #union { hMetaFilePict: *userHMETAFILEPICT; hHEnhMetaFile: *userHENHMETAFILE; hGdiHandle: *GDI_OBJECT; hGlobal: *userHGLOBAL; lpszFileName: *ushort; pstm: *BYTE_BLOB; pstg: *BYTE_BLOB; }
export type s__STGMEDIUM_UNION = struct { tymed: ulong; u: u___MIDL_IAdviseSink_0003; }
export type userSTGMEDIUM = struct { _2: s__STGMEDIUM_UNION; pUnkForRelease: *s_IUnknown; }
export type userFLAG_STGMEDIUM = struct { ContextFlags: long; fPassOwnership: long; Stgmed: userSTGMEDIUM; }
export type FLAG_STGMEDIUM = struct { ContextFlags: long; fPassOwnership: long; Stgmed: uSTGMEDIUM; }
export type IAdviseSinkVtbl = struct { QueryInterface: def (*s_IAdviseSink, *GUID, **) -> (long); AddRef: def (*s_IAdviseSink) -> (ulong); Release: def (*s_IAdviseSink) -> (ulong); OnDataChange: def (*s_IAdviseSink, *FORMATETC, *uSTGMEDIUM) -> (); OnViewChange: def (*s_IAdviseSink, ulong, long) -> (); OnRename: def (*s_IAdviseSink, *s_IMoniker) -> (); OnSave: def (*s_IAdviseSink) -> (); OnClose: def (*s_IAdviseSink) -> (); }
export type AsyncIAdviseSinkVtbl = struct { QueryInterface: def (*s_AsyncIAdviseSink, *GUID, **) -> (long); AddRef: def (*s_AsyncIAdviseSink) -> (ulong); Release: def (*s_AsyncIAdviseSink) -> (ulong); Begin_OnDataChange: def (*s_AsyncIAdviseSink, *FORMATETC, *uSTGMEDIUM) -> (); Finish_OnDataChange: def (*s_AsyncIAdviseSink) -> (); Begin_OnViewChange: def (*s_AsyncIAdviseSink, ulong, long) -> (); Finish_OnViewChange: def (*s_AsyncIAdviseSink) -> (); Begin_OnRename: def (*s_AsyncIAdviseSink, *s_IMoniker) -> (); Finish_OnRename: def (*s_AsyncIAdviseSink) -> (); Begin_OnSave: def (*s_AsyncIAdviseSink) -> (); Finish_OnSave: def (*s_AsyncIAdviseSink) -> (); Begin_OnClose: def (*s_AsyncIAdviseSink) -> (); Finish_OnClose: def (*s_AsyncIAdviseSink) -> (); }
export type IAdviseSink2Vtbl = struct { QueryInterface: def (*s_IAdviseSink2, *GUID, **) -> (long); AddRef: def (*s_IAdviseSink2) -> (ulong); Release: def (*s_IAdviseSink2) -> (ulong); OnDataChange: def (*s_IAdviseSink2, *FORMATETC, *uSTGMEDIUM) -> (); OnViewChange: def (*s_IAdviseSink2, ulong, long) -> (); OnRename: def (*s_IAdviseSink2, *s_IMoniker) -> (); OnSave: def (*s_IAdviseSink2) -> (); OnClose: def (*s_IAdviseSink2) -> (); OnLinkSrcChange: def (*s_IAdviseSink2, *s_IMoniker) -> (); }
export type AsyncIAdviseSink2Vtbl = struct { QueryInterface: def (*s_AsyncIAdviseSink2, *GUID, **) -> (long); AddRef: def (*s_AsyncIAdviseSink2) -> (ulong); Release: def (*s_AsyncIAdviseSink2) -> (ulong); Begin_OnDataChange: def (*s_AsyncIAdviseSink2, *FORMATETC, *uSTGMEDIUM) -> (); Finish_OnDataChange: def (*s_AsyncIAdviseSink2) -> (); Begin_OnViewChange: def (*s_AsyncIAdviseSink2, ulong, long) -> (); Finish_OnViewChange: def (*s_AsyncIAdviseSink2) -> (); Begin_OnRename: def (*s_AsyncIAdviseSink2, *s_IMoniker) -> (); Finish_OnRename: def (*s_AsyncIAdviseSink2) -> (); Begin_OnSave: def (*s_AsyncIAdviseSink2) -> (); Finish_OnSave: def (*s_AsyncIAdviseSink2) -> (); Begin_OnClose: def (*s_AsyncIAdviseSink2) -> (); Finish_OnClose: def (*s_AsyncIAdviseSink2) -> (); Begin_OnLinkSrcChange: def (*s_AsyncIAdviseSink2, *s_IMoniker) -> (); Finish_OnLinkSrcChange: def (*s_AsyncIAdviseSink2) -> (); }
export type DATADIR = enum { DATADIR_GET = 1; DATADIR_SET = 2; }
export type IDataObjectVtbl = struct { QueryInterface: def (*s_IDataObject, *GUID, **) -> (long); AddRef: def (*s_IDataObject) -> (ulong); Release: def (*s_IDataObject) -> (ulong); GetData: def (*s_IDataObject, *FORMATETC, *uSTGMEDIUM) -> (long); GetDataHere: def (*s_IDataObject, *FORMATETC, *uSTGMEDIUM) -> (long); QueryGetData: def (*s_IDataObject, *FORMATETC) -> (long); GetCanonicalFormatEtc: def (*s_IDataObject, *FORMATETC, *FORMATETC) -> (long); SetData: def (*s_IDataObject, *FORMATETC, *uSTGMEDIUM, int) -> (long); EnumFormatEtc: def (*s_IDataObject, ulong, **s_IEnumFORMATETC) -> (long); DAdvise: def (*s_IDataObject, *FORMATETC, ulong, *s_IAdviseSink, *ulong) -> (long); DUnadvise: def (*s_IDataObject, ulong) -> (long); EnumDAdvise: def (*s_IDataObject, **s_IEnumSTATDATA) -> (long); }
export type IDataAdviseHolderVtbl = struct { QueryInterface: def (*s_IDataAdviseHolder, *GUID, **) -> (long); AddRef: def (*s_IDataAdviseHolder) -> (ulong); Release: def (*s_IDataAdviseHolder) -> (ulong); Advise: def (*s_IDataAdviseHolder, *s_IDataObject, *FORMATETC, ulong, *s_IAdviseSink, *ulong) -> (long); Unadvise: def (*s_IDataAdviseHolder, ulong) -> (long); EnumAdvise: def (*s_IDataAdviseHolder, **s_IEnumSTATDATA) -> (long); SendOnDataChange: def (*s_IDataAdviseHolder, *s_IDataObject, ulong, ulong) -> (long); }
export type CALLTYPE = enum { CALLTYPE_TOPLEVEL = 1; CALLTYPE_NESTED = 2; CALLTYPE_ASYNC = 3; CALLTYPE_TOPLEVEL_CALLPENDING = 4; CALLTYPE_ASYNC_CALLPENDING = 5; }
export type SERVERCALL = enum { SERVERCALL_ISHANDLED = 0; SERVERCALL_REJECTED = 1; SERVERCALL_RETRYLATER = 2; }
export type PENDINGTYPE = enum { PENDINGTYPE_TOPLEVEL = 1; PENDINGTYPE_NESTED = 2; }
export type PENDINGMSG = enum { PENDINGMSG_CANCELCALL = 0; PENDINGMSG_WAITNOPROCESS = 1; PENDINGMSG_WAITDEFPROCESS = 2; }
export type INTERFACEINFO = struct { pUnk: *s_IUnknown; iid: GUID; wMethod: ushort; }
export type IMessageFilterVtbl = struct { QueryInterface: def (*s_IMessageFilter, *GUID, **) -> (long); AddRef: def (*s_IMessageFilter) -> (ulong); Release: def (*s_IMessageFilter) -> (ulong); HandleInComingCall: def (*s_IMessageFilter, ulong, *s_HTASK__, ulong, *INTERFACEINFO) -> (ulong); RetryRejectedCall: def (*s_IMessageFilter, *s_HTASK__, ulong, ulong) -> (ulong); MessagePending: def (*s_IMessageFilter, *s_HTASK__, ulong, ulong) -> (ulong); }
export type IClassActivatorVtbl = struct { QueryInterface: def (*s_IClassActivator, *GUID, **) -> (long); AddRef: def (*s_IClassActivator) -> (ulong); Release: def (*s_IClassActivator) -> (ulong); GetClassObject: def (*s_IClassActivator, *GUID, ulong, ulong, *GUID, **) -> (long); }
export type IFillLockBytesVtbl = struct { QueryInterface: def (*s_IFillLockBytes, *GUID, **) -> (long); AddRef: def (*s_IFillLockBytes) -> (ulong); Release: def (*s_IFillLockBytes) -> (ulong); FillAppend: def (*s_IFillLockBytes, *, ulong, *ulong) -> (long); FillAt: def (*s_IFillLockBytes, ULARGE_INTEGER, *, ulong, *ulong) -> (long); SetFillSize: def (*s_IFillLockBytes, ULARGE_INTEGER) -> (long); Terminate: def (*s_IFillLockBytes, int) -> (long); }
export type IProgressNotifyVtbl = struct { QueryInterface: def (*s_IProgressNotify, *GUID, **) -> (long); AddRef: def (*s_IProgressNotify) -> (ulong); Release: def (*s_IProgressNotify) -> (ulong); OnProgress: def (*s_IProgressNotify, ulong, ulong, int, int) -> (long); }
export type StorageLayout = struct { LayoutType: ulong; pwcsElementName: *ushort; cOffset: LARGE_INTEGER; cBytes: LARGE_INTEGER; }
export type ILayoutStorageVtbl = struct { QueryInterface: def (*s_ILayoutStorage, *GUID, **) -> (long); AddRef: def (*s_ILayoutStorage) -> (ulong); Release: def (*s_ILayoutStorage) -> (ulong); LayoutScript: def (*s_ILayoutStorage, *StorageLayout, ulong, ulong) -> (long); BeginMonitor: def (*s_ILayoutStorage) -> (long); EndMonitor: def (*s_ILayoutStorage) -> (long); ReLayoutDocfile: def (*s_ILayoutStorage, *ushort) -> (long); ReLayoutDocfileOnILockBytes: def (*s_ILayoutStorage, *s_ILockBytes) -> (long); }
export type IBlockingLockVtbl = struct { QueryInterface: def (*s_IBlockingLock, *GUID, **) -> (long); AddRef: def (*s_IBlockingLock) -> (ulong); Release: def (*s_IBlockingLock) -> (ulong); Lock: def (*s_IBlockingLock, ulong) -> (long); Unlock: def (*s_IBlockingLock) -> (long); }
export type ITimeAndNoticeControlVtbl = struct { QueryInterface: def (*s_ITimeAndNoticeControl, *GUID, **) -> (long); AddRef: def (*s_ITimeAndNoticeControl) -> (ulong); Release: def (*s_ITimeAndNoticeControl) -> (ulong); SuppressChanges: def (*s_ITimeAndNoticeControl, ulong, ulong) -> (long); }
export type IOplockStorageVtbl = struct { QueryInterface: def (*s_IOplockStorage, *GUID, **) -> (long); AddRef: def (*s_IOplockStorage) -> (ulong); Release: def (*s_IOplockStorage) -> (ulong); CreateStorageEx: def (*s_IOplockStorage, *ushort, ulong, ulong, ulong, *GUID, **) -> (long); OpenStorageEx: def (*s_IOplockStorage, *ushort, ulong, ulong, ulong, *GUID, **) -> (long); }
export type IDirectWriterLockVtbl = struct { QueryInterface: def (*s_IDirectWriterLock, *GUID, **) -> (long); AddRef: def (*s_IDirectWriterLock) -> (ulong); Release: def (*s_IDirectWriterLock) -> (ulong); WaitForWriteAccess: def (*s_IDirectWriterLock, ulong) -> (long); ReleaseWriteAccess: def (*s_IDirectWriterLock) -> (long); HaveWriteAccess: def (*s_IDirectWriterLock) -> (long); }
export type IUrlMonVtbl = struct { QueryInterface: def (*s_IUrlMon, *GUID, **) -> (long); AddRef: def (*s_IUrlMon) -> (ulong); Release: def (*s_IUrlMon) -> (ulong); AsyncGetClassBits: def (*s_IUrlMon, *GUID, *ushort, *ushort, ulong, ulong, *ushort, *s_IBindCtx, ulong, *GUID, ulong) -> (long); }
export type IForegroundTransferVtbl = struct { QueryInterface: def (*s_IForegroundTransfer, *GUID, **) -> (long); AddRef: def (*s_IForegroundTransfer) -> (ulong); Release: def (*s_IForegroundTransfer) -> (ulong); AllowForegroundTransfer: def (*s_IForegroundTransfer, *) -> (long); }
export type IThumbnailExtractorVtbl = struct { QueryInterface: def (*s_IThumbnailExtractor, *GUID, **) -> (long); AddRef: def (*s_IThumbnailExtractor) -> (ulong); Release: def (*s_IThumbnailExtractor) -> (ulong); ExtractThumbnail: def (*s_IThumbnailExtractor, *s_IStorage, ulong, ulong, *ulong, *ulong, **s_HBITMAP__) -> (long); OnFileUpdated: def (*s_IThumbnailExtractor, *s_IStorage) -> (long); }
export type IDummyHICONIncluderVtbl = struct { QueryInterface: def (*s_IDummyHICONIncluder, *GUID, **) -> (long); AddRef: def (*s_IDummyHICONIncluder) -> (ulong); Release: def (*s_IDummyHICONIncluder) -> (ulong); Dummy: def (*s_IDummyHICONIncluder, *s_HICON__, *s_HDC__) -> (long); }
export type ApplicationType = enum { ServerApplication = 0; LibraryApplication = ((ServerApplication + 1)); }
export type ShutdownType = enum { IdleShutdown = 0; ForcedShutdown = ((IdleShutdown + 1)); }
export type IProcessLockVtbl = struct { QueryInterface: def (*s_IProcessLock, *GUID, **) -> (long); AddRef: def (*s_IProcessLock) -> (ulong); Release: def (*s_IProcessLock) -> (ulong); AddRefOnProcess: def (*s_IProcessLock) -> (ulong); ReleaseRefOnProcess: def (*s_IProcessLock) -> (ulong); }
export type ISurrogateServiceVtbl = struct { QueryInterface: def (*s_ISurrogateService, *GUID, **) -> (long); AddRef: def (*s_ISurrogateService) -> (ulong); Release: def (*s_ISurrogateService) -> (ulong); Init: def (*s_ISurrogateService, *GUID, *s_IProcessLock, *int) -> (long); ApplicationLaunch: def (*s_ISurrogateService, *GUID, ApplicationType) -> (long); ApplicationFree: def (*s_ISurrogateService, *GUID) -> (long); CatalogRefresh: def (*s_ISurrogateService, ulong) -> (long); ProcessShutdown: def (*s_ISurrogateService, ShutdownType) -> (long); }
export type IInitializeSpyVtbl = struct { QueryInterface: def (*s_IInitializeSpy, *GUID, **) -> (long); AddRef: def (*s_IInitializeSpy) -> (ulong); Release: def (*s_IInitializeSpy) -> (ulong); PreInitialize: def (*s_IInitializeSpy, ulong, ulong) -> (long); PostInitialize: def (*s_IInitializeSpy, long, ulong, ulong) -> (long); PreUninitialize: def (*s_IInitializeSpy, ulong) -> (long); PostUninitialize: def (*s_IInitializeSpy, ulong) -> (long); }
export type IApartmentShutdownVtbl = struct { QueryInterface: def (*s_IApartmentShutdown, *GUID, **) -> (long); AddRef: def (*s_IApartmentShutdown) -> (ulong); Release: def (*s_IApartmentShutdown) -> (ulong); OnUninitialize: def (*s_IApartmentShutdown, uint64) -> (); }
export type IPropertyStorage
export type IPropertySetStorage
export type IEnumSTATPROPSTG
export type IEnumSTATPROPSETSTG
export type ICreateTypeInfo
export type ICreateTypeInfo2
export type ICreateTypeLib
export type ICreateTypeLib2
export type IDispatch
export type IEnumVARIANT
export type ITypeComp
export type ITypeInfo
export type ITypeInfo2
export type ITypeLib
export type ITypeLib2
export type ITypeChangeEvents
export type IErrorInfo
export type ICreateErrorInfo
export type ISupportErrorInfo
export type ITypeFactory
export type ITypeMarshal
export type IRecordInfo
export type IErrorLog
export type IPropertyBag
export type ITypeLibRegistrationReader
export type ITypeLibRegistration
export type SAFEARRAYBOUND = struct { cElements: ulong; lLbound: long; }
export type SAFEARR_BSTR = struct { Size: ulong; aBstr: **FLAGGED_WORD_BLOB; }
export type SAFEARR_UNKNOWN = struct { Size: ulong; apUnknown: **s_IUnknown; }
export type SAFEARR_DISPATCH = struct { Size: ulong; apDispatch: **s_IDispatch; }
export type SAFEARR_VARIANT = struct { Size: ulong; aVariant: **s__wireVARIANT; }
export type SAFEARR_BRECORD = struct { Size: ulong; aRecord: **s__wireBRECORD; }
export type SAFEARR_HAVEIID = struct { Size: ulong; apUnknown: **s_IUnknown; iid: GUID; }
export type SF_TYPE = enum { SF_ERROR = VT_ERROR; SF_I1 = VT_I1; SF_I2 = VT_I2; SF_I4 = VT_I4; SF_I8 = VT_I8; SF_BSTR = VT_BSTR; SF_UNKNOWN = VT_UNKNOWN; SF_DISPATCH = VT_DISPATCH; SF_VARIANT = VT_VARIANT; SF_RECORD = VT_RECORD; SF_HAVEIID = ((VT_UNKNOWN | VT_RESERVED)); }
export type u___MIDL_IOleAutomationTypes_0001 = struct #union { BstrStr: SAFEARR_BSTR; UnknownStr: SAFEARR_UNKNOWN; DispatchStr: SAFEARR_DISPATCH; VariantStr: SAFEARR_VARIANT; RecordStr: SAFEARR_BRECORD; HaveIidStr: SAFEARR_HAVEIID; ByteStr: BYTE_SIZEDARR; WordStr: WORD_SIZEDARR; LongStr: DWORD_SIZEDARR; HyperStr: HYPER_SIZEDARR; }
export type SAFEARRAYUNION = struct { sfType: ulong; u: u___MIDL_IOleAutomationTypes_0001; }
export type SAFEARRAY = struct { cDims: ushort; fFeatures: ushort; cbElements: ulong; cLocks: ulong; pvData: *; rgsabound: [1; SAFEARRAYBOUND]; }
export type VARIANT
export type TYPEKIND = enum { TKIND_ENUM = 0; TKIND_RECORD = ((TKIND_ENUM + 1)); TKIND_MODULE = ((TKIND_RECORD + 1)); TKIND_INTERFACE = ((TKIND_MODULE + 1)); TKIND_DISPATCH = ((TKIND_INTERFACE + 1)); TKIND_COCLASS = ((TKIND_DISPATCH + 1)); TKIND_ALIAS = ((TKIND_COCLASS + 1)); TKIND_UNION = ((TKIND_ALIAS + 1)); TKIND_MAX = ((TKIND_UNION + 1)); }
export type TYPEDESC = struct { _2: struct #union { lptdesc: *TYPEDESC; lpadesc: *ARRAYDESC; hreftype: ulong; }; vt: ushort; }
export type ARRAYDESC = struct { tdescElem: TYPEDESC; cDims: ushort; rgbounds: [1; SAFEARRAYBOUND]; }
export type s_tagVARIANT = struct { _2: struct #union { _2: struct { vt: ushort; wReserved1: ushort; wReserved2: ushort; wReserved3: ushort; _6: struct #union { llVal: int64; lVal: long; bVal: char; iVal: short; fltVal: float; dblVal: double; boolVal: short; __OBSOLETE__VARIANT_BOOL: short; scode: long; cyVal: CY; date: double; bstrVal: *ushort; punkVal: *s_IUnknown; pdispVal: *s_IDispatch; parray: *SAFEARRAY; pbVal: *char; piVal: *short; plVal: *long; pllVal: *int64; pfltVal: *float; pdblVal: *double; pboolVal: *short; __OBSOLETE__VARIANT_PBOOL: *short; pscode: *long; pcyVal: *CY; pdate: *double; pbstrVal: **ushort; ppunkVal: **s_IUnknown; ppdispVal: **s_IDispatch; pparray: **SAFEARRAY; pvarVal: *s_tagVARIANT; byref: *; cVal: char; uiVal: ushort; ulVal: ulong; ullVal: uint64; intVal: int; uintVal: uint; pdecVal: *DECIMAL; pcVal: *char; puiVal: *ushort; pulVal: *ulong; pullVal: *uint64; pintVal: *int; puintVal: *uint; _47: struct { pvRecord: *; pRecInfo: *s_IRecordInfo; }; }; }; decVal: DECIMAL; }; }
export type PARAMDESCEX = struct { cBytes: ulong; varDefaultValue: s_tagVARIANT; }
export type PARAMDESC = struct { pparamdescex: *PARAMDESCEX; wParamFlags: ushort; }
export type IDLDESC = struct { dwReserved: uint64; wIDLFlags: ushort; }
export type ELEMDESC = struct { tdesc: TYPEDESC; _3: struct #union { idldesc: IDLDESC; paramdesc: PARAMDESC; }; }
export type TYPEATTR = struct { guid: GUID; lcid: ulong; dwReserved: ulong; memidConstructor: long; memidDestructor: long; lpstrSchema: *ushort; cbSizeInstance: ulong; typekind: TYPEKIND; cFuncs: ushort; cVars: ushort; cImplTypes: ushort; cbSizeVft: ushort; cbAlignment: ushort; wTypeFlags: ushort; wMajorVerNum: ushort; wMinorVerNum: ushort; tdescAlias: TYPEDESC; idldescType: IDLDESC; }
export type DISPPARAMS = struct { rgvarg: *s_tagVARIANT; rgdispidNamedArgs: *long; cArgs: uint; cNamedArgs: uint; }
export type EXCEPINFO = struct { wCode: ushort; wReserved: ushort; bstrSource: *ushort; bstrDescription: *ushort; bstrHelpFile: *ushort; dwHelpContext: ulong; pvReserved: *; pfnDeferredFillIn: def (*EXCEPINFO) -> (long); scode: long; }
export type CALLCONV = enum { CC_FASTCALL = 0; CC_CDECL = 1; CC_MSCPASCAL = ((CC_CDECL + 1)); CC_PASCAL = CC_MSCPASCAL; CC_MACPASCAL = ((CC_PASCAL + 1)); CC_STDCALL = ((CC_MACPASCAL + 1)); CC_FPFASTCALL = ((CC_STDCALL + 1)); CC_SYSCALL = ((CC_FPFASTCALL + 1)); CC_MPWCDECL = ((CC_SYSCALL + 1)); CC_MPWPASCAL = ((CC_MPWCDECL + 1)); CC_MAX = ((CC_MPWPASCAL + 1)); }
export type FUNCKIND = enum { FUNC_VIRTUAL = 0; FUNC_PUREVIRTUAL = ((FUNC_VIRTUAL + 1)); FUNC_NONVIRTUAL = ((FUNC_PUREVIRTUAL + 1)); FUNC_STATIC = ((FUNC_NONVIRTUAL + 1)); FUNC_DISPATCH = ((FUNC_STATIC + 1)); }
export type INVOKEKIND = enum { INVOKE_FUNC = 1; INVOKE_PROPERTYGET = 2; INVOKE_PROPERTYPUT = 4; INVOKE_PROPERTYPUTREF = 8; }
export type FUNCDESC = struct { memid: long; lprgscode: *long; lprgelemdescParam: *ELEMDESC; funckind: FUNCKIND; invkind: INVOKEKIND; callconv: CALLCONV; cParams: short; cParamsOpt: short; oVft: short; cScodes: short; elemdescFunc: ELEMDESC; wFuncFlags: ushort; }
export type VARKIND = enum { VAR_PERINSTANCE = 0; VAR_STATIC = ((VAR_PERINSTANCE + 1)); VAR_CONST = ((VAR_STATIC + 1)); VAR_DISPATCH = ((VAR_CONST + 1)); }
export type VARDESC = struct { memid: long; lpstrSchema: *ushort; _4: struct #union { oInst: ulong; lpvarValue: *s_tagVARIANT; }; elemdescVar: ELEMDESC; wVarFlags: ushort; varkind: VARKIND; }
export type TYPEFLAGS = enum { TYPEFLAG_FAPPOBJECT = 1; TYPEFLAG_FCANCREATE = 2; TYPEFLAG_FLICENSED = 4; TYPEFLAG_FPREDECLID = 8; TYPEFLAG_FHIDDEN = 16; TYPEFLAG_FCONTROL = 32; TYPEFLAG_FDUAL = 64; TYPEFLAG_FNONEXTENSIBLE = 128; TYPEFLAG_FOLEAUTOMATION = 256; TYPEFLAG_FRESTRICTED = 512; TYPEFLAG_FAGGREGATABLE = 1024; TYPEFLAG_FREPLACEABLE = 2048; TYPEFLAG_FDISPATCHABLE = 4096; TYPEFLAG_FREVERSEBIND = 8192; TYPEFLAG_FPROXY = 16384; }
export type FUNCFLAGS = enum { FUNCFLAG_FRESTRICTED = 1; FUNCFLAG_FSOURCE = 2; FUNCFLAG_FBINDABLE = 4; FUNCFLAG_FREQUESTEDIT = 8; FUNCFLAG_FDISPLAYBIND = 16; FUNCFLAG_FDEFAULTBIND = 32; FUNCFLAG_FHIDDEN = 64; FUNCFLAG_FUSESGETLASTERROR = 128; FUNCFLAG_FDEFAULTCOLLELEM = 256; FUNCFLAG_FUIDEFAULT = 512; FUNCFLAG_FNONBROWSABLE = 1024; FUNCFLAG_FREPLACEABLE = 2048; FUNCFLAG_FIMMEDIATEBIND = 4096; }
export type VARFLAGS = enum { VARFLAG_FREADONLY = 1; VARFLAG_FSOURCE = 2; VARFLAG_FBINDABLE = 4; VARFLAG_FREQUESTEDIT = 8; VARFLAG_FDISPLAYBIND = 16; VARFLAG_FDEFAULTBIND = 32; VARFLAG_FHIDDEN = 64; VARFLAG_FRESTRICTED = 128; VARFLAG_FDEFAULTCOLLELEM = 256; VARFLAG_FUIDEFAULT = 512; VARFLAG_FNONBROWSABLE = 1024; VARFLAG_FREPLACEABLE = 2048; VARFLAG_FIMMEDIATEBIND = 4096; }
export type CLEANLOCALSTORAGE = struct { pInterface: *s_IUnknown; pStorage: *; flags: ulong; }
export type CUSTDATAITEM = struct { guid: GUID; varValue: s_tagVARIANT; }
export type CUSTDATA = struct { cCustData: ulong; prgCustData: *CUSTDATAITEM; }
export type ICreateTypeInfoVtbl = struct { QueryInterface: def (*s_ICreateTypeInfo, *GUID, **) -> (long); AddRef: def (*s_ICreateTypeInfo) -> (ulong); Release: def (*s_ICreateTypeInfo) -> (ulong); SetGuid: def (*s_ICreateTypeInfo, *GUID) -> (long); SetTypeFlags: def (*s_ICreateTypeInfo, uint) -> (long); SetDocString: def (*s_ICreateTypeInfo, *ushort) -> (long); SetHelpContext: def (*s_ICreateTypeInfo, ulong) -> (long); SetVersion: def (*s_ICreateTypeInfo, ushort, ushort) -> (long); AddRefTypeInfo: def (*s_ICreateTypeInfo, *s_ITypeInfo, *ulong) -> (long); AddFuncDesc: def (*s_ICreateTypeInfo, uint, *FUNCDESC) -> (long); AddImplType: def (*s_ICreateTypeInfo, uint, ulong) -> (long); SetImplTypeFlags: def (*s_ICreateTypeInfo, uint, int) -> (long); SetAlignment: def (*s_ICreateTypeInfo, ushort) -> (long); SetSchema: def (*s_ICreateTypeInfo, *ushort) -> (long); AddVarDesc: def (*s_ICreateTypeInfo, uint, *VARDESC) -> (long); SetFuncAndParamNames: def (*s_ICreateTypeInfo, uint, **ushort, uint) -> (long); SetVarName: def (*s_ICreateTypeInfo, uint, *ushort) -> (long); SetTypeDescAlias: def (*s_ICreateTypeInfo, *TYPEDESC) -> (long); DefineFuncAsDllEntry: def (*s_ICreateTypeInfo, uint, *ushort, *ushort) -> (long); SetFuncDocString: def (*s_ICreateTypeInfo, uint, *ushort) -> (long); SetVarDocString: def (*s_ICreateTypeInfo, uint, *ushort) -> (long); SetFuncHelpContext: def (*s_ICreateTypeInfo, uint, ulong) -> (long); SetVarHelpContext: def (*s_ICreateTypeInfo, uint, ulong) -> (long); SetMops: def (*s_ICreateTypeInfo, uint, *ushort) -> (long); SetTypeIdldesc: def (*s_ICreateTypeInfo, *IDLDESC) -> (long); LayOut: def (*s_ICreateTypeInfo) -> (long); }
export type ICreateTypeInfo2Vtbl = struct { QueryInterface: def (*s_ICreateTypeInfo2, *GUID, **) -> (long); AddRef: def (*s_ICreateTypeInfo2) -> (ulong); Release: def (*s_ICreateTypeInfo2) -> (ulong); SetGuid: def (*s_ICreateTypeInfo2, *GUID) -> (long); SetTypeFlags: def (*s_ICreateTypeInfo2, uint) -> (long); SetDocString: def (*s_ICreateTypeInfo2, *ushort) -> (long); SetHelpContext: def (*s_ICreateTypeInfo2, ulong) -> (long); SetVersion: def (*s_ICreateTypeInfo2, ushort, ushort) -> (long); AddRefTypeInfo: def (*s_ICreateTypeInfo2, *s_ITypeInfo, *ulong) -> (long); AddFuncDesc: def (*s_ICreateTypeInfo2, uint, *FUNCDESC) -> (long); AddImplType: def (*s_ICreateTypeInfo2, uint, ulong) -> (long); SetImplTypeFlags: def (*s_ICreateTypeInfo2, uint, int) -> (long); SetAlignment: def (*s_ICreateTypeInfo2, ushort) -> (long); SetSchema: def (*s_ICreateTypeInfo2, *ushort) -> (long); AddVarDesc: def (*s_ICreateTypeInfo2, uint, *VARDESC) -> (long); SetFuncAndParamNames: def (*s_ICreateTypeInfo2, uint, **ushort, uint) -> (long); SetVarName: def (*s_ICreateTypeInfo2, uint, *ushort) -> (long); SetTypeDescAlias: def (*s_ICreateTypeInfo2, *TYPEDESC) -> (long); DefineFuncAsDllEntry: def (*s_ICreateTypeInfo2, uint, *ushort, *ushort) -> (long); SetFuncDocString: def (*s_ICreateTypeInfo2, uint, *ushort) -> (long); SetVarDocString: def (*s_ICreateTypeInfo2, uint, *ushort) -> (long); SetFuncHelpContext: def (*s_ICreateTypeInfo2, uint, ulong) -> (long); SetVarHelpContext: def (*s_ICreateTypeInfo2, uint, ulong) -> (long); SetMops: def (*s_ICreateTypeInfo2, uint, *ushort) -> (long); SetTypeIdldesc: def (*s_ICreateTypeInfo2, *IDLDESC) -> (long); LayOut: def (*s_ICreateTypeInfo2) -> (long); DeleteFuncDesc: def (*s_ICreateTypeInfo2, uint) -> (long); DeleteFuncDescByMemId: def (*s_ICreateTypeInfo2, long, INVOKEKIND) -> (long); DeleteVarDesc: def (*s_ICreateTypeInfo2, uint) -> (long); DeleteVarDescByMemId: def (*s_ICreateTypeInfo2, long) -> (long); DeleteImplType: def (*s_ICreateTypeInfo2, uint) -> (long); SetCustData: def (*s_ICreateTypeInfo2, *GUID, *s_tagVARIANT) -> (long); SetFuncCustData: def (*s_ICreateTypeInfo2, uint, *GUID, *s_tagVARIANT) -> (long); SetParamCustData: def (*s_ICreateTypeInfo2, uint, uint, *GUID, *s_tagVARIANT) -> (long); SetVarCustData: def (*s_ICreateTypeInfo2, uint, *GUID, *s_tagVARIANT) -> (long); SetImplTypeCustData: def (*s_ICreateTypeInfo2, uint, *GUID, *s_tagVARIANT) -> (long); SetHelpStringContext: def (*s_ICreateTypeInfo2, ulong) -> (long); SetFuncHelpStringContext: def (*s_ICreateTypeInfo2, uint, ulong) -> (long); SetVarHelpStringContext: def (*s_ICreateTypeInfo2, uint, ulong) -> (long); Invalidate: def (*s_ICreateTypeInfo2) -> (long); SetName: def (*s_ICreateTypeInfo2, *ushort) -> (long); }
export type ICreateTypeLibVtbl = struct { QueryInterface: def (*s_ICreateTypeLib, *GUID, **) -> (long); AddRef: def (*s_ICreateTypeLib) -> (ulong); Release: def (*s_ICreateTypeLib) -> (ulong); CreateTypeInfo: def (*s_ICreateTypeLib, *ushort, TYPEKIND, **s_ICreateTypeInfo) -> (long); SetName: def (*s_ICreateTypeLib, *ushort) -> (long); SetVersion: def (*s_ICreateTypeLib, ushort, ushort) -> (long); SetGuid: def (*s_ICreateTypeLib, *GUID) -> (long); SetDocString: def (*s_ICreateTypeLib, *ushort) -> (long); SetHelpFileName: def (*s_ICreateTypeLib, *ushort) -> (long); SetHelpContext: def (*s_ICreateTypeLib, ulong) -> (long); SetLcid: def (*s_ICreateTypeLib, ulong) -> (long); SetLibFlags: def (*s_ICreateTypeLib, uint) -> (long); SaveAllChanges: def (*s_ICreateTypeLib) -> (long); }
export type ICreateTypeLib2Vtbl = struct { QueryInterface: def (*s_ICreateTypeLib2, *GUID, **) -> (long); AddRef: def (*s_ICreateTypeLib2) -> (ulong); Release: def (*s_ICreateTypeLib2) -> (ulong); CreateTypeInfo: def (*s_ICreateTypeLib2, *ushort, TYPEKIND, **s_ICreateTypeInfo) -> (long); SetName: def (*s_ICreateTypeLib2, *ushort) -> (long); SetVersion: def (*s_ICreateTypeLib2, ushort, ushort) -> (long); SetGuid: def (*s_ICreateTypeLib2, *GUID) -> (long); SetDocString: def (*s_ICreateTypeLib2, *ushort) -> (long); SetHelpFileName: def (*s_ICreateTypeLib2, *ushort) -> (long); SetHelpContext: def (*s_ICreateTypeLib2, ulong) -> (long); SetLcid: def (*s_ICreateTypeLib2, ulong) -> (long); SetLibFlags: def (*s_ICreateTypeLib2, uint) -> (long); SaveAllChanges: def (*s_ICreateTypeLib2) -> (long); DeleteTypeInfo: def (*s_ICreateTypeLib2, *ushort) -> (long); SetCustData: def (*s_ICreateTypeLib2, *GUID, *s_tagVARIANT) -> (long); SetHelpStringContext: def (*s_ICreateTypeLib2, ulong) -> (long); SetHelpStringDll: def (*s_ICreateTypeLib2, *ushort) -> (long); }
export type IDispatchVtbl = struct { QueryInterface: def (*s_IDispatch, *GUID, **) -> (long); AddRef: def (*s_IDispatch) -> (ulong); Release: def (*s_IDispatch) -> (ulong); GetTypeInfoCount: def (*s_IDispatch, *uint) -> (long); GetTypeInfo: def (*s_IDispatch, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IDispatch, *GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IDispatch, long, *GUID, ulong, ushort, *DISPPARAMS, *s_tagVARIANT, *EXCEPINFO, *uint) -> (long); }
export type IEnumVARIANTVtbl = struct { QueryInterface: def (*s_IEnumVARIANT, *GUID, **) -> (long); AddRef: def (*s_IEnumVARIANT) -> (ulong); Release: def (*s_IEnumVARIANT) -> (ulong); Next: def (*s_IEnumVARIANT, ulong, *s_tagVARIANT, *ulong) -> (long); Skip: def (*s_IEnumVARIANT, ulong) -> (long); Reset: def (*s_IEnumVARIANT) -> (long); Clone: def (*s_IEnumVARIANT, **s_IEnumVARIANT) -> (long); }
export type DESCKIND = enum { DESCKIND_NONE = 0; DESCKIND_FUNCDESC = ((DESCKIND_NONE + 1)); DESCKIND_VARDESC = ((DESCKIND_FUNCDESC + 1)); DESCKIND_TYPECOMP = ((DESCKIND_VARDESC + 1)); DESCKIND_IMPLICITAPPOBJ = ((DESCKIND_TYPECOMP + 1)); DESCKIND_MAX = ((DESCKIND_IMPLICITAPPOBJ + 1)); }
export type BINDPTR = struct #union { lpfuncdesc: *FUNCDESC; lpvardesc: *VARDESC; lptcomp: *s_ITypeComp; }
export type ITypeCompVtbl = struct { QueryInterface: def (*s_ITypeComp, *GUID, **) -> (long); AddRef: def (*s_ITypeComp) -> (ulong); Release: def (*s_ITypeComp) -> (ulong); Bind: def (*s_ITypeComp, *ushort, ulong, ushort, **s_ITypeInfo, *DESCKIND, *BINDPTR) -> (long); BindType: def (*s_ITypeComp, *ushort, ulong, **s_ITypeInfo, **s_ITypeComp) -> (long); }
export type ITypeInfoVtbl = struct { QueryInterface: def (*s_ITypeInfo, *GUID, **) -> (long); AddRef: def (*s_ITypeInfo) -> (ulong); Release: def (*s_ITypeInfo) -> (ulong); GetTypeAttr: def (*s_ITypeInfo, **TYPEATTR) -> (long); GetTypeComp: def (*s_ITypeInfo, **s_ITypeComp) -> (long); GetFuncDesc: def (*s_ITypeInfo, uint, **FUNCDESC) -> (long); GetVarDesc: def (*s_ITypeInfo, uint, **VARDESC) -> (long); GetNames: def (*s_ITypeInfo, long, **ushort, uint, *uint) -> (long); GetRefTypeOfImplType: def (*s_ITypeInfo, uint, *ulong) -> (long); GetImplTypeFlags: def (*s_ITypeInfo, uint, *int) -> (long); GetIDsOfNames: def (*s_ITypeInfo, **ushort, uint, *long) -> (long); Invoke: def (*s_ITypeInfo, *, long, ushort, *DISPPARAMS, *s_tagVARIANT, *EXCEPINFO, *uint) -> (long); GetDocumentation: def (*s_ITypeInfo, long, **ushort, **ushort, *ulong, **ushort) -> (long); GetDllEntry: def (*s_ITypeInfo, long, INVOKEKIND, **ushort, **ushort, *ushort) -> (long); GetRefTypeInfo: def (*s_ITypeInfo, ulong, **s_ITypeInfo) -> (long); AddressOfMember: def (*s_ITypeInfo, long, INVOKEKIND, **) -> (long); CreateInstance: def (*s_ITypeInfo, *s_IUnknown, *GUID, **) -> (long); GetMops: def (*s_ITypeInfo, long, **ushort) -> (long); GetContainingTypeLib: def (*s_ITypeInfo, **s_ITypeLib, *uint) -> (long); ReleaseTypeAttr: def (*s_ITypeInfo, *TYPEATTR) -> (); ReleaseFuncDesc: def (*s_ITypeInfo, *FUNCDESC) -> (); ReleaseVarDesc: def (*s_ITypeInfo, *VARDESC) -> (); }
export type ITypeInfo2Vtbl = struct { QueryInterface: def (*s_ITypeInfo2, *GUID, **) -> (long); AddRef: def (*s_ITypeInfo2) -> (ulong); Release: def (*s_ITypeInfo2) -> (ulong); GetTypeAttr: def (*s_ITypeInfo2, **TYPEATTR) -> (long); GetTypeComp: def (*s_ITypeInfo2, **s_ITypeComp) -> (long); GetFuncDesc: def (*s_ITypeInfo2, uint, **FUNCDESC) -> (long); GetVarDesc: def (*s_ITypeInfo2, uint, **VARDESC) -> (long); GetNames: def (*s_ITypeInfo2, long, **ushort, uint, *uint) -> (long); GetRefTypeOfImplType: def (*s_ITypeInfo2, uint, *ulong) -> (long); GetImplTypeFlags: def (*s_ITypeInfo2, uint, *int) -> (long); GetIDsOfNames: def (*s_ITypeInfo2, **ushort, uint, *long) -> (long); Invoke: def (*s_ITypeInfo2, *, long, ushort, *DISPPARAMS, *s_tagVARIANT, *EXCEPINFO, *uint) -> (long); GetDocumentation: def (*s_ITypeInfo2, long, **ushort, **ushort, *ulong, **ushort) -> (long); GetDllEntry: def (*s_ITypeInfo2, long, INVOKEKIND, **ushort, **ushort, *ushort) -> (long); GetRefTypeInfo: def (*s_ITypeInfo2, ulong, **s_ITypeInfo) -> (long); AddressOfMember: def (*s_ITypeInfo2, long, INVOKEKIND, **) -> (long); CreateInstance: def (*s_ITypeInfo2, *s_IUnknown, *GUID, **) -> (long); GetMops: def (*s_ITypeInfo2, long, **ushort) -> (long); GetContainingTypeLib: def (*s_ITypeInfo2, **s_ITypeLib, *uint) -> (long); ReleaseTypeAttr: def (*s_ITypeInfo2, *TYPEATTR) -> (); ReleaseFuncDesc: def (*s_ITypeInfo2, *FUNCDESC) -> (); ReleaseVarDesc: def (*s_ITypeInfo2, *VARDESC) -> (); GetTypeKind: def (*s_ITypeInfo2, *TYPEKIND) -> (long); GetTypeFlags: def (*s_ITypeInfo2, *ulong) -> (long); GetFuncIndexOfMemId: def (*s_ITypeInfo2, long, INVOKEKIND, *uint) -> (long); GetVarIndexOfMemId: def (*s_ITypeInfo2, long, *uint) -> (long); GetCustData: def (*s_ITypeInfo2, *GUID, *s_tagVARIANT) -> (long); GetFuncCustData: def (*s_ITypeInfo2, uint, *GUID, *s_tagVARIANT) -> (long); GetParamCustData: def (*s_ITypeInfo2, uint, uint, *GUID, *s_tagVARIANT) -> (long); GetVarCustData: def (*s_ITypeInfo2, uint, *GUID, *s_tagVARIANT) -> (long); GetImplTypeCustData: def (*s_ITypeInfo2, uint, *GUID, *s_tagVARIANT) -> (long); GetDocumentation2: def (*s_ITypeInfo2, long, ulong, **ushort, *ulong, **ushort) -> (long); GetAllCustData: def (*s_ITypeInfo2, *CUSTDATA) -> (long); GetAllFuncCustData: def (*s_ITypeInfo2, uint, *CUSTDATA) -> (long); GetAllParamCustData: def (*s_ITypeInfo2, uint, uint, *CUSTDATA) -> (long); GetAllVarCustData: def (*s_ITypeInfo2, uint, *CUSTDATA) -> (long); GetAllImplTypeCustData: def (*s_ITypeInfo2, uint, *CUSTDATA) -> (long); }
export type SYSKIND = enum { SYS_WIN16 = 0; SYS_WIN32 = ((SYS_WIN16 + 1)); SYS_MAC = ((SYS_WIN32 + 1)); SYS_WIN64 = ((SYS_MAC + 1)); }
export type LIBFLAGS = enum { LIBFLAG_FRESTRICTED = 1; LIBFLAG_FCONTROL = 2; LIBFLAG_FHIDDEN = 4; LIBFLAG_FHASDISKIMAGE = 8; }
export type TLIBATTR = struct { guid: GUID; lcid: ulong; syskind: SYSKIND; wMajorVerNum: ushort; wMinorVerNum: ushort; wLibFlags: ushort; }
export type ITypeLibVtbl = struct { QueryInterface: def (*s_ITypeLib, *GUID, **) -> (long); AddRef: def (*s_ITypeLib) -> (ulong); Release: def (*s_ITypeLib) -> (ulong); GetTypeInfoCount: def (*s_ITypeLib) -> (uint); GetTypeInfo: def (*s_ITypeLib, uint, **s_ITypeInfo) -> (long); GetTypeInfoType: def (*s_ITypeLib, uint, *TYPEKIND) -> (long); GetTypeInfoOfGuid: def (*s_ITypeLib, *GUID, **s_ITypeInfo) -> (long); GetLibAttr: def (*s_ITypeLib, **TLIBATTR) -> (long); GetTypeComp: def (*s_ITypeLib, **s_ITypeComp) -> (long); GetDocumentation: def (*s_ITypeLib, int, **ushort, **ushort, *ulong, **ushort) -> (long); IsName: def (*s_ITypeLib, *ushort, ulong, *int) -> (long); FindName: def (*s_ITypeLib, *ushort, ulong, **s_ITypeInfo, *long, *ushort) -> (long); ReleaseTLibAttr: def (*s_ITypeLib, *TLIBATTR) -> (); }
export type ITypeLib2Vtbl = struct { QueryInterface: def (*s_ITypeLib2, *GUID, **) -> (long); AddRef: def (*s_ITypeLib2) -> (ulong); Release: def (*s_ITypeLib2) -> (ulong); GetTypeInfoCount: def (*s_ITypeLib2) -> (uint); GetTypeInfo: def (*s_ITypeLib2, uint, **s_ITypeInfo) -> (long); GetTypeInfoType: def (*s_ITypeLib2, uint, *TYPEKIND) -> (long); GetTypeInfoOfGuid: def (*s_ITypeLib2, *GUID, **s_ITypeInfo) -> (long); GetLibAttr: def (*s_ITypeLib2, **TLIBATTR) -> (long); GetTypeComp: def (*s_ITypeLib2, **s_ITypeComp) -> (long); GetDocumentation: def (*s_ITypeLib2, int, **ushort, **ushort, *ulong, **ushort) -> (long); IsName: def (*s_ITypeLib2, *ushort, ulong, *int) -> (long); FindName: def (*s_ITypeLib2, *ushort, ulong, **s_ITypeInfo, *long, *ushort) -> (long); ReleaseTLibAttr: def (*s_ITypeLib2, *TLIBATTR) -> (); GetCustData: def (*s_ITypeLib2, *GUID, *s_tagVARIANT) -> (long); GetLibStatistics: def (*s_ITypeLib2, *ulong, *ulong) -> (long); GetDocumentation2: def (*s_ITypeLib2, int, ulong, **ushort, *ulong, **ushort) -> (long); GetAllCustData: def (*s_ITypeLib2, *CUSTDATA) -> (long); }
export type CHANGEKIND = enum { CHANGEKIND_ADDMEMBER = 0; CHANGEKIND_DELETEMEMBER = ((CHANGEKIND_ADDMEMBER + 1)); CHANGEKIND_SETNAMES = ((CHANGEKIND_DELETEMEMBER + 1)); CHANGEKIND_SETDOCUMENTATION = ((CHANGEKIND_SETNAMES + 1)); CHANGEKIND_GENERAL = ((CHANGEKIND_SETDOCUMENTATION + 1)); CHANGEKIND_INVALIDATE = ((CHANGEKIND_GENERAL + 1)); CHANGEKIND_CHANGEFAILED = ((CHANGEKIND_INVALIDATE + 1)); CHANGEKIND_MAX = ((CHANGEKIND_CHANGEFAILED + 1)); }
export type ITypeChangeEventsVtbl = struct { QueryInterface: def (*s_ITypeChangeEvents, *GUID, **) -> (long); AddRef: def (*s_ITypeChangeEvents) -> (ulong); Release: def (*s_ITypeChangeEvents) -> (ulong); RequestTypeChange: def (*s_ITypeChangeEvents, CHANGEKIND, *s_ITypeInfo, *ushort, *int) -> (long); AfterTypeChange: def (*s_ITypeChangeEvents, CHANGEKIND, *s_ITypeInfo, *ushort) -> (long); }
export type IErrorInfoVtbl = struct { QueryInterface: def (*s_IErrorInfo, *GUID, **) -> (long); AddRef: def (*s_IErrorInfo) -> (ulong); Release: def (*s_IErrorInfo) -> (ulong); GetGUID: def (*s_IErrorInfo, *GUID) -> (long); GetSource: def (*s_IErrorInfo, **ushort) -> (long); GetDescription: def (*s_IErrorInfo, **ushort) -> (long); GetHelpFile: def (*s_IErrorInfo, **ushort) -> (long); GetHelpContext: def (*s_IErrorInfo, *ulong) -> (long); }
export type ICreateErrorInfoVtbl = struct { QueryInterface: def (*s_ICreateErrorInfo, *GUID, **) -> (long); AddRef: def (*s_ICreateErrorInfo) -> (ulong); Release: def (*s_ICreateErrorInfo) -> (ulong); SetGUID: def (*s_ICreateErrorInfo, *GUID) -> (long); SetSource: def (*s_ICreateErrorInfo, *ushort) -> (long); SetDescription: def (*s_ICreateErrorInfo, *ushort) -> (long); SetHelpFile: def (*s_ICreateErrorInfo, *ushort) -> (long); SetHelpContext: def (*s_ICreateErrorInfo, ulong) -> (long); }
export type ISupportErrorInfoVtbl = struct { QueryInterface: def (*s_ISupportErrorInfo, *GUID, **) -> (long); AddRef: def (*s_ISupportErrorInfo) -> (ulong); Release: def (*s_ISupportErrorInfo) -> (ulong); InterfaceSupportsErrorInfo: def (*s_ISupportErrorInfo, *GUID) -> (long); }
export type ITypeFactoryVtbl = struct { QueryInterface: def (*s_ITypeFactory, *GUID, **) -> (long); AddRef: def (*s_ITypeFactory) -> (ulong); Release: def (*s_ITypeFactory) -> (ulong); CreateFromTypeInfo: def (*s_ITypeFactory, *s_ITypeInfo, *GUID, **s_IUnknown) -> (long); }
export type ITypeMarshalVtbl = struct { QueryInterface: def (*s_ITypeMarshal, *GUID, **) -> (long); AddRef: def (*s_ITypeMarshal) -> (ulong); Release: def (*s_ITypeMarshal) -> (ulong); Size: def (*s_ITypeMarshal, *, ulong, *, *ulong) -> (long); Marshal: def (*s_ITypeMarshal, *, ulong, *, ulong, *char, *ulong) -> (long); Unmarshal: def (*s_ITypeMarshal, *, ulong, ulong, *char, *ulong) -> (long); Free: def (*s_ITypeMarshal, *) -> (long); }
export type IRecordInfoVtbl = struct { QueryInterface: def (*s_IRecordInfo, *GUID, **) -> (long); AddRef: def (*s_IRecordInfo) -> (ulong); Release: def (*s_IRecordInfo) -> (ulong); RecordInit: def (*s_IRecordInfo, *) -> (long); RecordClear: def (*s_IRecordInfo, *) -> (long); RecordCopy: def (*s_IRecordInfo, *, *) -> (long); GetGuid: def (*s_IRecordInfo, *GUID) -> (long); GetName: def (*s_IRecordInfo, **ushort) -> (long); GetSize: def (*s_IRecordInfo, *ulong) -> (long); GetTypeInfo: def (*s_IRecordInfo, **s_ITypeInfo) -> (long); GetField: def (*s_IRecordInfo, *, *ushort, *s_tagVARIANT) -> (long); GetFieldNoCopy: def (*s_IRecordInfo, *, *ushort, *s_tagVARIANT, **) -> (long); PutField: def (*s_IRecordInfo, ulong, *, *ushort, *s_tagVARIANT) -> (long); PutFieldNoCopy: def (*s_IRecordInfo, ulong, *, *ushort, *s_tagVARIANT) -> (long); GetFieldNames: def (*s_IRecordInfo, *ulong, **ushort) -> (long); IsMatchingType: def (*s_IRecordInfo, *s_IRecordInfo) -> (int); RecordCreate: def (*s_IRecordInfo) -> (*); RecordCreateCopy: def (*s_IRecordInfo, *, **) -> (long); RecordDestroy: def (*s_IRecordInfo, *) -> (long); }
export type IErrorLogVtbl = struct { QueryInterface: def (*s_IErrorLog, *GUID, **) -> (long); AddRef: def (*s_IErrorLog) -> (ulong); Release: def (*s_IErrorLog) -> (ulong); AddError: def (*s_IErrorLog, *ushort, *EXCEPINFO) -> (long); }
export type IPropertyBagVtbl = struct { QueryInterface: def (*s_IPropertyBag, *GUID, **) -> (long); AddRef: def (*s_IPropertyBag) -> (ulong); Release: def (*s_IPropertyBag) -> (ulong); Read: def (*s_IPropertyBag, *ushort, *s_tagVARIANT, *s_IErrorLog) -> (long); Write: def (*s_IPropertyBag, *ushort, *s_tagVARIANT) -> (long); }
export type ITypeLibRegistrationReaderVtbl = struct { QueryInterface: def (*s_ITypeLibRegistrationReader, *GUID, **) -> (long); AddRef: def (*s_ITypeLibRegistrationReader) -> (ulong); Release: def (*s_ITypeLibRegistrationReader) -> (ulong); EnumTypeLibRegistrations: def (*s_ITypeLibRegistrationReader, **s_IEnumUnknown) -> (long); }
export type ITypeLibRegistrationVtbl = struct { QueryInterface: def (*s_ITypeLibRegistration, *GUID, **) -> (long); AddRef: def (*s_ITypeLibRegistration) -> (ulong); Release: def (*s_ITypeLibRegistration) -> (ulong); GetGuid: def (*s_ITypeLibRegistration, *GUID) -> (long); GetVersion: def (*s_ITypeLibRegistration, **ushort) -> (long); GetLcid: def (*s_ITypeLibRegistration, *ulong) -> (long); GetWin32Path: def (*s_ITypeLibRegistration, **ushort) -> (long); GetWin64Path: def (*s_ITypeLibRegistration, **ushort) -> (long); GetDisplayName: def (*s_ITypeLibRegistration, **ushort) -> (long); GetFlags: def (*s_ITypeLibRegistration, *ulong) -> (long); GetHelpDir: def (*s_ITypeLibRegistration, **ushort) -> (long); }
export type VERSIONEDSTREAM = struct { guidVersion: GUID; pStream: *s_IStream; }
export type CAC = struct { cElems: ulong; pElems: *char; }
export type CAUB = struct { cElems: ulong; pElems: *char; }
export type CAI = struct { cElems: ulong; pElems: *short; }
export type CAUI = struct { cElems: ulong; pElems: *ushort; }
export type CAL = struct { cElems: ulong; pElems: *long; }
export type CAUL = struct { cElems: ulong; pElems: *ulong; }
export type CAFLT = struct { cElems: ulong; pElems: *float; }
export type CADBL = struct { cElems: ulong; pElems: *double; }
export type CACY = struct { cElems: ulong; pElems: *CY; }
export type CADATE = struct { cElems: ulong; pElems: *double; }
export type CABSTR = struct { cElems: ulong; pElems: **ushort; }
export type CABSTRBLOB = struct { cElems: ulong; pElems: *BSTRBLOB; }
export type CABOOL = struct { cElems: ulong; pElems: *short; }
export type CASCODE = struct { cElems: ulong; pElems: *long; }
export type CAPROPVARIANT = struct { cElems: ulong; pElems: *s_tagPROPVARIANT; }
export type CAH = struct { cElems: ulong; pElems: *LARGE_INTEGER; }
export type CAUH = struct { cElems: ulong; pElems: *ULARGE_INTEGER; }
export type CALPSTR = struct { cElems: ulong; pElems: **char; }
export type CALPWSTR = struct { cElems: ulong; pElems: **ushort; }
export type CAFILETIME = struct { cElems: ulong; pElems: *FILETIME; }
export type CACLIPDATA = struct { cElems: ulong; pElems: *CLIPDATA; }
export type CACLSID = struct { cElems: ulong; pElems: *GUID; }
export type PROPSPEC = struct { ulKind: ulong; _3: struct #union { propid: ulong; lpwstr: *ushort; }; }
export type STATPROPSTG = struct { lpwstrName: *ushort; propid: ulong; vt: ushort; }
export type STATPROPSETSTG = struct { fmtid: GUID; clsid: GUID; grfFlags: ulong; mtime: FILETIME; ctime: FILETIME; atime: FILETIME; dwOSVersion: ulong; }
export type IPropertyStorageVtbl = struct { QueryInterface: def (*s_IPropertyStorage, *GUID, **) -> (long); AddRef: def (*s_IPropertyStorage) -> (ulong); Release: def (*s_IPropertyStorage) -> (ulong); ReadMultiple: def (*s_IPropertyStorage, ulong, *PROPSPEC, *s_tagPROPVARIANT) -> (long); WriteMultiple: def (*s_IPropertyStorage, ulong, *PROPSPEC, *s_tagPROPVARIANT, ulong) -> (long); DeleteMultiple: def (*s_IPropertyStorage, ulong, *PROPSPEC) -> (long); ReadPropertyNames: def (*s_IPropertyStorage, ulong, *ulong, **ushort) -> (long); WritePropertyNames: def (*s_IPropertyStorage, ulong, *ulong, **ushort) -> (long); DeletePropertyNames: def (*s_IPropertyStorage, ulong, *ulong) -> (long); Commit: def (*s_IPropertyStorage, ulong) -> (long); Revert: def (*s_IPropertyStorage) -> (long); Enum: def (*s_IPropertyStorage, **s_IEnumSTATPROPSTG) -> (long); SetTimes: def (*s_IPropertyStorage, *FILETIME, *FILETIME, *FILETIME) -> (long); SetClass: def (*s_IPropertyStorage, *GUID) -> (long); Stat: def (*s_IPropertyStorage, *STATPROPSETSTG) -> (long); }
export type IPropertySetStorageVtbl = struct { QueryInterface: def (*s_IPropertySetStorage, *GUID, **) -> (long); AddRef: def (*s_IPropertySetStorage) -> (ulong); Release: def (*s_IPropertySetStorage) -> (ulong); Create: def (*s_IPropertySetStorage, *GUID, *GUID, ulong, ulong, **s_IPropertyStorage) -> (long); Open: def (*s_IPropertySetStorage, *GUID, ulong, **s_IPropertyStorage) -> (long); Delete: def (*s_IPropertySetStorage, *GUID) -> (long); Enum: def (*s_IPropertySetStorage, **s_IEnumSTATPROPSETSTG) -> (long); }
export type IEnumSTATPROPSTGVtbl = struct { QueryInterface: def (*s_IEnumSTATPROPSTG, *GUID, **) -> (long); AddRef: def (*s_IEnumSTATPROPSTG) -> (ulong); Release: def (*s_IEnumSTATPROPSTG) -> (ulong); Next: def (*s_IEnumSTATPROPSTG, ulong, *STATPROPSTG, *ulong) -> (long); Skip: def (*s_IEnumSTATPROPSTG, ulong) -> (long); Reset: def (*s_IEnumSTATPROPSTG) -> (long); Clone: def (*s_IEnumSTATPROPSTG, **s_IEnumSTATPROPSTG) -> (long); }
export type IEnumSTATPROPSETSTGVtbl = struct { QueryInterface: def (*s_IEnumSTATPROPSETSTG, *GUID, **) -> (long); AddRef: def (*s_IEnumSTATPROPSETSTG) -> (ulong); Release: def (*s_IEnumSTATPROPSETSTG) -> (ulong); Next: def (*s_IEnumSTATPROPSETSTG, ulong, *STATPROPSETSTG, *ulong) -> (long); Skip: def (*s_IEnumSTATPROPSETSTG, ulong) -> (long); Reset: def (*s_IEnumSTATPROPSETSTG) -> (long); Clone: def (*s_IEnumSTATPROPSETSTG, **s_IEnumSTATPROPSETSTG) -> (long); }
export type STGOPTIONS = struct { usVersion: ushort; reserved: ushort; ulSectorSize: ulong; pwcsTemplateFile: *ushort; }
export type COINIT = enum { COINIT_APARTMENTTHREADED = 2; COINIT_MULTITHREADED = COINITBASE_MULTITHREADED; COINIT_DISABLE_OLE1DDE = 4; COINIT_SPEED_OVER_MEMORY = 8; }
export type COMSD = enum { SD_LAUNCHPERMISSIONS = 0; SD_ACCESSPERMISSIONS = 1; SD_LAUNCHRESTRICTIONS = 2; SD_ACCESSRESTRICTIONS = 3; }
export type IPersistMoniker
export type IMonikerProp
export type IBindProtocol
export type IBinding
export type IBindStatusCallback
export type IBindStatusCallbackEx
export type IAuthenticate
export type IAuthenticateEx
export type IHttpNegotiate
export type IHttpNegotiate2
export type IHttpNegotiate3
export type IWinInetFileStream
export type IWindowForBindingUI
export type ICodeInstall
export type IUri
export type IUriContainer
export type IUriBuilder
export type IUriBuilderFactory
export type IWinInetInfo
export type IHttpSecurity
export type IWinInetHttpInfo
export type IWinInetHttpTimeouts
export type IWinInetCacheHints
export type IWinInetCacheHints2
export type IBindHost
export type IInternet
export type IInternetBindInfo
export type IInternetBindInfoEx
export type IInternetProtocolRoot
export type IInternetProtocol
export type IInternetProtocolEx
export type IInternetProtocolSink
export type IInternetProtocolSinkStackable
export type IInternetSession
export type IInternetThreadSwitch
export type IInternetPriority
export type IInternetProtocolInfo
export type IInternetSecurityMgrSite
export type IInternetSecurityManager
export type IInternetSecurityManagerEx
export type IInternetSecurityManagerEx2
export type IZoneIdentifier
export type IZoneIdentifier2
export type IInternetHostSecurityManager
export type IInternetZoneManager
export type IInternetZoneManagerEx
export type IInternetZoneManagerEx2
export type ISoftDistExt
export type ICatalogFileInfo
export type IDataFilter
export type IEncodingFilterFactory
export type IWrappedProtocol
export type IGetBindHandle
export type IBindCallbackRedirect
export type IBindHttpSecurity
export type IOleAdviseHolder
export type IOleCache
export type IOleCache2
export type IOleCacheControl
export type IParseDisplayName
export type IOleContainer
export type IOleClientSite
export type IOleObject
export type IOleWindow
export type IOleLink
export type IOleItemContainer
export type IOleInPlaceUIWindow
export type IOleInPlaceActiveObject
export type IOleInPlaceFrame
export type IOleInPlaceObject
export type IOleInPlaceSite
export type IContinue
export type IViewObject
export type IViewObject2
export type IDropSource
export type IDropTarget
export type IDropSourceNotify
export type IEnterpriseDropTarget
export type IEnumOLEVERB
export type IOleAdviseHolderVtbl = struct { QueryInterface: def (*s_IOleAdviseHolder, *GUID, **) -> (long); AddRef: def (*s_IOleAdviseHolder) -> (ulong); Release: def (*s_IOleAdviseHolder) -> (ulong); Advise: def (*s_IOleAdviseHolder, *s_IAdviseSink, *ulong) -> (long); Unadvise: def (*s_IOleAdviseHolder, ulong) -> (long); EnumAdvise: def (*s_IOleAdviseHolder, **s_IEnumSTATDATA) -> (long); SendOnRename: def (*s_IOleAdviseHolder, *s_IMoniker) -> (long); SendOnSave: def (*s_IOleAdviseHolder) -> (long); SendOnClose: def (*s_IOleAdviseHolder) -> (long); }
export type IOleCacheVtbl = struct { QueryInterface: def (*s_IOleCache, *GUID, **) -> (long); AddRef: def (*s_IOleCache) -> (ulong); Release: def (*s_IOleCache) -> (ulong); Cache: def (*s_IOleCache, *FORMATETC, ulong, *ulong) -> (long); Uncache: def (*s_IOleCache, ulong) -> (long); EnumCache: def (*s_IOleCache, **s_IEnumSTATDATA) -> (long); InitCache: def (*s_IOleCache, *s_IDataObject) -> (long); SetData: def (*s_IOleCache, *FORMATETC, *uSTGMEDIUM, int) -> (long); }
export type DISCARDCACHE = enum { DISCARDCACHE_SAVEIFDIRTY = 0; DISCARDCACHE_NOSAVE = 1; }
export type IOleCache2Vtbl = struct { QueryInterface: def (*s_IOleCache2, *GUID, **) -> (long); AddRef: def (*s_IOleCache2) -> (ulong); Release: def (*s_IOleCache2) -> (ulong); Cache: def (*s_IOleCache2, *FORMATETC, ulong, *ulong) -> (long); Uncache: def (*s_IOleCache2, ulong) -> (long); EnumCache: def (*s_IOleCache2, **s_IEnumSTATDATA) -> (long); InitCache: def (*s_IOleCache2, *s_IDataObject) -> (long); SetData: def (*s_IOleCache2, *FORMATETC, *uSTGMEDIUM, int) -> (long); UpdateCache: def (*s_IOleCache2, *s_IDataObject, ulong, *) -> (long); DiscardCache: def (*s_IOleCache2, ulong) -> (long); }
export type IOleCacheControlVtbl = struct { QueryInterface: def (*s_IOleCacheControl, *GUID, **) -> (long); AddRef: def (*s_IOleCacheControl) -> (ulong); Release: def (*s_IOleCacheControl) -> (ulong); OnRun: def (*s_IOleCacheControl, *s_IDataObject) -> (long); OnStop: def (*s_IOleCacheControl) -> (long); }
export type IParseDisplayNameVtbl = struct { QueryInterface: def (*s_IParseDisplayName, *GUID, **) -> (long); AddRef: def (*s_IParseDisplayName) -> (ulong); Release: def (*s_IParseDisplayName) -> (ulong); ParseDisplayName: def (*s_IParseDisplayName, *s_IBindCtx, *ushort, *ulong, **s_IMoniker) -> (long); }
export type IOleContainerVtbl = struct { QueryInterface: def (*s_IOleContainer, *GUID, **) -> (long); AddRef: def (*s_IOleContainer) -> (ulong); Release: def (*s_IOleContainer) -> (ulong); ParseDisplayName: def (*s_IOleContainer, *s_IBindCtx, *ushort, *ulong, **s_IMoniker) -> (long); EnumObjects: def (*s_IOleContainer, ulong, **s_IEnumUnknown) -> (long); LockContainer: def (*s_IOleContainer, int) -> (long); }
export type IOleClientSiteVtbl = struct { QueryInterface: def (*s_IOleClientSite, *GUID, **) -> (long); AddRef: def (*s_IOleClientSite) -> (ulong); Release: def (*s_IOleClientSite) -> (ulong); SaveObject: def (*s_IOleClientSite) -> (long); GetMoniker: def (*s_IOleClientSite, ulong, ulong, **s_IMoniker) -> (long); GetContainer: def (*s_IOleClientSite, **s_IOleContainer) -> (long); ShowObject: def (*s_IOleClientSite) -> (long); OnShowWindow: def (*s_IOleClientSite, int) -> (long); RequestNewObjectLayout: def (*s_IOleClientSite) -> (long); }
export type OLEGETMONIKER = enum { OLEGETMONIKER_ONLYIFTHERE = 1; OLEGETMONIKER_FORCEASSIGN = 2; OLEGETMONIKER_UNASSIGN = 3; OLEGETMONIKER_TEMPFORUSER = 4; }
export type OLEWHICHMK = enum { OLEWHICHMK_CONTAINER = 1; OLEWHICHMK_OBJREL = 2; OLEWHICHMK_OBJFULL = 3; }
export type USERCLASSTYPE = enum { USERCLASSTYPE_FULL = 1; USERCLASSTYPE_SHORT = 2; USERCLASSTYPE_APPNAME = 3; }
export type OLEMISC = enum { OLEMISC_RECOMPOSEONRESIZE = 1; OLEMISC_ONLYICONIC = 2; OLEMISC_INSERTNOTREPLACE = 4; OLEMISC_STATIC = 8; OLEMISC_CANTLINKINSIDE = 16; OLEMISC_CANLINKBYOLE1 = 32; OLEMISC_ISLINKOBJECT = 64; OLEMISC_INSIDEOUT = 128; OLEMISC_ACTIVATEWHENVISIBLE = 256; OLEMISC_RENDERINGISDEVICEINDEPENDENT = 512; OLEMISC_INVISIBLEATRUNTIME = 1024; OLEMISC_ALWAYSRUN = 2048; OLEMISC_ACTSLIKEBUTTON = 4096; OLEMISC_ACTSLIKELABEL = 8192; OLEMISC_NOUIACTIVATE = 16384; OLEMISC_ALIGNABLE = 32768; OLEMISC_SIMPLEFRAME = 65536; OLEMISC_SETCLIENTSITEFIRST = 131072; OLEMISC_IMEMODE = 262144; OLEMISC_IGNOREACTIVATEWHENVISIBLE = 524288; OLEMISC_WANTSTOMENUMERGE = 1048576; OLEMISC_SUPPORTSMULTILEVELUNDO = 2097152; }
export type OLECLOSE = enum { OLECLOSE_SAVEIFDIRTY = 0; OLECLOSE_NOSAVE = 1; OLECLOSE_PROMPTSAVE = 2; }
export type IOleObjectVtbl = struct { QueryInterface: def (*s_IOleObject, *GUID, **) -> (long); AddRef: def (*s_IOleObject) -> (ulong); Release: def (*s_IOleObject) -> (ulong); SetClientSite: def (*s_IOleObject, *s_IOleClientSite) -> (long); GetClientSite: def (*s_IOleObject, **s_IOleClientSite) -> (long); SetHostNames: def (*s_IOleObject, *ushort, *ushort) -> (long); Close: def (*s_IOleObject, ulong) -> (long); SetMoniker: def (*s_IOleObject, ulong, *s_IMoniker) -> (long); GetMoniker: def (*s_IOleObject, ulong, ulong, **s_IMoniker) -> (long); InitFromData: def (*s_IOleObject, *s_IDataObject, int, ulong) -> (long); GetClipboardData: def (*s_IOleObject, ulong, **s_IDataObject) -> (long); DoVerb: def (*s_IOleObject, long, *MSG, *s_IOleClientSite, long, *s_HWND__, *RECT) -> (long); EnumVerbs: def (*s_IOleObject, **s_IEnumOLEVERB) -> (long); Update: def (*s_IOleObject) -> (long); IsUpToDate: def (*s_IOleObject) -> (long); GetUserClassID: def (*s_IOleObject, *GUID) -> (long); GetUserType: def (*s_IOleObject, ulong, **ushort) -> (long); SetExtent: def (*s_IOleObject, ulong, *SIZE) -> (long); GetExtent: def (*s_IOleObject, ulong, *SIZE) -> (long); Advise: def (*s_IOleObject, *s_IAdviseSink, *ulong) -> (long); Unadvise: def (*s_IOleObject, ulong) -> (long); EnumAdvise: def (*s_IOleObject, **s_IEnumSTATDATA) -> (long); GetMiscStatus: def (*s_IOleObject, ulong, *ulong) -> (long); SetColorScheme: def (*s_IOleObject, *LOGPALETTE) -> (long); }
export type OLERENDER = enum { OLERENDER_NONE = 0; OLERENDER_DRAW = 1; OLERENDER_FORMAT = 2; OLERENDER_ASIS = 3; }
export type OBJECTDESCRIPTOR = struct { cbSize: ulong; clsid: GUID; dwDrawAspect: ulong; sizel: SIZE; pointl: POINTL; dwStatus: ulong; dwFullUserTypeName: ulong; dwSrcOfCopy: ulong; }
export type IOleWindowVtbl = struct { QueryInterface: def (*s_IOleWindow, *GUID, **) -> (long); AddRef: def (*s_IOleWindow) -> (ulong); Release: def (*s_IOleWindow) -> (ulong); GetWindow: def (*s_IOleWindow, **s_HWND__) -> (long); ContextSensitiveHelp: def (*s_IOleWindow, int) -> (long); }
export type OLEUPDATE = enum { OLEUPDATE_ALWAYS = 1; OLEUPDATE_ONCALL = 3; }
export type OLELINKBIND = enum { OLELINKBIND_EVENIFCLASSDIFF = 1; }
export type IOleLinkVtbl = struct { QueryInterface: def (*s_IOleLink, *GUID, **) -> (long); AddRef: def (*s_IOleLink) -> (ulong); Release: def (*s_IOleLink) -> (ulong); SetUpdateOptions: def (*s_IOleLink, ulong) -> (long); GetUpdateOptions: def (*s_IOleLink, *ulong) -> (long); SetSourceMoniker: def (*s_IOleLink, *s_IMoniker, *GUID) -> (long); GetSourceMoniker: def (*s_IOleLink, **s_IMoniker) -> (long); SetSourceDisplayName: def (*s_IOleLink, *ushort) -> (long); GetSourceDisplayName: def (*s_IOleLink, **ushort) -> (long); BindToSource: def (*s_IOleLink, ulong, *s_IBindCtx) -> (long); BindIfRunning: def (*s_IOleLink) -> (long); GetBoundSource: def (*s_IOleLink, **s_IUnknown) -> (long); UnbindSource: def (*s_IOleLink) -> (long); Update: def (*s_IOleLink, *s_IBindCtx) -> (long); }
export type BINDSPEED = enum { BINDSPEED_INDEFINITE = 1; BINDSPEED_MODERATE = 2; BINDSPEED_IMMEDIATE = 3; }
export type OLECONTF = enum { OLECONTF_EMBEDDINGS = 1; OLECONTF_LINKS = 2; OLECONTF_OTHERS = 4; OLECONTF_ONLYUSER = 8; OLECONTF_ONLYIFRUNNING = 16; }
export type IOleItemContainerVtbl = struct { QueryInterface: def (*s_IOleItemContainer, *GUID, **) -> (long); AddRef: def (*s_IOleItemContainer) -> (ulong); Release: def (*s_IOleItemContainer) -> (ulong); ParseDisplayName: def (*s_IOleItemContainer, *s_IBindCtx, *ushort, *ulong, **s_IMoniker) -> (long); EnumObjects: def (*s_IOleItemContainer, ulong, **s_IEnumUnknown) -> (long); LockContainer: def (*s_IOleItemContainer, int) -> (long); GetObjectA: def (*s_IOleItemContainer, *ushort, ulong, *s_IBindCtx, *GUID, **) -> (long); GetObjectStorage: def (*s_IOleItemContainer, *ushort, *s_IBindCtx, *GUID, **) -> (long); IsRunning: def (*s_IOleItemContainer, *ushort) -> (long); }
export type IOleInPlaceUIWindowVtbl = struct { QueryInterface: def (*s_IOleInPlaceUIWindow, *GUID, **) -> (long); AddRef: def (*s_IOleInPlaceUIWindow) -> (ulong); Release: def (*s_IOleInPlaceUIWindow) -> (ulong); GetWindow: def (*s_IOleInPlaceUIWindow, **s_HWND__) -> (long); ContextSensitiveHelp: def (*s_IOleInPlaceUIWindow, int) -> (long); GetBorder: def (*s_IOleInPlaceUIWindow, *RECT) -> (long); RequestBorderSpace: def (*s_IOleInPlaceUIWindow, *RECT) -> (long); SetBorderSpace: def (*s_IOleInPlaceUIWindow, *RECT) -> (long); SetActiveObject: def (*s_IOleInPlaceUIWindow, *s_IOleInPlaceActiveObject, *ushort) -> (long); }
export type IOleInPlaceActiveObjectVtbl = struct { QueryInterface: def (*s_IOleInPlaceActiveObject, *GUID, **) -> (long); AddRef: def (*s_IOleInPlaceActiveObject) -> (ulong); Release: def (*s_IOleInPlaceActiveObject) -> (ulong); GetWindow: def (*s_IOleInPlaceActiveObject, **s_HWND__) -> (long); ContextSensitiveHelp: def (*s_IOleInPlaceActiveObject, int) -> (long); TranslateAcceleratorA: def (*s_IOleInPlaceActiveObject, *MSG) -> (long); OnFrameWindowActivate: def (*s_IOleInPlaceActiveObject, int) -> (long); OnDocWindowActivate: def (*s_IOleInPlaceActiveObject, int) -> (long); ResizeBorder: def (*s_IOleInPlaceActiveObject, *RECT, *s_IOleInPlaceUIWindow, int) -> (long); EnableModeless: def (*s_IOleInPlaceActiveObject, int) -> (long); }
export type OLEINPLACEFRAMEINFO = struct { cb: uint; fMDIApp: int; hwndFrame: *s_HWND__; haccel: *s_HACCEL__; cAccelEntries: uint; }
export type OLEMENUGROUPWIDTHS = struct { width: [6; long]; }
export type IOleInPlaceFrameVtbl = struct { QueryInterface: def (*s_IOleInPlaceFrame, *GUID, **) -> (long); AddRef: def (*s_IOleInPlaceFrame) -> (ulong); Release: def (*s_IOleInPlaceFrame) -> (ulong); GetWindow: def (*s_IOleInPlaceFrame, **s_HWND__) -> (long); ContextSensitiveHelp: def (*s_IOleInPlaceFrame, int) -> (long); GetBorder: def (*s_IOleInPlaceFrame, *RECT) -> (long); RequestBorderSpace: def (*s_IOleInPlaceFrame, *RECT) -> (long); SetBorderSpace: def (*s_IOleInPlaceFrame, *RECT) -> (long); SetActiveObject: def (*s_IOleInPlaceFrame, *s_IOleInPlaceActiveObject, *ushort) -> (long); InsertMenus: def (*s_IOleInPlaceFrame, *s_HMENU__, *OLEMENUGROUPWIDTHS) -> (long); SetMenu: def (*s_IOleInPlaceFrame, *s_HMENU__, *, *s_HWND__) -> (long); RemoveMenus: def (*s_IOleInPlaceFrame, *s_HMENU__) -> (long); SetStatusText: def (*s_IOleInPlaceFrame, *ushort) -> (long); EnableModeless: def (*s_IOleInPlaceFrame, int) -> (long); TranslateAcceleratorA: def (*s_IOleInPlaceFrame, *MSG, ushort) -> (long); }
export type IOleInPlaceObjectVtbl = struct { QueryInterface: def (*s_IOleInPlaceObject, *GUID, **) -> (long); AddRef: def (*s_IOleInPlaceObject) -> (ulong); Release: def (*s_IOleInPlaceObject) -> (ulong); GetWindow: def (*s_IOleInPlaceObject, **s_HWND__) -> (long); ContextSensitiveHelp: def (*s_IOleInPlaceObject, int) -> (long); InPlaceDeactivate: def (*s_IOleInPlaceObject) -> (long); UIDeactivate: def (*s_IOleInPlaceObject) -> (long); SetObjectRects: def (*s_IOleInPlaceObject, *RECT, *RECT) -> (long); ReactivateAndUndo: def (*s_IOleInPlaceObject) -> (long); }
export type IOleInPlaceSiteVtbl = struct { QueryInterface: def (*s_IOleInPlaceSite, *GUID, **) -> (long); AddRef: def (*s_IOleInPlaceSite) -> (ulong); Release: def (*s_IOleInPlaceSite) -> (ulong); GetWindow: def (*s_IOleInPlaceSite, **s_HWND__) -> (long); ContextSensitiveHelp: def (*s_IOleInPlaceSite, int) -> (long); CanInPlaceActivate: def (*s_IOleInPlaceSite) -> (long); OnInPlaceActivate: def (*s_IOleInPlaceSite) -> (long); OnUIActivate: def (*s_IOleInPlaceSite) -> (long); GetWindowContext: def (*s_IOleInPlaceSite, **s_IOleInPlaceFrame, **s_IOleInPlaceUIWindow, *RECT, *RECT, *OLEINPLACEFRAMEINFO) -> (long); Scroll: def (*s_IOleInPlaceSite, SIZE) -> (long); OnUIDeactivate: def (*s_IOleInPlaceSite, int) -> (long); OnInPlaceDeactivate: def (*s_IOleInPlaceSite) -> (long); DiscardUndoState: def (*s_IOleInPlaceSite) -> (long); DeactivateAndUndo: def (*s_IOleInPlaceSite) -> (long); OnPosRectChange: def (*s_IOleInPlaceSite, *RECT) -> (long); }
export type IContinueVtbl = struct { QueryInterface: def (*s_IContinue, *GUID, **) -> (long); AddRef: def (*s_IContinue) -> (ulong); Release: def (*s_IContinue) -> (ulong); FContinue: def (*s_IContinue) -> (long); }
export type IViewObjectVtbl = struct { QueryInterface: def (*s_IViewObject, *GUID, **) -> (long); AddRef: def (*s_IViewObject) -> (ulong); Release: def (*s_IViewObject) -> (ulong); Draw: long; GetColorSet: def (*s_IViewObject, ulong, long, *, *DVTARGETDEVICE, *s_HDC__, **LOGPALETTE) -> (long); Freeze: def (*s_IViewObject, ulong, long, *, *ulong) -> (long); Unfreeze: def (*s_IViewObject, ulong) -> (long); SetAdvise: def (*s_IViewObject, ulong, ulong, *s_IAdviseSink) -> (long); GetAdvise: def (*s_IViewObject, *ulong, *ulong, **s_IAdviseSink) -> (long); }
export type IViewObject2Vtbl = struct { QueryInterface: def (*s_IViewObject2, *GUID, **) -> (long); AddRef: def (*s_IViewObject2) -> (ulong); Release: def (*s_IViewObject2) -> (ulong); Draw: long; GetColorSet: def (*s_IViewObject2, ulong, long, *, *DVTARGETDEVICE, *s_HDC__, **LOGPALETTE) -> (long); Freeze: def (*s_IViewObject2, ulong, long, *, *ulong) -> (long); Unfreeze: def (*s_IViewObject2, ulong) -> (long); SetAdvise: def (*s_IViewObject2, ulong, ulong, *s_IAdviseSink) -> (long); GetAdvise: def (*s_IViewObject2, *ulong, *ulong, **s_IAdviseSink) -> (long); GetExtent: def (*s_IViewObject2, ulong, long, *DVTARGETDEVICE, *SIZE) -> (long); }
export type IDropSourceVtbl = struct { QueryInterface: def (*s_IDropSource, *GUID, **) -> (long); AddRef: def (*s_IDropSource) -> (ulong); Release: def (*s_IDropSource) -> (ulong); QueryContinueDrag: def (*s_IDropSource, int, ulong) -> (long); GiveFeedback: def (*s_IDropSource, ulong) -> (long); }
export type IDropTargetVtbl = struct { QueryInterface: def (*s_IDropTarget, *GUID, **) -> (long); AddRef: def (*s_IDropTarget) -> (ulong); Release: def (*s_IDropTarget) -> (ulong); DragEnter: def (*s_IDropTarget, *s_IDataObject, ulong, POINTL, *ulong) -> (long); DragOver: def (*s_IDropTarget, ulong, POINTL, *ulong) -> (long); DragLeave: def (*s_IDropTarget) -> (long); Drop: def (*s_IDropTarget, *s_IDataObject, ulong, POINTL, *ulong) -> (long); }
export type IDropSourceNotifyVtbl = struct { QueryInterface: def (*s_IDropSourceNotify, *GUID, **) -> (long); AddRef: def (*s_IDropSourceNotify) -> (ulong); Release: def (*s_IDropSourceNotify) -> (ulong); DragEnterTarget: def (*s_IDropSourceNotify, *s_HWND__) -> (long); DragLeaveTarget: def (*s_IDropSourceNotify) -> (long); }
export type IEnterpriseDropTargetVtbl = struct { QueryInterface: def (*s_IEnterpriseDropTarget, *GUID, **) -> (long); AddRef: def (*s_IEnterpriseDropTarget) -> (ulong); Release: def (*s_IEnterpriseDropTarget) -> (ulong); SetDropSourceEnterpriseId: def (*s_IEnterpriseDropTarget, *ushort) -> (long); IsEvaluatingEdpPolicy: def (*s_IEnterpriseDropTarget, *int) -> (long); }
export type OLEVERB = struct { lVerb: long; lpszVerbName: *ushort; fuFlags: ulong; grfAttribs: ulong; }
export type OLEVERBATTRIB = enum { OLEVERBATTRIB_NEVERDIRTIES = 1; OLEVERBATTRIB_ONCONTAINERMENU = 2; }
export type IEnumOLEVERBVtbl = struct { QueryInterface: def (*s_IEnumOLEVERB, *GUID, **) -> (long); AddRef: def (*s_IEnumOLEVERB) -> (ulong); Release: def (*s_IEnumOLEVERB) -> (ulong); Next: def (*s_IEnumOLEVERB, ulong, *OLEVERB, *ulong) -> (long); Skip: def (*s_IEnumOLEVERB, ulong) -> (long); Reset: def (*s_IEnumOLEVERB) -> (long); Clone: def (*s_IEnumOLEVERB, **s_IEnumOLEVERB) -> (long); }
export type IServiceProvider
export type IServiceProviderVtbl = struct { QueryInterface: def (*s_IServiceProvider, *GUID, **) -> (long); AddRef: def (*s_IServiceProvider) -> (ulong); Release: def (*s_IServiceProvider) -> (ulong); QueryService: def (*s_IServiceProvider, *GUID, *GUID, **) -> (long); }
export type IXMLDOMImplementation
export type IXMLDOMNode
export type IXMLDOMDocumentFragment
export type IXMLDOMDocument
export type IXMLDOMNodeList
export type IXMLDOMNamedNodeMap
export type IXMLDOMCharacterData
export type IXMLDOMAttribute
export type IXMLDOMElement
export type IXMLDOMText
export type IXMLDOMComment
export type IXMLDOMProcessingInstruction
export type IXMLDOMCDATASection
export type IXMLDOMDocumentType
export type IXMLDOMNotation
export type IXMLDOMEntity
export type IXMLDOMEntityReference
export type IXMLDOMParseError
export type IXTLRuntime
export type XMLDOMDocumentEvents
export type DOMDocument
export type DOMFreeThreadedDocument
export type IXMLHttpRequest
export type XMLHTTPRequest
export type IXMLDSOControl
export type XMLDSOControl
export type IXMLElementCollection
export type IXMLDocument
export type IXMLDocument2
export type IXMLElement
export type IXMLElement2
export type IXMLAttribute
export type IXMLError
export type XMLDocument
export type XML_ERROR = struct { _nLine: uint; _pchBuf: *ushort; _cchBuf: uint; _ich: uint; _pszFound: *ushort; _pszExpected: *ushort; _reserved1: ulong; _reserved2: ulong; }
export type DOMNodeType = enum { NODE_INVALID = 0; NODE_ELEMENT = ((NODE_INVALID + 1)); NODE_ATTRIBUTE = ((NODE_ELEMENT + 1)); NODE_TEXT = ((NODE_ATTRIBUTE + 1)); NODE_CDATA_SECTION = ((NODE_TEXT + 1)); NODE_ENTITY_REFERENCE = ((NODE_CDATA_SECTION + 1)); NODE_ENTITY = ((NODE_ENTITY_REFERENCE + 1)); NODE_PROCESSING_INSTRUCTION = ((NODE_ENTITY + 1)); NODE_COMMENT = ((NODE_PROCESSING_INSTRUCTION + 1)); NODE_DOCUMENT = ((NODE_COMMENT + 1)); NODE_DOCUMENT_TYPE = ((NODE_DOCUMENT + 1)); NODE_DOCUMENT_FRAGMENT = ((NODE_DOCUMENT_TYPE + 1)); NODE_NOTATION = ((NODE_DOCUMENT_FRAGMENT + 1)); }
export type XMLELEM_TYPE = enum { XMLELEMTYPE_ELEMENT = 0; XMLELEMTYPE_TEXT = ((XMLELEMTYPE_ELEMENT + 1)); XMLELEMTYPE_COMMENT = ((XMLELEMTYPE_TEXT + 1)); XMLELEMTYPE_DOCUMENT = ((XMLELEMTYPE_COMMENT + 1)); XMLELEMTYPE_DTD = ((XMLELEMTYPE_DOCUMENT + 1)); XMLELEMTYPE_PI = ((XMLELEMTYPE_DTD + 1)); XMLELEMTYPE_OTHER = ((XMLELEMTYPE_PI + 1)); }
export type IXMLDOMImplementationVtbl = struct { QueryInterface: def (*s_IXMLDOMImplementation, *GUID, **) -> (long); AddRef: def (*s_IXMLDOMImplementation) -> (ulong); Release: def (*s_IXMLDOMImplementation) -> (ulong); GetTypeInfoCount: def (*s_IXMLDOMImplementation, *uint) -> (long); GetTypeInfo: def (*s_IXMLDOMImplementation, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDOMImplementation, *GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDOMImplementation, long, *GUID, ulong, ushort, *DISPPARAMS, *s_tagVARIANT, *EXCEPINFO, *uint) -> (long); hasFeature: def (*s_IXMLDOMImplementation, *ushort, *ushort, *short) -> (long); }
export type IXMLDOMNodeVtbl = struct { QueryInterface: def (*s_IXMLDOMNode, *GUID, **) -> (long); AddRef: def (*s_IXMLDOMNode) -> (ulong); Release: def (*s_IXMLDOMNode) -> (ulong); GetTypeInfoCount: def (*s_IXMLDOMNode, *uint) -> (long); GetTypeInfo: def (*s_IXMLDOMNode, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDOMNode, *GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDOMNode, long, *GUID, ulong, ushort, *DISPPARAMS, *s_tagVARIANT, *EXCEPINFO, *uint) -> (long); get_nodeName: def (*s_IXMLDOMNode, **ushort) -> (long); get_nodeValue: def (*s_IXMLDOMNode, *s_tagVARIANT) -> (long); put_nodeValue: def (*s_IXMLDOMNode, s_tagVARIANT) -> (long); get_nodeType: def (*s_IXMLDOMNode, *DOMNodeType) -> (long); get_parentNode: def (*s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); get_childNodes: def (*s_IXMLDOMNode, **s_IXMLDOMNodeList) -> (long); get_firstChild: def (*s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); get_lastChild: def (*s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); get_previousSibling: def (*s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); get_nextSibling: def (*s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); get_attributes: def (*s_IXMLDOMNode, **s_IXMLDOMNamedNodeMap) -> (long); insertBefore: def (*s_IXMLDOMNode, *s_IXMLDOMNode, s_tagVARIANT, **s_IXMLDOMNode) -> (long); replaceChild: def (*s_IXMLDOMNode, *s_IXMLDOMNode, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); removeChild: def (*s_IXMLDOMNode, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); appendChild: def (*s_IXMLDOMNode, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); hasChildNodes: def (*s_IXMLDOMNode, *short) -> (long); get_ownerDocument: def (*s_IXMLDOMNode, **s_IXMLDOMDocument) -> (long); cloneNode: def (*s_IXMLDOMNode, short, **s_IXMLDOMNode) -> (long); get_nodeTypeString: def (*s_IXMLDOMNode, **ushort) -> (long); get_text: def (*s_IXMLDOMNode, **ushort) -> (long); put_text: def (*s_IXMLDOMNode, *ushort) -> (long); get_specified: def (*s_IXMLDOMNode, *short) -> (long); get_definition: def (*s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); get_nodeTypedValue: def (*s_IXMLDOMNode, *s_tagVARIANT) -> (long); put_nodeTypedValue: def (*s_IXMLDOMNode, s_tagVARIANT) -> (long); get_dataType: def (*s_IXMLDOMNode, *s_tagVARIANT) -> (long); put_dataType: def (*s_IXMLDOMNode, *ushort) -> (long); get_xml: def (*s_IXMLDOMNode, **ushort) -> (long); transformNode: def (*s_IXMLDOMNode, *s_IXMLDOMNode, **ushort) -> (long); selectNodes: def (*s_IXMLDOMNode, *ushort, **s_IXMLDOMNodeList) -> (long); selectSingleNode: def (*s_IXMLDOMNode, *ushort, **s_IXMLDOMNode) -> (long); get_parsed: def (*s_IXMLDOMNode, *short) -> (long); get_namespaceURI: def (*s_IXMLDOMNode, **ushort) -> (long); get_prefix: def (*s_IXMLDOMNode, **ushort) -> (long); get_baseName: def (*s_IXMLDOMNode, **ushort) -> (long); transformNodeToObject: def (*s_IXMLDOMNode, *s_IXMLDOMNode, s_tagVARIANT) -> (long); }
export type IXMLDOMDocumentFragmentVtbl = struct { QueryInterface: def (*s_IXMLDOMDocumentFragment, *GUID, **) -> (long); AddRef: def (*s_IXMLDOMDocumentFragment) -> (ulong); Release: def (*s_IXMLDOMDocumentFragment) -> (ulong); GetTypeInfoCount: def (*s_IXMLDOMDocumentFragment, *uint) -> (long); GetTypeInfo: def (*s_IXMLDOMDocumentFragment, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDOMDocumentFragment, *GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDOMDocumentFragment, long, *GUID, ulong, ushort, *DISPPARAMS, *s_tagVARIANT, *EXCEPINFO, *uint) -> (long); get_nodeName: def (*s_IXMLDOMDocumentFragment, **ushort) -> (long); get_nodeValue: def (*s_IXMLDOMDocumentFragment, *s_tagVARIANT) -> (long); put_nodeValue: def (*s_IXMLDOMDocumentFragment, s_tagVARIANT) -> (long); get_nodeType: def (*s_IXMLDOMDocumentFragment, *DOMNodeType) -> (long); get_parentNode: def (*s_IXMLDOMDocumentFragment, **s_IXMLDOMNode) -> (long); get_childNodes: def (*s_IXMLDOMDocumentFragment, **s_IXMLDOMNodeList) -> (long); get_firstChild: def (*s_IXMLDOMDocumentFragment, **s_IXMLDOMNode) -> (long); get_lastChild: def (*s_IXMLDOMDocumentFragment, **s_IXMLDOMNode) -> (long); get_previousSibling: def (*s_IXMLDOMDocumentFragment, **s_IXMLDOMNode) -> (long); get_nextSibling: def (*s_IXMLDOMDocumentFragment, **s_IXMLDOMNode) -> (long); get_attributes: def (*s_IXMLDOMDocumentFragment, **s_IXMLDOMNamedNodeMap) -> (long); insertBefore: def (*s_IXMLDOMDocumentFragment, *s_IXMLDOMNode, s_tagVARIANT, **s_IXMLDOMNode) -> (long); replaceChild: def (*s_IXMLDOMDocumentFragment, *s_IXMLDOMNode, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); removeChild: def (*s_IXMLDOMDocumentFragment, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); appendChild: def (*s_IXMLDOMDocumentFragment, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); hasChildNodes: def (*s_IXMLDOMDocumentFragment, *short) -> (long); get_ownerDocument: def (*s_IXMLDOMDocumentFragment, **s_IXMLDOMDocument) -> (long); cloneNode: def (*s_IXMLDOMDocumentFragment, short, **s_IXMLDOMNode) -> (long); get_nodeTypeString: def (*s_IXMLDOMDocumentFragment, **ushort) -> (long); get_text: def (*s_IXMLDOMDocumentFragment, **ushort) -> (long); put_text: def (*s_IXMLDOMDocumentFragment, *ushort) -> (long); get_specified: def (*s_IXMLDOMDocumentFragment, *short) -> (long); get_definition: def (*s_IXMLDOMDocumentFragment, **s_IXMLDOMNode) -> (long); get_nodeTypedValue: def (*s_IXMLDOMDocumentFragment, *s_tagVARIANT) -> (long); put_nodeTypedValue: def (*s_IXMLDOMDocumentFragment, s_tagVARIANT) -> (long); get_dataType: def (*s_IXMLDOMDocumentFragment, *s_tagVARIANT) -> (long); put_dataType: def (*s_IXMLDOMDocumentFragment, *ushort) -> (long); get_xml: def (*s_IXMLDOMDocumentFragment, **ushort) -> (long); transformNode: def (*s_IXMLDOMDocumentFragment, *s_IXMLDOMNode, **ushort) -> (long); selectNodes: def (*s_IXMLDOMDocumentFragment, *ushort, **s_IXMLDOMNodeList) -> (long); selectSingleNode: def (*s_IXMLDOMDocumentFragment, *ushort, **s_IXMLDOMNode) -> (long); get_parsed: def (*s_IXMLDOMDocumentFragment, *short) -> (long); get_namespaceURI: def (*s_IXMLDOMDocumentFragment, **ushort) -> (long); get_prefix: def (*s_IXMLDOMDocumentFragment, **ushort) -> (long); get_baseName: def (*s_IXMLDOMDocumentFragment, **ushort) -> (long); transformNodeToObject: def (*s_IXMLDOMDocumentFragment, *s_IXMLDOMNode, s_tagVARIANT) -> (long); }
export type IXMLDOMDocumentVtbl = struct { QueryInterface: def (*s_IXMLDOMDocument, *GUID, **) -> (long); AddRef: def (*s_IXMLDOMDocument) -> (ulong); Release: def (*s_IXMLDOMDocument) -> (ulong); GetTypeInfoCount: def (*s_IXMLDOMDocument, *uint) -> (long); GetTypeInfo: def (*s_IXMLDOMDocument, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDOMDocument, *GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDOMDocument, long, *GUID, ulong, ushort, *DISPPARAMS, *s_tagVARIANT, *EXCEPINFO, *uint) -> (long); get_nodeName: def (*s_IXMLDOMDocument, **ushort) -> (long); get_nodeValue: def (*s_IXMLDOMDocument, *s_tagVARIANT) -> (long); put_nodeValue: def (*s_IXMLDOMDocument, s_tagVARIANT) -> (long); get_nodeType: def (*s_IXMLDOMDocument, *DOMNodeType) -> (long); get_parentNode: def (*s_IXMLDOMDocument, **s_IXMLDOMNode) -> (long); get_childNodes: def (*s_IXMLDOMDocument, **s_IXMLDOMNodeList) -> (long); get_firstChild: def (*s_IXMLDOMDocument, **s_IXMLDOMNode) -> (long); get_lastChild: def (*s_IXMLDOMDocument, **s_IXMLDOMNode) -> (long); get_previousSibling: def (*s_IXMLDOMDocument, **s_IXMLDOMNode) -> (long); get_nextSibling: def (*s_IXMLDOMDocument, **s_IXMLDOMNode) -> (long); get_attributes: def (*s_IXMLDOMDocument, **s_IXMLDOMNamedNodeMap) -> (long); insertBefore: def (*s_IXMLDOMDocument, *s_IXMLDOMNode, s_tagVARIANT, **s_IXMLDOMNode) -> (long); replaceChild: def (*s_IXMLDOMDocument, *s_IXMLDOMNode, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); removeChild: def (*s_IXMLDOMDocument, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); appendChild: def (*s_IXMLDOMDocument, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); hasChildNodes: def (*s_IXMLDOMDocument, *short) -> (long); get_ownerDocument: def (*s_IXMLDOMDocument, **s_IXMLDOMDocument) -> (long); cloneNode: def (*s_IXMLDOMDocument, short, **s_IXMLDOMNode) -> (long); get_nodeTypeString: def (*s_IXMLDOMDocument, **ushort) -> (long); get_text: def (*s_IXMLDOMDocument, **ushort) -> (long); put_text: def (*s_IXMLDOMDocument, *ushort) -> (long); get_specified: def (*s_IXMLDOMDocument, *short) -> (long); get_definition: def (*s_IXMLDOMDocument, **s_IXMLDOMNode) -> (long); get_nodeTypedValue: def (*s_IXMLDOMDocument, *s_tagVARIANT) -> (long); put_nodeTypedValue: def (*s_IXMLDOMDocument, s_tagVARIANT) -> (long); get_dataType: def (*s_IXMLDOMDocument, *s_tagVARIANT) -> (long); put_dataType: def (*s_IXMLDOMDocument, *ushort) -> (long); get_xml: def (*s_IXMLDOMDocument, **ushort) -> (long); transformNode: def (*s_IXMLDOMDocument, *s_IXMLDOMNode, **ushort) -> (long); selectNodes: def (*s_IXMLDOMDocument, *ushort, **s_IXMLDOMNodeList) -> (long); selectSingleNode: def (*s_IXMLDOMDocument, *ushort, **s_IXMLDOMNode) -> (long); get_parsed: def (*s_IXMLDOMDocument, *short) -> (long); get_namespaceURI: def (*s_IXMLDOMDocument, **ushort) -> (long); get_prefix: def (*s_IXMLDOMDocument, **ushort) -> (long); get_baseName: def (*s_IXMLDOMDocument, **ushort) -> (long); transformNodeToObject: def (*s_IXMLDOMDocument, *s_IXMLDOMNode, s_tagVARIANT) -> (long); get_doctype: def (*s_IXMLDOMDocument, **s_IXMLDOMDocumentType) -> (long); get_implementation: def (*s_IXMLDOMDocument, **s_IXMLDOMImplementation) -> (long); get_documentElement: def (*s_IXMLDOMDocument, **s_IXMLDOMElement) -> (long); putref_documentElement: def (*s_IXMLDOMDocument, *s_IXMLDOMElement) -> (long); createElement: def (*s_IXMLDOMDocument, *ushort, **s_IXMLDOMElement) -> (long); createDocumentFragment: def (*s_IXMLDOMDocument, **s_IXMLDOMDocumentFragment) -> (long); createTextNode: def (*s_IXMLDOMDocument, *ushort, **s_IXMLDOMText) -> (long); createComment: def (*s_IXMLDOMDocument, *ushort, **s_IXMLDOMComment) -> (long); createCDATASection: def (*s_IXMLDOMDocument, *ushort, **s_IXMLDOMCDATASection) -> (long); createProcessingInstruction: def (*s_IXMLDOMDocument, *ushort, *ushort, **s_IXMLDOMProcessingInstruction) -> (long); createAttribute: def (*s_IXMLDOMDocument, *ushort, **s_IXMLDOMAttribute) -> (long); createEntityReference: def (*s_IXMLDOMDocument, *ushort, **s_IXMLDOMEntityReference) -> (long); getElementsByTagName: def (*s_IXMLDOMDocument, *ushort, **s_IXMLDOMNodeList) -> (long); createNode: def (*s_IXMLDOMDocument, s_tagVARIANT, *ushort, *ushort, **s_IXMLDOMNode) -> (long); nodeFromID: def (*s_IXMLDOMDocument, *ushort, **s_IXMLDOMNode) -> (long); load: def (*s_IXMLDOMDocument, s_tagVARIANT, *short) -> (long); get_readyState: def (*s_IXMLDOMDocument, *long) -> (long); get_parseError: def (*s_IXMLDOMDocument, **s_IXMLDOMParseError) -> (long); get_url: def (*s_IXMLDOMDocument, **ushort) -> (long); get_async: def (*s_IXMLDOMDocument, *short) -> (long); put_async: def (*s_IXMLDOMDocument, short) -> (long); abort: def (*s_IXMLDOMDocument) -> (long); loadXML: def (*s_IXMLDOMDocument, *ushort, *short) -> (long); save: def (*s_IXMLDOMDocument, s_tagVARIANT) -> (long); get_validateOnParse: def (*s_IXMLDOMDocument, *short) -> (long); put_validateOnParse: def (*s_IXMLDOMDocument, short) -> (long); get_resolveExternals: def (*s_IXMLDOMDocument, *short) -> (long); put_resolveExternals: def (*s_IXMLDOMDocument, short) -> (long); get_preserveWhiteSpace: def (*s_IXMLDOMDocument, *short) -> (long); put_preserveWhiteSpace: def (*s_IXMLDOMDocument, short) -> (long); put_onreadystatechange: def (*s_IXMLDOMDocument, s_tagVARIANT) -> (long); put_ondataavailable: def (*s_IXMLDOMDocument, s_tagVARIANT) -> (long); put_ontransformnode: def (*s_IXMLDOMDocument, s_tagVARIANT) -> (long); }
export type IXMLDOMNodeListVtbl = struct { QueryInterface: def (*s_IXMLDOMNodeList, *GUID, **) -> (long); AddRef: def (*s_IXMLDOMNodeList) -> (ulong); Release: def (*s_IXMLDOMNodeList) -> (ulong); GetTypeInfoCount: def (*s_IXMLDOMNodeList, *uint) -> (long); GetTypeInfo: def (*s_IXMLDOMNodeList, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDOMNodeList, *GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDOMNodeList, long, *GUID, ulong, ushort, *DISPPARAMS, *s_tagVARIANT, *EXCEPINFO, *uint) -> (long); get_item: def (*s_IXMLDOMNodeList, long, **s_IXMLDOMNode) -> (long); get_length: def (*s_IXMLDOMNodeList, *long) -> (long); nextNode: def (*s_IXMLDOMNodeList, **s_IXMLDOMNode) -> (long); reset: def (*s_IXMLDOMNodeList) -> (long); get__newEnum: def (*s_IXMLDOMNodeList, **s_IUnknown) -> (long); }
export type IXMLDOMNamedNodeMapVtbl = struct { QueryInterface: def (*s_IXMLDOMNamedNodeMap, *GUID, **) -> (long); AddRef: def (*s_IXMLDOMNamedNodeMap) -> (ulong); Release: def (*s_IXMLDOMNamedNodeMap) -> (ulong); GetTypeInfoCount: def (*s_IXMLDOMNamedNodeMap, *uint) -> (long); GetTypeInfo: def (*s_IXMLDOMNamedNodeMap, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDOMNamedNodeMap, *GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDOMNamedNodeMap, long, *GUID, ulong, ushort, *DISPPARAMS, *s_tagVARIANT, *EXCEPINFO, *uint) -> (long); getNamedItem: def (*s_IXMLDOMNamedNodeMap, *ushort, **s_IXMLDOMNode) -> (long); setNamedItem: def (*s_IXMLDOMNamedNodeMap, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); removeNamedItem: def (*s_IXMLDOMNamedNodeMap, *ushort, **s_IXMLDOMNode) -> (long); get_item: def (*s_IXMLDOMNamedNodeMap, long, **s_IXMLDOMNode) -> (long); get_length: def (*s_IXMLDOMNamedNodeMap, *long) -> (long); getQualifiedItem: def (*s_IXMLDOMNamedNodeMap, *ushort, *ushort, **s_IXMLDOMNode) -> (long); removeQualifiedItem: def (*s_IXMLDOMNamedNodeMap, *ushort, *ushort, **s_IXMLDOMNode) -> (long); nextNode: def (*s_IXMLDOMNamedNodeMap, **s_IXMLDOMNode) -> (long); reset: def (*s_IXMLDOMNamedNodeMap) -> (long); get__newEnum: def (*s_IXMLDOMNamedNodeMap, **s_IUnknown) -> (long); }
export type IXMLDOMCharacterDataVtbl = struct { QueryInterface: def (*s_IXMLDOMCharacterData, *GUID, **) -> (long); AddRef: def (*s_IXMLDOMCharacterData) -> (ulong); Release: def (*s_IXMLDOMCharacterData) -> (ulong); GetTypeInfoCount: def (*s_IXMLDOMCharacterData, *uint) -> (long); GetTypeInfo: def (*s_IXMLDOMCharacterData, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDOMCharacterData, *GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDOMCharacterData, long, *GUID, ulong, ushort, *DISPPARAMS, *s_tagVARIANT, *EXCEPINFO, *uint) -> (long); get_nodeName: def (*s_IXMLDOMCharacterData, **ushort) -> (long); get_nodeValue: def (*s_IXMLDOMCharacterData, *s_tagVARIANT) -> (long); put_nodeValue: def (*s_IXMLDOMCharacterData, s_tagVARIANT) -> (long); get_nodeType: def (*s_IXMLDOMCharacterData, *DOMNodeType) -> (long); get_parentNode: def (*s_IXMLDOMCharacterData, **s_IXMLDOMNode) -> (long); get_childNodes: def (*s_IXMLDOMCharacterData, **s_IXMLDOMNodeList) -> (long); get_firstChild: def (*s_IXMLDOMCharacterData, **s_IXMLDOMNode) -> (long); get_lastChild: def (*s_IXMLDOMCharacterData, **s_IXMLDOMNode) -> (long); get_previousSibling: def (*s_IXMLDOMCharacterData, **s_IXMLDOMNode) -> (long); get_nextSibling: def (*s_IXMLDOMCharacterData, **s_IXMLDOMNode) -> (long); get_attributes: def (*s_IXMLDOMCharacterData, **s_IXMLDOMNamedNodeMap) -> (long); insertBefore: def (*s_IXMLDOMCharacterData, *s_IXMLDOMNode, s_tagVARIANT, **s_IXMLDOMNode) -> (long); replaceChild: def (*s_IXMLDOMCharacterData, *s_IXMLDOMNode, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); removeChild: def (*s_IXMLDOMCharacterData, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); appendChild: def (*s_IXMLDOMCharacterData, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); hasChildNodes: def (*s_IXMLDOMCharacterData, *short) -> (long); get_ownerDocument: def (*s_IXMLDOMCharacterData, **s_IXMLDOMDocument) -> (long); cloneNode: def (*s_IXMLDOMCharacterData, short, **s_IXMLDOMNode) -> (long); get_nodeTypeString: def (*s_IXMLDOMCharacterData, **ushort) -> (long); get_text: def (*s_IXMLDOMCharacterData, **ushort) -> (long); put_text: def (*s_IXMLDOMCharacterData, *ushort) -> (long); get_specified: def (*s_IXMLDOMCharacterData, *short) -> (long); get_definition: def (*s_IXMLDOMCharacterData, **s_IXMLDOMNode) -> (long); get_nodeTypedValue: def (*s_IXMLDOMCharacterData, *s_tagVARIANT) -> (long); put_nodeTypedValue: def (*s_IXMLDOMCharacterData, s_tagVARIANT) -> (long); get_dataType: def (*s_IXMLDOMCharacterData, *s_tagVARIANT) -> (long); put_dataType: def (*s_IXMLDOMCharacterData, *ushort) -> (long); get_xml: def (*s_IXMLDOMCharacterData, **ushort) -> (long); transformNode: def (*s_IXMLDOMCharacterData, *s_IXMLDOMNode, **ushort) -> (long); selectNodes: def (*s_IXMLDOMCharacterData, *ushort, **s_IXMLDOMNodeList) -> (long); selectSingleNode: def (*s_IXMLDOMCharacterData, *ushort, **s_IXMLDOMNode) -> (long); get_parsed: def (*s_IXMLDOMCharacterData, *short) -> (long); get_namespaceURI: def (*s_IXMLDOMCharacterData, **ushort) -> (long); get_prefix: def (*s_IXMLDOMCharacterData, **ushort) -> (long); get_baseName: def (*s_IXMLDOMCharacterData, **ushort) -> (long); transformNodeToObject: def (*s_IXMLDOMCharacterData, *s_IXMLDOMNode, s_tagVARIANT) -> (long); get_data: def (*s_IXMLDOMCharacterData, **ushort) -> (long); put_data: def (*s_IXMLDOMCharacterData, *ushort) -> (long); get_length: def (*s_IXMLDOMCharacterData, *long) -> (long); substringData: def (*s_IXMLDOMCharacterData, long, long, **ushort) -> (long); appendData: def (*s_IXMLDOMCharacterData, *ushort) -> (long); insertData: def (*s_IXMLDOMCharacterData, long, *ushort) -> (long); deleteData: def (*s_IXMLDOMCharacterData, long, long) -> (long); replaceData: def (*s_IXMLDOMCharacterData, long, long, *ushort) -> (long); }
export type IXMLDOMAttributeVtbl = struct { QueryInterface: def (*s_IXMLDOMAttribute, *GUID, **) -> (long); AddRef: def (*s_IXMLDOMAttribute) -> (ulong); Release: def (*s_IXMLDOMAttribute) -> (ulong); GetTypeInfoCount: def (*s_IXMLDOMAttribute, *uint) -> (long); GetTypeInfo: def (*s_IXMLDOMAttribute, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDOMAttribute, *GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDOMAttribute, long, *GUID, ulong, ushort, *DISPPARAMS, *s_tagVARIANT, *EXCEPINFO, *uint) -> (long); get_nodeName: def (*s_IXMLDOMAttribute, **ushort) -> (long); get_nodeValue: def (*s_IXMLDOMAttribute, *s_tagVARIANT) -> (long); put_nodeValue: def (*s_IXMLDOMAttribute, s_tagVARIANT) -> (long); get_nodeType: def (*s_IXMLDOMAttribute, *DOMNodeType) -> (long); get_parentNode: def (*s_IXMLDOMAttribute, **s_IXMLDOMNode) -> (long); get_childNodes: def (*s_IXMLDOMAttribute, **s_IXMLDOMNodeList) -> (long); get_firstChild: def (*s_IXMLDOMAttribute, **s_IXMLDOMNode) -> (long); get_lastChild: def (*s_IXMLDOMAttribute, **s_IXMLDOMNode) -> (long); get_previousSibling: def (*s_IXMLDOMAttribute, **s_IXMLDOMNode) -> (long); get_nextSibling: def (*s_IXMLDOMAttribute, **s_IXMLDOMNode) -> (long); get_attributes: def (*s_IXMLDOMAttribute, **s_IXMLDOMNamedNodeMap) -> (long); insertBefore: def (*s_IXMLDOMAttribute, *s_IXMLDOMNode, s_tagVARIANT, **s_IXMLDOMNode) -> (long); replaceChild: def (*s_IXMLDOMAttribute, *s_IXMLDOMNode, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); removeChild: def (*s_IXMLDOMAttribute, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); appendChild: def (*s_IXMLDOMAttribute, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); hasChildNodes: def (*s_IXMLDOMAttribute, *short) -> (long); get_ownerDocument: def (*s_IXMLDOMAttribute, **s_IXMLDOMDocument) -> (long); cloneNode: def (*s_IXMLDOMAttribute, short, **s_IXMLDOMNode) -> (long); get_nodeTypeString: def (*s_IXMLDOMAttribute, **ushort) -> (long); get_text: def (*s_IXMLDOMAttribute, **ushort) -> (long); put_text: def (*s_IXMLDOMAttribute, *ushort) -> (long); get_specified: def (*s_IXMLDOMAttribute, *short) -> (long); get_definition: def (*s_IXMLDOMAttribute, **s_IXMLDOMNode) -> (long); get_nodeTypedValue: def (*s_IXMLDOMAttribute, *s_tagVARIANT) -> (long); put_nodeTypedValue: def (*s_IXMLDOMAttribute, s_tagVARIANT) -> (long); get_dataType: def (*s_IXMLDOMAttribute, *s_tagVARIANT) -> (long); put_dataType: def (*s_IXMLDOMAttribute, *ushort) -> (long); get_xml: def (*s_IXMLDOMAttribute, **ushort) -> (long); transformNode: def (*s_IXMLDOMAttribute, *s_IXMLDOMNode, **ushort) -> (long); selectNodes: def (*s_IXMLDOMAttribute, *ushort, **s_IXMLDOMNodeList) -> (long); selectSingleNode: def (*s_IXMLDOMAttribute, *ushort, **s_IXMLDOMNode) -> (long); get_parsed: def (*s_IXMLDOMAttribute, *short) -> (long); get_namespaceURI: def (*s_IXMLDOMAttribute, **ushort) -> (long); get_prefix: def (*s_IXMLDOMAttribute, **ushort) -> (long); get_baseName: def (*s_IXMLDOMAttribute, **ushort) -> (long); transformNodeToObject: def (*s_IXMLDOMAttribute, *s_IXMLDOMNode, s_tagVARIANT) -> (long); get_name: def (*s_IXMLDOMAttribute, **ushort) -> (long); get_value: def (*s_IXMLDOMAttribute, *s_tagVARIANT) -> (long); put_value: def (*s_IXMLDOMAttribute, s_tagVARIANT) -> (long); }
export type IXMLDOMElementVtbl = struct { QueryInterface: def (*s_IXMLDOMElement, *GUID, **) -> (long); AddRef: def (*s_IXMLDOMElement) -> (ulong); Release: def (*s_IXMLDOMElement) -> (ulong); GetTypeInfoCount: def (*s_IXMLDOMElement, *uint) -> (long); GetTypeInfo: def (*s_IXMLDOMElement, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDOMElement, *GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDOMElement, long, *GUID, ulong, ushort, *DISPPARAMS, *s_tagVARIANT, *EXCEPINFO, *uint) -> (long); get_nodeName: def (*s_IXMLDOMElement, **ushort) -> (long); get_nodeValue: def (*s_IXMLDOMElement, *s_tagVARIANT) -> (long); put_nodeValue: def (*s_IXMLDOMElement, s_tagVARIANT) -> (long); get_nodeType: def (*s_IXMLDOMElement, *DOMNodeType) -> (long); get_parentNode: def (*s_IXMLDOMElement, **s_IXMLDOMNode) -> (long); get_childNodes: def (*s_IXMLDOMElement, **s_IXMLDOMNodeList) -> (long); get_firstChild: def (*s_IXMLDOMElement, **s_IXMLDOMNode) -> (long); get_lastChild: def (*s_IXMLDOMElement, **s_IXMLDOMNode) -> (long); get_previousSibling: def (*s_IXMLDOMElement, **s_IXMLDOMNode) -> (long); get_nextSibling: def (*s_IXMLDOMElement, **s_IXMLDOMNode) -> (long); get_attributes: def (*s_IXMLDOMElement, **s_IXMLDOMNamedNodeMap) -> (long); insertBefore: def (*s_IXMLDOMElement, *s_IXMLDOMNode, s_tagVARIANT, **s_IXMLDOMNode) -> (long); replaceChild: def (*s_IXMLDOMElement, *s_IXMLDOMNode, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); removeChild: def (*s_IXMLDOMElement, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); appendChild: def (*s_IXMLDOMElement, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); hasChildNodes: def (*s_IXMLDOMElement, *short) -> (long); get_ownerDocument: def (*s_IXMLDOMElement, **s_IXMLDOMDocument) -> (long); cloneNode: def (*s_IXMLDOMElement, short, **s_IXMLDOMNode) -> (long); get_nodeTypeString: def (*s_IXMLDOMElement, **ushort) -> (long); get_text: def (*s_IXMLDOMElement, **ushort) -> (long); put_text: def (*s_IXMLDOMElement, *ushort) -> (long); get_specified: def (*s_IXMLDOMElement, *short) -> (long); get_definition: def (*s_IXMLDOMElement, **s_IXMLDOMNode) -> (long); get_nodeTypedValue: def (*s_IXMLDOMElement, *s_tagVARIANT) -> (long); put_nodeTypedValue: def (*s_IXMLDOMElement, s_tagVARIANT) -> (long); get_dataType: def (*s_IXMLDOMElement, *s_tagVARIANT) -> (long); put_dataType: def (*s_IXMLDOMElement, *ushort) -> (long); get_xml: def (*s_IXMLDOMElement, **ushort) -> (long); transformNode: def (*s_IXMLDOMElement, *s_IXMLDOMNode, **ushort) -> (long); selectNodes: def (*s_IXMLDOMElement, *ushort, **s_IXMLDOMNodeList) -> (long); selectSingleNode: def (*s_IXMLDOMElement, *ushort, **s_IXMLDOMNode) -> (long); get_parsed: def (*s_IXMLDOMElement, *short) -> (long); get_namespaceURI: def (*s_IXMLDOMElement, **ushort) -> (long); get_prefix: def (*s_IXMLDOMElement, **ushort) -> (long); get_baseName: def (*s_IXMLDOMElement, **ushort) -> (long); transformNodeToObject: def (*s_IXMLDOMElement, *s_IXMLDOMNode, s_tagVARIANT) -> (long); get_tagName: def (*s_IXMLDOMElement, **ushort) -> (long); getAttribute: def (*s_IXMLDOMElement, *ushort, *s_tagVARIANT) -> (long); setAttribute: def (*s_IXMLDOMElement, *ushort, s_tagVARIANT) -> (long); removeAttribute: def (*s_IXMLDOMElement, *ushort) -> (long); getAttributeNode: def (*s_IXMLDOMElement, *ushort, **s_IXMLDOMAttribute) -> (long); setAttributeNode: def (*s_IXMLDOMElement, *s_IXMLDOMAttribute, **s_IXMLDOMAttribute) -> (long); removeAttributeNode: def (*s_IXMLDOMElement, *s_IXMLDOMAttribute, **s_IXMLDOMAttribute) -> (long); getElementsByTagName: def (*s_IXMLDOMElement, *ushort, **s_IXMLDOMNodeList) -> (long); normalize: def (*s_IXMLDOMElement) -> (long); }
export type IXMLDOMTextVtbl = struct { QueryInterface: def (*s_IXMLDOMText, *GUID, **) -> (long); AddRef: def (*s_IXMLDOMText) -> (ulong); Release: def (*s_IXMLDOMText) -> (ulong); GetTypeInfoCount: def (*s_IXMLDOMText, *uint) -> (long); GetTypeInfo: def (*s_IXMLDOMText, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDOMText, *GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDOMText, long, *GUID, ulong, ushort, *DISPPARAMS, *s_tagVARIANT, *EXCEPINFO, *uint) -> (long); get_nodeName: def (*s_IXMLDOMText, **ushort) -> (long); get_nodeValue: def (*s_IXMLDOMText, *s_tagVARIANT) -> (long); put_nodeValue: def (*s_IXMLDOMText, s_tagVARIANT) -> (long); get_nodeType: def (*s_IXMLDOMText, *DOMNodeType) -> (long); get_parentNode: def (*s_IXMLDOMText, **s_IXMLDOMNode) -> (long); get_childNodes: def (*s_IXMLDOMText, **s_IXMLDOMNodeList) -> (long); get_firstChild: def (*s_IXMLDOMText, **s_IXMLDOMNode) -> (long); get_lastChild: def (*s_IXMLDOMText, **s_IXMLDOMNode) -> (long); get_previousSibling: def (*s_IXMLDOMText, **s_IXMLDOMNode) -> (long); get_nextSibling: def (*s_IXMLDOMText, **s_IXMLDOMNode) -> (long); get_attributes: def (*s_IXMLDOMText, **s_IXMLDOMNamedNodeMap) -> (long); insertBefore: def (*s_IXMLDOMText, *s_IXMLDOMNode, s_tagVARIANT, **s_IXMLDOMNode) -> (long); replaceChild: def (*s_IXMLDOMText, *s_IXMLDOMNode, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); removeChild: def (*s_IXMLDOMText, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); appendChild: def (*s_IXMLDOMText, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); hasChildNodes: def (*s_IXMLDOMText, *short) -> (long); get_ownerDocument: def (*s_IXMLDOMText, **s_IXMLDOMDocument) -> (long); cloneNode: def (*s_IXMLDOMText, short, **s_IXMLDOMNode) -> (long); get_nodeTypeString: def (*s_IXMLDOMText, **ushort) -> (long); get_text: def (*s_IXMLDOMText, **ushort) -> (long); put_text: def (*s_IXMLDOMText, *ushort) -> (long); get_specified: def (*s_IXMLDOMText, *short) -> (long); get_definition: def (*s_IXMLDOMText, **s_IXMLDOMNode) -> (long); get_nodeTypedValue: def (*s_IXMLDOMText, *s_tagVARIANT) -> (long); put_nodeTypedValue: def (*s_IXMLDOMText, s_tagVARIANT) -> (long); get_dataType: def (*s_IXMLDOMText, *s_tagVARIANT) -> (long); put_dataType: def (*s_IXMLDOMText, *ushort) -> (long); get_xml: def (*s_IXMLDOMText, **ushort) -> (long); transformNode: def (*s_IXMLDOMText, *s_IXMLDOMNode, **ushort) -> (long); selectNodes: def (*s_IXMLDOMText, *ushort, **s_IXMLDOMNodeList) -> (long); selectSingleNode: def (*s_IXMLDOMText, *ushort, **s_IXMLDOMNode) -> (long); get_parsed: def (*s_IXMLDOMText, *short) -> (long); get_namespaceURI: def (*s_IXMLDOMText, **ushort) -> (long); get_prefix: def (*s_IXMLDOMText, **ushort) -> (long); get_baseName: def (*s_IXMLDOMText, **ushort) -> (long); transformNodeToObject: def (*s_IXMLDOMText, *s_IXMLDOMNode, s_tagVARIANT) -> (long); get_data: def (*s_IXMLDOMText, **ushort) -> (long); put_data: def (*s_IXMLDOMText, *ushort) -> (long); get_length: def (*s_IXMLDOMText, *long) -> (long); substringData: def (*s_IXMLDOMText, long, long, **ushort) -> (long); appendData: def (*s_IXMLDOMText, *ushort) -> (long); insertData: def (*s_IXMLDOMText, long, *ushort) -> (long); deleteData: def (*s_IXMLDOMText, long, long) -> (long); replaceData: def (*s_IXMLDOMText, long, long, *ushort) -> (long); splitText: def (*s_IXMLDOMText, long, **s_IXMLDOMText) -> (long); }
export type IXMLDOMCommentVtbl = struct { QueryInterface: def (*s_IXMLDOMComment, *GUID, **) -> (long); AddRef: def (*s_IXMLDOMComment) -> (ulong); Release: def (*s_IXMLDOMComment) -> (ulong); GetTypeInfoCount: def (*s_IXMLDOMComment, *uint) -> (long); GetTypeInfo: def (*s_IXMLDOMComment, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDOMComment, *GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDOMComment, long, *GUID, ulong, ushort, *DISPPARAMS, *s_tagVARIANT, *EXCEPINFO, *uint) -> (long); get_nodeName: def (*s_IXMLDOMComment, **ushort) -> (long); get_nodeValue: def (*s_IXMLDOMComment, *s_tagVARIANT) -> (long); put_nodeValue: def (*s_IXMLDOMComment, s_tagVARIANT) -> (long); get_nodeType: def (*s_IXMLDOMComment, *DOMNodeType) -> (long); get_parentNode: def (*s_IXMLDOMComment, **s_IXMLDOMNode) -> (long); get_childNodes: def (*s_IXMLDOMComment, **s_IXMLDOMNodeList) -> (long); get_firstChild: def (*s_IXMLDOMComment, **s_IXMLDOMNode) -> (long); get_lastChild: def (*s_IXMLDOMComment, **s_IXMLDOMNode) -> (long); get_previousSibling: def (*s_IXMLDOMComment, **s_IXMLDOMNode) -> (long); get_nextSibling: def (*s_IXMLDOMComment, **s_IXMLDOMNode) -> (long); get_attributes: def (*s_IXMLDOMComment, **s_IXMLDOMNamedNodeMap) -> (long); insertBefore: def (*s_IXMLDOMComment, *s_IXMLDOMNode, s_tagVARIANT, **s_IXMLDOMNode) -> (long); replaceChild: def (*s_IXMLDOMComment, *s_IXMLDOMNode, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); removeChild: def (*s_IXMLDOMComment, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); appendChild: def (*s_IXMLDOMComment, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); hasChildNodes: def (*s_IXMLDOMComment, *short) -> (long); get_ownerDocument: def (*s_IXMLDOMComment, **s_IXMLDOMDocument) -> (long); cloneNode: def (*s_IXMLDOMComment, short, **s_IXMLDOMNode) -> (long); get_nodeTypeString: def (*s_IXMLDOMComment, **ushort) -> (long); get_text: def (*s_IXMLDOMComment, **ushort) -> (long); put_text: def (*s_IXMLDOMComment, *ushort) -> (long); get_specified: def (*s_IXMLDOMComment, *short) -> (long); get_definition: def (*s_IXMLDOMComment, **s_IXMLDOMNode) -> (long); get_nodeTypedValue: def (*s_IXMLDOMComment, *s_tagVARIANT) -> (long); put_nodeTypedValue: def (*s_IXMLDOMComment, s_tagVARIANT) -> (long); get_dataType: def (*s_IXMLDOMComment, *s_tagVARIANT) -> (long); put_dataType: def (*s_IXMLDOMComment, *ushort) -> (long); get_xml: def (*s_IXMLDOMComment, **ushort) -> (long); transformNode: def (*s_IXMLDOMComment, *s_IXMLDOMNode, **ushort) -> (long); selectNodes: def (*s_IXMLDOMComment, *ushort, **s_IXMLDOMNodeList) -> (long); selectSingleNode: def (*s_IXMLDOMComment, *ushort, **s_IXMLDOMNode) -> (long); get_parsed: def (*s_IXMLDOMComment, *short) -> (long); get_namespaceURI: def (*s_IXMLDOMComment, **ushort) -> (long); get_prefix: def (*s_IXMLDOMComment, **ushort) -> (long); get_baseName: def (*s_IXMLDOMComment, **ushort) -> (long); transformNodeToObject: def (*s_IXMLDOMComment, *s_IXMLDOMNode, s_tagVARIANT) -> (long); get_data: def (*s_IXMLDOMComment, **ushort) -> (long); put_data: def (*s_IXMLDOMComment, *ushort) -> (long); get_length: def (*s_IXMLDOMComment, *long) -> (long); substringData: def (*s_IXMLDOMComment, long, long, **ushort) -> (long); appendData: def (*s_IXMLDOMComment, *ushort) -> (long); insertData: def (*s_IXMLDOMComment, long, *ushort) -> (long); deleteData: def (*s_IXMLDOMComment, long, long) -> (long); replaceData: def (*s_IXMLDOMComment, long, long, *ushort) -> (long); }
export type IXMLDOMProcessingInstructionVtbl = struct { QueryInterface: def (*s_IXMLDOMProcessingInstruction, *GUID, **) -> (long); AddRef: def (*s_IXMLDOMProcessingInstruction) -> (ulong); Release: def (*s_IXMLDOMProcessingInstruction) -> (ulong); GetTypeInfoCount: def (*s_IXMLDOMProcessingInstruction, *uint) -> (long); GetTypeInfo: def (*s_IXMLDOMProcessingInstruction, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDOMProcessingInstruction, *GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDOMProcessingInstruction, long, *GUID, ulong, ushort, *DISPPARAMS, *s_tagVARIANT, *EXCEPINFO, *uint) -> (long); get_nodeName: def (*s_IXMLDOMProcessingInstruction, **ushort) -> (long); get_nodeValue: def (*s_IXMLDOMProcessingInstruction, *s_tagVARIANT) -> (long); put_nodeValue: def (*s_IXMLDOMProcessingInstruction, s_tagVARIANT) -> (long); get_nodeType: def (*s_IXMLDOMProcessingInstruction, *DOMNodeType) -> (long); get_parentNode: def (*s_IXMLDOMProcessingInstruction, **s_IXMLDOMNode) -> (long); get_childNodes: def (*s_IXMLDOMProcessingInstruction, **s_IXMLDOMNodeList) -> (long); get_firstChild: def (*s_IXMLDOMProcessingInstruction, **s_IXMLDOMNode) -> (long); get_lastChild: def (*s_IXMLDOMProcessingInstruction, **s_IXMLDOMNode) -> (long); get_previousSibling: def (*s_IXMLDOMProcessingInstruction, **s_IXMLDOMNode) -> (long); get_nextSibling: def (*s_IXMLDOMProcessingInstruction, **s_IXMLDOMNode) -> (long); get_attributes: def (*s_IXMLDOMProcessingInstruction, **s_IXMLDOMNamedNodeMap) -> (long); insertBefore: def (*s_IXMLDOMProcessingInstruction, *s_IXMLDOMNode, s_tagVARIANT, **s_IXMLDOMNode) -> (long); replaceChild: def (*s_IXMLDOMProcessingInstruction, *s_IXMLDOMNode, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); removeChild: def (*s_IXMLDOMProcessingInstruction, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); appendChild: def (*s_IXMLDOMProcessingInstruction, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); hasChildNodes: def (*s_IXMLDOMProcessingInstruction, *short) -> (long); get_ownerDocument: def (*s_IXMLDOMProcessingInstruction, **s_IXMLDOMDocument) -> (long); cloneNode: def (*s_IXMLDOMProcessingInstruction, short, **s_IXMLDOMNode) -> (long); get_nodeTypeString: def (*s_IXMLDOMProcessingInstruction, **ushort) -> (long); get_text: def (*s_IXMLDOMProcessingInstruction, **ushort) -> (long); put_text: def (*s_IXMLDOMProcessingInstruction, *ushort) -> (long); get_specified: def (*s_IXMLDOMProcessingInstruction, *short) -> (long); get_definition: def (*s_IXMLDOMProcessingInstruction, **s_IXMLDOMNode) -> (long); get_nodeTypedValue: def (*s_IXMLDOMProcessingInstruction, *s_tagVARIANT) -> (long); put_nodeTypedValue: def (*s_IXMLDOMProcessingInstruction, s_tagVARIANT) -> (long); get_dataType: def (*s_IXMLDOMProcessingInstruction, *s_tagVARIANT) -> (long); put_dataType: def (*s_IXMLDOMProcessingInstruction, *ushort) -> (long); get_xml: def (*s_IXMLDOMProcessingInstruction, **ushort) -> (long); transformNode: def (*s_IXMLDOMProcessingInstruction, *s_IXMLDOMNode, **ushort) -> (long); selectNodes: def (*s_IXMLDOMProcessingInstruction, *ushort, **s_IXMLDOMNodeList) -> (long); selectSingleNode: def (*s_IXMLDOMProcessingInstruction, *ushort, **s_IXMLDOMNode) -> (long); get_parsed: def (*s_IXMLDOMProcessingInstruction, *short) -> (long); get_namespaceURI: def (*s_IXMLDOMProcessingInstruction, **ushort) -> (long); get_prefix: def (*s_IXMLDOMProcessingInstruction, **ushort) -> (long); get_baseName: def (*s_IXMLDOMProcessingInstruction, **ushort) -> (long); transformNodeToObject: def (*s_IXMLDOMProcessingInstruction, *s_IXMLDOMNode, s_tagVARIANT) -> (long); get_target: def (*s_IXMLDOMProcessingInstruction, **ushort) -> (long); get_data: def (*s_IXMLDOMProcessingInstruction, **ushort) -> (long); put_data: def (*s_IXMLDOMProcessingInstruction, *ushort) -> (long); }
export type IXMLDOMCDATASectionVtbl = struct { QueryInterface: def (*s_IXMLDOMCDATASection, *GUID, **) -> (long); AddRef: def (*s_IXMLDOMCDATASection) -> (ulong); Release: def (*s_IXMLDOMCDATASection) -> (ulong); GetTypeInfoCount: def (*s_IXMLDOMCDATASection, *uint) -> (long); GetTypeInfo: def (*s_IXMLDOMCDATASection, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDOMCDATASection, *GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDOMCDATASection, long, *GUID, ulong, ushort, *DISPPARAMS, *s_tagVARIANT, *EXCEPINFO, *uint) -> (long); get_nodeName: def (*s_IXMLDOMCDATASection, **ushort) -> (long); get_nodeValue: def (*s_IXMLDOMCDATASection, *s_tagVARIANT) -> (long); put_nodeValue: def (*s_IXMLDOMCDATASection, s_tagVARIANT) -> (long); get_nodeType: def (*s_IXMLDOMCDATASection, *DOMNodeType) -> (long); get_parentNode: def (*s_IXMLDOMCDATASection, **s_IXMLDOMNode) -> (long); get_childNodes: def (*s_IXMLDOMCDATASection, **s_IXMLDOMNodeList) -> (long); get_firstChild: def (*s_IXMLDOMCDATASection, **s_IXMLDOMNode) -> (long); get_lastChild: def (*s_IXMLDOMCDATASection, **s_IXMLDOMNode) -> (long); get_previousSibling: def (*s_IXMLDOMCDATASection, **s_IXMLDOMNode) -> (long); get_nextSibling: def (*s_IXMLDOMCDATASection, **s_IXMLDOMNode) -> (long); get_attributes: def (*s_IXMLDOMCDATASection, **s_IXMLDOMNamedNodeMap) -> (long); insertBefore: def (*s_IXMLDOMCDATASection, *s_IXMLDOMNode, s_tagVARIANT, **s_IXMLDOMNode) -> (long); replaceChild: def (*s_IXMLDOMCDATASection, *s_IXMLDOMNode, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); removeChild: def (*s_IXMLDOMCDATASection, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); appendChild: def (*s_IXMLDOMCDATASection, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); hasChildNodes: def (*s_IXMLDOMCDATASection, *short) -> (long); get_ownerDocument: def (*s_IXMLDOMCDATASection, **s_IXMLDOMDocument) -> (long); cloneNode: def (*s_IXMLDOMCDATASection, short, **s_IXMLDOMNode) -> (long); get_nodeTypeString: def (*s_IXMLDOMCDATASection, **ushort) -> (long); get_text: def (*s_IXMLDOMCDATASection, **ushort) -> (long); put_text: def (*s_IXMLDOMCDATASection, *ushort) -> (long); get_specified: def (*s_IXMLDOMCDATASection, *short) -> (long); get_definition: def (*s_IXMLDOMCDATASection, **s_IXMLDOMNode) -> (long); get_nodeTypedValue: def (*s_IXMLDOMCDATASection, *s_tagVARIANT) -> (long); put_nodeTypedValue: def (*s_IXMLDOMCDATASection, s_tagVARIANT) -> (long); get_dataType: def (*s_IXMLDOMCDATASection, *s_tagVARIANT) -> (long); put_dataType: def (*s_IXMLDOMCDATASection, *ushort) -> (long); get_xml: def (*s_IXMLDOMCDATASection, **ushort) -> (long); transformNode: def (*s_IXMLDOMCDATASection, *s_IXMLDOMNode, **ushort) -> (long); selectNodes: def (*s_IXMLDOMCDATASection, *ushort, **s_IXMLDOMNodeList) -> (long); selectSingleNode: def (*s_IXMLDOMCDATASection, *ushort, **s_IXMLDOMNode) -> (long); get_parsed: def (*s_IXMLDOMCDATASection, *short) -> (long); get_namespaceURI: def (*s_IXMLDOMCDATASection, **ushort) -> (long); get_prefix: def (*s_IXMLDOMCDATASection, **ushort) -> (long); get_baseName: def (*s_IXMLDOMCDATASection, **ushort) -> (long); transformNodeToObject: def (*s_IXMLDOMCDATASection, *s_IXMLDOMNode, s_tagVARIANT) -> (long); get_data: def (*s_IXMLDOMCDATASection, **ushort) -> (long); put_data: def (*s_IXMLDOMCDATASection, *ushort) -> (long); get_length: def (*s_IXMLDOMCDATASection, *long) -> (long); substringData: def (*s_IXMLDOMCDATASection, long, long, **ushort) -> (long); appendData: def (*s_IXMLDOMCDATASection, *ushort) -> (long); insertData: def (*s_IXMLDOMCDATASection, long, *ushort) -> (long); deleteData: def (*s_IXMLDOMCDATASection, long, long) -> (long); replaceData: def (*s_IXMLDOMCDATASection, long, long, *ushort) -> (long); splitText: def (*s_IXMLDOMCDATASection, long, **s_IXMLDOMText) -> (long); }
export type IXMLDOMDocumentTypeVtbl = struct { QueryInterface: def (*s_IXMLDOMDocumentType, *GUID, **) -> (long); AddRef: def (*s_IXMLDOMDocumentType) -> (ulong); Release: def (*s_IXMLDOMDocumentType) -> (ulong); GetTypeInfoCount: def (*s_IXMLDOMDocumentType, *uint) -> (long); GetTypeInfo: def (*s_IXMLDOMDocumentType, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDOMDocumentType, *GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDOMDocumentType, long, *GUID, ulong, ushort, *DISPPARAMS, *s_tagVARIANT, *EXCEPINFO, *uint) -> (long); get_nodeName: def (*s_IXMLDOMDocumentType, **ushort) -> (long); get_nodeValue: def (*s_IXMLDOMDocumentType, *s_tagVARIANT) -> (long); put_nodeValue: def (*s_IXMLDOMDocumentType, s_tagVARIANT) -> (long); get_nodeType: def (*s_IXMLDOMDocumentType, *DOMNodeType) -> (long); get_parentNode: def (*s_IXMLDOMDocumentType, **s_IXMLDOMNode) -> (long); get_childNodes: def (*s_IXMLDOMDocumentType, **s_IXMLDOMNodeList) -> (long); get_firstChild: def (*s_IXMLDOMDocumentType, **s_IXMLDOMNode) -> (long); get_lastChild: def (*s_IXMLDOMDocumentType, **s_IXMLDOMNode) -> (long); get_previousSibling: def (*s_IXMLDOMDocumentType, **s_IXMLDOMNode) -> (long); get_nextSibling: def (*s_IXMLDOMDocumentType, **s_IXMLDOMNode) -> (long); get_attributes: def (*s_IXMLDOMDocumentType, **s_IXMLDOMNamedNodeMap) -> (long); insertBefore: def (*s_IXMLDOMDocumentType, *s_IXMLDOMNode, s_tagVARIANT, **s_IXMLDOMNode) -> (long); replaceChild: def (*s_IXMLDOMDocumentType, *s_IXMLDOMNode, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); removeChild: def (*s_IXMLDOMDocumentType, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); appendChild: def (*s_IXMLDOMDocumentType, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); hasChildNodes: def (*s_IXMLDOMDocumentType, *short) -> (long); get_ownerDocument: def (*s_IXMLDOMDocumentType, **s_IXMLDOMDocument) -> (long); cloneNode: def (*s_IXMLDOMDocumentType, short, **s_IXMLDOMNode) -> (long); get_nodeTypeString: def (*s_IXMLDOMDocumentType, **ushort) -> (long); get_text: def (*s_IXMLDOMDocumentType, **ushort) -> (long); put_text: def (*s_IXMLDOMDocumentType, *ushort) -> (long); get_specified: def (*s_IXMLDOMDocumentType, *short) -> (long); get_definition: def (*s_IXMLDOMDocumentType, **s_IXMLDOMNode) -> (long); get_nodeTypedValue: def (*s_IXMLDOMDocumentType, *s_tagVARIANT) -> (long); put_nodeTypedValue: def (*s_IXMLDOMDocumentType, s_tagVARIANT) -> (long); get_dataType: def (*s_IXMLDOMDocumentType, *s_tagVARIANT) -> (long); put_dataType: def (*s_IXMLDOMDocumentType, *ushort) -> (long); get_xml: def (*s_IXMLDOMDocumentType, **ushort) -> (long); transformNode: def (*s_IXMLDOMDocumentType, *s_IXMLDOMNode, **ushort) -> (long); selectNodes: def (*s_IXMLDOMDocumentType, *ushort, **s_IXMLDOMNodeList) -> (long); selectSingleNode: def (*s_IXMLDOMDocumentType, *ushort, **s_IXMLDOMNode) -> (long); get_parsed: def (*s_IXMLDOMDocumentType, *short) -> (long); get_namespaceURI: def (*s_IXMLDOMDocumentType, **ushort) -> (long); get_prefix: def (*s_IXMLDOMDocumentType, **ushort) -> (long); get_baseName: def (*s_IXMLDOMDocumentType, **ushort) -> (long); transformNodeToObject: def (*s_IXMLDOMDocumentType, *s_IXMLDOMNode, s_tagVARIANT) -> (long); get_name: def (*s_IXMLDOMDocumentType, **ushort) -> (long); get_entities: def (*s_IXMLDOMDocumentType, **s_IXMLDOMNamedNodeMap) -> (long); get_notations: def (*s_IXMLDOMDocumentType, **s_IXMLDOMNamedNodeMap) -> (long); }
export type IXMLDOMNotationVtbl = struct { QueryInterface: def (*s_IXMLDOMNotation, *GUID, **) -> (long); AddRef: def (*s_IXMLDOMNotation) -> (ulong); Release: def (*s_IXMLDOMNotation) -> (ulong); GetTypeInfoCount: def (*s_IXMLDOMNotation, *uint) -> (long); GetTypeInfo: def (*s_IXMLDOMNotation, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDOMNotation, *GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDOMNotation, long, *GUID, ulong, ushort, *DISPPARAMS, *s_tagVARIANT, *EXCEPINFO, *uint) -> (long); get_nodeName: def (*s_IXMLDOMNotation, **ushort) -> (long); get_nodeValue: def (*s_IXMLDOMNotation, *s_tagVARIANT) -> (long); put_nodeValue: def (*s_IXMLDOMNotation, s_tagVARIANT) -> (long); get_nodeType: def (*s_IXMLDOMNotation, *DOMNodeType) -> (long); get_parentNode: def (*s_IXMLDOMNotation, **s_IXMLDOMNode) -> (long); get_childNodes: def (*s_IXMLDOMNotation, **s_IXMLDOMNodeList) -> (long); get_firstChild: def (*s_IXMLDOMNotation, **s_IXMLDOMNode) -> (long); get_lastChild: def (*s_IXMLDOMNotation, **s_IXMLDOMNode) -> (long); get_previousSibling: def (*s_IXMLDOMNotation, **s_IXMLDOMNode) -> (long); get_nextSibling: def (*s_IXMLDOMNotation, **s_IXMLDOMNode) -> (long); get_attributes: def (*s_IXMLDOMNotation, **s_IXMLDOMNamedNodeMap) -> (long); insertBefore: def (*s_IXMLDOMNotation, *s_IXMLDOMNode, s_tagVARIANT, **s_IXMLDOMNode) -> (long); replaceChild: def (*s_IXMLDOMNotation, *s_IXMLDOMNode, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); removeChild: def (*s_IXMLDOMNotation, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); appendChild: def (*s_IXMLDOMNotation, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); hasChildNodes: def (*s_IXMLDOMNotation, *short) -> (long); get_ownerDocument: def (*s_IXMLDOMNotation, **s_IXMLDOMDocument) -> (long); cloneNode: def (*s_IXMLDOMNotation, short, **s_IXMLDOMNode) -> (long); get_nodeTypeString: def (*s_IXMLDOMNotation, **ushort) -> (long); get_text: def (*s_IXMLDOMNotation, **ushort) -> (long); put_text: def (*s_IXMLDOMNotation, *ushort) -> (long); get_specified: def (*s_IXMLDOMNotation, *short) -> (long); get_definition: def (*s_IXMLDOMNotation, **s_IXMLDOMNode) -> (long); get_nodeTypedValue: def (*s_IXMLDOMNotation, *s_tagVARIANT) -> (long); put_nodeTypedValue: def (*s_IXMLDOMNotation, s_tagVARIANT) -> (long); get_dataType: def (*s_IXMLDOMNotation, *s_tagVARIANT) -> (long); put_dataType: def (*s_IXMLDOMNotation, *ushort) -> (long); get_xml: def (*s_IXMLDOMNotation, **ushort) -> (long); transformNode: def (*s_IXMLDOMNotation, *s_IXMLDOMNode, **ushort) -> (long); selectNodes: def (*s_IXMLDOMNotation, *ushort, **s_IXMLDOMNodeList) -> (long); selectSingleNode: def (*s_IXMLDOMNotation, *ushort, **s_IXMLDOMNode) -> (long); get_parsed: def (*s_IXMLDOMNotation, *short) -> (long); get_namespaceURI: def (*s_IXMLDOMNotation, **ushort) -> (long); get_prefix: def (*s_IXMLDOMNotation, **ushort) -> (long); get_baseName: def (*s_IXMLDOMNotation, **ushort) -> (long); transformNodeToObject: def (*s_IXMLDOMNotation, *s_IXMLDOMNode, s_tagVARIANT) -> (long); get_publicId: def (*s_IXMLDOMNotation, *s_tagVARIANT) -> (long); get_systemId: def (*s_IXMLDOMNotation, *s_tagVARIANT) -> (long); }
export type IXMLDOMEntityVtbl = struct { QueryInterface: def (*s_IXMLDOMEntity, *GUID, **) -> (long); AddRef: def (*s_IXMLDOMEntity) -> (ulong); Release: def (*s_IXMLDOMEntity) -> (ulong); GetTypeInfoCount: def (*s_IXMLDOMEntity, *uint) -> (long); GetTypeInfo: def (*s_IXMLDOMEntity, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDOMEntity, *GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDOMEntity, long, *GUID, ulong, ushort, *DISPPARAMS, *s_tagVARIANT, *EXCEPINFO, *uint) -> (long); get_nodeName: def (*s_IXMLDOMEntity, **ushort) -> (long); get_nodeValue: def (*s_IXMLDOMEntity, *s_tagVARIANT) -> (long); put_nodeValue: def (*s_IXMLDOMEntity, s_tagVARIANT) -> (long); get_nodeType: def (*s_IXMLDOMEntity, *DOMNodeType) -> (long); get_parentNode: def (*s_IXMLDOMEntity, **s_IXMLDOMNode) -> (long); get_childNodes: def (*s_IXMLDOMEntity, **s_IXMLDOMNodeList) -> (long); get_firstChild: def (*s_IXMLDOMEntity, **s_IXMLDOMNode) -> (long); get_lastChild: def (*s_IXMLDOMEntity, **s_IXMLDOMNode) -> (long); get_previousSibling: def (*s_IXMLDOMEntity, **s_IXMLDOMNode) -> (long); get_nextSibling: def (*s_IXMLDOMEntity, **s_IXMLDOMNode) -> (long); get_attributes: def (*s_IXMLDOMEntity, **s_IXMLDOMNamedNodeMap) -> (long); insertBefore: def (*s_IXMLDOMEntity, *s_IXMLDOMNode, s_tagVARIANT, **s_IXMLDOMNode) -> (long); replaceChild: def (*s_IXMLDOMEntity, *s_IXMLDOMNode, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); removeChild: def (*s_IXMLDOMEntity, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); appendChild: def (*s_IXMLDOMEntity, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); hasChildNodes: def (*s_IXMLDOMEntity, *short) -> (long); get_ownerDocument: def (*s_IXMLDOMEntity, **s_IXMLDOMDocument) -> (long); cloneNode: def (*s_IXMLDOMEntity, short, **s_IXMLDOMNode) -> (long); get_nodeTypeString: def (*s_IXMLDOMEntity, **ushort) -> (long); get_text: def (*s_IXMLDOMEntity, **ushort) -> (long); put_text: def (*s_IXMLDOMEntity, *ushort) -> (long); get_specified: def (*s_IXMLDOMEntity, *short) -> (long); get_definition: def (*s_IXMLDOMEntity, **s_IXMLDOMNode) -> (long); get_nodeTypedValue: def (*s_IXMLDOMEntity, *s_tagVARIANT) -> (long); put_nodeTypedValue: def (*s_IXMLDOMEntity, s_tagVARIANT) -> (long); get_dataType: def (*s_IXMLDOMEntity, *s_tagVARIANT) -> (long); put_dataType: def (*s_IXMLDOMEntity, *ushort) -> (long); get_xml: def (*s_IXMLDOMEntity, **ushort) -> (long); transformNode: def (*s_IXMLDOMEntity, *s_IXMLDOMNode, **ushort) -> (long); selectNodes: def (*s_IXMLDOMEntity, *ushort, **s_IXMLDOMNodeList) -> (long); selectSingleNode: def (*s_IXMLDOMEntity, *ushort, **s_IXMLDOMNode) -> (long); get_parsed: def (*s_IXMLDOMEntity, *short) -> (long); get_namespaceURI: def (*s_IXMLDOMEntity, **ushort) -> (long); get_prefix: def (*s_IXMLDOMEntity, **ushort) -> (long); get_baseName: def (*s_IXMLDOMEntity, **ushort) -> (long); transformNodeToObject: def (*s_IXMLDOMEntity, *s_IXMLDOMNode, s_tagVARIANT) -> (long); get_publicId: def (*s_IXMLDOMEntity, *s_tagVARIANT) -> (long); get_systemId: def (*s_IXMLDOMEntity, *s_tagVARIANT) -> (long); get_notationName: def (*s_IXMLDOMEntity, **ushort) -> (long); }
export type IXMLDOMEntityReferenceVtbl = struct { QueryInterface: def (*s_IXMLDOMEntityReference, *GUID, **) -> (long); AddRef: def (*s_IXMLDOMEntityReference) -> (ulong); Release: def (*s_IXMLDOMEntityReference) -> (ulong); GetTypeInfoCount: def (*s_IXMLDOMEntityReference, *uint) -> (long); GetTypeInfo: def (*s_IXMLDOMEntityReference, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDOMEntityReference, *GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDOMEntityReference, long, *GUID, ulong, ushort, *DISPPARAMS, *s_tagVARIANT, *EXCEPINFO, *uint) -> (long); get_nodeName: def (*s_IXMLDOMEntityReference, **ushort) -> (long); get_nodeValue: def (*s_IXMLDOMEntityReference, *s_tagVARIANT) -> (long); put_nodeValue: def (*s_IXMLDOMEntityReference, s_tagVARIANT) -> (long); get_nodeType: def (*s_IXMLDOMEntityReference, *DOMNodeType) -> (long); get_parentNode: def (*s_IXMLDOMEntityReference, **s_IXMLDOMNode) -> (long); get_childNodes: def (*s_IXMLDOMEntityReference, **s_IXMLDOMNodeList) -> (long); get_firstChild: def (*s_IXMLDOMEntityReference, **s_IXMLDOMNode) -> (long); get_lastChild: def (*s_IXMLDOMEntityReference, **s_IXMLDOMNode) -> (long); get_previousSibling: def (*s_IXMLDOMEntityReference, **s_IXMLDOMNode) -> (long); get_nextSibling: def (*s_IXMLDOMEntityReference, **s_IXMLDOMNode) -> (long); get_attributes: def (*s_IXMLDOMEntityReference, **s_IXMLDOMNamedNodeMap) -> (long); insertBefore: def (*s_IXMLDOMEntityReference, *s_IXMLDOMNode, s_tagVARIANT, **s_IXMLDOMNode) -> (long); replaceChild: def (*s_IXMLDOMEntityReference, *s_IXMLDOMNode, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); removeChild: def (*s_IXMLDOMEntityReference, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); appendChild: def (*s_IXMLDOMEntityReference, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); hasChildNodes: def (*s_IXMLDOMEntityReference, *short) -> (long); get_ownerDocument: def (*s_IXMLDOMEntityReference, **s_IXMLDOMDocument) -> (long); cloneNode: def (*s_IXMLDOMEntityReference, short, **s_IXMLDOMNode) -> (long); get_nodeTypeString: def (*s_IXMLDOMEntityReference, **ushort) -> (long); get_text: def (*s_IXMLDOMEntityReference, **ushort) -> (long); put_text: def (*s_IXMLDOMEntityReference, *ushort) -> (long); get_specified: def (*s_IXMLDOMEntityReference, *short) -> (long); get_definition: def (*s_IXMLDOMEntityReference, **s_IXMLDOMNode) -> (long); get_nodeTypedValue: def (*s_IXMLDOMEntityReference, *s_tagVARIANT) -> (long); put_nodeTypedValue: def (*s_IXMLDOMEntityReference, s_tagVARIANT) -> (long); get_dataType: def (*s_IXMLDOMEntityReference, *s_tagVARIANT) -> (long); put_dataType: def (*s_IXMLDOMEntityReference, *ushort) -> (long); get_xml: def (*s_IXMLDOMEntityReference, **ushort) -> (long); transformNode: def (*s_IXMLDOMEntityReference, *s_IXMLDOMNode, **ushort) -> (long); selectNodes: def (*s_IXMLDOMEntityReference, *ushort, **s_IXMLDOMNodeList) -> (long); selectSingleNode: def (*s_IXMLDOMEntityReference, *ushort, **s_IXMLDOMNode) -> (long); get_parsed: def (*s_IXMLDOMEntityReference, *short) -> (long); get_namespaceURI: def (*s_IXMLDOMEntityReference, **ushort) -> (long); get_prefix: def (*s_IXMLDOMEntityReference, **ushort) -> (long); get_baseName: def (*s_IXMLDOMEntityReference, **ushort) -> (long); transformNodeToObject: def (*s_IXMLDOMEntityReference, *s_IXMLDOMNode, s_tagVARIANT) -> (long); }
export type IXMLDOMParseErrorVtbl = struct { QueryInterface: def (*s_IXMLDOMParseError, *GUID, **) -> (long); AddRef: def (*s_IXMLDOMParseError) -> (ulong); Release: def (*s_IXMLDOMParseError) -> (ulong); GetTypeInfoCount: def (*s_IXMLDOMParseError, *uint) -> (long); GetTypeInfo: def (*s_IXMLDOMParseError, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDOMParseError, *GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDOMParseError, long, *GUID, ulong, ushort, *DISPPARAMS, *s_tagVARIANT, *EXCEPINFO, *uint) -> (long); get_errorCode: def (*s_IXMLDOMParseError, *long) -> (long); get_url: def (*s_IXMLDOMParseError, **ushort) -> (long); get_reason: def (*s_IXMLDOMParseError, **ushort) -> (long); get_srcText: def (*s_IXMLDOMParseError, **ushort) -> (long); get_line: def (*s_IXMLDOMParseError, *long) -> (long); get_linepos: def (*s_IXMLDOMParseError, *long) -> (long); get_filepos: def (*s_IXMLDOMParseError, *long) -> (long); }
export type IXTLRuntimeVtbl = struct { QueryInterface: def (*s_IXTLRuntime, *GUID, **) -> (long); AddRef: def (*s_IXTLRuntime) -> (ulong); Release: def (*s_IXTLRuntime) -> (ulong); GetTypeInfoCount: def (*s_IXTLRuntime, *uint) -> (long); GetTypeInfo: def (*s_IXTLRuntime, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXTLRuntime, *GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXTLRuntime, long, *GUID, ulong, ushort, *DISPPARAMS, *s_tagVARIANT, *EXCEPINFO, *uint) -> (long); get_nodeName: def (*s_IXTLRuntime, **ushort) -> (long); get_nodeValue: def (*s_IXTLRuntime, *s_tagVARIANT) -> (long); put_nodeValue: def (*s_IXTLRuntime, s_tagVARIANT) -> (long); get_nodeType: def (*s_IXTLRuntime, *DOMNodeType) -> (long); get_parentNode: def (*s_IXTLRuntime, **s_IXMLDOMNode) -> (long); get_childNodes: def (*s_IXTLRuntime, **s_IXMLDOMNodeList) -> (long); get_firstChild: def (*s_IXTLRuntime, **s_IXMLDOMNode) -> (long); get_lastChild: def (*s_IXTLRuntime, **s_IXMLDOMNode) -> (long); get_previousSibling: def (*s_IXTLRuntime, **s_IXMLDOMNode) -> (long); get_nextSibling: def (*s_IXTLRuntime, **s_IXMLDOMNode) -> (long); get_attributes: def (*s_IXTLRuntime, **s_IXMLDOMNamedNodeMap) -> (long); insertBefore: def (*s_IXTLRuntime, *s_IXMLDOMNode, s_tagVARIANT, **s_IXMLDOMNode) -> (long); replaceChild: def (*s_IXTLRuntime, *s_IXMLDOMNode, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); removeChild: def (*s_IXTLRuntime, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); appendChild: def (*s_IXTLRuntime, *s_IXMLDOMNode, **s_IXMLDOMNode) -> (long); hasChildNodes: def (*s_IXTLRuntime, *short) -> (long); get_ownerDocument: def (*s_IXTLRuntime, **s_IXMLDOMDocument) -> (long); cloneNode: def (*s_IXTLRuntime, short, **s_IXMLDOMNode) -> (long); get_nodeTypeString: def (*s_IXTLRuntime, **ushort) -> (long); get_text: def (*s_IXTLRuntime, **ushort) -> (long); put_text: def (*s_IXTLRuntime, *ushort) -> (long); get_specified: def (*s_IXTLRuntime, *short) -> (long); get_definition: def (*s_IXTLRuntime, **s_IXMLDOMNode) -> (long); get_nodeTypedValue: def (*s_IXTLRuntime, *s_tagVARIANT) -> (long); put_nodeTypedValue: def (*s_IXTLRuntime, s_tagVARIANT) -> (long); get_dataType: def (*s_IXTLRuntime, *s_tagVARIANT) -> (long); put_dataType: def (*s_IXTLRuntime, *ushort) -> (long); get_xml: def (*s_IXTLRuntime, **ushort) -> (long); transformNode: def (*s_IXTLRuntime, *s_IXMLDOMNode, **ushort) -> (long); selectNodes: def (*s_IXTLRuntime, *ushort, **s_IXMLDOMNodeList) -> (long); selectSingleNode: def (*s_IXTLRuntime, *ushort, **s_IXMLDOMNode) -> (long); get_parsed: def (*s_IXTLRuntime, *short) -> (long); get_namespaceURI: def (*s_IXTLRuntime, **ushort) -> (long); get_prefix: def (*s_IXTLRuntime, **ushort) -> (long); get_baseName: def (*s_IXTLRuntime, **ushort) -> (long); transformNodeToObject: def (*s_IXTLRuntime, *s_IXMLDOMNode, s_tagVARIANT) -> (long); uniqueID: def (*s_IXTLRuntime, *s_IXMLDOMNode, *long) -> (long); depth: def (*s_IXTLRuntime, *s_IXMLDOMNode, *long) -> (long); childNumber: def (*s_IXTLRuntime, *s_IXMLDOMNode, *long) -> (long); ancestorChildNumber: def (*s_IXTLRuntime, *ushort, *s_IXMLDOMNode, *long) -> (long); absoluteChildNumber: def (*s_IXTLRuntime, *s_IXMLDOMNode, *long) -> (long); formatIndex: def (*s_IXTLRuntime, long, *ushort, **ushort) -> (long); formatNumber: def (*s_IXTLRuntime, double, *ushort, **ushort) -> (long); formatDate: def (*s_IXTLRuntime, s_tagVARIANT, *ushort, s_tagVARIANT, **ushort) -> (long); formatTime: def (*s_IXTLRuntime, s_tagVARIANT, *ushort, s_tagVARIANT, **ushort) -> (long); }
export type XMLDOMDocumentEventsVtbl = struct { QueryInterface: def (*s_XMLDOMDocumentEvents, *GUID, **) -> (long); AddRef: def (*s_XMLDOMDocumentEvents) -> (ulong); Release: def (*s_XMLDOMDocumentEvents) -> (ulong); GetTypeInfoCount: def (*s_XMLDOMDocumentEvents, *uint) -> (long); GetTypeInfo: def (*s_XMLDOMDocumentEvents, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_XMLDOMDocumentEvents, *GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_XMLDOMDocumentEvents, long, *GUID, ulong, ushort, *DISPPARAMS, *s_tagVARIANT, *EXCEPINFO, *uint) -> (long); }
export type IXMLHttpRequestVtbl = struct { QueryInterface: def (*s_IXMLHttpRequest, *GUID, **) -> (long); AddRef: def (*s_IXMLHttpRequest) -> (ulong); Release: def (*s_IXMLHttpRequest) -> (ulong); GetTypeInfoCount: def (*s_IXMLHttpRequest, *uint) -> (long); GetTypeInfo: def (*s_IXMLHttpRequest, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLHttpRequest, *GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLHttpRequest, long, *GUID, ulong, ushort, *DISPPARAMS, *s_tagVARIANT, *EXCEPINFO, *uint) -> (long); open: def (*s_IXMLHttpRequest, *ushort, *ushort, s_tagVARIANT, s_tagVARIANT, s_tagVARIANT) -> (long); setRequestHeader: def (*s_IXMLHttpRequest, *ushort, *ushort) -> (long); getResponseHeader: def (*s_IXMLHttpRequest, *ushort, **ushort) -> (long); getAllResponseHeaders: def (*s_IXMLHttpRequest, **ushort) -> (long); send: def (*s_IXMLHttpRequest, s_tagVARIANT) -> (long); abort: def (*s_IXMLHttpRequest) -> (long); get_status: def (*s_IXMLHttpRequest, *long) -> (long); get_statusText: def (*s_IXMLHttpRequest, **ushort) -> (long); get_responseXML: def (*s_IXMLHttpRequest, **s_IDispatch) -> (long); get_responseText: def (*s_IXMLHttpRequest, **ushort) -> (long); get_responseBody: def (*s_IXMLHttpRequest, *s_tagVARIANT) -> (long); get_responseStream: def (*s_IXMLHttpRequest, *s_tagVARIANT) -> (long); get_readyState: def (*s_IXMLHttpRequest, *long) -> (long); put_onreadystatechange: def (*s_IXMLHttpRequest, *s_IDispatch) -> (long); }
export type IXMLDSOControlVtbl = struct { QueryInterface: def (*s_IXMLDSOControl, *GUID, **) -> (long); AddRef: def (*s_IXMLDSOControl) -> (ulong); Release: def (*s_IXMLDSOControl) -> (ulong); GetTypeInfoCount: def (*s_IXMLDSOControl, *uint) -> (long); GetTypeInfo: def (*s_IXMLDSOControl, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDSOControl, *GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDSOControl, long, *GUID, ulong, ushort, *DISPPARAMS, *s_tagVARIANT, *EXCEPINFO, *uint) -> (long); get_XMLDocument: def (*s_IXMLDSOControl, **s_IXMLDOMDocument) -> (long); put_XMLDocument: def (*s_IXMLDSOControl, *s_IXMLDOMDocument) -> (long); get_JavaDSOCompatible: def (*s_IXMLDSOControl, *int) -> (long); put_JavaDSOCompatible: def (*s_IXMLDSOControl, int) -> (long); get_readyState: def (*s_IXMLDSOControl, *long) -> (long); }
export type IXMLElementCollectionVtbl = struct { QueryInterface: def (*s_IXMLElementCollection, *GUID, **) -> (long); AddRef: def (*s_IXMLElementCollection) -> (ulong); Release: def (*s_IXMLElementCollection) -> (ulong); GetTypeInfoCount: def (*s_IXMLElementCollection, *uint) -> (long); GetTypeInfo: def (*s_IXMLElementCollection, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLElementCollection, *GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLElementCollection, long, *GUID, ulong, ushort, *DISPPARAMS, *s_tagVARIANT, *EXCEPINFO, *uint) -> (long); put_length: def (*s_IXMLElementCollection, long) -> (long); get_length: def (*s_IXMLElementCollection, *long) -> (long); get__newEnum: def (*s_IXMLElementCollection, **s_IUnknown) -> (long); item: def (*s_IXMLElementCollection, s_tagVARIANT, s_tagVARIANT, **s_IDispatch) -> (long); }
export type IXMLDocumentVtbl = struct { QueryInterface: def (*s_IXMLDocument, *GUID, **) -> (long); AddRef: def (*s_IXMLDocument) -> (ulong); Release: def (*s_IXMLDocument) -> (ulong); GetTypeInfoCount: def (*s_IXMLDocument, *uint) -> (long); GetTypeInfo: def (*s_IXMLDocument, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDocument, *GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDocument, long, *GUID, ulong, ushort, *DISPPARAMS, *s_tagVARIANT, *EXCEPINFO, *uint) -> (long); get_root: def (*s_IXMLDocument, **s_IXMLElement) -> (long); get_fileSize: def (*s_IXMLDocument, **ushort) -> (long); get_fileModifiedDate: def (*s_IXMLDocument, **ushort) -> (long); get_fileUpdatedDate: def (*s_IXMLDocument, **ushort) -> (long); get_URL: def (*s_IXMLDocument, **ushort) -> (long); put_URL: def (*s_IXMLDocument, *ushort) -> (long); get_mimeType: def (*s_IXMLDocument, **ushort) -> (long); get_readyState: def (*s_IXMLDocument, *long) -> (long); get_charset: def (*s_IXMLDocument, **ushort) -> (long); put_charset: def (*s_IXMLDocument, *ushort) -> (long); get_version: def (*s_IXMLDocument, **ushort) -> (long); get_doctype: def (*s_IXMLDocument, **ushort) -> (long); get_dtdURL: def (*s_IXMLDocument, **ushort) -> (long); createElement: def (*s_IXMLDocument, s_tagVARIANT, s_tagVARIANT, **s_IXMLElement) -> (long); }
export type IXMLDocument2Vtbl = struct { QueryInterface: def (*s_IXMLDocument2, *GUID, **) -> (long); AddRef: def (*s_IXMLDocument2) -> (ulong); Release: def (*s_IXMLDocument2) -> (ulong); GetTypeInfoCount: def (*s_IXMLDocument2, *uint) -> (long); GetTypeInfo: def (*s_IXMLDocument2, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLDocument2, *GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLDocument2, long, *GUID, ulong, ushort, *DISPPARAMS, *s_tagVARIANT, *EXCEPINFO, *uint) -> (long); get_root: def (*s_IXMLDocument2, **s_IXMLElement2) -> (long); get_fileSize: def (*s_IXMLDocument2, **ushort) -> (long); get_fileModifiedDate: def (*s_IXMLDocument2, **ushort) -> (long); get_fileUpdatedDate: def (*s_IXMLDocument2, **ushort) -> (long); get_URL: def (*s_IXMLDocument2, **ushort) -> (long); put_URL: def (*s_IXMLDocument2, *ushort) -> (long); get_mimeType: def (*s_IXMLDocument2, **ushort) -> (long); get_readyState: def (*s_IXMLDocument2, *long) -> (long); get_charset: def (*s_IXMLDocument2, **ushort) -> (long); put_charset: def (*s_IXMLDocument2, *ushort) -> (long); get_version: def (*s_IXMLDocument2, **ushort) -> (long); get_doctype: def (*s_IXMLDocument2, **ushort) -> (long); get_dtdURL: def (*s_IXMLDocument2, **ushort) -> (long); createElement: def (*s_IXMLDocument2, s_tagVARIANT, s_tagVARIANT, **s_IXMLElement2) -> (long); get_async: def (*s_IXMLDocument2, *short) -> (long); put_async: def (*s_IXMLDocument2, short) -> (long); }
export type IXMLElementVtbl = struct { QueryInterface: def (*s_IXMLElement, *GUID, **) -> (long); AddRef: def (*s_IXMLElement) -> (ulong); Release: def (*s_IXMLElement) -> (ulong); GetTypeInfoCount: def (*s_IXMLElement, *uint) -> (long); GetTypeInfo: def (*s_IXMLElement, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLElement, *GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLElement, long, *GUID, ulong, ushort, *DISPPARAMS, *s_tagVARIANT, *EXCEPINFO, *uint) -> (long); get_tagName: def (*s_IXMLElement, **ushort) -> (long); put_tagName: def (*s_IXMLElement, *ushort) -> (long); get_parent: def (*s_IXMLElement, **s_IXMLElement) -> (long); setAttribute: def (*s_IXMLElement, *ushort, s_tagVARIANT) -> (long); getAttribute: def (*s_IXMLElement, *ushort, *s_tagVARIANT) -> (long); removeAttribute: def (*s_IXMLElement, *ushort) -> (long); get_children: def (*s_IXMLElement, **s_IXMLElementCollection) -> (long); get_type: def (*s_IXMLElement, *long) -> (long); get_text: def (*s_IXMLElement, **ushort) -> (long); put_text: def (*s_IXMLElement, *ushort) -> (long); addChild: def (*s_IXMLElement, *s_IXMLElement, long, long) -> (long); removeChild: def (*s_IXMLElement, *s_IXMLElement) -> (long); }
export type IXMLElement2Vtbl = struct { QueryInterface: def (*s_IXMLElement2, *GUID, **) -> (long); AddRef: def (*s_IXMLElement2) -> (ulong); Release: def (*s_IXMLElement2) -> (ulong); GetTypeInfoCount: def (*s_IXMLElement2, *uint) -> (long); GetTypeInfo: def (*s_IXMLElement2, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLElement2, *GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLElement2, long, *GUID, ulong, ushort, *DISPPARAMS, *s_tagVARIANT, *EXCEPINFO, *uint) -> (long); get_tagName: def (*s_IXMLElement2, **ushort) -> (long); put_tagName: def (*s_IXMLElement2, *ushort) -> (long); get_parent: def (*s_IXMLElement2, **s_IXMLElement2) -> (long); setAttribute: def (*s_IXMLElement2, *ushort, s_tagVARIANT) -> (long); getAttribute: def (*s_IXMLElement2, *ushort, *s_tagVARIANT) -> (long); removeAttribute: def (*s_IXMLElement2, *ushort) -> (long); get_children: def (*s_IXMLElement2, **s_IXMLElementCollection) -> (long); get_type: def (*s_IXMLElement2, *long) -> (long); get_text: def (*s_IXMLElement2, **ushort) -> (long); put_text: def (*s_IXMLElement2, *ushort) -> (long); addChild: def (*s_IXMLElement2, *s_IXMLElement2, long, long) -> (long); removeChild: def (*s_IXMLElement2, *s_IXMLElement2) -> (long); get_attributes: def (*s_IXMLElement2, **s_IXMLElementCollection) -> (long); }
export type IXMLAttributeVtbl = struct { QueryInterface: def (*s_IXMLAttribute, *GUID, **) -> (long); AddRef: def (*s_IXMLAttribute) -> (ulong); Release: def (*s_IXMLAttribute) -> (ulong); GetTypeInfoCount: def (*s_IXMLAttribute, *uint) -> (long); GetTypeInfo: def (*s_IXMLAttribute, uint, ulong, **s_ITypeInfo) -> (long); GetIDsOfNames: def (*s_IXMLAttribute, *GUID, **ushort, uint, ulong, *long) -> (long); Invoke: def (*s_IXMLAttribute, long, *GUID, ulong, ushort, *DISPPARAMS, *s_tagVARIANT, *EXCEPINFO, *uint) -> (long); get_name: def (*s_IXMLAttribute, **ushort) -> (long); get_value: def (*s_IXMLAttribute, **ushort) -> (long); }
export type IXMLErrorVtbl = struct { QueryInterface: def (*s_IXMLError, *GUID, **) -> (long); AddRef: def (*s_IXMLError) -> (ulong); Release: def (*s_IXMLError) -> (ulong); GetErrorInfo: def (*s_IXMLError, *XML_ERROR) -> (long); }
export type IEObjectType = enum { IE_EPM_OBJECT_EVENT; IE_EPM_OBJECT_MUTEX; IE_EPM_OBJECT_SEMAPHORE; IE_EPM_OBJECT_SHARED_MEMORY; IE_EPM_OBJECT_WAITABLE_TIMER; IE_EPM_OBJECT_FILE; IE_EPM_OBJECT_NAMED_PIPE; IE_EPM_OBJECT_REGISTRY; }
export type IPersistMonikerVtbl = struct { QueryInterface: def (*s_IPersistMoniker, *GUID, **) -> (long); AddRef: def (*s_IPersistMoniker) -> (ulong); Release: def (*s_IPersistMoniker) -> (ulong); GetClassID: def (*s_IPersistMoniker, *GUID) -> (long); IsDirty: def (*s_IPersistMoniker) -> (long); Load: def (*s_IPersistMoniker, int, *s_IMoniker, *s_IBindCtx, ulong) -> (long); Save: def (*s_IPersistMoniker, *s_IMoniker, *s_IBindCtx, int) -> (long); SaveCompleted: def (*s_IPersistMoniker, *s_IMoniker, *s_IBindCtx) -> (long); GetCurMoniker: def (*s_IPersistMoniker, **s_IMoniker) -> (long); }
export type MONIKERPROPERTY = enum { MIMETYPEPROP = 0; USE_SRC_URL = 1; CLASSIDPROP = 2; TRUSTEDDOWNLOADPROP = 3; POPUPLEVELPROP = 4; }
export type IMonikerPropVtbl = struct { QueryInterface: def (*s_IMonikerProp, *GUID, **) -> (long); AddRef: def (*s_IMonikerProp) -> (ulong); Release: def (*s_IMonikerProp) -> (ulong); PutProperty: def (*s_IMonikerProp, MONIKERPROPERTY, *ushort) -> (long); }
export type IBindProtocolVtbl = struct { QueryInterface: def (*s_IBindProtocol, *GUID, **) -> (long); AddRef: def (*s_IBindProtocol) -> (ulong); Release: def (*s_IBindProtocol) -> (ulong); CreateBinding: def (*s_IBindProtocol, *ushort, *s_IBindCtx, **s_IBinding) -> (long); }
export type IBindingVtbl = struct { QueryInterface: def (*s_IBinding, *GUID, **) -> (long); AddRef: def (*s_IBinding) -> (ulong); Release: def (*s_IBinding) -> (ulong); Abort: def (*s_IBinding) -> (long); Suspend: def (*s_IBinding) -> (long); Resume: def (*s_IBinding) -> (long); SetPriority: def (*s_IBinding, long) -> (long); GetPriority: def (*s_IBinding, *long) -> (long); GetBindResult: def (*s_IBinding, *GUID, *ulong, **ushort, *ulong) -> (long); }
export type BINDVERB = enum { BINDVERB_GET = 0; BINDVERB_POST = 1; BINDVERB_PUT = 2; BINDVERB_CUSTOM = 3; BINDVERB_RESERVED1 = 4; }
export type BINDINFOF = enum { BINDINFOF_URLENCODESTGMEDDATA = 1; BINDINFOF_URLENCODEDEXTRAINFO = 2; }
export type BINDF = enum { BINDF_ASYNCHRONOUS = 1; BINDF_ASYNCSTORAGE = 2; BINDF_NOPROGRESSIVERENDERING = 4; BINDF_OFFLINEOPERATION = 8; BINDF_GETNEWESTVERSION = 16; BINDF_NOWRITECACHE = 32; BINDF_NEEDFILE = 64; BINDF_PULLDATA = 128; BINDF_IGNORESECURITYPROBLEM = 256; BINDF_RESYNCHRONIZE = 512; BINDF_HYPERLINK = 1024; BINDF_NO_UI = 2048; BINDF_SILENTOPERATION = 4096; BINDF_PRAGMA_NO_CACHE = 8192; BINDF_GETCLASSOBJECT = 16384; BINDF_RESERVED_1 = 32768; BINDF_FREE_THREADED = 65536; BINDF_DIRECT_READ = 131072; BINDF_FORMS_SUBMIT = 262144; BINDF_GETFROMCACHE_IF_NET_FAIL = 524288; BINDF_FROMURLMON = 1048576; BINDF_FWD_BACK = 2097152; BINDF_PREFERDEFAULTHANDLER = 4194304; BINDF_ENFORCERESTRICTED = 8388608; BINDF_RESERVED_2; BINDF_RESERVED_3 = 16777216; BINDF_RESERVED_4 = 33554432; BINDF_RESERVED_5 = 67108864; BINDF_RESERVED_6 = 134217728; BINDF_RESERVED_7 = 1073741824; BINDF_RESERVED_8 = 536870912; }
export type URL_ENCODING = enum { URL_ENCODING_NONE = 0; URL_ENCODING_ENABLE_UTF8 = 268435456; URL_ENCODING_DISABLE_UTF8 = 536870912; }
export type BINDINFO = struct { cbSize: ulong; szExtraInfo: *ushort; stgmedData: uSTGMEDIUM; grfBindInfoF: ulong; dwBindVerb: ulong; szCustomVerb: *ushort; cbstgmedData: ulong; dwOptions: ulong; dwOptionsFlags: ulong; dwCodePage: ulong; securityAttributes: SECURITY_ATTRIBUTES; iid: GUID; pUnk: *s_IUnknown; dwReserved: ulong; }
export type REMSECURITY_ATTRIBUTES = struct { nLength: ulong; lpSecurityDescriptor: ulong; bInheritHandle: int; }
export type RemBINDINFO = struct { cbSize: ulong; szExtraInfo: *ushort; grfBindInfoF: ulong; dwBindVerb: ulong; szCustomVerb: *ushort; cbstgmedData: ulong; dwOptions: ulong; dwOptionsFlags: ulong; dwCodePage: ulong; securityAttributes: REMSECURITY_ATTRIBUTES; iid: GUID; pUnk: *s_IUnknown; dwReserved: ulong; }
export type RemFORMATETC = struct { cfFormat: ulong; ptd: ulong; dwAspect: ulong; lindex: long; tymed: ulong; }
export type BINDINFO_OPTIONS = enum { BINDINFO_OPTIONS_WININETFLAG = 65536; BINDINFO_OPTIONS_ENABLE_UTF8 = 131072; BINDINFO_OPTIONS_DISABLE_UTF8 = 262144; BINDINFO_OPTIONS_USE_IE_ENCODING = 524288; BINDINFO_OPTIONS_BINDTOOBJECT = 1048576; BINDINFO_OPTIONS_SECURITYOPTOUT = 2097152; BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN = 4194304; BINDINFO_OPTIONS_USEBINDSTRINGCREDS = 8388608; BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS = 16777216; BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE = 33554432; BINDINFO_WPC_DOWNLOADBLOCKED = 134217728; BINDINFO_WPC_LOGGING_ENABLED = 268435456; BINDINFO_OPTIONS_ALLOWCONNECTDATA = 536870912; BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS = 1073741824; BINDINFO_OPTIONS_SHDOCVW_NAVIGATE; }
export type BSCF = enum { BSCF_FIRSTDATANOTIFICATION = 1; BSCF_INTERMEDIATEDATANOTIFICATION = 2; BSCF_LASTDATANOTIFICATION = 4; BSCF_DATAFULLYAVAILABLE = 8; BSCF_AVAILABLEDATASIZEUNKNOWN = 16; BSCF_SKIPDRAINDATAFORFILEURLS = 32; BSCF_64BITLENGTHDOWNLOAD = 64; }
export type BINDSTATUS = enum { BINDSTATUS_FINDINGRESOURCE = 1; BINDSTATUS_CONNECTING = ((BINDSTATUS_FINDINGRESOURCE + 1)); BINDSTATUS_REDIRECTING = ((BINDSTATUS_CONNECTING + 1)); BINDSTATUS_BEGINDOWNLOADDATA = ((BINDSTATUS_REDIRECTING + 1)); BINDSTATUS_DOWNLOADINGDATA = ((BINDSTATUS_BEGINDOWNLOADDATA + 1)); BINDSTATUS_ENDDOWNLOADDATA = ((BINDSTATUS_DOWNLOADINGDATA + 1)); BINDSTATUS_BEGINDOWNLOADCOMPONENTS = ((BINDSTATUS_ENDDOWNLOADDATA + 1)); BINDSTATUS_INSTALLINGCOMPONENTS = ((BINDSTATUS_BEGINDOWNLOADCOMPONENTS + 1)); BINDSTATUS_ENDDOWNLOADCOMPONENTS = ((BINDSTATUS_INSTALLINGCOMPONENTS + 1)); BINDSTATUS_USINGCACHEDCOPY = ((BINDSTATUS_ENDDOWNLOADCOMPONENTS + 1)); BINDSTATUS_SENDINGREQUEST = ((BINDSTATUS_USINGCACHEDCOPY + 1)); BINDSTATUS_CLASSIDAVAILABLE = ((BINDSTATUS_SENDINGREQUEST + 1)); BINDSTATUS_MIMETYPEAVAILABLE = ((BINDSTATUS_CLASSIDAVAILABLE + 1)); BINDSTATUS_CACHEFILENAMEAVAILABLE = ((BINDSTATUS_MIMETYPEAVAILABLE + 1)); BINDSTATUS_BEGINSYNCOPERATION = ((BINDSTATUS_CACHEFILENAMEAVAILABLE + 1)); BINDSTATUS_ENDSYNCOPERATION = ((BINDSTATUS_BEGINSYNCOPERATION + 1)); BINDSTATUS_BEGINUPLOADDATA = ((BINDSTATUS_ENDSYNCOPERATION + 1)); BINDSTATUS_UPLOADINGDATA = ((BINDSTATUS_BEGINUPLOADDATA + 1)); BINDSTATUS_ENDUPLOADDATA = ((BINDSTATUS_UPLOADINGDATA + 1)); BINDSTATUS_PROTOCOLCLASSID = ((BINDSTATUS_ENDUPLOADDATA + 1)); BINDSTATUS_ENCODING = ((BINDSTATUS_PROTOCOLCLASSID + 1)); BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE = ((BINDSTATUS_ENCODING + 1)); BINDSTATUS_CLASSINSTALLLOCATION = ((BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE + 1)); BINDSTATUS_DECODING = ((BINDSTATUS_CLASSINSTALLLOCATION + 1)); BINDSTATUS_LOADINGMIMEHANDLER = ((BINDSTATUS_DECODING + 1)); BINDSTATUS_CONTENTDISPOSITIONATTACH = ((BINDSTATUS_LOADINGMIMEHANDLER + 1)); BINDSTATUS_FILTERREPORTMIMETYPE = ((BINDSTATUS_CONTENTDISPOSITIONATTACH + 1)); BINDSTATUS_CLSIDCANINSTANTIATE = ((BINDSTATUS_FILTERREPORTMIMETYPE + 1)); BINDSTATUS_IUNKNOWNAVAILABLE = ((BINDSTATUS_CLSIDCANINSTANTIATE + 1)); BINDSTATUS_DIRECTBIND = ((BINDSTATUS_IUNKNOWNAVAILABLE + 1)); BINDSTATUS_RAWMIMETYPE = ((BINDSTATUS_DIRECTBIND + 1)); BINDSTATUS_PROXYDETECTING = ((BINDSTATUS_RAWMIMETYPE + 1)); BINDSTATUS_ACCEPTRANGES = ((BINDSTATUS_PROXYDETECTING + 1)); BINDSTATUS_COOKIE_SENT = ((BINDSTATUS_ACCEPTRANGES + 1)); BINDSTATUS_COMPACT_POLICY_RECEIVED = ((BINDSTATUS_COOKIE_SENT + 1)); BINDSTATUS_COOKIE_SUPPRESSED = ((BINDSTATUS_COMPACT_POLICY_RECEIVED + 1)); BINDSTATUS_COOKIE_STATE_UNKNOWN = ((BINDSTATUS_COOKIE_SUPPRESSED + 1)); BINDSTATUS_COOKIE_STATE_ACCEPT = ((BINDSTATUS_COOKIE_STATE_UNKNOWN + 1)); BINDSTATUS_COOKIE_STATE_REJECT = ((BINDSTATUS_COOKIE_STATE_ACCEPT + 1)); BINDSTATUS_COOKIE_STATE_PROMPT = ((BINDSTATUS_COOKIE_STATE_REJECT + 1)); BINDSTATUS_COOKIE_STATE_LEASH = ((BINDSTATUS_COOKIE_STATE_PROMPT + 1)); BINDSTATUS_COOKIE_STATE_DOWNGRADE = ((BINDSTATUS_COOKIE_STATE_LEASH + 1)); BINDSTATUS_POLICY_HREF = ((BINDSTATUS_COOKIE_STATE_DOWNGRADE + 1)); BINDSTATUS_P3P_HEADER = ((BINDSTATUS_POLICY_HREF + 1)); BINDSTATUS_SESSION_COOKIE_RECEIVED = ((BINDSTATUS_P3P_HEADER + 1)); BINDSTATUS_PERSISTENT_COOKIE_RECEIVED = ((BINDSTATUS_SESSION_COOKIE_RECEIVED + 1)); BINDSTATUS_SESSION_COOKIES_ALLOWED = ((BINDSTATUS_PERSISTENT_COOKIE_RECEIVED + 1)); BINDSTATUS_CACHECONTROL = ((BINDSTATUS_SESSION_COOKIES_ALLOWED + 1)); BINDSTATUS_CONTENTDISPOSITIONFILENAME = ((BINDSTATUS_CACHECONTROL + 1)); BINDSTATUS_MIMETEXTPLAINMISMATCH = ((BINDSTATUS_CONTENTDISPOSITIONFILENAME + 1)); BINDSTATUS_PUBLISHERAVAILABLE = ((BINDSTATUS_MIMETEXTPLAINMISMATCH + 1)); BINDSTATUS_DISPLAYNAMEAVAILABLE = ((BINDSTATUS_PUBLISHERAVAILABLE + 1)); BINDSTATUS_SSLUX_NAVBLOCKED = ((BINDSTATUS_DISPLAYNAMEAVAILABLE + 1)); BINDSTATUS_SERVER_MIMETYPEAVAILABLE = ((BINDSTATUS_SSLUX_NAVBLOCKED + 1)); BINDSTATUS_SNIFFED_CLASSIDAVAILABLE = ((BINDSTATUS_SERVER_MIMETYPEAVAILABLE + 1)); BINDSTATUS_64BIT_PROGRESS = ((BINDSTATUS_SNIFFED_CLASSIDAVAILABLE + 1)); BINDSTATUS_LAST = BINDSTATUS_64BIT_PROGRESS; BINDSTATUS_RESERVED_0 = ((BINDSTATUS_LAST + 1)); BINDSTATUS_RESERVED_1 = ((BINDSTATUS_RESERVED_0 + 1)); BINDSTATUS_RESERVED_2 = ((BINDSTATUS_RESERVED_1 + 1)); BINDSTATUS_RESERVED_3 = ((BINDSTATUS_RESERVED_2 + 1)); BINDSTATUS_RESERVED_4 = ((BINDSTATUS_RESERVED_3 + 1)); BINDSTATUS_RESERVED_5 = ((BINDSTATUS_RESERVED_4 + 1)); BINDSTATUS_RESERVED_6 = ((BINDSTATUS_RESERVED_5 + 1)); BINDSTATUS_RESERVED_7 = ((BINDSTATUS_RESERVED_6 + 1)); BINDSTATUS_RESERVED_8 = ((BINDSTATUS_RESERVED_7 + 1)); BINDSTATUS_RESERVED_9 = ((BINDSTATUS_RESERVED_8 + 1)); BINDSTATUS_RESERVED_A = ((BINDSTATUS_RESERVED_9 + 1)); BINDSTATUS_RESERVED_B = ((BINDSTATUS_RESERVED_A + 1)); BINDSTATUS_RESERVED_C = ((BINDSTATUS_RESERVED_B + 1)); BINDSTATUS_RESERVED_D = ((BINDSTATUS_RESERVED_C + 1)); BINDSTATUS_RESERVED_E = ((BINDSTATUS_RESERVED_D + 1)); BINDSTATUS_RESERVED_F = ((BINDSTATUS_RESERVED_E + 1)); BINDSTATUS_RESERVED_10 = ((BINDSTATUS_RESERVED_F + 1)); BINDSTATUS_RESERVED_11 = ((BINDSTATUS_RESERVED_10 + 1)); BINDSTATUS_RESERVED_12 = ((BINDSTATUS_RESERVED_11 + 1)); BINDSTATUS_RESERVED_13 = ((BINDSTATUS_RESERVED_12 + 1)); BINDSTATUS_LAST_PRIVATE = BINDSTATUS_RESERVED_13; }
export type IBindStatusCallbackVtbl = struct { QueryInterface: def (*s_IBindStatusCallback, *GUID, **) -> (long); AddRef: def (*s_IBindStatusCallback) -> (ulong); Release: def (*s_IBindStatusCallback) -> (ulong); OnStartBinding: def (*s_IBindStatusCallback, ulong, *s_IBinding) -> (long); GetPriority: def (*s_IBindStatusCallback, *long) -> (long); OnLowResource: def (*s_IBindStatusCallback, ulong) -> (long); OnProgress: def (*s_IBindStatusCallback, ulong, ulong, ulong, *ushort) -> (long); OnStopBinding: def (*s_IBindStatusCallback, long, *ushort) -> (long); GetBindInfo: def (*s_IBindStatusCallback, *ulong, *BINDINFO) -> (long); OnDataAvailable: def (*s_IBindStatusCallback, ulong, ulong, *FORMATETC, *uSTGMEDIUM) -> (long); OnObjectAvailable: def (*s_IBindStatusCallback, *GUID, *s_IUnknown) -> (long); }
export type BINDF2 = enum { BINDF2_DISABLEBASICOVERHTTP = 1; BINDF2_DISABLEAUTOCOOKIEHANDLING = 2; BINDF2_READ_DATA_GREATER_THAN_4GB = 4; BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID = 8; BINDF2_SETDOWNLOADMODE = 32; BINDF2_DISABLE_HTTP_REDIRECT_CACHING = 64; BINDF2_KEEP_CALLBACK_MODULE_LOADED = 128; BINDF2_ALLOW_PROXY_CRED_PROMPT = 256; BINDF2_RESERVED_17 = 512; BINDF2_RESERVED_16 = 1024; BINDF2_RESERVED_15 = 2048; BINDF2_RESERVED_14 = 4096; BINDF2_RESERVED_13 = 8192; BINDF2_RESERVED_12 = 16384; BINDF2_RESERVED_11 = 32768; BINDF2_RESERVED_10 = 65536; BINDF2_RESERVED_F = 131072; BINDF2_RESERVED_E = 262144; BINDF2_RESERVED_D = 524288; BINDF2_RESERVED_C = 1048576; BINDF2_RESERVED_B = 2097152; BINDF2_RESERVED_A = 4194304; BINDF2_RESERVED_9 = 8388608; BINDF2_RESERVED_8 = 16777216; BINDF2_RESERVED_7 = 33554432; BINDF2_RESERVED_6 = 67108864; BINDF2_RESERVED_5 = 134217728; BINDF2_RESERVED_4 = 268435456; BINDF2_RESERVED_3 = 536870912; BINDF2_RESERVED_2 = 1073741824; BINDF2_RESERVED_1; }
export type IBindStatusCallbackExVtbl = struct { QueryInterface: def (*s_IBindStatusCallbackEx, *GUID, **) -> (long); AddRef: def (*s_IBindStatusCallbackEx) -> (ulong); Release: def (*s_IBindStatusCallbackEx) -> (ulong); OnStartBinding: def (*s_IBindStatusCallbackEx, ulong, *s_IBinding) -> (long); GetPriority: def (*s_IBindStatusCallbackEx, *long) -> (long); OnLowResource: def (*s_IBindStatusCallbackEx, ulong) -> (long); OnProgress: def (*s_IBindStatusCallbackEx, ulong, ulong, ulong, *ushort) -> (long); OnStopBinding: def (*s_IBindStatusCallbackEx, long, *ushort) -> (long); GetBindInfo: def (*s_IBindStatusCallbackEx, *ulong, *BINDINFO) -> (long); OnDataAvailable: def (*s_IBindStatusCallbackEx, ulong, ulong, *FORMATETC, *uSTGMEDIUM) -> (long); OnObjectAvailable: def (*s_IBindStatusCallbackEx, *GUID, *s_IUnknown) -> (long); GetBindInfoEx: def (*s_IBindStatusCallbackEx, *ulong, *BINDINFO, *ulong, *ulong) -> (long); }
export type IAuthenticateVtbl = struct { QueryInterface: def (*s_IAuthenticate, *GUID, **) -> (long); AddRef: def (*s_IAuthenticate) -> (ulong); Release: def (*s_IAuthenticate) -> (ulong); Authenticate: def (*s_IAuthenticate, **s_HWND__, **ushort, **ushort) -> (long); }
export type AUTHENTICATEF = enum { AUTHENTICATEF_PROXY = 1; AUTHENTICATEF_BASIC = 2; AUTHENTICATEF_HTTP = 4; }
export type AUTHENTICATEINFO = struct { dwFlags: ulong; dwReserved: ulong; }
export type IAuthenticateExVtbl = struct { QueryInterface: def (*s_IAuthenticateEx, *GUID, **) -> (long); AddRef: def (*s_IAuthenticateEx) -> (ulong); Release: def (*s_IAuthenticateEx) -> (ulong); Authenticate: def (*s_IAuthenticateEx, **s_HWND__, **ushort, **ushort) -> (long); AuthenticateEx: def (*s_IAuthenticateEx, **s_HWND__, **ushort, **ushort, *AUTHENTICATEINFO) -> (long); }
export type IHttpNegotiateVtbl = struct { QueryInterface: def (*s_IHttpNegotiate, *GUID, **) -> (long); AddRef: def (*s_IHttpNegotiate) -> (ulong); Release: def (*s_IHttpNegotiate) -> (ulong); BeginningTransaction: def (*s_IHttpNegotiate, *ushort, *ushort, ulong, **ushort) -> (long); OnResponse: def (*s_IHttpNegotiate, ulong, *ushort, *ushort, **ushort) -> (long); }
export type IHttpNegotiate2Vtbl = struct { QueryInterface: def (*s_IHttpNegotiate2, *GUID, **) -> (long); AddRef: def (*s_IHttpNegotiate2) -> (ulong); Release: def (*s_IHttpNegotiate2) -> (ulong); BeginningTransaction: def (*s_IHttpNegotiate2, *ushort, *ushort, ulong, **ushort) -> (long); OnResponse: def (*s_IHttpNegotiate2, ulong, *ushort, *ushort, **ushort) -> (long); GetRootSecurityId: def (*s_IHttpNegotiate2, *char, *ulong, uint64) -> (long); }
export type IHttpNegotiate3Vtbl = struct { QueryInterface: def (*s_IHttpNegotiate3, *GUID, **) -> (long); AddRef: def (*s_IHttpNegotiate3) -> (ulong); Release: def (*s_IHttpNegotiate3) -> (ulong); BeginningTransaction: def (*s_IHttpNegotiate3, *ushort, *ushort, ulong, **ushort) -> (long); OnResponse: def (*s_IHttpNegotiate3, ulong, *ushort, *ushort, **ushort) -> (long); GetRootSecurityId: def (*s_IHttpNegotiate3, *char, *ulong, uint64) -> (long); GetSerializedClientCertContext: def (*s_IHttpNegotiate3, **char, *ulong) -> (long); }
export type IWinInetFileStreamVtbl = struct { QueryInterface: def (*s_IWinInetFileStream, *GUID, **) -> (long); AddRef: def (*s_IWinInetFileStream) -> (ulong); Release: def (*s_IWinInetFileStream) -> (ulong); SetHandleForUnlock: def (*s_IWinInetFileStream, uint64, uint64) -> (long); SetDeleteFile: def (*s_IWinInetFileStream, uint64) -> (long); }
export type IWindowForBindingUIVtbl = struct { QueryInterface: def (*s_IWindowForBindingUI, *GUID, **) -> (long); AddRef: def (*s_IWindowForBindingUI) -> (ulong); Release: def (*s_IWindowForBindingUI) -> (ulong); GetWindow: def (*s_IWindowForBindingUI, *GUID, **s_HWND__) -> (long); }
export type CIP_STATUS = enum { CIP_DISK_FULL = 0; CIP_ACCESS_DENIED = ((CIP_DISK_FULL + 1)); CIP_NEWER_VERSION_EXISTS = ((CIP_ACCESS_DENIED + 1)); CIP_OLDER_VERSION_EXISTS = ((CIP_NEWER_VERSION_EXISTS + 1)); CIP_NAME_CONFLICT = ((CIP_OLDER_VERSION_EXISTS + 1)); CIP_TRUST_VERIFICATION_COMPONENT_MISSING = ((CIP_NAME_CONFLICT + 1)); CIP_EXE_SELF_REGISTERATION_TIMEOUT = ((CIP_TRUST_VERIFICATION_COMPONENT_MISSING + 1)); CIP_UNSAFE_TO_ABORT = ((CIP_EXE_SELF_REGISTERATION_TIMEOUT + 1)); CIP_NEED_REBOOT = ((CIP_UNSAFE_TO_ABORT + 1)); CIP_NEED_REBOOT_UI_PERMISSION = ((CIP_NEED_REBOOT + 1)); }
export type ICodeInstallVtbl = struct { QueryInterface: def (*s_ICodeInstall, *GUID, **) -> (long); AddRef: def (*s_ICodeInstall) -> (ulong); Release: def (*s_ICodeInstall) -> (ulong); GetWindow: def (*s_ICodeInstall, *GUID, **s_HWND__) -> (long); OnCodeInstallProblem: def (*s_ICodeInstall, ulong, *ushort, *ushort, ulong) -> (long); }
export type Uri_PROPERTY = enum { Uri_PROPERTY_ABSOLUTE_URI = 0; Uri_PROPERTY_STRING_START = Uri_PROPERTY_ABSOLUTE_URI; Uri_PROPERTY_AUTHORITY = 1; Uri_PROPERTY_DISPLAY_URI = 2; Uri_PROPERTY_DOMAIN = 3; Uri_PROPERTY_EXTENSION = 4; Uri_PROPERTY_FRAGMENT = 5; Uri_PROPERTY_HOST = 6; Uri_PROPERTY_PASSWORD = 7; Uri_PROPERTY_PATH = 8; Uri_PROPERTY_PATH_AND_QUERY = 9; Uri_PROPERTY_QUERY = 10; Uri_PROPERTY_RAW_URI = 11; Uri_PROPERTY_SCHEME_NAME = 12; Uri_PROPERTY_USER_INFO = 13; Uri_PROPERTY_USER_NAME = 14; Uri_PROPERTY_STRING_LAST = Uri_PROPERTY_USER_NAME; Uri_PROPERTY_HOST_TYPE = 15; Uri_PROPERTY_DWORD_START = Uri_PROPERTY_HOST_TYPE; Uri_PROPERTY_PORT = 16; Uri_PROPERTY_SCHEME = 17; Uri_PROPERTY_ZONE = 18; Uri_PROPERTY_DWORD_LAST = Uri_PROPERTY_ZONE; }
export type Uri_HOST_TYPE = enum { Uri_HOST_UNKNOWN = 0; Uri_HOST_DNS = ((Uri_HOST_UNKNOWN + 1)); Uri_HOST_IPV4 = ((Uri_HOST_DNS + 1)); Uri_HOST_IPV6 = ((Uri_HOST_IPV4 + 1)); Uri_HOST_IDN = ((Uri_HOST_IPV6 + 1)); }
export type IUriVtbl = struct { QueryInterface: def (*s_IUri, *GUID, **) -> (long); AddRef: def (*s_IUri) -> (ulong); Release: def (*s_IUri) -> (ulong); GetPropertyBSTR: def (*s_IUri, Uri_PROPERTY, **ushort, ulong) -> (long); GetPropertyLength: def (*s_IUri, Uri_PROPERTY, *ulong, ulong) -> (long); GetPropertyDWORD: def (*s_IUri, Uri_PROPERTY, *ulong, ulong) -> (long); HasProperty: def (*s_IUri, Uri_PROPERTY, *int) -> (long); GetAbsoluteUri: def (*s_IUri, **ushort) -> (long); GetAuthority: def (*s_IUri, **ushort) -> (long); GetDisplayUri: def (*s_IUri, **ushort) -> (long); GetDomain: def (*s_IUri, **ushort) -> (long); GetExtension: def (*s_IUri, **ushort) -> (long); GetFragment: def (*s_IUri, **ushort) -> (long); GetHost: def (*s_IUri, **ushort) -> (long); GetPassword: def (*s_IUri, **ushort) -> (long); GetPath: def (*s_IUri, **ushort) -> (long); GetPathAndQuery: def (*s_IUri, **ushort) -> (long); GetQuery: def (*s_IUri, **ushort) -> (long); GetRawUri: def (*s_IUri, **ushort) -> (long); GetSchemeName: def (*s_IUri, **ushort) -> (long); GetUserInfo: def (*s_IUri, **ushort) -> (long); GetUserNameA: def (*s_IUri, **ushort) -> (long); GetHostType: def (*s_IUri, *ulong) -> (long); GetPort: def (*s_IUri, *ulong) -> (long); GetScheme: def (*s_IUri, *ulong) -> (long); GetZone: def (*s_IUri, *ulong) -> (long); GetProperties: def (*s_IUri, *ulong) -> (long); IsEqual: def (*s_IUri, *s_IUri, *int) -> (long); }
export type IUriContainerVtbl = struct { QueryInterface: def (*s_IUriContainer, *GUID, **) -> (long); AddRef: def (*s_IUriContainer) -> (ulong); Release: def (*s_IUriContainer) -> (ulong); GetIUri: def (*s_IUriContainer, **s_IUri) -> (long); }
export type IUriBuilderVtbl = struct { QueryInterface: def (*s_IUriBuilder, *GUID, **) -> (long); AddRef: def (*s_IUriBuilder) -> (ulong); Release: def (*s_IUriBuilder) -> (ulong); CreateUriSimple: def (*s_IUriBuilder, ulong, uint64, **s_IUri) -> (long); CreateUri: def (*s_IUriBuilder, ulong, ulong, uint64, **s_IUri) -> (long); CreateUriWithFlags: def (*s_IUriBuilder, ulong, ulong, ulong, uint64, **s_IUri) -> (long); GetIUri: def (*s_IUriBuilder, **s_IUri) -> (long); SetIUri: def (*s_IUriBuilder, *s_IUri) -> (long); GetFragment: def (*s_IUriBuilder, *ulong, **ushort) -> (long); GetHost: def (*s_IUriBuilder, *ulong, **ushort) -> (long); GetPassword: def (*s_IUriBuilder, *ulong, **ushort) -> (long); GetPath: def (*s_IUriBuilder, *ulong, **ushort) -> (long); GetPort: def (*s_IUriBuilder, *int, *ulong) -> (long); GetQuery: def (*s_IUriBuilder, *ulong, **ushort) -> (long); GetSchemeName: def (*s_IUriBuilder, *ulong, **ushort) -> (long); GetUserNameA: def (*s_IUriBuilder, *ulong, **ushort) -> (long); SetFragment: def (*s_IUriBuilder, *ushort) -> (long); SetHost: def (*s_IUriBuilder, *ushort) -> (long); SetPassword: def (*s_IUriBuilder, *ushort) -> (long); SetPath: def (*s_IUriBuilder, *ushort) -> (long); SetPortA: def (*s_IUriBuilder, int, ulong) -> (long); SetQuery: def (*s_IUriBuilder, *ushort) -> (long); SetSchemeName: def (*s_IUriBuilder, *ushort) -> (long); SetUserName: def (*s_IUriBuilder, *ushort) -> (long); RemoveProperties: def (*s_IUriBuilder, ulong) -> (long); HasBeenModified: def (*s_IUriBuilder, *int) -> (long); }
export type IUriBuilderFactoryVtbl = struct { QueryInterface: def (*s_IUriBuilderFactory, *GUID, **) -> (long); AddRef: def (*s_IUriBuilderFactory) -> (ulong); Release: def (*s_IUriBuilderFactory) -> (ulong); CreateIUriBuilder: def (*s_IUriBuilderFactory, ulong, uint64, **s_IUriBuilder) -> (long); CreateInitializedIUriBuilder: def (*s_IUriBuilderFactory, ulong, uint64, **s_IUriBuilder) -> (long); }
export type IWinInetInfoVtbl = struct { QueryInterface: def (*s_IWinInetInfo, *GUID, **) -> (long); AddRef: def (*s_IWinInetInfo) -> (ulong); Release: def (*s_IWinInetInfo) -> (ulong); QueryOption: def (*s_IWinInetInfo, ulong, *, *ulong) -> (long); }
export type IHttpSecurityVtbl = struct { QueryInterface: def (*s_IHttpSecurity, *GUID, **) -> (long); AddRef: def (*s_IHttpSecurity) -> (ulong); Release: def (*s_IHttpSecurity) -> (ulong); GetWindow: def (*s_IHttpSecurity, *GUID, **s_HWND__) -> (long); OnSecurityProblem: def (*s_IHttpSecurity, ulong) -> (long); }
export type IWinInetHttpInfoVtbl = struct { QueryInterface: def (*s_IWinInetHttpInfo, *GUID, **) -> (long); AddRef: def (*s_IWinInetHttpInfo) -> (ulong); Release: def (*s_IWinInetHttpInfo) -> (ulong); QueryOption: def (*s_IWinInetHttpInfo, ulong, *, *ulong) -> (long); QueryInfo: def (*s_IWinInetHttpInfo, ulong, *, *ulong, *ulong, *ulong) -> (long); }
export type IWinInetHttpTimeoutsVtbl = struct { QueryInterface: def (*s_IWinInetHttpTimeouts, *GUID, **) -> (long); AddRef: def (*s_IWinInetHttpTimeouts) -> (ulong); Release: def (*s_IWinInetHttpTimeouts) -> (ulong); GetRequestTimeouts: def (*s_IWinInetHttpTimeouts, *ulong, *ulong, *ulong) -> (long); }
export type IWinInetCacheHintsVtbl = struct { QueryInterface: def (*s_IWinInetCacheHints, *GUID, **) -> (long); AddRef: def (*s_IWinInetCacheHints) -> (ulong); Release: def (*s_IWinInetCacheHints) -> (ulong); SetCacheExtension: def (*s_IWinInetCacheHints, *ushort, *, *ulong, *ulong, *ulong) -> (long); }
export type IWinInetCacheHints2Vtbl = struct { QueryInterface: def (*s_IWinInetCacheHints2, *GUID, **) -> (long); AddRef: def (*s_IWinInetCacheHints2) -> (ulong); Release: def (*s_IWinInetCacheHints2) -> (ulong); SetCacheExtension: def (*s_IWinInetCacheHints2, *ushort, *, *ulong, *ulong, *ulong) -> (long); SetCacheExtension2: def (*s_IWinInetCacheHints2, *ushort, *ushort, *ulong, *ulong, *ulong) -> (long); }
export type IBindHostVtbl = struct { QueryInterface: def (*s_IBindHost, *GUID, **) -> (long); AddRef: def (*s_IBindHost) -> (ulong); Release: def (*s_IBindHost) -> (ulong); CreateMoniker: def (*s_IBindHost, *ushort, *s_IBindCtx, **s_IMoniker, ulong) -> (long); MonikerBindToStorage: def (*s_IBindHost, *s_IMoniker, *s_IBindCtx, *s_IBindStatusCallback, *GUID, **) -> (long); MonikerBindToObject: def (*s_IBindHost, *s_IMoniker, *s_IBindCtx, *s_IBindStatusCallback, *GUID, **) -> (long); }
export type IInternetVtbl = struct { QueryInterface: def (*s_IInternet, *GUID, **) -> (long); AddRef: def (*s_IInternet) -> (ulong); Release: def (*s_IInternet) -> (ulong); }
export type BINDSTRING = enum { BINDSTRING_HEADERS = 1; BINDSTRING_ACCEPT_MIMES = ((BINDSTRING_HEADERS + 1)); BINDSTRING_EXTRA_URL = ((BINDSTRING_ACCEPT_MIMES + 1)); BINDSTRING_LANGUAGE = ((BINDSTRING_EXTRA_URL + 1)); BINDSTRING_USERNAME = ((BINDSTRING_LANGUAGE + 1)); BINDSTRING_PASSWORD = ((BINDSTRING_USERNAME + 1)); BINDSTRING_UA_PIXELS = ((BINDSTRING_PASSWORD + 1)); BINDSTRING_UA_COLOR = ((BINDSTRING_UA_PIXELS + 1)); BINDSTRING_OS = ((BINDSTRING_UA_COLOR + 1)); BINDSTRING_USER_AGENT = ((BINDSTRING_OS + 1)); BINDSTRING_ACCEPT_ENCODINGS = ((BINDSTRING_USER_AGENT + 1)); BINDSTRING_POST_COOKIE = ((BINDSTRING_ACCEPT_ENCODINGS + 1)); BINDSTRING_POST_DATA_MIME = ((BINDSTRING_POST_COOKIE + 1)); BINDSTRING_URL = ((BINDSTRING_POST_DATA_MIME + 1)); BINDSTRING_IID = ((BINDSTRING_URL + 1)); BINDSTRING_FLAG_BIND_TO_OBJECT = ((BINDSTRING_IID + 1)); BINDSTRING_PTR_BIND_CONTEXT = ((BINDSTRING_FLAG_BIND_TO_OBJECT + 1)); BINDSTRING_XDR_ORIGIN = ((BINDSTRING_PTR_BIND_CONTEXT + 1)); BINDSTRING_DOWNLOADPATH = ((BINDSTRING_XDR_ORIGIN + 1)); BINDSTRING_ROOTDOC_URL = ((BINDSTRING_DOWNLOADPATH + 1)); BINDSTRING_INITIAL_FILENAME = ((BINDSTRING_ROOTDOC_URL + 1)); BINDSTRING_PROXY_USERNAME = ((BINDSTRING_INITIAL_FILENAME + 1)); BINDSTRING_PROXY_PASSWORD = ((BINDSTRING_PROXY_USERNAME + 1)); BINDSTRING_ENTERPRISE_ID = ((BINDSTRING_PROXY_PASSWORD + 1)); BINDSTRING_DOC_URL = ((BINDSTRING_ENTERPRISE_ID + 1)); BINDSTRING_SAMESITE_COOKIE_LEVEL = ((BINDSTRING_DOC_URL + 1)); }
export type IInternetBindInfoVtbl = struct { QueryInterface: def (*s_IInternetBindInfo, *GUID, **) -> (long); AddRef: def (*s_IInternetBindInfo) -> (ulong); Release: def (*s_IInternetBindInfo) -> (ulong); GetBindInfo: def (*s_IInternetBindInfo, *ulong, *BINDINFO) -> (long); GetBindString: def (*s_IInternetBindInfo, ulong, **ushort, ulong, *ulong) -> (long); }
export type IInternetBindInfoExVtbl = struct { QueryInterface: def (*s_IInternetBindInfoEx, *GUID, **) -> (long); AddRef: def (*s_IInternetBindInfoEx) -> (ulong); Release: def (*s_IInternetBindInfoEx) -> (ulong); GetBindInfo: def (*s_IInternetBindInfoEx, *ulong, *BINDINFO) -> (long); GetBindString: def (*s_IInternetBindInfoEx, ulong, **ushort, ulong, *ulong) -> (long); GetBindInfoEx: def (*s_IInternetBindInfoEx, *ulong, *BINDINFO, *ulong, *ulong) -> (long); }
export type PI_FLAGS = enum { PI_PARSE_URL = 1; PI_FILTER_MODE = 2; PI_FORCE_ASYNC = 4; PI_USE_WORKERTHREAD = 8; PI_MIMEVERIFICATION = 16; PI_CLSIDLOOKUP = 32; PI_DATAPROGRESS = 64; PI_SYNCHRONOUS = 128; PI_APARTMENTTHREADED = 256; PI_CLASSINSTALL = 512; PI_PASSONBINDCTX = 8192; PI_NOMIMEHANDLER = 32768; PI_LOADAPPDIRECT = 16384; PD_FORCE_SWITCH = 65536; PI_PREFERDEFAULTHANDLER = 131072; }
export type PROTOCOLDATA = struct { grfFlags: ulong; dwState: ulong; pData: *; cbData: ulong; }
export type StartParam = struct { iid: GUID; pIBindCtx: *s_IBindCtx; pItf: *s_IUnknown; }
export type IInternetProtocolRootVtbl = struct { QueryInterface: def (*s_IInternetProtocolRoot, *GUID, **) -> (long); AddRef: def (*s_IInternetProtocolRoot) -> (ulong); Release: def (*s_IInternetProtocolRoot) -> (ulong); Start: def (*s_IInternetProtocolRoot, *ushort, *s_IInternetProtocolSink, *s_IInternetBindInfo, ulong, uint64) -> (long); Continue: def (*s_IInternetProtocolRoot, *PROTOCOLDATA) -> (long); Abort: def (*s_IInternetProtocolRoot, long, ulong) -> (long); Terminate: def (*s_IInternetProtocolRoot, ulong) -> (long); Suspend: def (*s_IInternetProtocolRoot) -> (long); Resume: def (*s_IInternetProtocolRoot) -> (long); }
export type IInternetProtocolVtbl = struct { QueryInterface: def (*s_IInternetProtocol, *GUID, **) -> (long); AddRef: def (*s_IInternetProtocol) -> (ulong); Release: def (*s_IInternetProtocol) -> (ulong); Start: def (*s_IInternetProtocol, *ushort, *s_IInternetProtocolSink, *s_IInternetBindInfo, ulong, uint64) -> (long); Continue: def (*s_IInternetProtocol, *PROTOCOLDATA) -> (long); Abort: def (*s_IInternetProtocol, long, ulong) -> (long); Terminate: def (*s_IInternetProtocol, ulong) -> (long); Suspend: def (*s_IInternetProtocol) -> (long); Resume: def (*s_IInternetProtocol) -> (long); Read: def (*s_IInternetProtocol, *, ulong, *ulong) -> (long); Seek: def (*s_IInternetProtocol, LARGE_INTEGER, ulong, *ULARGE_INTEGER) -> (long); LockRequest: def (*s_IInternetProtocol, ulong) -> (long); UnlockRequest: def (*s_IInternetProtocol) -> (long); }
export type IInternetProtocolExVtbl = struct { QueryInterface: def (*s_IInternetProtocolEx, *GUID, **) -> (long); AddRef: def (*s_IInternetProtocolEx) -> (ulong); Release: def (*s_IInternetProtocolEx) -> (ulong); Start: def (*s_IInternetProtocolEx, *ushort, *s_IInternetProtocolSink, *s_IInternetBindInfo, ulong, uint64) -> (long); Continue: def (*s_IInternetProtocolEx, *PROTOCOLDATA) -> (long); Abort: def (*s_IInternetProtocolEx, long, ulong) -> (long); Terminate: def (*s_IInternetProtocolEx, ulong) -> (long); Suspend: def (*s_IInternetProtocolEx) -> (long); Resume: def (*s_IInternetProtocolEx) -> (long); Read: def (*s_IInternetProtocolEx, *, ulong, *ulong) -> (long); Seek: def (*s_IInternetProtocolEx, LARGE_INTEGER, ulong, *ULARGE_INTEGER) -> (long); LockRequest: def (*s_IInternetProtocolEx, ulong) -> (long); UnlockRequest: def (*s_IInternetProtocolEx) -> (long); StartEx: def (*s_IInternetProtocolEx, *s_IUri, *s_IInternetProtocolSink, *s_IInternetBindInfo, ulong, uint64) -> (long); }
export type IInternetProtocolSinkVtbl = struct { QueryInterface: def (*s_IInternetProtocolSink, *GUID, **) -> (long); AddRef: def (*s_IInternetProtocolSink) -> (ulong); Release: def (*s_IInternetProtocolSink) -> (ulong); Switch: def (*s_IInternetProtocolSink, *PROTOCOLDATA) -> (long); ReportProgress: def (*s_IInternetProtocolSink, ulong, *ushort) -> (long); ReportData: def (*s_IInternetProtocolSink, ulong, ulong, ulong) -> (long); ReportResult: def (*s_IInternetProtocolSink, long, ulong, *ushort) -> (long); }
export type IInternetProtocolSinkStackableVtbl = struct { QueryInterface: def (*s_IInternetProtocolSinkStackable, *GUID, **) -> (long); AddRef: def (*s_IInternetProtocolSinkStackable) -> (ulong); Release: def (*s_IInternetProtocolSinkStackable) -> (ulong); SwitchSink: def (*s_IInternetProtocolSinkStackable, *s_IInternetProtocolSink) -> (long); CommitSwitch: def (*s_IInternetProtocolSinkStackable) -> (long); RollbackSwitch: def (*s_IInternetProtocolSinkStackable) -> (long); }
export type OIBDG_FLAGS = enum { OIBDG_APARTMENTTHREADED = 256; OIBDG_DATAONLY = 4096; }
export type IInternetSessionVtbl = struct { QueryInterface: def (*s_IInternetSession, *GUID, **) -> (long); AddRef: def (*s_IInternetSession) -> (ulong); Release: def (*s_IInternetSession) -> (ulong); RegisterNameSpace: def (*s_IInternetSession, *s_IClassFactory, *GUID, *ushort, ulong, **ushort, ulong) -> (long); UnregisterNameSpace: def (*s_IInternetSession, *s_IClassFactory, *ushort) -> (long); RegisterMimeFilter: def (*s_IInternetSession, *s_IClassFactory, *GUID, *ushort) -> (long); UnregisterMimeFilter: def (*s_IInternetSession, *s_IClassFactory, *ushort) -> (long); CreateBinding: def (*s_IInternetSession, *s_IBindCtx, *ushort, *s_IUnknown, **s_IUnknown, **s_IInternetProtocol, ulong) -> (long); SetSessionOption: def (*s_IInternetSession, ulong, *, ulong, ulong) -> (long); GetSessionOption: def (*s_IInternetSession, ulong, *, *ulong, ulong) -> (long); }
export type IInternetThreadSwitchVtbl = struct { QueryInterface: def (*s_IInternetThreadSwitch, *GUID, **) -> (long); AddRef: def (*s_IInternetThreadSwitch) -> (ulong); Release: def (*s_IInternetThreadSwitch) -> (ulong); Prepare: def (*s_IInternetThreadSwitch) -> (long); Continue: def (*s_IInternetThreadSwitch) -> (long); }
export type IInternetPriorityVtbl = struct { QueryInterface: def (*s_IInternetPriority, *GUID, **) -> (long); AddRef: def (*s_IInternetPriority) -> (ulong); Release: def (*s_IInternetPriority) -> (ulong); SetPriority: def (*s_IInternetPriority, long) -> (long); GetPriority: def (*s_IInternetPriority, *long) -> (long); }
export type PARSEACTION = enum { PARSE_CANONICALIZE = 1; PARSE_FRIENDLY = ((PARSE_CANONICALIZE + 1)); PARSE_SECURITY_URL = ((PARSE_FRIENDLY + 1)); PARSE_ROOTDOCUMENT = ((PARSE_SECURITY_URL + 1)); PARSE_DOCUMENT = ((PARSE_ROOTDOCUMENT + 1)); PARSE_ANCHOR = ((PARSE_DOCUMENT + 1)); PARSE_ENCODE_IS_UNESCAPE = ((PARSE_ANCHOR + 1)); PARSE_DECODE_IS_ESCAPE = ((PARSE_ENCODE_IS_UNESCAPE + 1)); PARSE_PATH_FROM_URL = ((PARSE_DECODE_IS_ESCAPE + 1)); PARSE_URL_FROM_PATH = ((PARSE_PATH_FROM_URL + 1)); PARSE_MIME = ((PARSE_URL_FROM_PATH + 1)); PARSE_SERVER = ((PARSE_MIME + 1)); PARSE_SCHEMA = ((PARSE_SERVER + 1)); PARSE_SITE = ((PARSE_SCHEMA + 1)); PARSE_DOMAIN = ((PARSE_SITE + 1)); PARSE_LOCATION = ((PARSE_DOMAIN + 1)); PARSE_SECURITY_DOMAIN = ((PARSE_LOCATION + 1)); PARSE_ESCAPE = ((PARSE_SECURITY_DOMAIN + 1)); PARSE_UNESCAPE = ((PARSE_ESCAPE + 1)); }
export type PSUACTION = enum { PSU_DEFAULT = 1; PSU_SECURITY_URL_ONLY = ((PSU_DEFAULT + 1)); }
export type QUERYOPTION = enum { QUERY_EXPIRATION_DATE = 1; QUERY_TIME_OF_LAST_CHANGE = ((QUERY_EXPIRATION_DATE + 1)); QUERY_CONTENT_ENCODING = ((QUERY_TIME_OF_LAST_CHANGE + 1)); QUERY_CONTENT_TYPE = ((QUERY_CONTENT_ENCODING + 1)); QUERY_REFRESH = ((QUERY_CONTENT_TYPE + 1)); QUERY_RECOMBINE = ((QUERY_REFRESH + 1)); QUERY_CAN_NAVIGATE = ((QUERY_RECOMBINE + 1)); QUERY_USES_NETWORK = ((QUERY_CAN_NAVIGATE + 1)); QUERY_IS_CACHED = ((QUERY_USES_NETWORK + 1)); QUERY_IS_INSTALLEDENTRY = ((QUERY_IS_CACHED + 1)); QUERY_IS_CACHED_OR_MAPPED = ((QUERY_IS_INSTALLEDENTRY + 1)); QUERY_USES_CACHE = ((QUERY_IS_CACHED_OR_MAPPED + 1)); QUERY_IS_SECURE = ((QUERY_USES_CACHE + 1)); QUERY_IS_SAFE = ((QUERY_IS_SECURE + 1)); QUERY_USES_HISTORYFOLDER = ((QUERY_IS_SAFE + 1)); QUERY_IS_CACHED_AND_USABLE_OFFLINE = ((QUERY_USES_HISTORYFOLDER + 1)); }
export type IInternetProtocolInfoVtbl = struct { QueryInterface: def (*s_IInternetProtocolInfo, *GUID, **) -> (long); AddRef: def (*s_IInternetProtocolInfo) -> (ulong); Release: def (*s_IInternetProtocolInfo) -> (ulong); ParseUrl: def (*s_IInternetProtocolInfo, *ushort, PARSEACTION, ulong, *ushort, ulong, *ulong, ulong) -> (long); CombineUrl: def (*s_IInternetProtocolInfo, *ushort, *ushort, ulong, *ushort, ulong, *ulong, ulong) -> (long); CompareUrl: def (*s_IInternetProtocolInfo, *ushort, *ushort, ulong) -> (long); QueryInfo: def (*s_IInternetProtocolInfo, *ushort, QUERYOPTION, ulong, *, ulong, *ulong, ulong) -> (long); }
export type INTERNETFEATURELIST = enum { FEATURE_OBJECT_CACHING = 0; FEATURE_ZONE_ELEVATION = ((FEATURE_OBJECT_CACHING + 1)); FEATURE_MIME_HANDLING = ((FEATURE_ZONE_ELEVATION + 1)); FEATURE_MIME_SNIFFING = ((FEATURE_MIME_HANDLING + 1)); FEATURE_WINDOW_RESTRICTIONS = ((FEATURE_MIME_SNIFFING + 1)); FEATURE_WEBOC_POPUPMANAGEMENT = ((FEATURE_WINDOW_RESTRICTIONS + 1)); FEATURE_BEHAVIORS = ((FEATURE_WEBOC_POPUPMANAGEMENT + 1)); FEATURE_DISABLE_MK_PROTOCOL = ((FEATURE_BEHAVIORS + 1)); FEATURE_LOCALMACHINE_LOCKDOWN = ((FEATURE_DISABLE_MK_PROTOCOL + 1)); FEATURE_SECURITYBAND = ((FEATURE_LOCALMACHINE_LOCKDOWN + 1)); FEATURE_RESTRICT_ACTIVEXINSTALL = ((FEATURE_SECURITYBAND + 1)); FEATURE_VALIDATE_NAVIGATE_URL = ((FEATURE_RESTRICT_ACTIVEXINSTALL + 1)); FEATURE_RESTRICT_FILEDOWNLOAD = ((FEATURE_VALIDATE_NAVIGATE_URL + 1)); FEATURE_ADDON_MANAGEMENT = ((FEATURE_RESTRICT_FILEDOWNLOAD + 1)); FEATURE_PROTOCOL_LOCKDOWN = ((FEATURE_ADDON_MANAGEMENT + 1)); FEATURE_HTTP_USERNAME_PASSWORD_DISABLE = ((FEATURE_PROTOCOL_LOCKDOWN + 1)); FEATURE_SAFE_BINDTOOBJECT = ((FEATURE_HTTP_USERNAME_PASSWORD_DISABLE + 1)); FEATURE_UNC_SAVEDFILECHECK = ((FEATURE_SAFE_BINDTOOBJECT + 1)); FEATURE_GET_URL_DOM_FILEPATH_UNENCODED = ((FEATURE_UNC_SAVEDFILECHECK + 1)); FEATURE_TABBED_BROWSING = ((FEATURE_GET_URL_DOM_FILEPATH_UNENCODED + 1)); FEATURE_SSLUX = ((FEATURE_TABBED_BROWSING + 1)); FEATURE_DISABLE_NAVIGATION_SOUNDS = ((FEATURE_SSLUX + 1)); FEATURE_DISABLE_LEGACY_COMPRESSION = ((FEATURE_DISABLE_NAVIGATION_SOUNDS + 1)); FEATURE_FORCE_ADDR_AND_STATUS = ((FEATURE_DISABLE_LEGACY_COMPRESSION + 1)); FEATURE_XMLHTTP = ((FEATURE_FORCE_ADDR_AND_STATUS + 1)); FEATURE_DISABLE_TELNET_PROTOCOL = ((FEATURE_XMLHTTP + 1)); FEATURE_FEEDS = ((FEATURE_DISABLE_TELNET_PROTOCOL + 1)); FEATURE_BLOCK_INPUT_PROMPTS = ((FEATURE_FEEDS + 1)); FEATURE_ENTRY_COUNT = ((FEATURE_BLOCK_INPUT_PROMPTS + 1)); }
export type IInternetSecurityMgrSiteVtbl = struct { QueryInterface: def (*s_IInternetSecurityMgrSite, *GUID, **) -> (long); AddRef: def (*s_IInternetSecurityMgrSite) -> (ulong); Release: def (*s_IInternetSecurityMgrSite) -> (ulong); GetWindow: def (*s_IInternetSecurityMgrSite, **s_HWND__) -> (long); EnableModeless: def (*s_IInternetSecurityMgrSite, int) -> (long); }
export type PUAF = enum { PUAF_DEFAULT = 0; PUAF_NOUI = 1; PUAF_ISFILE = 2; PUAF_WARN_IF_DENIED = 4; PUAF_FORCEUI_FOREGROUND = 8; PUAF_CHECK_TIFS = 16; PUAF_DONTCHECKBOXINDIALOG = 32; PUAF_TRUSTED = 64; PUAF_ACCEPT_WILDCARD_SCHEME = 128; PUAF_ENFORCERESTRICTED = 256; PUAF_NOSAVEDFILECHECK = 512; PUAF_REQUIRESAVEDFILECHECK = 1024; PUAF_DONT_USE_CACHE = 4096; PUAF_RESERVED1 = 8192; PUAF_RESERVED2 = 16384; PUAF_LMZ_UNLOCKED = 65536; PUAF_LMZ_LOCKED = 131072; PUAF_DEFAULTZONEPOL = 262144; PUAF_NPL_USE_LOCKED_IF_RESTRICTED = 524288; PUAF_NOUIIFLOCKED = 1048576; PUAF_DRAGPROTOCOLCHECK = 2097152; }
export type PUAFOUT = enum { PUAFOUT_DEFAULT = 0; PUAFOUT_ISLOCKZONEPOLICY = 1; }
export type SZM_FLAGS = enum { SZM_CREATE = 0; SZM_DELETE = 1; }
export type IInternetSecurityManagerVtbl = struct { QueryInterface: def (*s_IInternetSecurityManager, *GUID, **) -> (long); AddRef: def (*s_IInternetSecurityManager) -> (ulong); Release: def (*s_IInternetSecurityManager) -> (ulong); SetSecuritySite: def (*s_IInternetSecurityManager, *s_IInternetSecurityMgrSite) -> (long); GetSecuritySite: def (*s_IInternetSecurityManager, **s_IInternetSecurityMgrSite) -> (long); MapUrlToZone: def (*s_IInternetSecurityManager, *ushort, *ulong, ulong) -> (long); GetSecurityId: def (*s_IInternetSecurityManager, *ushort, *char, *ulong, uint64) -> (long); ProcessUrlAction: def (*s_IInternetSecurityManager, *ushort, ulong, *char, ulong, *char, ulong, ulong, ulong) -> (long); QueryCustomPolicy: def (*s_IInternetSecurityManager, *ushort, *GUID, **char, *ulong, *char, ulong, ulong) -> (long); SetZoneMapping: def (*s_IInternetSecurityManager, ulong, *ushort, ulong) -> (long); GetZoneMappings: def (*s_IInternetSecurityManager, ulong, **s_IEnumString, ulong) -> (long); }
export type IInternetSecurityManagerExVtbl = struct { QueryInterface: def (*s_IInternetSecurityManagerEx, *GUID, **) -> (long); AddRef: def (*s_IInternetSecurityManagerEx) -> (ulong); Release: def (*s_IInternetSecurityManagerEx) -> (ulong); SetSecuritySite: def (*s_IInternetSecurityManagerEx, *s_IInternetSecurityMgrSite) -> (long); GetSecuritySite: def (*s_IInternetSecurityManagerEx, **s_IInternetSecurityMgrSite) -> (long); MapUrlToZone: def (*s_IInternetSecurityManagerEx, *ushort, *ulong, ulong) -> (long); GetSecurityId: def (*s_IInternetSecurityManagerEx, *ushort, *char, *ulong, uint64) -> (long); ProcessUrlAction: def (*s_IInternetSecurityManagerEx, *ushort, ulong, *char, ulong, *char, ulong, ulong, ulong) -> (long); QueryCustomPolicy: def (*s_IInternetSecurityManagerEx, *ushort, *GUID, **char, *ulong, *char, ulong, ulong) -> (long); SetZoneMapping: def (*s_IInternetSecurityManagerEx, ulong, *ushort, ulong) -> (long); GetZoneMappings: def (*s_IInternetSecurityManagerEx, ulong, **s_IEnumString, ulong) -> (long); ProcessUrlActionEx: def (*s_IInternetSecurityManagerEx, *ushort, ulong, *char, ulong, *char, ulong, ulong, ulong, *ulong) -> (long); }
export type IInternetSecurityManagerEx2Vtbl = struct { QueryInterface: def (*s_IInternetSecurityManagerEx2, *GUID, **) -> (long); AddRef: def (*s_IInternetSecurityManagerEx2) -> (ulong); Release: def (*s_IInternetSecurityManagerEx2) -> (ulong); SetSecuritySite: def (*s_IInternetSecurityManagerEx2, *s_IInternetSecurityMgrSite) -> (long); GetSecuritySite: def (*s_IInternetSecurityManagerEx2, **s_IInternetSecurityMgrSite) -> (long); MapUrlToZone: def (*s_IInternetSecurityManagerEx2, *ushort, *ulong, ulong) -> (long); GetSecurityId: def (*s_IInternetSecurityManagerEx2, *ushort, *char, *ulong, uint64) -> (long); ProcessUrlAction: def (*s_IInternetSecurityManagerEx2, *ushort, ulong, *char, ulong, *char, ulong, ulong, ulong) -> (long); QueryCustomPolicy: def (*s_IInternetSecurityManagerEx2, *ushort, *GUID, **char, *ulong, *char, ulong, ulong) -> (long); SetZoneMapping: def (*s_IInternetSecurityManagerEx2, ulong, *ushort, ulong) -> (long); GetZoneMappings: def (*s_IInternetSecurityManagerEx2, ulong, **s_IEnumString, ulong) -> (long); ProcessUrlActionEx: def (*s_IInternetSecurityManagerEx2, *ushort, ulong, *char, ulong, *char, ulong, ulong, ulong, *ulong) -> (long); MapUrlToZoneEx2: def (*s_IInternetSecurityManagerEx2, *s_IUri, *ulong, ulong, **ushort, *ulong) -> (long); ProcessUrlActionEx2: def (*s_IInternetSecurityManagerEx2, *s_IUri, ulong, *char, ulong, *char, ulong, ulong, uint64, *ulong) -> (long); GetSecurityIdEx2: def (*s_IInternetSecurityManagerEx2, *s_IUri, *char, *ulong, uint64) -> (long); QueryCustomPolicyEx2: def (*s_IInternetSecurityManagerEx2, *s_IUri, *GUID, **char, *ulong, *char, ulong, uint64) -> (long); }
export type IZoneIdentifierVtbl = struct { QueryInterface: def (*s_IZoneIdentifier, *GUID, **) -> (long); AddRef: def (*s_IZoneIdentifier) -> (ulong); Release: def (*s_IZoneIdentifier) -> (ulong); GetId: def (*s_IZoneIdentifier, *ulong) -> (long); SetId: def (*s_IZoneIdentifier, ulong) -> (long); Remove: def (*s_IZoneIdentifier) -> (long); }
export type IZoneIdentifier2Vtbl = struct { QueryInterface: def (*s_IZoneIdentifier2, *GUID, **) -> (long); AddRef: def (*s_IZoneIdentifier2) -> (ulong); Release: def (*s_IZoneIdentifier2) -> (ulong); GetId: def (*s_IZoneIdentifier2, *ulong) -> (long); SetId: def (*s_IZoneIdentifier2, ulong) -> (long); Remove: def (*s_IZoneIdentifier2) -> (long); GetLastWriterPackageFamilyName: def (*s_IZoneIdentifier2, **ushort) -> (long); SetLastWriterPackageFamilyName: def (*s_IZoneIdentifier2, *ushort) -> (long); RemoveLastWriterPackageFamilyName: def (*s_IZoneIdentifier2) -> (long); GetAppZoneId: def (*s_IZoneIdentifier2, *ulong) -> (long); SetAppZoneId: def (*s_IZoneIdentifier2, ulong) -> (long); RemoveAppZoneId: def (*s_IZoneIdentifier2) -> (long); }
export type IInternetHostSecurityManagerVtbl = struct { QueryInterface: def (*s_IInternetHostSecurityManager, *GUID, **) -> (long); AddRef: def (*s_IInternetHostSecurityManager) -> (ulong); Release: def (*s_IInternetHostSecurityManager) -> (ulong); GetSecurityId: def (*s_IInternetHostSecurityManager, *char, *ulong, uint64) -> (long); ProcessUrlAction: def (*s_IInternetHostSecurityManager, ulong, *char, ulong, *char, ulong, ulong, ulong) -> (long); QueryCustomPolicy: def (*s_IInternetHostSecurityManager, *GUID, **char, *ulong, *char, ulong, ulong) -> (long); }
export type URLZONE = enum { URLZONE_INVALID = (- 1); URLZONE_PREDEFINED_MIN = 0; URLZONE_LOCAL_MACHINE = 0; URLZONE_INTRANET = ((URLZONE_LOCAL_MACHINE + 1)); URLZONE_TRUSTED = ((URLZONE_INTRANET + 1)); URLZONE_INTERNET = ((URLZONE_TRUSTED + 1)); URLZONE_UNTRUSTED = ((URLZONE_INTERNET + 1)); URLZONE_PREDEFINED_MAX = 999; URLZONE_USER_MIN = 1000; URLZONE_USER_MAX = 10000; }
export type URLTEMPLATE = enum { URLTEMPLATE_CUSTOM = 0; URLTEMPLATE_PREDEFINED_MIN = 65536; URLTEMPLATE_LOW = 65536; URLTEMPLATE_MEDLOW = 66816; URLTEMPLATE_MEDIUM = 69632; URLTEMPLATE_MEDHIGH = 70912; URLTEMPLATE_HIGH = 73728; URLTEMPLATE_PREDEFINED_MAX = 131072; }
export type ZAFLAGS = enum { ZAFLAGS_CUSTOM_EDIT = 1; ZAFLAGS_ADD_SITES = 2; ZAFLAGS_REQUIRE_VERIFICATION = 4; ZAFLAGS_INCLUDE_PROXY_OVERRIDE = 8; ZAFLAGS_INCLUDE_INTRANET_SITES = 16; ZAFLAGS_NO_UI = 32; ZAFLAGS_SUPPORTS_VERIFICATION = 64; ZAFLAGS_UNC_AS_INTRANET = 128; ZAFLAGS_DETECT_INTRANET = 256; ZAFLAGS_USE_LOCKED_ZONES = 65536; ZAFLAGS_VERIFY_TEMPLATE_SETTINGS = 131072; ZAFLAGS_NO_CACHE = 262144; }
export type ZONEATTRIBUTES = struct { cbSize: ulong; szDisplayName: [260; ushort]; szDescription: [200; ushort]; szIconPath: [260; ushort]; dwTemplateMinLevel: ulong; dwTemplateRecommended: ulong; dwTemplateCurrentLevel: ulong; dwFlags: ulong; }
export type URLZONEREG = enum { URLZONEREG_DEFAULT = 0; URLZONEREG_HKLM = ((URLZONEREG_DEFAULT + 1)); URLZONEREG_HKCU = ((URLZONEREG_HKLM + 1)); }
export type IInternetZoneManagerVtbl = struct { QueryInterface: def (*s_IInternetZoneManager, *GUID, **) -> (long); AddRef: def (*s_IInternetZoneManager) -> (ulong); Release: def (*s_IInternetZoneManager) -> (ulong); GetZoneAttributes: def (*s_IInternetZoneManager, ulong, *ZONEATTRIBUTES) -> (long); SetZoneAttributes: def (*s_IInternetZoneManager, ulong, *ZONEATTRIBUTES) -> (long); GetZoneCustomPolicy: def (*s_IInternetZoneManager, ulong, *GUID, **char, *ulong, URLZONEREG) -> (long); SetZoneCustomPolicy: def (*s_IInternetZoneManager, ulong, *GUID, *char, ulong, URLZONEREG) -> (long); GetZoneActionPolicy: def (*s_IInternetZoneManager, ulong, ulong, *char, ulong, URLZONEREG) -> (long); SetZoneActionPolicy: def (*s_IInternetZoneManager, ulong, ulong, *char, ulong, URLZONEREG) -> (long); PromptAction: def (*s_IInternetZoneManager, ulong, *s_HWND__, *ushort, *ushort, ulong) -> (long); LogAction: def (*s_IInternetZoneManager, ulong, *ushort, *ushort, ulong) -> (long); CreateZoneEnumerator: def (*s_IInternetZoneManager, *ulong, *ulong, ulong) -> (long); GetZoneAt: def (*s_IInternetZoneManager, ulong, ulong, *ulong) -> (long); DestroyZoneEnumerator: def (*s_IInternetZoneManager, ulong) -> (long); CopyTemplatePoliciesToZone: def (*s_IInternetZoneManager, ulong, ulong, ulong) -> (long); }
export type IInternetZoneManagerExVtbl = struct { QueryInterface: def (*s_IInternetZoneManagerEx, *GUID, **) -> (long); AddRef: def (*s_IInternetZoneManagerEx) -> (ulong); Release: def (*s_IInternetZoneManagerEx) -> (ulong); GetZoneAttributes: def (*s_IInternetZoneManagerEx, ulong, *ZONEATTRIBUTES) -> (long); SetZoneAttributes: def (*s_IInternetZoneManagerEx, ulong, *ZONEATTRIBUTES) -> (long); GetZoneCustomPolicy: def (*s_IInternetZoneManagerEx, ulong, *GUID, **char, *ulong, URLZONEREG) -> (long); SetZoneCustomPolicy: def (*s_IInternetZoneManagerEx, ulong, *GUID, *char, ulong, URLZONEREG) -> (long); GetZoneActionPolicy: def (*s_IInternetZoneManagerEx, ulong, ulong, *char, ulong, URLZONEREG) -> (long); SetZoneActionPolicy: def (*s_IInternetZoneManagerEx, ulong, ulong, *char, ulong, URLZONEREG) -> (long); PromptAction: def (*s_IInternetZoneManagerEx, ulong, *s_HWND__, *ushort, *ushort, ulong) -> (long); LogAction: def (*s_IInternetZoneManagerEx, ulong, *ushort, *ushort, ulong) -> (long); CreateZoneEnumerator: def (*s_IInternetZoneManagerEx, *ulong, *ulong, ulong) -> (long); GetZoneAt: def (*s_IInternetZoneManagerEx, ulong, ulong, *ulong) -> (long); DestroyZoneEnumerator: def (*s_IInternetZoneManagerEx, ulong) -> (long); CopyTemplatePoliciesToZone: def (*s_IInternetZoneManagerEx, ulong, ulong, ulong) -> (long); GetZoneActionPolicyEx: def (*s_IInternetZoneManagerEx, ulong, ulong, *char, ulong, URLZONEREG, ulong) -> (long); SetZoneActionPolicyEx: def (*s_IInternetZoneManagerEx, ulong, ulong, *char, ulong, URLZONEREG, ulong) -> (long); }
export type IInternetZoneManagerEx2Vtbl = struct { QueryInterface: def (*s_IInternetZoneManagerEx2, *GUID, **) -> (long); AddRef: def (*s_IInternetZoneManagerEx2) -> (ulong); Release: def (*s_IInternetZoneManagerEx2) -> (ulong); GetZoneAttributes: def (*s_IInternetZoneManagerEx2, ulong, *ZONEATTRIBUTES) -> (long); SetZoneAttributes: def (*s_IInternetZoneManagerEx2, ulong, *ZONEATTRIBUTES) -> (long); GetZoneCustomPolicy: def (*s_IInternetZoneManagerEx2, ulong, *GUID, **char, *ulong, URLZONEREG) -> (long); SetZoneCustomPolicy: def (*s_IInternetZoneManagerEx2, ulong, *GUID, *char, ulong, URLZONEREG) -> (long); GetZoneActionPolicy: def (*s_IInternetZoneManagerEx2, ulong, ulong, *char, ulong, URLZONEREG) -> (long); SetZoneActionPolicy: def (*s_IInternetZoneManagerEx2, ulong, ulong, *char, ulong, URLZONEREG) -> (long); PromptAction: def (*s_IInternetZoneManagerEx2, ulong, *s_HWND__, *ushort, *ushort, ulong) -> (long); LogAction: def (*s_IInternetZoneManagerEx2, ulong, *ushort, *ushort, ulong) -> (long); CreateZoneEnumerator: def (*s_IInternetZoneManagerEx2, *ulong, *ulong, ulong) -> (long); GetZoneAt: def (*s_IInternetZoneManagerEx2, ulong, ulong, *ulong) -> (long); DestroyZoneEnumerator: def (*s_IInternetZoneManagerEx2, ulong) -> (long); CopyTemplatePoliciesToZone: def (*s_IInternetZoneManagerEx2, ulong, ulong, ulong) -> (long); GetZoneActionPolicyEx: def (*s_IInternetZoneManagerEx2, ulong, ulong, *char, ulong, URLZONEREG, ulong) -> (long); SetZoneActionPolicyEx: def (*s_IInternetZoneManagerEx2, ulong, ulong, *char, ulong, URLZONEREG, ulong) -> (long); GetZoneAttributesEx: def (*s_IInternetZoneManagerEx2, ulong, *ZONEATTRIBUTES, ulong) -> (long); GetZoneSecurityState: def (*s_IInternetZoneManagerEx2, ulong, int, *ulong, *int) -> (long); GetIESecurityState: def (*s_IInternetZoneManagerEx2, int, *ulong, *int, int) -> (long); FixUnsecureSettings: def (*s_IInternetZoneManagerEx2) -> (long); }
export type CODEBASEHOLD = struct { cbSize: ulong; szDistUnit: *ushort; szCodeBase: *ushort; dwVersionMS: ulong; dwVersionLS: ulong; dwStyle: ulong; }
export type SOFTDISTINFO = struct { cbSize: ulong; dwFlags: ulong; dwAdState: ulong; szTitle: *ushort; szAbstract: *ushort; szHREF: *ushort; dwInstalledVersionMS: ulong; dwInstalledVersionLS: ulong; dwUpdateVersionMS: ulong; dwUpdateVersionLS: ulong; dwAdvertisedVersionMS: ulong; dwAdvertisedVersionLS: ulong; dwReserved: ulong; }
export type ISoftDistExtVtbl = struct { QueryInterface: def (*s_ISoftDistExt, *GUID, **) -> (long); AddRef: def (*s_ISoftDistExt) -> (ulong); Release: def (*s_ISoftDistExt) -> (ulong); ProcessSoftDist: def (*s_ISoftDistExt, *ushort, *s_IXMLElement, *SOFTDISTINFO) -> (long); GetFirstCodeBase: def (*s_ISoftDistExt, **ushort, *ulong) -> (long); GetNextCodeBase: def (*s_ISoftDistExt, **ushort, *ulong) -> (long); AsyncInstallDistributionUnit: def (*s_ISoftDistExt, *s_IBindCtx, *, ulong, *CODEBASEHOLD) -> (long); }
export type ICatalogFileInfoVtbl = struct { QueryInterface: def (*s_ICatalogFileInfo, *GUID, **) -> (long); AddRef: def (*s_ICatalogFileInfo) -> (ulong); Release: def (*s_ICatalogFileInfo) -> (ulong); GetCatalogFile: def (*s_ICatalogFileInfo, **char) -> (long); GetJavaTrust: def (*s_ICatalogFileInfo, **) -> (long); }
export type IDataFilterVtbl = struct { QueryInterface: def (*s_IDataFilter, *GUID, **) -> (long); AddRef: def (*s_IDataFilter) -> (ulong); Release: def (*s_IDataFilter) -> (ulong); DoEncode: def (*s_IDataFilter, ulong, long, *char, long, *char, long, *long, *long, ulong) -> (long); DoDecode: def (*s_IDataFilter, ulong, long, *char, long, *char, long, *long, *long, ulong) -> (long); SetEncodingLevel: def (*s_IDataFilter, ulong) -> (long); }
export type PROTOCOLFILTERDATA = struct { cbSize: ulong; pProtocolSink: *s_IInternetProtocolSink; pProtocol: *s_IInternetProtocol; pUnk: *s_IUnknown; dwFilterFlags: ulong; }
export type DATAINFO = struct { ulTotalSize: ulong; ulavrPacketSize: ulong; ulConnectSpeed: ulong; ulProcessorSpeed: ulong; }
export type IEncodingFilterFactoryVtbl = struct { QueryInterface: def (*s_IEncodingFilterFactory, *GUID, **) -> (long); AddRef: def (*s_IEncodingFilterFactory) -> (ulong); Release: def (*s_IEncodingFilterFactory) -> (ulong); FindBestFilter: def (*s_IEncodingFilterFactory, *ushort, *ushort, DATAINFO, **s_IDataFilter) -> (long); GetDefaultFilter: def (*s_IEncodingFilterFactory, *ushort, *ushort, **s_IDataFilter) -> (long); }
export type HIT_LOGGING_INFO = struct { dwStructSize: ulong; lpszLoggedUrlName: *char; StartTime: SYSTEMTIME; EndTime: SYSTEMTIME; lpszExtendedInfo: *char; }
export type IWrappedProtocolVtbl = struct { QueryInterface: def (*s_IWrappedProtocol, *GUID, **) -> (long); AddRef: def (*s_IWrappedProtocol) -> (ulong); Release: def (*s_IWrappedProtocol) -> (ulong); GetWrapperCode: def (*s_IWrappedProtocol, *long, uint64) -> (long); }
export type BINDHANDLETYPES = enum { BINDHANDLETYPES_APPCACHE = 0; BINDHANDLETYPES_DEPENDENCY = 1; BINDHANDLETYPES_COUNT = ((BINDHANDLETYPES_DEPENDENCY + 1)); }
export type IGetBindHandleVtbl = struct { QueryInterface: def (*s_IGetBindHandle, *GUID, **) -> (long); AddRef: def (*s_IGetBindHandle) -> (ulong); Release: def (*s_IGetBindHandle) -> (ulong); GetBindHandle: def (*s_IGetBindHandle, BINDHANDLETYPES, **) -> (long); }
export type PROTOCOL_ARGUMENT = struct { szMethod: *ushort; szTargetUrl: *ushort; }
export type IBindCallbackRedirectVtbl = struct { QueryInterface: def (*s_IBindCallbackRedirect, *GUID, **) -> (long); AddRef: def (*s_IBindCallbackRedirect) -> (ulong); Release: def (*s_IBindCallbackRedirect) -> (ulong); Redirect: def (*s_IBindCallbackRedirect, *ushort, *short) -> (long); }
export type IBindHttpSecurityVtbl = struct { QueryInterface: def (*s_IBindHttpSecurity, *GUID, **) -> (long); AddRef: def (*s_IBindHttpSecurity) -> (ulong); Release: def (*s_IBindHttpSecurity) -> (ulong); GetIgnoreCertMask: def (*s_IBindHttpSecurity, *ulong) -> (long); }
export type SERIALIZEDPROPERTYVALUE = struct { dwType: ulong; rgb: [1; char]; }
export type NUMPARSE = struct { cDig: int; dwInFlags: ulong; dwOutFlags: ulong; cchUsed: int; nBaseShift: int; nPwr10: int; }
export type UDATE = struct { st: SYSTEMTIME; wDayOfYear: ushort; }
export type REGKIND = enum { REGKIND_DEFAULT; REGKIND_REGISTER; REGKIND_NONE; }
export type PARAMDATA = struct { szName: *ushort; vt: ushort; }
export type METHODDATA = struct { szName: *ushort; ppdata: *PARAMDATA; dispid: long; iMeth: uint; cc: CALLCONV; cArgs: uint; wFlags: ushort; vtReturn: ushort; }
export type INTERFACEDATA = struct { pmethdata: *METHODDATA; cMembers: uint; }
export type OLESTREAMVTBL = struct { Get: def (*OLESTREAM, *, ulong) -> (ulong); Put: def (*OLESTREAM, *, ulong) -> (ulong); }
export type OLESTREAM = struct { lpstbl: *OLESTREAMVTBL; }
export type OPENFILENAME_NT4A = struct { lStructSize: ulong; hwndOwner: *s_HWND__; hInstance: *s_HINSTANCE__; lpstrFilter: *char; lpstrCustomFilter: *char; nMaxCustFilter: ulong; nFilterIndex: ulong; lpstrFile: *char; nMaxFile: ulong; lpstrFileTitle: *char; nMaxFileTitle: ulong; lpstrInitialDir: *char; lpstrTitle: *char; Flags: ulong; nFileOffset: ushort; nFileExtension: ushort; lpstrDefExt: *char; lCustData: int64; lpfnHook: def (*s_HWND__, uint, uint64, int64) -> (uint64); lpTemplateName: *char; }
export type OPENFILENAME_NT4W = struct { lStructSize: ulong; hwndOwner: *s_HWND__; hInstance: *s_HINSTANCE__; lpstrFilter: *ushort; lpstrCustomFilter: *ushort; nMaxCustFilter: ulong; nFilterIndex: ulong; lpstrFile: *ushort; nMaxFile: ulong; lpstrFileTitle: *ushort; nMaxFileTitle: ulong; lpstrInitialDir: *ushort; lpstrTitle: *ushort; Flags: ulong; nFileOffset: ushort; nFileExtension: ushort; lpstrDefExt: *ushort; lCustData: int64; lpfnHook: def (*s_HWND__, uint, uint64, int64) -> (uint64); lpTemplateName: *ushort; }
export type OPENFILENAMEA = struct { lStructSize: ulong; hwndOwner: *s_HWND__; hInstance: *s_HINSTANCE__; lpstrFilter: *char; lpstrCustomFilter: *char; nMaxCustFilter: ulong; nFilterIndex: ulong; lpstrFile: *char; nMaxFile: ulong; lpstrFileTitle: *char; nMaxFileTitle: ulong; lpstrInitialDir: *char; lpstrTitle: *char; Flags: ulong; nFileOffset: ushort; nFileExtension: ushort; lpstrDefExt: *char; lCustData: int64; lpfnHook: def (*s_HWND__, uint, uint64, int64) -> (uint64); lpTemplateName: *char; pvReserved: *; dwReserved: ulong; FlagsEx: ulong; }
export type OPENFILENAMEW = struct { lStructSize: ulong; hwndOwner: *s_HWND__; hInstance: *s_HINSTANCE__; lpstrFilter: *ushort; lpstrCustomFilter: *ushort; nMaxCustFilter: ulong; nFilterIndex: ulong; lpstrFile: *ushort; nMaxFile: ulong; lpstrFileTitle: *ushort; nMaxFileTitle: ulong; lpstrInitialDir: *ushort; lpstrTitle: *ushort; Flags: ulong; nFileOffset: ushort; nFileExtension: ushort; lpstrDefExt: *ushort; lCustData: int64; lpfnHook: def (*s_HWND__, uint, uint64, int64) -> (uint64); lpTemplateName: *ushort; pvReserved: *; dwReserved: ulong; FlagsEx: ulong; }
export type OFNOTIFYA = struct { hdr: NMHDR; lpOFN: *OPENFILENAMEA; pszFile: *char; }
export type OFNOTIFYW = struct { hdr: NMHDR; lpOFN: *OPENFILENAMEW; pszFile: *ushort; }
export type OFNOTIFYEXA = struct { hdr: NMHDR; lpOFN: *OPENFILENAMEA; psf: *; pidl: *; }
export type OFNOTIFYEXW = struct { hdr: NMHDR; lpOFN: *OPENFILENAMEW; psf: *; pidl: *; }
export type CHOOSECOLORA = struct { lStructSize: ulong; hwndOwner: *s_HWND__; hInstance: *s_HWND__; rgbResult: ulong; lpCustColors: *ulong; Flags: ulong; lCustData: int64; lpfnHook: def (*s_HWND__, uint, uint64, int64) -> (uint64); lpTemplateName: *char; }
export type CHOOSECOLORW = struct { lStructSize: ulong; hwndOwner: *s_HWND__; hInstance: *s_HWND__; rgbResult: ulong; lpCustColors: *ulong; Flags: ulong; lCustData: int64; lpfnHook: def (*s_HWND__, uint, uint64, int64) -> (uint64); lpTemplateName: *ushort; }
export type FINDREPLACEA = struct { lStructSize: ulong; hwndOwner: *s_HWND__; hInstance: *s_HINSTANCE__; Flags: ulong; lpstrFindWhat: *char; lpstrReplaceWith: *char; wFindWhatLen: ushort; wReplaceWithLen: ushort; lCustData: int64; lpfnHook: def (*s_HWND__, uint, uint64, int64) -> (uint64); lpTemplateName: *char; }
export type FINDREPLACEW = struct { lStructSize: ulong; hwndOwner: *s_HWND__; hInstance: *s_HINSTANCE__; Flags: ulong; lpstrFindWhat: *ushort; lpstrReplaceWith: *ushort; wFindWhatLen: ushort; wReplaceWithLen: ushort; lCustData: int64; lpfnHook: def (*s_HWND__, uint, uint64, int64) -> (uint64); lpTemplateName: *ushort; }
export type CHOOSEFONTA = struct { lStructSize: ulong; hwndOwner: *s_HWND__; hDC: *s_HDC__; lpLogFont: *LOGFONTA; iPointSize: int; Flags: ulong; rgbColors: ulong; lCustData: int64; lpfnHook: def (*s_HWND__, uint, uint64, int64) -> (uint64); lpTemplateName: *char; hInstance: *s_HINSTANCE__; lpszStyle: *char; nFontType: ushort; ___MISSING_ALIGNMENT__: ushort; nSizeMin: int; nSizeMax: int; }
export type CHOOSEFONTW = struct { lStructSize: ulong; hwndOwner: *s_HWND__; hDC: *s_HDC__; lpLogFont: *LOGFONTW; iPointSize: int; Flags: ulong; rgbColors: ulong; lCustData: int64; lpfnHook: def (*s_HWND__, uint, uint64, int64) -> (uint64); lpTemplateName: *ushort; hInstance: *s_HINSTANCE__; lpszStyle: *ushort; nFontType: ushort; ___MISSING_ALIGNMENT__: ushort; nSizeMin: int; nSizeMax: int; }
export type PRINTDLGA = struct { lStructSize: ulong; hwndOwner: *s_HWND__; hDevMode: *; hDevNames: *; hDC: *s_HDC__; Flags: ulong; nFromPage: ushort; nToPage: ushort; nMinPage: ushort; nMaxPage: ushort; nCopies: ushort; hInstance: *s_HINSTANCE__; lCustData: int64; lpfnPrintHook: def (*s_HWND__, uint, uint64, int64) -> (uint64); lpfnSetupHook: def (*s_HWND__, uint, uint64, int64) -> (uint64); lpPrintTemplateName: *char; lpSetupTemplateName: *char; hPrintTemplate: *; hSetupTemplate: *; }
export type PRINTDLGW = struct { lStructSize: ulong; hwndOwner: *s_HWND__; hDevMode: *; hDevNames: *; hDC: *s_HDC__; Flags: ulong; nFromPage: ushort; nToPage: ushort; nMinPage: ushort; nMaxPage: ushort; nCopies: ushort; hInstance: *s_HINSTANCE__; lCustData: int64; lpfnPrintHook: def (*s_HWND__, uint, uint64, int64) -> (uint64); lpfnSetupHook: def (*s_HWND__, uint, uint64, int64) -> (uint64); lpPrintTemplateName: *ushort; lpSetupTemplateName: *ushort; hPrintTemplate: *; hSetupTemplate: *; }
export type IPrintDialogCallback = struct { lpVtbl: *s_IPrintDialogCallbackVtbl; }
export type s_IPrintDialogCallbackVtbl = struct { QueryInterface: def (*IPrintDialogCallback, *GUID, **) -> (long); AddRef: def (*IPrintDialogCallback) -> (ulong); Release: def (*IPrintDialogCallback) -> (ulong); InitDone: def (*IPrintDialogCallback) -> (long); SelectionChange: def (*IPrintDialogCallback) -> (long); HandleMessage: def (*IPrintDialogCallback, *s_HWND__, uint, uint64, int64, *int64) -> (long); }
export type IPrintDialogServices = struct { lpVtbl: *s_IPrintDialogServicesVtbl; }
export type s_IPrintDialogServicesVtbl = struct { QueryInterface: def (*IPrintDialogServices, *GUID, **) -> (long); AddRef: def (*IPrintDialogServices) -> (ulong); Release: def (*IPrintDialogServices) -> (ulong); GetCurrentDevMode: def (*IPrintDialogServices, *DEVMODEA, *uint) -> (long); GetCurrentPrinterName: def (*IPrintDialogServices, *ushort, *uint) -> (long); GetCurrentPortName: def (*IPrintDialogServices, *ushort, *uint) -> (long); }
export type PRINTPAGERANGE = struct { nFromPage: ulong; nToPage: ulong; }
export type PRINTDLGEXA = struct { lStructSize: ulong; hwndOwner: *s_HWND__; hDevMode: *; hDevNames: *; hDC: *s_HDC__; Flags: ulong; Flags2: ulong; ExclusionFlags: ulong; nPageRanges: ulong; nMaxPageRanges: ulong; lpPageRanges: *PRINTPAGERANGE; nMinPage: ulong; nMaxPage: ulong; nCopies: ulong; hInstance: *s_HINSTANCE__; lpPrintTemplateName: *char; lpCallback: *s_IUnknown; nPropertyPages: ulong; lphPropertyPages: **s__PSP; nStartPage: ulong; dwResultAction: ulong; }
export type PRINTDLGEXW = struct { lStructSize: ulong; hwndOwner: *s_HWND__; hDevMode: *; hDevNames: *; hDC: *s_HDC__; Flags: ulong; Flags2: ulong; ExclusionFlags: ulong; nPageRanges: ulong; nMaxPageRanges: ulong; lpPageRanges: *PRINTPAGERANGE; nMinPage: ulong; nMaxPage: ulong; nCopies: ulong; hInstance: *s_HINSTANCE__; lpPrintTemplateName: *ushort; lpCallback: *s_IUnknown; nPropertyPages: ulong; lphPropertyPages: **s__PSP; nStartPage: ulong; dwResultAction: ulong; }
export type DEVNAMES = struct { wDriverOffset: ushort; wDeviceOffset: ushort; wOutputOffset: ushort; wDefault: ushort; }
export type PAGESETUPDLGA = struct { lStructSize: ulong; hwndOwner: *s_HWND__; hDevMode: *; hDevNames: *; Flags: ulong; ptPaperSize: POINT; rtMinMargin: RECT; rtMargin: RECT; hInstance: *s_HINSTANCE__; lCustData: int64; lpfnPageSetupHook: def (*s_HWND__, uint, uint64, int64) -> (uint64); lpfnPagePaintHook: def (*s_HWND__, uint, uint64, int64) -> (uint64); lpPageSetupTemplateName: *char; hPageSetupTemplate: *; }
export type PAGESETUPDLGW = struct { lStructSize: ulong; hwndOwner: *s_HWND__; hDevMode: *; hDevNames: *; Flags: ulong; ptPaperSize: POINT; rtMinMargin: RECT; rtMargin: RECT; hInstance: *s_HINSTANCE__; lCustData: int64; lpfnPageSetupHook: def (*s_HWND__, uint, uint64, int64) -> (uint64); lpfnPagePaintHook: def (*s_HWND__, uint, uint64, int64) -> (uint64); lpPageSetupTemplateName: *ushort; hPageSetupTemplate: *; }
export type SERVICE_TRIGGER_CUSTOM_STATE_ID = struct { Data: [2; ulong]; }
export type SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM = struct { u: struct #union { CustomStateId: SERVICE_TRIGGER_CUSTOM_STATE_ID; s: struct { DataOffset: ulong; Data: [1; char]; }; }; }
export type SERVICE_DESCRIPTIONA = struct { lpDescription: *char; }
export type SERVICE_DESCRIPTIONW = struct { lpDescription: *ushort; }
export type SC_ACTION_TYPE = enum { SC_ACTION_NONE = 0; SC_ACTION_RESTART = 1; SC_ACTION_REBOOT = 2; SC_ACTION_RUN_COMMAND = 3; SC_ACTION_OWN_RESTART = 4; }
export type SC_ACTION = struct { Type: SC_ACTION_TYPE; Delay: ulong; }
export type SERVICE_FAILURE_ACTIONSA = struct { dwResetPeriod: ulong; lpRebootMsg: *char; lpCommand: *char; cActions: ulong; lpsaActions: *SC_ACTION; }
export type SERVICE_FAILURE_ACTIONSW = struct { dwResetPeriod: ulong; lpRebootMsg: *ushort; lpCommand: *ushort; cActions: ulong; lpsaActions: *SC_ACTION; }
export type SERVICE_DELAYED_AUTO_START_INFO = struct { fDelayedAutostart: int; }
export type SERVICE_FAILURE_ACTIONS_FLAG = struct { fFailureActionsOnNonCrashFailures: int; }
export type SERVICE_SID_INFO = struct { dwServiceSidType: ulong; }
export type SERVICE_REQUIRED_PRIVILEGES_INFOA = struct { pmszRequiredPrivileges: *char; }
export type SERVICE_REQUIRED_PRIVILEGES_INFOW = struct { pmszRequiredPrivileges: *ushort; }
export type SERVICE_PRESHUTDOWN_INFO = struct { dwPreshutdownTimeout: ulong; }
export type SERVICE_TRIGGER_SPECIFIC_DATA_ITEM = struct { dwDataType: ulong; cbData: ulong; pData: *char; }
export type SERVICE_TRIGGER = struct { dwTriggerType: ulong; dwAction: ulong; pTriggerSubtype: *GUID; cDataItems: ulong; pDataItems: *SERVICE_TRIGGER_SPECIFIC_DATA_ITEM; }
export type SERVICE_TRIGGER_INFO = struct { cTriggers: ulong; pTriggers: *SERVICE_TRIGGER; pReserved: *char; }
export type SERVICE_PREFERRED_NODE_INFO = struct { usPreferredNode: ushort; fDelete: char; }
export type SERVICE_TIMECHANGE_INFO = struct { liNewTime: LARGE_INTEGER; liOldTime: LARGE_INTEGER; }
export type SERVICE_LAUNCH_PROTECTED_INFO = struct { dwLaunchProtected: ulong; }
export type SC_STATUS_TYPE = enum { SC_STATUS_PROCESS_INFO = 0; }
export type SC_ENUM_TYPE = enum { SC_ENUM_PROCESS_INFO = 0; }
export type SERVICE_STATUS = struct { dwServiceType: ulong; dwCurrentState: ulong; dwControlsAccepted: ulong; dwWin32ExitCode: ulong; dwServiceSpecificExitCode: ulong; dwCheckPoint: ulong; dwWaitHint: ulong; }
export type SERVICE_STATUS_PROCESS = struct { dwServiceType: ulong; dwCurrentState: ulong; dwControlsAccepted: ulong; dwWin32ExitCode: ulong; dwServiceSpecificExitCode: ulong; dwCheckPoint: ulong; dwWaitHint: ulong; dwProcessId: ulong; dwServiceFlags: ulong; }
export type ENUM_SERVICE_STATUSA = struct { lpServiceName: *char; lpDisplayName: *char; ServiceStatus: SERVICE_STATUS; }
export type ENUM_SERVICE_STATUSW = struct { lpServiceName: *ushort; lpDisplayName: *ushort; ServiceStatus: SERVICE_STATUS; }
export type ENUM_SERVICE_STATUS_PROCESSA = struct { lpServiceName: *char; lpDisplayName: *char; ServiceStatusProcess: SERVICE_STATUS_PROCESS; }
export type ENUM_SERVICE_STATUS_PROCESSW = struct { lpServiceName: *ushort; lpDisplayName: *ushort; ServiceStatusProcess: SERVICE_STATUS_PROCESS; }
export type QUERY_SERVICE_LOCK_STATUSA = struct { fIsLocked: ulong; lpLockOwner: *char; dwLockDuration: ulong; }
export type QUERY_SERVICE_LOCK_STATUSW = struct { fIsLocked: ulong; lpLockOwner: *ushort; dwLockDuration: ulong; }
export type QUERY_SERVICE_CONFIGA = struct { dwServiceType: ulong; dwStartType: ulong; dwErrorControl: ulong; lpBinaryPathName: *char; lpLoadOrderGroup: *char; dwTagId: ulong; lpDependencies: *char; lpServiceStartName: *char; lpDisplayName: *char; }
export type QUERY_SERVICE_CONFIGW = struct { dwServiceType: ulong; dwStartType: ulong; dwErrorControl: ulong; lpBinaryPathName: *ushort; lpLoadOrderGroup: *ushort; dwTagId: ulong; lpDependencies: *ushort; lpServiceStartName: *ushort; lpDisplayName: *ushort; }
export type SERVICE_TABLE_ENTRYA = struct { lpServiceName: *char; lpServiceProc: def (ulong, **char) -> (); }
export type SERVICE_TABLE_ENTRYW = struct { lpServiceName: *ushort; lpServiceProc: def (ulong, **ushort) -> (); }
export type SERVICE_NOTIFY_1 = struct { dwVersion: ulong; pfnNotifyCallback: def (*) -> (); pContext: *; dwNotificationStatus: ulong; ServiceStatus: SERVICE_STATUS_PROCESS; }
export type SERVICE_NOTIFY_2A = struct { dwVersion: ulong; pfnNotifyCallback: def (*) -> (); pContext: *; dwNotificationStatus: ulong; ServiceStatus: SERVICE_STATUS_PROCESS; dwNotificationTriggered: ulong; pszServiceNames: *char; }
export type SERVICE_NOTIFY_2W = struct { dwVersion: ulong; pfnNotifyCallback: def (*) -> (); pContext: *; dwNotificationStatus: ulong; ServiceStatus: SERVICE_STATUS_PROCESS; dwNotificationTriggered: ulong; pszServiceNames: *ushort; }
export type SERVICE_CONTROL_STATUS_REASON_PARAMSA = struct { dwReason: ulong; pszComment: *char; ServiceStatus: SERVICE_STATUS_PROCESS; }
export type SERVICE_CONTROL_STATUS_REASON_PARAMSW = struct { dwReason: ulong; pszComment: *ushort; ServiceStatus: SERVICE_STATUS_PROCESS; }
export type SERVICE_START_REASON = struct { dwReason: ulong; }
export type SC_EVENT_TYPE = enum { SC_EVENT_DATABASE_CHANGE; SC_EVENT_PROPERTY_CHANGE; SC_EVENT_STATUS_CHANGE; }
export type SERVICE_REGISTRY_STATE_TYPE = enum { ServiceRegistryStateParameters = 0; ServiceRegistryStatePersistent = 1; MaxServiceRegistryStateType = 2; }
export type SERVICE_DIRECTORY_TYPE = enum { ServiceDirectoryPersistentState = 0; ServiceDirectoryTypeMax = 1; }
export type MODEMDEVCAPS = struct { dwActualSize: ulong; dwRequiredSize: ulong; dwDevSpecificOffset: ulong; dwDevSpecificSize: ulong; dwModemProviderVersion: ulong; dwModemManufacturerOffset: ulong; dwModemManufacturerSize: ulong; dwModemModelOffset: ulong; dwModemModelSize: ulong; dwModemVersionOffset: ulong; dwModemVersionSize: ulong; dwDialOptions: ulong; dwCallSetupFailTimer: ulong; dwInactivityTimeout: ulong; dwSpeakerVolume: ulong; dwSpeakerMode: ulong; dwModemOptions: ulong; dwMaxDTERate: ulong; dwMaxDCERate: ulong; abVariablePortion: [1; char]; }
export type MODEMSETTINGS = struct { dwActualSize: ulong; dwRequiredSize: ulong; dwDevSpecificOffset: ulong; dwDevSpecificSize: ulong; dwCallSetupFailTimer: ulong; dwInactivityTimeout: ulong; dwSpeakerVolume: ulong; dwSpeakerMode: ulong; dwPreferredModemOptions: ulong; dwNegotiatedModemOptions: ulong; dwNegotiatedDCERate: ulong; abVariablePortion: [1; char]; }
export type COMPOSITIONFORM = struct { dwStyle: ulong; ptCurrentPos: POINT; rcArea: RECT; }
export type CANDIDATEFORM = struct { dwIndex: ulong; dwStyle: ulong; ptCurrentPos: POINT; rcArea: RECT; }
export type CANDIDATELIST = struct { dwSize: ulong; dwStyle: ulong; dwCount: ulong; dwSelection: ulong; dwPageStart: ulong; dwPageSize: ulong; dwOffset: [1; ulong]; }
export type REGISTERWORDA = struct { lpReading: *char; lpWord: *char; }
export type REGISTERWORDW = struct { lpReading: *ushort; lpWord: *ushort; }
export type RECONVERTSTRING = struct { dwSize: ulong; dwVersion: ulong; dwStrLen: ulong; dwStrOffset: ulong; dwCompStrLen: ulong; dwCompStrOffset: ulong; dwTargetStrLen: ulong; dwTargetStrOffset: ulong; }
export type STYLEBUFA = struct { dwStyle: ulong; szDescription: [32; char]; }
export type STYLEBUFW = struct { dwStyle: ulong; szDescription: [32; ushort]; }
export type IMEMENUITEMINFOA = struct { cbSize: uint; fType: uint; fState: uint; wID: uint; hbmpChecked: *s_HBITMAP__; hbmpUnchecked: *s_HBITMAP__; dwItemData: ulong; szString: [80; char]; hbmpItem: *s_HBITMAP__; }
export type IMEMENUITEMINFOW = struct { cbSize: uint; fType: uint; fState: uint; wID: uint; hbmpChecked: *s_HBITMAP__; hbmpUnchecked: *s_HBITMAP__; dwItemData: ulong; szString: [80; ushort]; hbmpItem: *s_HBITMAP__; }
export type IMECHARPOSITION = struct { dwSize: ulong; dwCharPos: ulong; pt: POINT; cLineHeight: uint; rcDocument: RECT; }
export type LOADED_IMAGE = struct { ModuleName: *char; hFile: *; MappedAddress: *char; FileHeader: *IMAGE_NT_HEADERS64; LastRvaSection: *IMAGE_SECTION_HEADER; NumberOfSections: ulong; Sections: *IMAGE_SECTION_HEADER; Characteristics: ulong; fSystemImage: char; fDOSImage: char; fReadOnly: char; Version: char; Links: LIST_ENTRY; SizeOfImage: ulong; }
export type MODLOAD_DATA = struct { ssize: ulong; ssig: ulong; data: *; size: ulong; flags: ulong; }
export type MODLOAD_CVMISC = struct { oCV: ulong; cCV: uint64; oMisc: ulong; cMisc: uint64; dtImage: ulong; cImage: ulong; }
export type MODLOAD_PDBGUID_PDBAGE = struct { PdbGuid: GUID; PdbAge: ulong; }
export type ADDRESS_MODE = enum { AddrMode1616; AddrMode1632; AddrModeReal; AddrModeFlat; }
export type ADDRESS64 = struct { Offset: uint64; Segment: ushort; Mode: ADDRESS_MODE; }
export type KDHELP64 = struct { Thread: uint64; ThCallbackStack: ulong; ThCallbackBStore: ulong; NextCallback: ulong; FramePointer: ulong; KiCallUserMode: uint64; KeUserCallbackDispatcher: uint64; SystemRangeStart: uint64; KiUserExceptionDispatcher: uint64; StackBase: uint64; StackLimit: uint64; BuildVersion: ulong; RetpolineStubFunctionTableSize: ulong; RetpolineStubFunctionTable: uint64; RetpolineStubOffset: ulong; RetpolineStubSize: ulong; Reserved0: [2; uint64]; }
export type STACKFRAME64 = struct { AddrPC: ADDRESS64; AddrReturn: ADDRESS64; AddrFrame: ADDRESS64; AddrStack: ADDRESS64; AddrBStore: ADDRESS64; FuncTableEntry: *; Params: [4; uint64]; Far: int; Virtual: int; Reserved: [3; uint64]; KdHelp: KDHELP64; }
export type STACKFRAME_EX = struct { AddrPC: ADDRESS64; AddrReturn: ADDRESS64; AddrFrame: ADDRESS64; AddrStack: ADDRESS64; AddrBStore: ADDRESS64; FuncTableEntry: *; Params: [4; uint64]; Far: int; Virtual: int; Reserved: [3; uint64]; KdHelp: KDHELP64; StackFrameSize: ulong; InlineFrameContext: ulong; }
export type API_VERSION = struct { MajorVersion: ushort; MinorVersion: ushort; Revision: ushort; Reserved: ushort; }
export type SYM_TYPE = enum { SymNone = 0; SymCoff; SymCv; SymPdb; SymExport; SymDeferred; SymSym; SymDia; SymVirtual; NumSymTypes; }
export type IMAGEHLP_SYMBOL64 = struct { SizeOfStruct: ulong; Address: uint64; Size: ulong; Flags: ulong; MaxNameLength: ulong; Name: [1; char]; }
export type IMAGEHLP_SYMBOL64_PACKAGE = struct { sym: IMAGEHLP_SYMBOL64; name: [2001; char]; }
export type IMAGEHLP_SYMBOLW64 = struct { SizeOfStruct: ulong; Address: uint64; Size: ulong; Flags: ulong; MaxNameLength: ulong; Name: [1; ushort]; }
export type IMAGEHLP_SYMBOLW64_PACKAGE = struct { sym: IMAGEHLP_SYMBOLW64; name: [2001; ushort]; }
export type IMAGEHLP_MODULE64 = struct { SizeOfStruct: ulong; BaseOfImage: uint64; ImageSize: ulong; TimeDateStamp: ulong; CheckSum: ulong; NumSyms: ulong; SymType: SYM_TYPE; ModuleName: [32; char]; ImageName: [256; char]; LoadedImageName: [256; char]; LoadedPdbName: [256; char]; CVSig: ulong; CVData: [780; char]; PdbSig: ulong; PdbSig70: GUID; PdbAge: ulong; PdbUnmatched: int; DbgUnmatched: int; LineNumbers: int; GlobalSymbols: int; TypeInfo: int; SourceIndexed: int; Publics: int; MachineType: ulong; Reserved: ulong; }
export type IMAGEHLP_MODULEW64 = struct { SizeOfStruct: ulong; BaseOfImage: uint64; ImageSize: ulong; TimeDateStamp: ulong; CheckSum: ulong; NumSyms: ulong; SymType: SYM_TYPE; ModuleName: [32; ushort]; ImageName: [256; ushort]; LoadedImageName: [256; ushort]; LoadedPdbName: [256; ushort]; CVSig: ulong; CVData: [780; ushort]; PdbSig: ulong; PdbSig70: GUID; PdbAge: ulong; PdbUnmatched: int; DbgUnmatched: int; LineNumbers: int; GlobalSymbols: int; TypeInfo: int; SourceIndexed: int; Publics: int; MachineType: ulong; Reserved: ulong; }
export type IMAGEHLP_LINE64 = struct { SizeOfStruct: ulong; Key: *; LineNumber: ulong; FileName: *char; Address: uint64; }
export type IMAGEHLP_LINEW64 = struct { SizeOfStruct: ulong; Key: *; LineNumber: ulong; FileName: *ushort; Address: uint64; }
export type SOURCEFILE = struct { ModBase: uint64; FileName: *char; }
export type SOURCEFILEW = struct { ModBase: uint64; FileName: *ushort; }
export type IMAGEHLP_CBA_READ_MEMORY = struct { addr: uint64; buf: *; bytes: ulong; bytesread: *ulong; }
export type IMAGEHLP_CBA_EVENT = struct { severity: ulong; code: ulong; desc: *char; object: *; }
export type IMAGEHLP_CBA_EVENTW = struct { severity: ulong; code: ulong; desc: *ushort; object: *; }
export type IMAGEHLP_DEFERRED_SYMBOL_LOAD64 = struct { SizeOfStruct: ulong; BaseOfImage: uint64; CheckSum: ulong; TimeDateStamp: ulong; FileName: [260; char]; Reparse: char; hFile: *; Flags: ulong; }
export type IMAGEHLP_DEFERRED_SYMBOL_LOADW64 = struct { SizeOfStruct: ulong; BaseOfImage: uint64; CheckSum: ulong; TimeDateStamp: ulong; FileName: [261; ushort]; Reparse: char; hFile: *; Flags: ulong; }
export type IMAGEHLP_DUPLICATE_SYMBOL64 = struct { SizeOfStruct: ulong; NumberOfDups: ulong; Symbol: *IMAGEHLP_SYMBOL64; SelectedSymbol: ulong; }
export type IMAGEHLP_HD_TYPE = enum { hdBase = 0; hdSym; hdSrc; hdMax; }
export type OMAP = struct { rva: ulong; rvaTo: ulong; }
export type IMAGEHLP_EXTENDED_OPTIONS = enum { SYMOPT_EX_DISABLEACCESSTIMEUPDATE; SYMOPT_EX_LASTVALIDDEBUGDIRECTORY; SYMOPT_EX_MAX; }
export type SRCCODEINFO = struct { SizeOfStruct: ulong; Key: *; ModBase: uint64; Obj: [261; char]; FileName: [261; char]; LineNumber: ulong; Address: uint64; }
export type SRCCODEINFOW = struct { SizeOfStruct: ulong; Key: *; ModBase: uint64; Obj: [261; ushort]; FileName: [261; ushort]; LineNumber: ulong; Address: uint64; }
export type IMAGEHLP_SYMBOL_SRC = struct { sizeofstruct: ulong; type_: ulong; file: [260; char]; }
export type MODULE_TYPE_INFO = struct { dataLength: ushort; leaf: ushort; data: [1; char]; }
export type SYMBOL_INFO = struct { SizeOfStruct: ulong; TypeIndex: ulong; Reserved: [2; uint64]; Index: ulong; Size: ulong; ModBase: uint64; Flags: ulong; Value: uint64; Address: uint64; Register: ulong; Scope: ulong; Tag: ulong; NameLen: ulong; MaxNameLen: ulong; Name: [1; char]; }
export type SYMBOL_INFO_PACKAGE = struct { si: SYMBOL_INFO; name: [2001; char]; }
export type SYMBOL_INFOW = struct { SizeOfStruct: ulong; TypeIndex: ulong; Reserved: [2; uint64]; Index: ulong; Size: ulong; ModBase: uint64; Flags: ulong; Value: uint64; Address: uint64; Register: ulong; Scope: ulong; Tag: ulong; NameLen: ulong; MaxNameLen: ulong; Name: [1; ushort]; }
export type SYMBOL_INFO_PACKAGEW = struct { si: SYMBOL_INFOW; name: [2001; ushort]; }
export type IMAGEHLP_STACK_FRAME = struct { InstructionOffset: uint64; ReturnOffset: uint64; FrameOffset: uint64; StackOffset: uint64; BackingStoreOffset: uint64; FuncTableEntry: uint64; Params: [4; uint64]; Reserved: [5; uint64]; Virtual: int; Reserved2: ulong; }
export type IMAGEHLP_SYMBOL_TYPE_INFO = enum { TI_GET_SYMTAG; TI_GET_SYMNAME; TI_GET_LENGTH; TI_GET_TYPE; TI_GET_TYPEID; TI_GET_BASETYPE; TI_GET_ARRAYINDEXTYPEID; TI_FINDCHILDREN; TI_GET_DATAKIND; TI_GET_ADDRESSOFFSET; TI_GET_OFFSET; TI_GET_VALUE; TI_GET_COUNT; TI_GET_CHILDRENCOUNT; TI_GET_BITPOSITION; TI_GET_VIRTUALBASECLASS; TI_GET_VIRTUALTABLESHAPEID; TI_GET_VIRTUALBASEPOINTEROFFSET; TI_GET_CLASSPARENTID; TI_GET_NESTED; TI_GET_SYMINDEX; TI_GET_LEXICALPARENT; TI_GET_ADDRESS; TI_GET_THISADJUST; TI_GET_UDTKIND; TI_IS_EQUIV_TO; TI_GET_CALLING_CONVENTION; TI_IS_CLOSE_EQUIV_TO; TI_GTIEX_REQS_VALID; TI_GET_VIRTUALBASEOFFSET; TI_GET_VIRTUALBASEDISPINDEX; TI_GET_IS_REFERENCE; TI_GET_INDIRECTVIRTUALBASECLASS; TI_GET_VIRTUALBASETABLETYPE; IMAGEHLP_SYMBOL_TYPE_INFO_MAX; }
export type TI_FINDCHILDREN_PARAMS = struct { Count: ulong; Start: ulong; ChildId: [1; ulong]; }
export type IMAGEHLP_GET_TYPE_INFO_PARAMS = struct { SizeOfStruct: ulong; Flags: ulong; NumIds: ulong; TypeIds: *ulong; TagFilter: uint64; NumReqs: ulong; ReqKinds: *IMAGEHLP_SYMBOL_TYPE_INFO; ReqOffsets: *uint64; ReqSizes: *ulong; ReqStride: uint64; BufferSize: uint64; Buffer: *; EntriesMatched: ulong; EntriesFilled: ulong; TagsFound: uint64; AllReqsValid: uint64; NumReqsValid: ulong; ReqsValid: *uint64; }
export type SYMSRV_INDEX_INFO = struct { sizeofstruct: ulong; file: [261; char]; stripped: int; timestamp: ulong; size: ulong; dbgfile: [261; char]; pdbfile: [261; char]; guid: GUID; sig: ulong; age: ulong; }
export type SYMSRV_INDEX_INFOW = struct { sizeofstruct: ulong; file: [261; ushort]; stripped: int; timestamp: ulong; size: ulong; dbgfile: [261; ushort]; pdbfile: [261; ushort]; guid: GUID; sig: ulong; age: ulong; }
export type IMAGEHLP_SF_TYPE = enum { sfImage = 0; sfDbg; sfPdb; sfMpd; sfMax; }
export type SYMSRV_EXTENDED_OUTPUT_DATA = struct { sizeOfStruct: ulong; version: ulong; filePtrMsg: [261; ushort]; }
export type DBGHELP_DATA_REPORT_STRUCT = struct { pBinPathNonExist: *ushort; pSymbolPathNonExist: *ushort; }
export type MINIDUMP_LOCATION_DESCRIPTOR = struct { DataSize: uint; Rva: ulong; }
export type MINIDUMP_LOCATION_DESCRIPTOR64 = struct { DataSize: uint64; Rva: uint64; }
export type MINIDUMP_MEMORY_DESCRIPTOR = struct { StartOfMemoryRange: uint64; Memory: MINIDUMP_LOCATION_DESCRIPTOR; }
export type MINIDUMP_MEMORY_DESCRIPTOR64 = struct { StartOfMemoryRange: uint64; DataSize: uint64; }
export type MINIDUMP_HEADER = struct { Signature: uint; Version: uint; NumberOfStreams: uint; StreamDirectoryRva: ulong; CheckSum: uint; _7: struct #union { Reserved: uint; TimeDateStamp: uint; }; Flags: uint64; }
export type MINIDUMP_DIRECTORY = struct { StreamType: uint; Location: MINIDUMP_LOCATION_DESCRIPTOR; }
export type MINIDUMP_STRING = struct { Length: uint; Buffer: *ushort; }
export type MINIDUMP_STREAM_TYPE = enum { UnusedStream = 0; ReservedStream0 = 1; ReservedStream1 = 2; ThreadListStream = 3; ModuleListStream = 4; MemoryListStream = 5; ExceptionStream = 6; SystemInfoStream = 7; ThreadExListStream = 8; Memory64ListStream = 9; CommentStreamA = 10; CommentStreamW = 11; HandleDataStream = 12; FunctionTableStream = 13; UnloadedModuleListStream = 14; MiscInfoStream = 15; MemoryInfoListStream = 16; ThreadInfoListStream = 17; HandleOperationListStream = 18; TokenStream = 19; JavaScriptDataStream = 20; SystemMemoryInfoStream = 21; ProcessVmCountersStream = 22; IptTraceStream = 23; ThreadNamesStream = 24; ceStreamNull = 32768; ceStreamSystemInfo = 32769; ceStreamException = 32770; ceStreamModuleList = 32771; ceStreamProcessList = 32772; ceStreamThreadList = 32773; ceStreamThreadContextList = 32774; ceStreamThreadCallStackList = 32775; ceStreamMemoryVirtualList = 32776; ceStreamMemoryPhysicalList = 32777; ceStreamBucketParameters = 32778; ceStreamProcessModuleMap = 32779; ceStreamDiagnosisList = 32780; LastReservedStream = 65535; }
export type CPU_INFORMATION = struct #union { X86CpuInfo: struct { VendorId: [3; uint]; VersionInformation: uint; FeatureInformation: uint; AMDExtendedCpuFeatures: uint; }; OtherCpuInfo: struct { ProcessorFeatures: [2; uint64]; }; }
export type MINIDUMP_SYSTEM_INFO = struct { ProcessorArchitecture: ushort; ProcessorLevel: ushort; ProcessorRevision: ushort; _5: struct #union { Reserved0: ushort; _3: struct { NumberOfProcessors: char; ProductType: char; }; }; MajorVersion: uint; MinorVersion: uint; BuildNumber: uint; PlatformId: uint; CSDVersionRva: ulong; _15: struct #union { Reserved1: uint; _3: struct { SuiteMask: ushort; Reserved2: ushort; }; }; Cpu: CPU_INFORMATION; }
export type MINIDUMP_THREAD = struct { ThreadId: uint; SuspendCount: uint; PriorityClass: uint; Priority: uint; Teb: uint64; Stack: MINIDUMP_MEMORY_DESCRIPTOR; ThreadContext: MINIDUMP_LOCATION_DESCRIPTOR; }
export type MINIDUMP_THREAD_LIST = struct { NumberOfThreads: uint; Threads: *MINIDUMP_THREAD; }
export type MINIDUMP_THREAD_EX = struct { ThreadId: uint; SuspendCount: uint; PriorityClass: uint; Priority: uint; Teb: uint64; Stack: MINIDUMP_MEMORY_DESCRIPTOR; ThreadContext: MINIDUMP_LOCATION_DESCRIPTOR; BackingStore: MINIDUMP_MEMORY_DESCRIPTOR; }
export type MINIDUMP_THREAD_EX_LIST = struct { NumberOfThreads: uint; Threads: *MINIDUMP_THREAD_EX; }
export type MINIDUMP_EXCEPTION = struct { ExceptionCode: uint; ExceptionFlags: uint; ExceptionRecord: uint64; ExceptionAddress: uint64; NumberParameters: uint; __unusedAlignment: uint; ExceptionInformation: [15; uint64]; }
export type MINIDUMP_EXCEPTION_STREAM = struct { ThreadId: uint; __alignment: uint; ExceptionRecord: MINIDUMP_EXCEPTION; ThreadContext: MINIDUMP_LOCATION_DESCRIPTOR; }
export type MINIDUMP_MODULE = struct { BaseOfImage: uint64; SizeOfImage: uint; CheckSum: uint; TimeDateStamp: uint; ModuleNameRva: ulong; VersionInfo: VS_FIXEDFILEINFO; CvRecord: MINIDUMP_LOCATION_DESCRIPTOR; MiscRecord: MINIDUMP_LOCATION_DESCRIPTOR; Reserved0: uint64; Reserved1: uint64; }
export type MINIDUMP_MODULE_LIST = struct { NumberOfModules: uint; Modules: *MINIDUMP_MODULE; }
export type MINIDUMP_MEMORY_LIST = struct { NumberOfMemoryRanges: uint; MemoryRanges: *MINIDUMP_MEMORY_DESCRIPTOR; }
export type MINIDUMP_MEMORY64_LIST = struct { NumberOfMemoryRanges: uint64; BaseRva: uint64; MemoryRanges: *MINIDUMP_MEMORY_DESCRIPTOR64; }
export type MINIDUMP_EXCEPTION_INFORMATION = struct { ThreadId: ulong; ExceptionPointers: *EXCEPTION_POINTERS; ClientPointers: int; }
export type MINIDUMP_EXCEPTION_INFORMATION64 = struct { ThreadId: ulong; ExceptionRecord: uint64; ContextRecord: uint64; ClientPointers: int; }
export type MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE = enum { MiniHandleObjectInformationNone; MiniThreadInformation1; MiniMutantInformation1; MiniMutantInformation2; MiniProcessInformation1; MiniProcessInformation2; MiniEventInformation1; MiniSectionInformation1; MiniSemaphoreInformation1; MiniHandleObjectInformationTypeMax; }
export type MINIDUMP_HANDLE_OBJECT_INFORMATION = struct { NextInfoRva: ulong; InfoType: uint; SizeOfInfo: uint; }
export type MINIDUMP_HANDLE_DESCRIPTOR = struct { Handle: uint64; TypeNameRva: ulong; ObjectNameRva: ulong; Attributes: uint; GrantedAccess: uint; HandleCount: uint; PointerCount: uint; }
export type MINIDUMP_HANDLE_DESCRIPTOR_2 = struct { Handle: uint64; TypeNameRva: ulong; ObjectNameRva: ulong; Attributes: uint; GrantedAccess: uint; HandleCount: uint; PointerCount: uint; ObjectInfoRva: ulong; Reserved0: uint; }
export type MINIDUMP_HANDLE_DATA_STREAM = struct { SizeOfHeader: uint; SizeOfDescriptor: uint; NumberOfDescriptors: uint; Reserved: uint; }
export type MINIDUMP_HANDLE_OPERATION_LIST = struct { SizeOfHeader: uint; SizeOfEntry: uint; NumberOfEntries: uint; Reserved: uint; }
export type MINIDUMP_FUNCTION_TABLE_DESCRIPTOR = struct { MinimumAddress: uint64; MaximumAddress: uint64; BaseAddress: uint64; EntryCount: uint; SizeOfAlignPad: uint; }
export type MINIDUMP_FUNCTION_TABLE_STREAM = struct { SizeOfHeader: uint; SizeOfDescriptor: uint; SizeOfNativeDescriptor: uint; SizeOfFunctionEntry: uint; NumberOfDescriptors: uint; SizeOfAlignPad: uint; }
export type MINIDUMP_UNLOADED_MODULE = struct { BaseOfImage: uint64; SizeOfImage: uint; CheckSum: uint; TimeDateStamp: uint; ModuleNameRva: ulong; }
export type MINIDUMP_UNLOADED_MODULE_LIST = struct { SizeOfHeader: uint; SizeOfEntry: uint; NumberOfEntries: uint; }
export type XSTATE_CONFIG_FEATURE_MSC_INFO = struct { SizeOfInfo: uint; ContextSize: uint; EnabledFeatures: uint64; Features: [64; XSTATE_FEATURE]; }
export type MINIDUMP_MISC_INFO = struct { SizeOfInfo: uint; Flags1: uint; ProcessId: uint; ProcessCreateTime: uint; ProcessUserTime: uint; ProcessKernelTime: uint; }
export type MINIDUMP_MISC_INFO_2 = struct { SizeOfInfo: uint; Flags1: uint; ProcessId: uint; ProcessCreateTime: uint; ProcessUserTime: uint; ProcessKernelTime: uint; ProcessorMaxMhz: uint; ProcessorCurrentMhz: uint; ProcessorMhzLimit: uint; ProcessorMaxIdleState: uint; ProcessorCurrentIdleState: uint; }
export type MINIDUMP_MISC_INFO_3 = struct { SizeOfInfo: uint; Flags1: uint; ProcessId: uint; ProcessCreateTime: uint; ProcessUserTime: uint; ProcessKernelTime: uint; ProcessorMaxMhz: uint; ProcessorCurrentMhz: uint; ProcessorMhzLimit: uint; ProcessorMaxIdleState: uint; ProcessorCurrentIdleState: uint; ProcessIntegrityLevel: uint; ProcessExecuteFlags: uint; ProtectedProcess: uint; TimeZoneId: uint; TimeZone: TIME_ZONE_INFORMATION; }
export type MINIDUMP_MISC_INFO_4 = struct { SizeOfInfo: uint; Flags1: uint; ProcessId: uint; ProcessCreateTime: uint; ProcessUserTime: uint; ProcessKernelTime: uint; ProcessorMaxMhz: uint; ProcessorCurrentMhz: uint; ProcessorMhzLimit: uint; ProcessorMaxIdleState: uint; ProcessorCurrentIdleState: uint; ProcessIntegrityLevel: uint; ProcessExecuteFlags: uint; ProtectedProcess: uint; TimeZoneId: uint; TimeZone: TIME_ZONE_INFORMATION; BuildString: [260; ushort]; DbgBldStr: [40; ushort]; }
export type MINIDUMP_MISC_INFO_5 = struct { SizeOfInfo: uint; Flags1: uint; ProcessId: uint; ProcessCreateTime: uint; ProcessUserTime: uint; ProcessKernelTime: uint; ProcessorMaxMhz: uint; ProcessorCurrentMhz: uint; ProcessorMhzLimit: uint; ProcessorMaxIdleState: uint; ProcessorCurrentIdleState: uint; ProcessIntegrityLevel: uint; ProcessExecuteFlags: uint; ProtectedProcess: uint; TimeZoneId: uint; TimeZone: TIME_ZONE_INFORMATION; BuildString: [260; ushort]; DbgBldStr: [40; ushort]; XStateData: XSTATE_CONFIG_FEATURE_MSC_INFO; ProcessCookie: uint; }
export type MINIDUMP_MEMORY_INFO = struct { BaseAddress: uint64; AllocationBase: uint64; AllocationProtect: uint; __alignment1: uint; RegionSize: uint64; State: uint; Protect: uint; Type: uint; __alignment2: uint; }
export type MINIDUMP_MEMORY_INFO_LIST = struct { SizeOfHeader: ulong; SizeOfEntry: ulong; NumberOfEntries: uint64; }
export type MINIDUMP_THREAD_NAME = struct { ThreadId: ulong; RvaOfThreadName: uint64; }
export type MINIDUMP_THREAD_NAME_LIST = struct { NumberOfThreadNames: ulong; ThreadNames: *MINIDUMP_THREAD_NAME; }
export type MINIDUMP_THREAD_INFO = struct { ThreadId: uint; DumpFlags: uint; DumpError: uint; ExitStatus: uint; CreateTime: uint64; ExitTime: uint64; KernelTime: uint64; UserTime: uint64; StartAddress: uint64; Affinity: uint64; }
export type MINIDUMP_THREAD_INFO_LIST = struct { SizeOfHeader: ulong; SizeOfEntry: ulong; NumberOfEntries: ulong; }
export type MINIDUMP_TOKEN_INFO_HEADER = struct { TokenSize: ulong; TokenId: ulong; TokenHandle: uint64; }
export type MINIDUMP_TOKEN_INFO_LIST = struct { TokenListSize: ulong; TokenListEntries: ulong; ListHeaderSize: ulong; ElementHeaderSize: ulong; }
export type MINIDUMP_SYSTEM_BASIC_INFORMATION = struct { TimerResolution: ulong; PageSize: ulong; NumberOfPhysicalPages: ulong; LowestPhysicalPageNumber: ulong; HighestPhysicalPageNumber: ulong; AllocationGranularity: ulong; MinimumUserModeAddress: uint64; MaximumUserModeAddress: uint64; ActiveProcessorsAffinityMask: uint64; NumberOfProcessors: ulong; }
export type MINIDUMP_SYSTEM_FILECACHE_INFORMATION = struct { CurrentSize: uint64; PeakSize: uint64; PageFaultCount: ulong; MinimumWorkingSet: uint64; MaximumWorkingSet: uint64; CurrentSizeIncludingTransitionInPages: uint64; PeakSizeIncludingTransitionInPages: uint64; TransitionRePurposeCount: ulong; Flags: ulong; }
export type MINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATION = struct { AvailablePages: uint64; CommittedPages: uint64; CommitLimit: uint64; PeakCommitment: uint64; }
export type MINIDUMP_SYSTEM_PERFORMANCE_INFORMATION = struct { IdleProcessTime: uint64; IoReadTransferCount: uint64; IoWriteTransferCount: uint64; IoOtherTransferCount: uint64; IoReadOperationCount: ulong; IoWriteOperationCount: ulong; IoOtherOperationCount: ulong; AvailablePages: ulong; CommittedPages: ulong; CommitLimit: ulong; PeakCommitment: ulong; PageFaultCount: ulong; CopyOnWriteCount: ulong; TransitionCount: ulong; CacheTransitionCount: ulong; DemandZeroCount: ulong; PageReadCount: ulong; PageReadIoCount: ulong; CacheReadCount: ulong; CacheIoCount: ulong; DirtyPagesWriteCount: ulong; DirtyWriteIoCount: ulong; MappedPagesWriteCount: ulong; MappedWriteIoCount: ulong; PagedPoolPages: ulong; NonPagedPoolPages: ulong; PagedPoolAllocs: ulong; PagedPoolFrees: ulong; NonPagedPoolAllocs: ulong; NonPagedPoolFrees: ulong; FreeSystemPtes: ulong; ResidentSystemCodePage: ulong; TotalSystemDriverPages: ulong; TotalSystemCodePages: ulong; NonPagedPoolLookasideHits: ulong; PagedPoolLookasideHits: ulong; AvailablePagedPoolPages: ulong; ResidentSystemCachePage: ulong; ResidentPagedPoolPage: ulong; ResidentSystemDriverPage: ulong; CcFastReadNoWait: ulong; CcFastReadWait: ulong; CcFastReadResourceMiss: ulong; CcFastReadNotPossible: ulong; CcFastMdlReadNoWait: ulong; CcFastMdlReadWait: ulong; CcFastMdlReadResourceMiss: ulong; CcFastMdlReadNotPossible: ulong; CcMapDataNoWait: ulong; CcMapDataWait: ulong; CcMapDataNoWaitMiss: ulong; CcMapDataWaitMiss: ulong; CcPinMappedDataCount: ulong; CcPinReadNoWait: ulong; CcPinReadWait: ulong; CcPinReadNoWaitMiss: ulong; CcPinReadWaitMiss: ulong; CcCopyReadNoWait: ulong; CcCopyReadWait: ulong; CcCopyReadNoWaitMiss: ulong; CcCopyReadWaitMiss: ulong; CcMdlReadNoWait: ulong; CcMdlReadWait: ulong; CcMdlReadNoWaitMiss: ulong; CcMdlReadWaitMiss: ulong; CcReadAheadIos: ulong; CcLazyWriteIos: ulong; CcLazyWritePages: ulong; CcDataFlushes: ulong; CcDataPages: ulong; ContextSwitches: ulong; FirstLevelTbFills: ulong; SecondLevelTbFills: ulong; SystemCalls: ulong; CcTotalDirtyPages: uint64; CcDirtyPageThreshold: uint64; ResidentAvailablePages: int64; SharedCommittedPages: uint64; }
export type MINIDUMP_SYSTEM_MEMORY_INFO_1 = struct { Revision: ushort; Flags: ushort; BasicInfo: MINIDUMP_SYSTEM_BASIC_INFORMATION; FileCacheInfo: MINIDUMP_SYSTEM_FILECACHE_INFORMATION; BasicPerfInfo: MINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATION; PerfInfo: MINIDUMP_SYSTEM_PERFORMANCE_INFORMATION; }
export type MINIDUMP_PROCESS_VM_COUNTERS_1 = struct { Revision: ushort; PageFaultCount: ulong; PeakWorkingSetSize: uint64; WorkingSetSize: uint64; QuotaPeakPagedPoolUsage: uint64; QuotaPagedPoolUsage: uint64; QuotaPeakNonPagedPoolUsage: uint64; QuotaNonPagedPoolUsage: uint64; PagefileUsage: uint64; PeakPagefileUsage: uint64; PrivateUsage: uint64; }
export type MINIDUMP_PROCESS_VM_COUNTERS_2 = struct { Revision: ushort; Flags: ushort; PageFaultCount: ulong; PeakWorkingSetSize: uint64; WorkingSetSize: uint64; QuotaPeakPagedPoolUsage: uint64; QuotaPagedPoolUsage: uint64; QuotaPeakNonPagedPoolUsage: uint64; QuotaNonPagedPoolUsage: uint64; PagefileUsage: uint64; PeakPagefileUsage: uint64; PeakVirtualSize: uint64; VirtualSize: uint64; PrivateUsage: uint64; PrivateWorkingSetSize: uint64; SharedCommitUsage: uint64; JobSharedCommitUsage: uint64; JobPrivateCommitUsage: uint64; JobPeakPrivateCommitUsage: uint64; JobPrivateCommitLimit: uint64; JobTotalCommitLimit: uint64; }
export type MINIDUMP_USER_RECORD = struct { Type: uint; Memory: MINIDUMP_LOCATION_DESCRIPTOR; }
export type MINIDUMP_USER_STREAM = struct { Type: uint; BufferSize: ulong; Buffer: *; }
export type MINIDUMP_USER_STREAM_INFORMATION = struct { UserStreamCount: ulong; UserStreamArray: *MINIDUMP_USER_STREAM; }
export type MINIDUMP_CALLBACK_TYPE = enum { ModuleCallback; ThreadCallback; ThreadExCallback; IncludeThreadCallback; IncludeModuleCallback; MemoryCallback; CancelCallback; WriteKernelMinidumpCallback; KernelMinidumpStatusCallback; RemoveMemoryCallback; IncludeVmRegionCallback; IoStartCallback; IoWriteAllCallback; IoFinishCallback; ReadMemoryFailureCallback; SecondaryFlagsCallback; IsProcessSnapshotCallback; VmStartCallback; VmQueryCallback; VmPreReadCallback; VmPostReadCallback; }
export type MINIDUMP_THREAD_CALLBACK = struct { ThreadId: ulong; ThreadHandle: *; Context: CONTEXT; SizeOfContext: ulong; StackBase: uint64; StackEnd: uint64; }
export type MINIDUMP_THREAD_EX_CALLBACK = struct { ThreadId: ulong; ThreadHandle: *; Context: CONTEXT; SizeOfContext: ulong; StackBase: uint64; StackEnd: uint64; BackingStoreBase: uint64; BackingStoreEnd: uint64; }
export type MINIDUMP_INCLUDE_THREAD_CALLBACK = struct { ThreadId: ulong; }
export type THREAD_WRITE_FLAGS = enum { ThreadWriteThread = 1; ThreadWriteStack = 2; ThreadWriteContext = 4; ThreadWriteBackingStore = 8; ThreadWriteInstructionWindow = 16; ThreadWriteThreadData = 32; ThreadWriteThreadInfo = 64; }
export type MINIDUMP_MODULE_CALLBACK = struct { FullPath: *ushort; BaseOfImage: uint64; SizeOfImage: ulong; CheckSum: ulong; TimeDateStamp: ulong; VersionInfo: VS_FIXEDFILEINFO; CvRecord: *; SizeOfCvRecord: ulong; MiscRecord: *; SizeOfMiscRecord: ulong; }
export type MINIDUMP_INCLUDE_MODULE_CALLBACK = struct { BaseOfImage: uint64; }
export type MODULE_WRITE_FLAGS = enum { ModuleWriteModule = 1; ModuleWriteDataSeg = 2; ModuleWriteMiscRecord = 4; ModuleWriteCvRecord = 8; ModuleReferencedByMemory = 16; ModuleWriteTlsData = 32; ModuleWriteCodeSegs = 64; }
export type MINIDUMP_IO_CALLBACK = struct { Handle: *; Offset: uint64; Buffer: *; BufferBytes: ulong; }
export type MINIDUMP_READ_MEMORY_FAILURE_CALLBACK = struct { Offset: uint64; Bytes: ulong; FailureStatus: long; }
export type MINIDUMP_VM_QUERY_CALLBACK = struct { Offset: uint64; }
export type MINIDUMP_VM_PRE_READ_CALLBACK = struct { Offset: uint64; Buffer: *; Size: ulong; }
export type MINIDUMP_VM_POST_READ_CALLBACK = struct { Offset: uint64; Buffer: *; Size: ulong; Completed: ulong; Status: long; }
export type MINIDUMP_CALLBACK_INPUT = struct { ProcessId: ulong; ProcessHandle: *; CallbackType: ulong; _5: struct #union { Status: long; Thread: MINIDUMP_THREAD_CALLBACK; ThreadEx: MINIDUMP_THREAD_EX_CALLBACK; Module: MINIDUMP_MODULE_CALLBACK; IncludeThread: MINIDUMP_INCLUDE_THREAD_CALLBACK; IncludeModule: MINIDUMP_INCLUDE_MODULE_CALLBACK; Io: MINIDUMP_IO_CALLBACK; ReadMemoryFailure: MINIDUMP_READ_MEMORY_FAILURE_CALLBACK; SecondaryFlags: ulong; VmQuery: MINIDUMP_VM_QUERY_CALLBACK; VmPreRead: MINIDUMP_VM_PRE_READ_CALLBACK; VmPostRead: MINIDUMP_VM_POST_READ_CALLBACK; }; }
export type MINIDUMP_CALLBACK_OUTPUT = struct { _2: struct #union { ModuleWriteFlags: ulong; ThreadWriteFlags: ulong; SecondaryFlags: ulong; _5: struct { MemoryBase: uint64; MemorySize: ulong; }; _9: struct { CheckCancel: int; Cancel: int; }; Handle: *; _14: struct { VmRegion: MINIDUMP_MEMORY_INFO; Continue: int; }; _18: struct { VmQueryStatus: long; VmQueryResult: MINIDUMP_MEMORY_INFO; }; _22: struct { VmReadStatus: long; VmReadBytesCompleted: ulong; }; Status: long; }; }
export type MINIDUMP_TYPE = enum { MiniDumpNormal = 0; MiniDumpWithDataSegs = 1; MiniDumpWithFullMemory = 2; MiniDumpWithHandleData = 4; MiniDumpFilterMemory = 8; MiniDumpScanMemory = 16; MiniDumpWithUnloadedModules = 32; MiniDumpWithIndirectlyReferencedMemory = 64; MiniDumpFilterModulePaths = 128; MiniDumpWithProcessThreadData = 256; MiniDumpWithPrivateReadWriteMemory = 512; MiniDumpWithoutOptionalData = 1024; MiniDumpWithFullMemoryInfo = 2048; MiniDumpWithThreadInfo = 4096; MiniDumpWithCodeSegs = 8192; MiniDumpWithoutAuxiliaryState = 16384; MiniDumpWithFullAuxiliaryState = 32768; MiniDumpWithPrivateWriteCopyMemory = 65536; MiniDumpIgnoreInaccessibleMemory = 131072; MiniDumpWithTokenInformation = 262144; MiniDumpWithModuleHeaders = 524288; MiniDumpFilterTriage = 1048576; MiniDumpWithAvxXStateContext = 2097152; MiniDumpWithIptTrace = 4194304; MiniDumpScanInaccessiblePartialPages = 8388608; MiniDumpValidTypeFlags = 16777215; }
export type MINIDUMP_SECONDARY_FLAGS = enum { MiniSecondaryWithoutPowerInfo = 1; MiniSecondaryValidFlags = 1; }
export type MINIDUMP_CALLBACK_INFORMATION = struct { CallbackRoutine: def (*, *MINIDUMP_CALLBACK_INPUT, *MINIDUMP_CALLBACK_OUTPUT) -> (int); CallbackParam: *; }
export type s___crt_locale_data
export type s___crt_multibyte_data
export type s__ACTIVATION_CONTEXT
export type s__TEB
export type s_HKEY__ = struct { unused: int; }
export type s_HMETAFILE__ = struct { unused: int; }
export type s_HINSTANCE__ = struct { unused: int; }
export type s_HRGN__ = struct { unused: int; }
export type s_HRSRC__ = struct { unused: int; }
export type s_HSPRITE__ = struct { unused: int; }
export type s_HLSURF__ = struct { unused: int; }
export type s_HSTR__ = struct { unused: int; }
export type s_HTASK__ = struct { unused: int; }
export type s_HWINSTA__ = struct { unused: int; }
export type s_HKL__ = struct { unused: int; }
export type s_HWND__ = struct { unused: int; }
export type s_HHOOK__ = struct { unused: int; }
export type s_HACCEL__ = struct { unused: int; }
export type s_HBITMAP__ = struct { unused: int; }
export type s_HBRUSH__ = struct { unused: int; }
export type s_HCOLORSPACE__ = struct { unused: int; }
export type s_HDC__ = struct { unused: int; }
export type s_HGLRC__ = struct { unused: int; }
export type s_HDESK__ = struct { unused: int; }
export type s_HENHMETAFILE__ = struct { unused: int; }
export type s_HFONT__ = struct { unused: int; }
export type s_HICON__ = struct { unused: int; }
export type s_HMENU__ = struct { unused: int; }
export type s_HPALETTE__ = struct { unused: int; }
export type s_HPEN__ = struct { unused: int; }
export type s_HWINEVENTHOOK__ = struct { unused: int; }
export type s_HMONITOR__ = struct { unused: int; }
export type s_HUMPD__ = struct { unused: int; }
export type s_DPI_AWARENESS_CONTEXT__ = struct { unused: int; }
export type s__PROC_THREAD_ATTRIBUTE_LIST
export type s_HTOUCHINPUT__ = struct { unused: int; }
export type e_tagPOINTER_INPUT_TYPE = enum { PT_POINTER = 1; PT_TOUCH = 2; PT_PEN = 3; PT_MOUSE = 4; PT_TOUCHPAD = 5; }
export type s_HSYNTHETICPOINTERDEVICE__ = struct { unused: int; }
export type s_HRAWINPUT__ = struct { unused: int; }
export type s_HGESTUREINFO__ = struct { unused: int; }
export type e_SYSNLS_FUNCTION = enum { COMPARE_STRING = 1; }
export type e_SYSGEOTYPE = enum { GEO_NATION = 1; GEO_LATITUDE = 2; GEO_LONGITUDE = 3; GEO_ISO2 = 4; GEO_ISO3 = 5; GEO_RFC1766 = 6; GEO_LCID = 7; GEO_FRIENDLYNAME = 8; GEO_OFFICIALNAME = 9; GEO_TIMEZONES = 10; GEO_OFFICIALLANGUAGES = 11; GEO_ISO_UN_NUMBER = 12; GEO_PARENT = 13; GEO_DIALINGCODE = 14; GEO_CURRENCYCODE = 15; GEO_CURRENCYSYMBOL = 16; GEO_NAME = 17; GEO_ID = 18; }
export type e_SYSGEOCLASS = enum { GEOCLASS_NATION = 16; GEOCLASS_REGION = 14; GEOCLASS_ALL = 0; }
export type s_HSAVEDUILANGUAGES__ = struct { unused: int; }
export type s_val_context = struct { valuelen: int; value_context: *; val_buff_ptr: *; }
export type s_HCONVLIST__ = struct { unused: int; }
export type s_HCONV__ = struct { unused: int; }
export type s_HSZ__ = struct { unused: int; }
export type s_HDDEDATA__ = struct { unused: int; }
export type s_HDRVR__ = struct { unused: int; }
export type s_HMMIO__ = struct { unused: int; }
export type s_HWAVE__ = struct { unused: int; }
export type s_HWAVEIN__ = struct { unused: int; }
export type s_HWAVEOUT__ = struct { unused: int; }
export type s_HMIDI__ = struct { unused: int; }
export type s_HMIDIIN__ = struct { unused: int; }
export type s_HMIDIOUT__ = struct { unused: int; }
export type s_HMIDISTRM__ = struct { unused: int; }
export type s_HMIXEROBJ__ = struct { unused: int; }
export type s_HMIXER__ = struct { unused: int; }
export type e_RPC_ADDRESS_CHANGE_TYPE = enum { PROTOCOL_NOT_LOADED = 1; PROTOCOL_LOADED; PROTOCOL_ADDRESS_CHANGE; }
export type s_HDROP__ = struct { unused: int; }
export type s_NET_ADDRESS_INFO_
export type s_netent = struct { n_name: *char; n_aliases: **char; n_addrtype: short; n_net: ulong; }
export type s_ip_mreq = struct { imr_multiaddr: IN_ADDR; imr_interface: IN_ADDR; }
export type s_sockproto = struct { sp_family: ushort; sp_protocol: ushort; }
export type s__CMSG_RECIPIENT_ENCODE_INFO = struct { dwRecipientChoice: ulong; _2: struct #union { pKeyTrans: *CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO; pKeyAgree: *CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO; pMailList: *CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO; }; }
export type s__CERT_REVOCATION_CHAIN_PARA = struct { cbSize: ulong; hChainEngine: *; hAdditionalStore: *; dwChainFlags: ulong; dwUrlRetrievalTimeout: ulong; pftCurrentTime: *FILETIME; pftCacheResync: *FILETIME; cbMaxUrlRetrievalByteCount: ulong; }
export type s__CERT_CHAIN_CONTEXT = struct { cbSize: ulong; TrustStatus: CERT_TRUST_STATUS; cChain: ulong; rgpChain: **CERT_SIMPLE_CHAIN; cLowerQualityChainContext: ulong; rgpLowerQualityChainContext: **s__CERT_CHAIN_CONTEXT; fHasRevocationFreshnessTime: int; dwRevocationFreshnessTime: ulong; dwCreateFlags: ulong; ChainId: GUID; }
export type s__CERT_SERVER_OCSP_RESPONSE_CONTEXT = struct { cbSize: ulong; pbEncodedOcspResponse: *char; cbEncodedOcspResponse: ulong; }
export type s__NDR_ASYNC_MESSAGE
export type s__NDR_CORRELATION_INFO
export type s_NDR_ALLOC_ALL_NODES_CONTEXT
export type s_NDR_POINTER_QUEUE_STATE
export type s__NDR_PROC_CONTEXT
export type e_VARENUM = enum { VT_EMPTY = 0; VT_NULL = 1; VT_I2 = 2; VT_I4 = 3; VT_R4 = 4; VT_R8 = 5; VT_CY = 6; VT_DATE = 7; VT_BSTR = 8; VT_DISPATCH = 9; VT_ERROR = 10; VT_BOOL = 11; VT_VARIANT = 12; VT_UNKNOWN = 13; VT_DECIMAL = 14; VT_I1 = 16; VT_UI1 = 17; VT_UI2 = 18; VT_UI4 = 19; VT_I8 = 20; VT_UI8 = 21; VT_INT = 22; VT_UINT = 23; VT_VOID = 24; VT_HRESULT = 25; VT_PTR = 26; VT_SAFEARRAY = 27; VT_CARRAY = 28; VT_USERDEFINED = 29; VT_LPSTR = 30; VT_LPWSTR = 31; VT_RECORD = 36; VT_INT_PTR = 37; VT_UINT_PTR = 38; VT_FILETIME = 64; VT_BLOB = 65; VT_STREAM = 66; VT_STORAGE = 67; VT_STREAMED_OBJECT = 68; VT_STORED_OBJECT = 69; VT_BLOB_OBJECT = 70; VT_CF = 71; VT_CLSID = 72; VT_VERSIONED_STREAM = 73; VT_BSTR_BLOB = 4095; VT_VECTOR = 4096; VT_ARRAY = 8192; VT_BYREF = 16384; VT_RESERVED = 32768; VT_ILLEGAL = 65535; VT_ILLEGALMASKED = 4095; VT_TYPEMASK = 4095; }
export type s__PSP
export type s_IUnknown = struct { lpVtbl: *IUnknownVtbl; }
export type s_AsyncIUnknown = struct { lpVtbl: *AsyncIUnknownVtbl; }
export type s_IClassFactory = struct { lpVtbl: *IClassFactoryVtbl; }
export type s_IMarshal = struct { lpVtbl: *IMarshalVtbl; }
export type s_INoMarshal = struct { lpVtbl: *INoMarshalVtbl; }
export type s_IAgileObject = struct { lpVtbl: *IAgileObjectVtbl; }
export type s_IActivationFilter = struct { lpVtbl: *IActivationFilterVtbl; }
export type s_IMarshal2 = struct { lpVtbl: *IMarshal2Vtbl; }
export type s_IMalloc = struct { lpVtbl: *IMallocVtbl; }
export type s_IStdMarshalInfo = struct { lpVtbl: *IStdMarshalInfoVtbl; }
export type s_IExternalConnection = struct { lpVtbl: *IExternalConnectionVtbl; }
export type s_IMultiQI = struct { lpVtbl: *IMultiQIVtbl; }
export type s_AsyncIMultiQI = struct { lpVtbl: *AsyncIMultiQIVtbl; }
export type s_IInternalUnknown = struct { lpVtbl: *IInternalUnknownVtbl; }
export type s_IEnumUnknown = struct { lpVtbl: *IEnumUnknownVtbl; }
export type s_IEnumString = struct { lpVtbl: *IEnumStringVtbl; }
export type s_ISequentialStream = struct { lpVtbl: *ISequentialStreamVtbl; }
export type s_IStream = struct { lpVtbl: *IStreamVtbl; }
export type s_IRpcChannelBuffer2 = struct { lpVtbl: *IRpcChannelBuffer2Vtbl; }
export type s_IAsyncRpcChannelBuffer = struct { lpVtbl: *IAsyncRpcChannelBufferVtbl; }
export type s_IRpcChannelBuffer3 = struct { lpVtbl: *IRpcChannelBuffer3Vtbl; }
export type s_IRpcSyntaxNegotiate = struct { lpVtbl: *IRpcSyntaxNegotiateVtbl; }
export type s_IRpcProxyBuffer = struct { lpVtbl: *IRpcProxyBufferVtbl; }
export type s_IPSFactoryBuffer = struct { lpVtbl: *IPSFactoryBufferVtbl; }
export type s_IChannelHook = struct { lpVtbl: *IChannelHookVtbl; }
export type s_IClientSecurity = struct { lpVtbl: *IClientSecurityVtbl; }
export type s_IServerSecurity = struct { lpVtbl: *IServerSecurityVtbl; }
export type s_IRpcOptions = struct { lpVtbl: *IRpcOptionsVtbl; }
export type s_IGlobalOptions = struct { lpVtbl: *IGlobalOptionsVtbl; }
export type s_ISurrogate = struct { lpVtbl: *ISurrogateVtbl; }
export type s_IGlobalInterfaceTable = struct { lpVtbl: *IGlobalInterfaceTableVtbl; }
export type s_ISynchronize = struct { lpVtbl: *ISynchronizeVtbl; }
export type s_ISynchronizeHandle = struct { lpVtbl: *ISynchronizeHandleVtbl; }
export type s_ISynchronizeEvent = struct { lpVtbl: *ISynchronizeEventVtbl; }
export type s_ISynchronizeContainer = struct { lpVtbl: *ISynchronizeContainerVtbl; }
export type s_ISynchronizeMutex = struct { lpVtbl: *ISynchronizeMutexVtbl; }
export type s_ICancelMethodCalls = struct { lpVtbl: *ICancelMethodCallsVtbl; }
export type s_IAsyncManager = struct { lpVtbl: *IAsyncManagerVtbl; }
export type s_ICallFactory = struct { lpVtbl: *ICallFactoryVtbl; }
export type s_IRpcHelper = struct { lpVtbl: *IRpcHelperVtbl; }
export type s_IReleaseMarshalBuffers = struct { lpVtbl: *IReleaseMarshalBuffersVtbl; }
export type s_IWaitMultiple = struct { lpVtbl: *IWaitMultipleVtbl; }
export type s_IAddrTrackingControl = struct { lpVtbl: *IAddrTrackingControlVtbl; }
export type s_IAddrExclusionControl = struct { lpVtbl: *IAddrExclusionControlVtbl; }
export type s_IPipeByte = struct { lpVtbl: *IPipeByteVtbl; }
export type s_AsyncIPipeByte = struct { lpVtbl: *AsyncIPipeByteVtbl; }
export type s_IPipeLong = struct { lpVtbl: *IPipeLongVtbl; }
export type s_AsyncIPipeLong = struct { lpVtbl: *AsyncIPipeLongVtbl; }
export type s_IPipeDouble = struct { lpVtbl: *IPipeDoubleVtbl; }
export type s_AsyncIPipeDouble = struct { lpVtbl: *AsyncIPipeDoubleVtbl; }
export type s_IComThreadingInfo = struct { lpVtbl: *IComThreadingInfoVtbl; }
export type s_IProcessInitControl = struct { lpVtbl: *IProcessInitControlVtbl; }
export type s_IFastRundown = struct { lpVtbl: *IFastRundownVtbl; }
export type s_IMarshalingStream = struct { lpVtbl: *IMarshalingStreamVtbl; }
export type s_IAgileReference = struct { lpVtbl: *IAgileReferenceVtbl; }
export type s_CO_MTA_USAGE_COOKIE__ = struct { unused: int; }
export type s_tagPROPVARIANT = struct { _2: struct #union { _2: struct { vt: ushort; wReserved1: ushort; wReserved2: ushort; wReserved3: ushort; _6: struct #union { cVal: char; bVal: char; iVal: short; uiVal: ushort; lVal: long; ulVal: ulong; intVal: int; uintVal: uint; hVal: LARGE_INTEGER; uhVal: ULARGE_INTEGER; fltVal: float; dblVal: double; boolVal: short; __OBSOLETE__VARIANT_BOOL: short; scode: long; cyVal: CY; date: double; filetime: FILETIME; puuid: *GUID; pclipdata: *CLIPDATA; bstrVal: *ushort; bstrblobVal: BSTRBLOB; blob: BLOB; pszVal: *char; pwszVal: *ushort; punkVal: *s_IUnknown; pdispVal: *s_IDispatch; pStream: *s_IStream; pStorage: *s_IStorage; pVersionedStream: *VERSIONEDSTREAM; parray: *SAFEARRAY; cac: CAC; caub: CAUB; cai: CAI; caui: CAUI; cal: CAL; caul: CAUL; cah: CAH; cauh: CAUH; caflt: CAFLT; cadbl: CADBL; cabool: CABOOL; cascode: CASCODE; cacy: CACY; cadate: CADATE; cafiletime: CAFILETIME; cauuid: CACLSID; caclipdata: CACLIPDATA; cabstr: CABSTR; cabstrblob: CABSTRBLOB; calpstr: CALPSTR; calpwstr: CALPWSTR; capropvar: CAPROPVARIANT; pcVal: *char; pbVal: *char; piVal: *short; puiVal: *ushort; plVal: *long; pulVal: *ulong; pintVal: *int; puintVal: *uint; pfltVal: *float; pdblVal: *double; pboolVal: *short; pdecVal: *DECIMAL; pscode: *long; pcyVal: *CY; pdate: *double; pbstrVal: **ushort; ppunkVal: **s_IUnknown; ppdispVal: **s_IDispatch; pparray: **SAFEARRAY; pvarVal: *s_tagPROPVARIANT; }; }; decVal: DECIMAL; }; }
export type e_AgileReferenceOptions = enum { AGILEREFERENCE_DEFAULT = 0; AGILEREFERENCE_DELAYEDMARSHAL = 1; }
export type s_CO_DEVICE_CATALOG_COOKIE__ = struct { unused: int; }
export type s_IMallocSpy = struct { lpVtbl: *IMallocSpyVtbl; }
export type s_IBindCtx = struct { lpVtbl: *IBindCtxVtbl; }
export type s_IEnumMoniker = struct { lpVtbl: *IEnumMonikerVtbl; }
export type s_IRunnableObject = struct { lpVtbl: *IRunnableObjectVtbl; }
export type s_IRunningObjectTable = struct { lpVtbl: *IRunningObjectTableVtbl; }
export type s_IPersist = struct { lpVtbl: *IPersistVtbl; }
export type s_IPersistStream = struct { lpVtbl: *IPersistStreamVtbl; }
export type s_IMoniker = struct { lpVtbl: *IMonikerVtbl; }
export type s_IROTData = struct { lpVtbl: *IROTDataVtbl; }
export type s_IEnumSTATSTG = struct { lpVtbl: *IEnumSTATSTGVtbl; }
export type s_IStorage = struct { lpVtbl: *IStorageVtbl; }
export type s_IPersistFile = struct { lpVtbl: *IPersistFileVtbl; }
export type s_IPersistStorage = struct { lpVtbl: *IPersistStorageVtbl; }
export type s_ILockBytes = struct { lpVtbl: *ILockBytesVtbl; }
export type s_IEnumFORMATETC = struct { lpVtbl: *IEnumFORMATETCVtbl; }
export type s_IEnumSTATDATA = struct { lpVtbl: *IEnumSTATDATAVtbl; }
export type s_IRootStorage = struct { lpVtbl: *IRootStorageVtbl; }
export type s_IAdviseSink = struct { lpVtbl: *IAdviseSinkVtbl; }
export type s_AsyncIAdviseSink = struct { lpVtbl: *AsyncIAdviseSinkVtbl; }
export type s_IAdviseSink2 = struct { lpVtbl: *IAdviseSink2Vtbl; }
export type s_AsyncIAdviseSink2 = struct { lpVtbl: *AsyncIAdviseSink2Vtbl; }
export type s_IDataObject = struct { lpVtbl: *IDataObjectVtbl; }
export type s_IDataAdviseHolder = struct { lpVtbl: *IDataAdviseHolderVtbl; }
export type s_IMessageFilter = struct { lpVtbl: *IMessageFilterVtbl; }
export type s_IClassActivator = struct { lpVtbl: *IClassActivatorVtbl; }
export type s_IFillLockBytes = struct { lpVtbl: *IFillLockBytesVtbl; }
export type s_IProgressNotify = struct { lpVtbl: *IProgressNotifyVtbl; }
export type s_ILayoutStorage = struct { lpVtbl: *ILayoutStorageVtbl; }
export type s_IBlockingLock = struct { lpVtbl: *IBlockingLockVtbl; }
export type s_ITimeAndNoticeControl = struct { lpVtbl: *ITimeAndNoticeControlVtbl; }
export type s_IOplockStorage = struct { lpVtbl: *IOplockStorageVtbl; }
export type s_IDirectWriterLock = struct { lpVtbl: *IDirectWriterLockVtbl; }
export type s_IUrlMon = struct { lpVtbl: *IUrlMonVtbl; }
export type s_IForegroundTransfer = struct { lpVtbl: *IForegroundTransferVtbl; }
export type s_IThumbnailExtractor = struct { lpVtbl: *IThumbnailExtractorVtbl; }
export type s_IDummyHICONIncluder = struct { lpVtbl: *IDummyHICONIncluderVtbl; }
export type s_IProcessLock = struct { lpVtbl: *IProcessLockVtbl; }
export type s_ISurrogateService = struct { lpVtbl: *ISurrogateServiceVtbl; }
export type s_IInitializeSpy = struct { lpVtbl: *IInitializeSpyVtbl; }
export type s_IApartmentShutdown = struct { lpVtbl: *IApartmentShutdownVtbl; }
export type s_IPropertyStorage = struct { lpVtbl: *IPropertyStorageVtbl; }
export type s_IPropertySetStorage = struct { lpVtbl: *IPropertySetStorageVtbl; }
export type s_IEnumSTATPROPSTG = struct { lpVtbl: *IEnumSTATPROPSTGVtbl; }
export type s_IEnumSTATPROPSETSTG = struct { lpVtbl: *IEnumSTATPROPSETSTGVtbl; }
export type s_ICreateTypeInfo = struct { lpVtbl: *ICreateTypeInfoVtbl; }
export type s_ICreateTypeInfo2 = struct { lpVtbl: *ICreateTypeInfo2Vtbl; }
export type s_ICreateTypeLib = struct { lpVtbl: *ICreateTypeLibVtbl; }
export type s_ICreateTypeLib2 = struct { lpVtbl: *ICreateTypeLib2Vtbl; }
export type s_IDispatch = struct { lpVtbl: *IDispatchVtbl; }
export type s_IEnumVARIANT = struct { lpVtbl: *IEnumVARIANTVtbl; }
export type s_ITypeComp = struct { lpVtbl: *ITypeCompVtbl; }
export type s_ITypeInfo = struct { lpVtbl: *ITypeInfoVtbl; }
export type s_ITypeInfo2 = struct { lpVtbl: *ITypeInfo2Vtbl; }
export type s_ITypeLib = struct { lpVtbl: *ITypeLibVtbl; }
export type s_ITypeLib2 = struct { lpVtbl: *ITypeLib2Vtbl; }
export type s_ITypeChangeEvents = struct { lpVtbl: *ITypeChangeEventsVtbl; }
export type s_IErrorInfo = struct { lpVtbl: *IErrorInfoVtbl; }
export type s_ICreateErrorInfo = struct { lpVtbl: *ICreateErrorInfoVtbl; }
export type s_ISupportErrorInfo = struct { lpVtbl: *ISupportErrorInfoVtbl; }
export type s_ITypeFactory = struct { lpVtbl: *ITypeFactoryVtbl; }
export type s_ITypeMarshal = struct { lpVtbl: *ITypeMarshalVtbl; }
export type s_IRecordInfo = struct { lpVtbl: *IRecordInfoVtbl; }
export type s_IErrorLog = struct { lpVtbl: *IErrorLogVtbl; }
export type s_IPropertyBag = struct { lpVtbl: *IPropertyBagVtbl; }
export type s_ITypeLibRegistrationReader = struct { lpVtbl: *ITypeLibRegistrationReaderVtbl; }
export type s_ITypeLibRegistration = struct { lpVtbl: *ITypeLibRegistrationVtbl; }
export type s__wireVARIANT = struct { clSize: ulong; rpcReserved: ulong; vt: ushort; wReserved1: ushort; wReserved2: ushort; wReserved3: ushort; _8: struct #union { llVal: int64; lVal: long; bVal: char; iVal: short; fltVal: float; dblVal: double; boolVal: short; scode: long; cyVal: CY; date: double; bstrVal: *FLAGGED_WORD_BLOB; punkVal: *s_IUnknown; pdispVal: *s_IDispatch; parray: **s__wireSAFEARRAY; brecVal: *s__wireBRECORD; pbVal: *char; piVal: *short; plVal: *long; pllVal: *int64; pfltVal: *float; pdblVal: *double; pboolVal: *short; pscode: *long; pcyVal: *CY; pdate: *double; pbstrVal: **FLAGGED_WORD_BLOB; ppunkVal: **s_IUnknown; ppdispVal: **s_IDispatch; pparray: ***s__wireSAFEARRAY; pvarVal: **s__wireVARIANT; cVal: char; uiVal: ushort; ulVal: ulong; ullVal: uint64; intVal: int; uintVal: uint; decVal: DECIMAL; pdecVal: *DECIMAL; pcVal: *char; puiVal: *ushort; pulVal: *ulong; pullVal: *uint64; pintVal: *int; puintVal: *uint; }; }
export type s__wireBRECORD = struct { fFlags: ulong; clSize: ulong; pRecInfo: *s_IRecordInfo; pRecord: *char; }
export type s__wireSAFEARRAY = struct { cDims: ushort; fFeatures: ushort; cbElements: ulong; cLocks: ulong; uArrayStructs: SAFEARRAYUNION; rgsabound: [1; SAFEARRAYBOUND]; }
export type s_IPersistMoniker = struct { lpVtbl: *IPersistMonikerVtbl; }
export type s_IMonikerProp = struct { lpVtbl: *IMonikerPropVtbl; }
export type s_IBindProtocol = struct { lpVtbl: *IBindProtocolVtbl; }
export type s_IBinding = struct { lpVtbl: *IBindingVtbl; }
export type s_IBindStatusCallback
export type s_IBindStatusCallbackEx = struct { lpVtbl: *IBindStatusCallbackExVtbl; }
export type s_IAuthenticate = struct { lpVtbl: *IAuthenticateVtbl; }
export type s_IAuthenticateEx = struct { lpVtbl: *IAuthenticateExVtbl; }
export type s_IHttpNegotiate = struct { lpVtbl: *IHttpNegotiateVtbl; }
export type s_IHttpNegotiate2 = struct { lpVtbl: *IHttpNegotiate2Vtbl; }
export type s_IHttpNegotiate3 = struct { lpVtbl: *IHttpNegotiate3Vtbl; }
export type s_IWinInetFileStream = struct { lpVtbl: *IWinInetFileStreamVtbl; }
export type s_IWindowForBindingUI = struct { lpVtbl: *IWindowForBindingUIVtbl; }
export type s_ICodeInstall = struct { lpVtbl: *ICodeInstallVtbl; }
export type s_IUri = struct { lpVtbl: *IUriVtbl; }
export type s_IUriContainer = struct { lpVtbl: *IUriContainerVtbl; }
export type s_IUriBuilder = struct { lpVtbl: *IUriBuilderVtbl; }
export type s_IUriBuilderFactory = struct { lpVtbl: *IUriBuilderFactoryVtbl; }
export type s_IWinInetInfo = struct { lpVtbl: *IWinInetInfoVtbl; }
export type s_IHttpSecurity = struct { lpVtbl: *IHttpSecurityVtbl; }
export type s_IWinInetHttpInfo = struct { lpVtbl: *IWinInetHttpInfoVtbl; }
export type s_IWinInetHttpTimeouts = struct { lpVtbl: *IWinInetHttpTimeoutsVtbl; }
export type s_IWinInetCacheHints = struct { lpVtbl: *IWinInetCacheHintsVtbl; }
export type s_IWinInetCacheHints2 = struct { lpVtbl: *IWinInetCacheHints2Vtbl; }
export type s_IBindHost = struct { lpVtbl: *IBindHostVtbl; }
export type s_IInternet = struct { lpVtbl: *IInternetVtbl; }
export type s_IInternetBindInfo = struct { lpVtbl: *IInternetBindInfoVtbl; }
export type s_IInternetBindInfoEx = struct { lpVtbl: *IInternetBindInfoExVtbl; }
export type s_IInternetProtocolRoot = struct { lpVtbl: *IInternetProtocolRootVtbl; }
export type s_IInternetProtocol = struct { lpVtbl: *IInternetProtocolVtbl; }
export type s_IInternetProtocolEx = struct { lpVtbl: *IInternetProtocolExVtbl; }
export type s_IInternetProtocolSink = struct { lpVtbl: *IInternetProtocolSinkVtbl; }
export type s_IInternetProtocolSinkStackable = struct { lpVtbl: *IInternetProtocolSinkStackableVtbl; }
export type s_IInternetSession = struct { lpVtbl: *IInternetSessionVtbl; }
export type s_IInternetThreadSwitch = struct { lpVtbl: *IInternetThreadSwitchVtbl; }
export type s_IInternetPriority = struct { lpVtbl: *IInternetPriorityVtbl; }
export type s_IInternetProtocolInfo = struct { lpVtbl: *IInternetProtocolInfoVtbl; }
export type s_IInternetSecurityMgrSite = struct { lpVtbl: *IInternetSecurityMgrSiteVtbl; }
export type s_IInternetSecurityManager = struct { lpVtbl: *IInternetSecurityManagerVtbl; }
export type s_IInternetSecurityManagerEx = struct { lpVtbl: *IInternetSecurityManagerExVtbl; }
export type s_IInternetSecurityManagerEx2 = struct { lpVtbl: *IInternetSecurityManagerEx2Vtbl; }
export type s_IZoneIdentifier = struct { lpVtbl: *IZoneIdentifierVtbl; }
export type s_IZoneIdentifier2 = struct { lpVtbl: *IZoneIdentifier2Vtbl; }
export type s_IInternetHostSecurityManager = struct { lpVtbl: *IInternetHostSecurityManagerVtbl; }
export type s_IInternetZoneManager = struct { lpVtbl: *IInternetZoneManagerVtbl; }
export type s_IInternetZoneManagerEx = struct { lpVtbl: *IInternetZoneManagerExVtbl; }
export type s_IInternetZoneManagerEx2 = struct { lpVtbl: *IInternetZoneManagerEx2Vtbl; }
export type s_ISoftDistExt = struct { lpVtbl: *ISoftDistExtVtbl; }
export type s_ICatalogFileInfo = struct { lpVtbl: *ICatalogFileInfoVtbl; }
export type s_IDataFilter = struct { lpVtbl: *IDataFilterVtbl; }
export type s_IEncodingFilterFactory = struct { lpVtbl: *IEncodingFilterFactoryVtbl; }
export type s_IWrappedProtocol = struct { lpVtbl: *IWrappedProtocolVtbl; }
export type s_IGetBindHandle = struct { lpVtbl: *IGetBindHandleVtbl; }
export type s_IBindCallbackRedirect = struct { lpVtbl: *IBindCallbackRedirectVtbl; }
export type s_IBindHttpSecurity = struct { lpVtbl: *IBindHttpSecurityVtbl; }
export type s_IOleAdviseHolder = struct { lpVtbl: *IOleAdviseHolderVtbl; }
export type s_IOleCache = struct { lpVtbl: *IOleCacheVtbl; }
export type s_IOleCache2 = struct { lpVtbl: *IOleCache2Vtbl; }
export type s_IOleCacheControl = struct { lpVtbl: *IOleCacheControlVtbl; }
export type s_IParseDisplayName = struct { lpVtbl: *IParseDisplayNameVtbl; }
export type s_IOleContainer = struct { lpVtbl: *IOleContainerVtbl; }
export type s_IOleClientSite = struct { lpVtbl: *IOleClientSiteVtbl; }
export type s_IOleObject = struct { lpVtbl: *IOleObjectVtbl; }
export type s_IOleWindow = struct { lpVtbl: *IOleWindowVtbl; }
export type s_IOleLink = struct { lpVtbl: *IOleLinkVtbl; }
export type s_IOleItemContainer = struct { lpVtbl: *IOleItemContainerVtbl; }
export type s_IOleInPlaceUIWindow = struct { lpVtbl: *IOleInPlaceUIWindowVtbl; }
export type s_IOleInPlaceActiveObject = struct { lpVtbl: *IOleInPlaceActiveObjectVtbl; }
export type s_IOleInPlaceFrame = struct { lpVtbl: *IOleInPlaceFrameVtbl; }
export type s_IOleInPlaceObject = struct { lpVtbl: *IOleInPlaceObjectVtbl; }
export type s_IOleInPlaceSite = struct { lpVtbl: *IOleInPlaceSiteVtbl; }
export type s_IContinue = struct { lpVtbl: *IContinueVtbl; }
export type s_IViewObject = struct { lpVtbl: *IViewObjectVtbl; }
export type s_IViewObject2 = struct { lpVtbl: *IViewObject2Vtbl; }
export type s_IDropSource = struct { lpVtbl: *IDropSourceVtbl; }
export type s_IDropTarget = struct { lpVtbl: *IDropTargetVtbl; }
export type s_IDropSourceNotify = struct { lpVtbl: *IDropSourceNotifyVtbl; }
export type s_IEnterpriseDropTarget = struct { lpVtbl: *IEnterpriseDropTargetVtbl; }
export type s_IEnumOLEVERB = struct { lpVtbl: *IEnumOLEVERBVtbl; }
export type s_IServiceProvider = struct { lpVtbl: *IServiceProviderVtbl; }
export type s_IXMLDOMImplementation = struct { lpVtbl: *IXMLDOMImplementationVtbl; }
export type s_IXMLDOMNode = struct { lpVtbl: *IXMLDOMNodeVtbl; }
export type s_IXMLDOMDocumentFragment = struct { lpVtbl: *IXMLDOMDocumentFragmentVtbl; }
export type s_IXMLDOMDocument = struct { lpVtbl: *IXMLDOMDocumentVtbl; }
export type s_IXMLDOMNodeList = struct { lpVtbl: *IXMLDOMNodeListVtbl; }
export type s_IXMLDOMNamedNodeMap = struct { lpVtbl: *IXMLDOMNamedNodeMapVtbl; }
export type s_IXMLDOMCharacterData = struct { lpVtbl: *IXMLDOMCharacterDataVtbl; }
export type s_IXMLDOMAttribute = struct { lpVtbl: *IXMLDOMAttributeVtbl; }
export type s_IXMLDOMElement = struct { lpVtbl: *IXMLDOMElementVtbl; }
export type s_IXMLDOMText = struct { lpVtbl: *IXMLDOMTextVtbl; }
export type s_IXMLDOMComment = struct { lpVtbl: *IXMLDOMCommentVtbl; }
export type s_IXMLDOMProcessingInstruction = struct { lpVtbl: *IXMLDOMProcessingInstructionVtbl; }
export type s_IXMLDOMCDATASection = struct { lpVtbl: *IXMLDOMCDATASectionVtbl; }
export type s_IXMLDOMDocumentType = struct { lpVtbl: *IXMLDOMDocumentTypeVtbl; }
export type s_IXMLDOMNotation = struct { lpVtbl: *IXMLDOMNotationVtbl; }
export type s_IXMLDOMEntity = struct { lpVtbl: *IXMLDOMEntityVtbl; }
export type s_IXMLDOMEntityReference = struct { lpVtbl: *IXMLDOMEntityReferenceVtbl; }
export type s_IXMLDOMParseError = struct { lpVtbl: *IXMLDOMParseErrorVtbl; }
export type s_IXTLRuntime = struct { lpVtbl: *IXTLRuntimeVtbl; }
export type s_XMLDOMDocumentEvents = struct { lpVtbl: *XMLDOMDocumentEventsVtbl; }
export type s_IXMLHttpRequest = struct { lpVtbl: *IXMLHttpRequestVtbl; }
export type s_IXMLDSOControl = struct { lpVtbl: *IXMLDSOControlVtbl; }
export type s_IXMLElementCollection = struct { lpVtbl: *IXMLElementCollectionVtbl; }
export type s_IXMLDocument = struct { lpVtbl: *IXMLDocumentVtbl; }
export type s_IXMLDocument2 = struct { lpVtbl: *IXMLDocument2Vtbl; }
export type s_IXMLElement = struct { lpVtbl: *IXMLElementVtbl; }
export type s_IXMLElement2 = struct { lpVtbl: *IXMLElement2Vtbl; }
export type s_IXMLAttribute = struct { lpVtbl: *IXMLAttributeVtbl; }
export type s_IXMLError = struct { lpVtbl: *IXMLErrorVtbl; }
export type e___MIDL_IInternetZoneManager_0001 = enum { MAX_ZONE_PATH = 260; MAX_ZONE_DESCRIPTION = 200; }
export type s_CONFIRMSAFETY = struct { clsid: GUID; pUnk: *s_IUnknown; dwFlags: ulong; }
export type e_PIDMSI_STATUS_VALUE = enum { PIDMSI_STATUS_NORMAL = 0; PIDMSI_STATUS_NEW = ((PIDMSI_STATUS_NORMAL + 1)); PIDMSI_STATUS_PRELIM = ((PIDMSI_STATUS_NEW + 1)); PIDMSI_STATUS_DRAFT = ((PIDMSI_STATUS_PRELIM + 1)); PIDMSI_STATUS_INPROGRESS = ((PIDMSI_STATUS_DRAFT + 1)); PIDMSI_STATUS_EDIT = ((PIDMSI_STATUS_INPROGRESS + 1)); PIDMSI_STATUS_REVIEW = ((PIDMSI_STATUS_EDIT + 1)); PIDMSI_STATUS_PROOF = ((PIDMSI_STATUS_REVIEW + 1)); PIDMSI_STATUS_FINAL = ((PIDMSI_STATUS_PROOF + 1)); PIDMSI_STATUS_OTHER = 32767; }
export type s_SC_HANDLE__ = struct { unused: int; }
export type s_SERVICE_STATUS_HANDLE__ = struct { unused: int; }
export type s__SC_NOTIFICATION_REGISTRATION
export type s_HIMC__ = struct { unused: int; }
export type s_HIMCC__ = struct { unused: int; }
export import def #extern __va_start(_0: **char, ...)
export import def #extern __C_specific_handler(ExceptionRecord: *EXCEPTION_RECORD, EstablisherFrame: *, ContextRecord: *CONTEXT, DispatcherContext: *DISPATCHER_CONTEXT) -> EXCEPTION_DISPOSITION
export import def #extern _exception_code() -> ulong
export import def #extern _exception_info() -> *
export import def #extern _abnormal_termination() -> int
export import def #extern _rotl8(Value: char, Shift: char) -> char
export import def #extern _rotl16(Value: ushort, Shift: char) -> ushort
export import def #extern _rotr8(Value: char, Shift: char) -> char
export import def #extern _rotr16(Value: ushort, Shift: char) -> ushort
export import def #extern _bittest(Base: *long, Offset: long) -> char
export import def #extern _bittestandcomplement(Base: *long, Offset: long) -> char
export import def #extern _bittestandset(Base: *long, Offset: long) -> char
export import def #extern _bittestandreset(Base: *long, Offset: long) -> char
export import def #extern _interlockedbittestandset(Base: *long, Offset: long) -> char
export import def #extern _interlockedbittestandreset(Base: *long, Offset: long) -> char
export import def #extern _bittest64(Base: *int64, Offset: int64) -> char
export import def #extern _bittestandcomplement64(Base: *int64, Offset: int64) -> char
export import def #extern _bittestandset64(Base: *int64, Offset: int64) -> char
export import def #extern _bittestandreset64(Base: *int64, Offset: int64) -> char
export import def #extern _interlockedbittestandset64(Base: *int64, Offset: int64) -> char
export import def #extern _interlockedbittestandreset64(Base: *int64, Offset: int64) -> char
export import def #extern _BitScanForward(Index: *ulong, Mask: ulong) -> char
export import def #extern _BitScanReverse(Index: *ulong, Mask: ulong) -> char
export import def #extern _BitScanForward64(Index: *ulong, Mask: uint64) -> char
export import def #extern _BitScanReverse64(Index: *ulong, Mask: uint64) -> char
export import def #extern _InterlockedIncrement16(Addend: *short) -> short
export import def #extern _InterlockedDecrement16(Addend: *short) -> short
export import def #extern _InterlockedCompareExchange16(Destination: *short, ExChange: short, Comperand: short) -> short
export import def #extern _InterlockedAnd(Destination: *long, Value: long) -> long
export import def #extern _InterlockedOr(Destination: *long, Value: long) -> long
export import def #extern _InterlockedXor(Destination: *long, Value: long) -> long
export import def #extern _InterlockedAnd64(Destination: *int64, Value: int64) -> int64
export import def #extern _InterlockedOr64(Destination: *int64, Value: int64) -> int64
export import def #extern _InterlockedXor64(Destination: *int64, Value: int64) -> int64
export import def #extern _InterlockedIncrement(Addend: *long) -> long
export import def #extern _InterlockedDecrement(Addend: *long) -> long
export import def #extern _InterlockedExchange(Target: *long, Value: long) -> long
export import def #extern _InterlockedExchangeAdd(Addend: *long, Value: long) -> long
export import def #extern _InterlockedCompareExchange(Destination: *long, ExChange: long, Comperand: long) -> long
export import def #extern _InterlockedIncrement64(Addend: *int64) -> int64
export import def #extern _InterlockedDecrement64(Addend: *int64) -> int64
export import def #extern _InterlockedExchange64(Target: *int64, Value: int64) -> int64
export import def #extern _InterlockedExchangeAdd64(Addend: *int64, Value: int64) -> int64
export import def #extern _InterlockedCompareExchange64(Destination: *int64, ExChange: int64, Comperand: int64) -> int64
export import def #extern _InterlockedCompareExchange128(Destination: *int64, ExchangeHigh: int64, ExchangeLow: int64, ComparandResult: *int64) -> char
export import def #extern _InterlockedCompareExchangePointer(Destination: **, Exchange: *, Comperand: *) -> *
export import def #extern _InterlockedExchangePointer(Target: **, Value: *) -> *
export import def #extern _InterlockedExchange8(Target: *char, Value: char) -> char
export import def #extern _InterlockedExchange16(Destination: *short, ExChange: short) -> short
export import def #extern _InterlockedExchangeAdd8(_Addend: *char, _Value: char) -> char
export import def #extern _InterlockedAnd8(Destination: *char, Value: char) -> char
export import def #extern _InterlockedOr8(Destination: *char, Value: char) -> char
export import def #extern _InterlockedXor8(Destination: *char, Value: char) -> char
export import def #extern _InterlockedAnd16(Destination: *short, Value: short) -> short
export import def #extern _InterlockedOr16(Destination: *short, Value: short) -> short
export import def #extern _InterlockedXor16(Destination: *short, Value: short) -> short
export import def #extern __cpuidex(CPUInfo: *int, Function: int, SubLeaf: int)
export import def #extern _mm_clflush(Address: *)
export import def #extern _ReadWriteBarrier()
export import def #extern __faststorefence()
export import def #extern _mm_lfence()
export import def #extern _mm_mfence()
export import def #extern _mm_sfence()
export import def #extern _mm_pause()
export import def #extern _mm_prefetch(a: *char, sel: int)
export import def #extern _m_prefetchw(Source: *)
export import def #extern _mm_getcsr() -> uint
export import def #extern _mm_setcsr(MxCsr: uint)
export import def #extern __getcallerseflags() -> uint
export import def #extern __segmentlimit(Selector: ulong) -> ulong
export import def #extern __readpmc(Counter: ulong) -> uint64
export import def #extern __rdtsc() -> uint64
export import def #extern __movsb(Destination: *char, Source: *char, Count: uint64)
export import def #extern __movsw(Destination: *ushort, Source: *ushort, Count: uint64)
export import def #extern __movsd(Destination: *ulong, Source: *ulong, Count: uint64)
export import def #extern __movsq(Destination: *uint64, Source: *uint64, Count: uint64)
export import def #extern __stosb(Destination: *char, Value: char, Count: uint64)
export import def #extern __stosw(Destination: *ushort, Value: ushort, Count: uint64)
export import def #extern __stosd(Destination: *ulong, Value: ulong, Count: uint64)
export import def #extern __stosq(Destination: *uint64, Value: uint64, Count: uint64)
export import def #extern __mulh(Multiplier: int64, Multiplicand: int64) -> int64
export import def #extern __umulh(Multiplier: uint64, Multiplicand: uint64) -> uint64
export import def #extern __popcnt64(operand: uint64) -> uint64
export import def #extern __shiftleft128(LowPart: uint64, HighPart: uint64, Shift: char) -> uint64
export import def #extern __shiftright128(LowPart: uint64, HighPart: uint64, Shift: char) -> uint64
export import def #extern _mul128(Multiplier: int64, Multiplicand: int64, HighProduct: *int64) -> int64
export import def #extern _umul128(Multiplier: uint64, Multiplicand: uint64, HighProduct: *uint64) -> uint64
export import def #extern __readgsbyte(Offset: ulong) -> char
export import def #extern __readgsword(Offset: ulong) -> ushort
export import def #extern __readgsdword(Offset: ulong) -> ulong
export import def #extern __readgsqword(Offset: ulong) -> uint64
export import def #extern __writegsbyte(Offset: ulong, Data: char)
export import def #extern __writegsword(Offset: ulong, Data: ushort)
export import def #extern __writegsdword(Offset: ulong, Data: ulong)
export import def #extern __writegsqword(Offset: ulong, Data: uint64)
export import def #extern __incgsbyte(Offset: ulong)
export import def #extern __addgsbyte(Offset: ulong, Value: char)
export import def #extern __incgsword(Offset: ulong)
export import def #extern __addgsword(Offset: ulong, Value: ushort)
export import def #extern __incgsdword(Offset: ulong)
export import def #extern __addgsdword(Offset: ulong, Value: ulong)
export import def #extern __incgsqword(Offset: ulong)
export import def #extern __addgsqword(Offset: ulong, Value: uint64)
export import def #extern __int2c()
export import def #extern #dllimport RtlCaptureContext2(ContextRecord: *CONTEXT)
export import def #extern #dllimport RtlRaiseException(ExceptionRecord: *EXCEPTION_RECORD)
export import def #extern #dllimport RtlGetReturnAddressHijackTarget() -> uint64
export import def #extern __fastfail(Code: uint)
export import def #extern #dllimport VerSetConditionMask(ConditionMask: uint64, TypeMask: ulong, Condition: char) -> uint64
export import def #extern #dllimport RtlFillNonVolatileMemory(NvToken: *, NvDestination: *, Size: uint64, Value: char, Flags: ulong) -> ulong
export import def #extern #dllimport RtlIsZeroMemory(Buffer: *, Length: uint64) -> char
export import def #extern #dllimport RtlNormalizeSecurityDescriptor(SecurityDescriptor: **, SecurityDescriptorLength: ulong, NewSecurityDescriptor: **, NewSecurityDescriptorLength: *ulong, CheckOnly: char) -> char
export import def #extern IsApiSetImplemented(Contract: *char) -> int
export import def #extern #dllimport SetEnvironmentStringsW(NewEnvironment: *ushort) -> int
export import def #extern #dllimport GetStdHandle(nStdHandle: ulong) -> *
export import def #extern #dllimport SetStdHandle(nStdHandle: ulong, hHandle: *) -> int
export import def #extern #dllimport SetStdHandleEx(nStdHandle: ulong, hHandle: *, phPrevValue: **) -> int
export import def #extern #dllimport GetCommandLineA() -> *char
export import def #extern #dllimport GetCommandLineW() -> *ushort
export import def #extern #dllimport GetEnvironmentStrings() -> *char
export import def #extern #dllimport GetEnvironmentStringsW() -> *ushort
export import def #extern #dllimport FreeEnvironmentStringsA(penv: *char) -> int
export import def #extern #dllimport FreeEnvironmentStringsW(penv: *ushort) -> int
export import def #extern #dllimport GetEnvironmentVariableA(lpName: *char, lpBuffer: *char, nSize: ulong) -> ulong
export import def #extern #dllimport GetEnvironmentVariableW(lpName: *ushort, lpBuffer: *ushort, nSize: ulong) -> ulong
export import def #extern #dllimport SetEnvironmentVariableA(lpName: *char, lpValue: *char) -> int
export import def #extern #dllimport SetEnvironmentVariableW(lpName: *ushort, lpValue: *ushort) -> int
export import def #extern #dllimport ExpandEnvironmentStringsA(lpSrc: *char, lpDst: *char, nSize: ulong) -> ulong
export import def #extern #dllimport ExpandEnvironmentStringsW(lpSrc: *ushort, lpDst: *ushort, nSize: ulong) -> ulong
export import def #extern #dllimport SetCurrentDirectoryA(lpPathName: *char) -> int
export import def #extern #dllimport SetCurrentDirectoryW(lpPathName: *ushort) -> int
export import def #extern #dllimport GetCurrentDirectoryA(nBufferLength: ulong, lpBuffer: *char) -> ulong
export import def #extern #dllimport GetCurrentDirectoryW(nBufferLength: ulong, lpBuffer: *ushort) -> ulong
export import def #extern #dllimport SearchPathW(lpPath: *ushort, lpFileName: *ushort, lpExtension: *ushort, nBufferLength: ulong, lpBuffer: *ushort, lpFilePart: **ushort) -> ulong
export import def #extern #dllimport SearchPathA(lpPath: *char, lpFileName: *char, lpExtension: *char, nBufferLength: ulong, lpBuffer: *char, lpFilePart: **char) -> ulong
export import def #extern #dllimport NeedCurrentDirectoryForExePathA(ExeName: *char) -> int
export import def #extern #dllimport NeedCurrentDirectoryForExePathW(ExeName: *ushort) -> int
export import def #extern #dllimport CompareFileTime(lpFileTime1: *FILETIME, lpFileTime2: *FILETIME) -> long
export import def #extern #dllimport CreateDirectoryA(lpPathName: *char, lpSecurityAttributes: *SECURITY_ATTRIBUTES) -> int
export import def #extern #dllimport CreateDirectoryW(lpPathName: *ushort, lpSecurityAttributes: *SECURITY_ATTRIBUTES) -> int
export import def #extern #dllimport CreateFileA(lpFileName: *char, dwDesiredAccess: ulong, dwShareMode: ulong, lpSecurityAttributes: *SECURITY_ATTRIBUTES, dwCreationDisposition: ulong, dwFlagsAndAttributes: ulong, hTemplateFile: *) -> *
export import def #extern #dllimport CreateFileW(lpFileName: *ushort, dwDesiredAccess: ulong, dwShareMode: ulong, lpSecurityAttributes: *SECURITY_ATTRIBUTES, dwCreationDisposition: ulong, dwFlagsAndAttributes: ulong, hTemplateFile: *) -> *
export import def #extern #dllimport DefineDosDeviceW(dwFlags: ulong, lpDeviceName: *ushort, lpTargetPath: *ushort) -> int
export import def #extern #dllimport DeleteFileA(lpFileName: *char) -> int
export import def #extern #dllimport DeleteFileW(lpFileName: *ushort) -> int
export import def #extern #dllimport DeleteVolumeMountPointW(lpszVolumeMountPoint: *ushort) -> int
export import def #extern #dllimport FileTimeToLocalFileTime(lpFileTime: *FILETIME, lpLocalFileTime: *FILETIME) -> int
export import def #extern #dllimport FindClose(hFindFile: *) -> int
export import def #extern #dllimport FindCloseChangeNotification(hChangeHandle: *) -> int
export import def #extern #dllimport FindFirstChangeNotificationA(lpPathName: *char, bWatchSubtree: int, dwNotifyFilter: ulong) -> *
export import def #extern #dllimport FindFirstChangeNotificationW(lpPathName: *ushort, bWatchSubtree: int, dwNotifyFilter: ulong) -> *
export import def #extern #dllimport FindFirstFileA(lpFileName: *char, lpFindFileData: *WIN32_FIND_DATAA) -> *
export import def #extern #dllimport FindFirstFileW(lpFileName: *ushort, lpFindFileData: *WIN32_FIND_DATAW) -> *
export import def #extern #dllimport FindFirstFileExA(lpFileName: *char, fInfoLevelId: FINDEX_INFO_LEVELS, lpFindFileData: *, fSearchOp: FINDEX_SEARCH_OPS, lpSearchFilter: *, dwAdditionalFlags: ulong) -> *
export import def #extern #dllimport FindFirstFileExW(lpFileName: *ushort, fInfoLevelId: FINDEX_INFO_LEVELS, lpFindFileData: *, fSearchOp: FINDEX_SEARCH_OPS, lpSearchFilter: *, dwAdditionalFlags: ulong) -> *
export import def #extern #dllimport FindFirstVolumeW(lpszVolumeName: *ushort, cchBufferLength: ulong) -> *
export import def #extern #dllimport FindNextChangeNotification(hChangeHandle: *) -> int
export import def #extern #dllimport FindNextFileA(hFindFile: *, lpFindFileData: *WIN32_FIND_DATAA) -> int
export import def #extern #dllimport FindNextFileW(hFindFile: *, lpFindFileData: *WIN32_FIND_DATAW) -> int
export import def #extern #dllimport FindNextVolumeW(hFindVolume: *, lpszVolumeName: *ushort, cchBufferLength: ulong) -> int
export import def #extern #dllimport FindVolumeClose(hFindVolume: *) -> int
export import def #extern #dllimport FlushFileBuffers(hFile: *) -> int
export import def #extern #dllimport GetDiskFreeSpaceA(lpRootPathName: *char, lpSectorsPerCluster: *ulong, lpBytesPerSector: *ulong, lpNumberOfFreeClusters: *ulong, lpTotalNumberOfClusters: *ulong) -> int
export import def #extern #dllimport GetDiskFreeSpaceW(lpRootPathName: *ushort, lpSectorsPerCluster: *ulong, lpBytesPerSector: *ulong, lpNumberOfFreeClusters: *ulong, lpTotalNumberOfClusters: *ulong) -> int
export import def #extern #dllimport GetDiskFreeSpaceExA(lpDirectoryName: *char, lpFreeBytesAvailableToCaller: *ULARGE_INTEGER, lpTotalNumberOfBytes: *ULARGE_INTEGER, lpTotalNumberOfFreeBytes: *ULARGE_INTEGER) -> int
export import def #extern #dllimport GetDiskFreeSpaceExW(lpDirectoryName: *ushort, lpFreeBytesAvailableToCaller: *ULARGE_INTEGER, lpTotalNumberOfBytes: *ULARGE_INTEGER, lpTotalNumberOfFreeBytes: *ULARGE_INTEGER) -> int
export import def #extern #dllimport GetDiskSpaceInformationA(rootPath: *char, diskSpaceInfo: *DISK_SPACE_INFORMATION) -> long
export import def #extern #dllimport GetDiskSpaceInformationW(rootPath: *ushort, diskSpaceInfo: *DISK_SPACE_INFORMATION) -> long
export import def #extern #dllimport GetDriveTypeA(lpRootPathName: *char) -> uint
export import def #extern #dllimport GetDriveTypeW(lpRootPathName: *ushort) -> uint
export import def #extern #dllimport GetFileAttributesA(lpFileName: *char) -> ulong
export import def #extern #dllimport GetFileAttributesW(lpFileName: *ushort) -> ulong
export import def #extern #dllimport GetFileAttributesExA(lpFileName: *char, fInfoLevelId: GET_FILEEX_INFO_LEVELS, lpFileInformation: *) -> int
export import def #extern #dllimport GetFileAttributesExW(lpFileName: *ushort, fInfoLevelId: GET_FILEEX_INFO_LEVELS, lpFileInformation: *) -> int
export import def #extern #dllimport GetFileInformationByHandle(hFile: *, lpFileInformation: *BY_HANDLE_FILE_INFORMATION) -> int
export import def #extern #dllimport GetFileSize(hFile: *, lpFileSizeHigh: *ulong) -> ulong
export import def #extern #dllimport GetFileSizeEx(hFile: *, lpFileSize: *LARGE_INTEGER) -> int
export import def #extern #dllimport GetFileType(hFile: *) -> ulong
export import def #extern #dllimport GetFinalPathNameByHandleA(hFile: *, lpszFilePath: *char, cchFilePath: ulong, dwFlags: ulong) -> ulong
export import def #extern #dllimport GetFinalPathNameByHandleW(hFile: *, lpszFilePath: *ushort, cchFilePath: ulong, dwFlags: ulong) -> ulong
export import def #extern #dllimport GetFileTime(hFile: *, lpCreationTime: *FILETIME, lpLastAccessTime: *FILETIME, lpLastWriteTime: *FILETIME) -> int
export import def #extern #dllimport GetFullPathNameW(lpFileName: *ushort, nBufferLength: ulong, lpBuffer: *ushort, lpFilePart: **ushort) -> ulong
export import def #extern #dllimport GetFullPathNameA(lpFileName: *char, nBufferLength: ulong, lpBuffer: *char, lpFilePart: **char) -> ulong
export import def #extern #dllimport GetLogicalDrives() -> ulong
export import def #extern #dllimport GetLogicalDriveStringsW(nBufferLength: ulong, lpBuffer: *ushort) -> ulong
export import def #extern #dllimport GetLongPathNameA(lpszShortPath: *char, lpszLongPath: *char, cchBuffer: ulong) -> ulong
export import def #extern #dllimport GetLongPathNameW(lpszShortPath: *ushort, lpszLongPath: *ushort, cchBuffer: ulong) -> ulong
export import def #extern #dllimport GetShortPathNameW(lpszLongPath: *ushort, lpszShortPath: *ushort, cchBuffer: ulong) -> ulong
export import def #extern #dllimport GetTempFileNameW(lpPathName: *ushort, lpPrefixString: *ushort, uUnique: uint, lpTempFileName: *ushort) -> uint
export import def #extern #dllimport GetVolumeInformationByHandleW(hFile: *, lpVolumeNameBuffer: *ushort, nVolumeNameSize: ulong, lpVolumeSerialNumber: *ulong, lpMaximumComponentLength: *ulong, lpFileSystemFlags: *ulong, lpFileSystemNameBuffer: *ushort, nFileSystemNameSize: ulong) -> int
export import def #extern #dllimport GetVolumeInformationW(lpRootPathName: *ushort, lpVolumeNameBuffer: *ushort, nVolumeNameSize: ulong, lpVolumeSerialNumber: *ulong, lpMaximumComponentLength: *ulong, lpFileSystemFlags: *ulong, lpFileSystemNameBuffer: *ushort, nFileSystemNameSize: ulong) -> int
export import def #extern #dllimport GetVolumePathNameW(lpszFileName: *ushort, lpszVolumePathName: *ushort, cchBufferLength: ulong) -> int
export import def #extern #dllimport LocalFileTimeToFileTime(lpLocalFileTime: *FILETIME, lpFileTime: *FILETIME) -> int
export import def #extern #dllimport LockFile(hFile: *, dwFileOffsetLow: ulong, dwFileOffsetHigh: ulong, nNumberOfBytesToLockLow: ulong, nNumberOfBytesToLockHigh: ulong) -> int
export import def #extern #dllimport LockFileEx(hFile: *, dwFlags: ulong, dwReserved: ulong, nNumberOfBytesToLockLow: ulong, nNumberOfBytesToLockHigh: ulong, lpOverlapped: *OVERLAPPED) -> int
export import def #extern #dllimport QueryDosDeviceW(lpDeviceName: *ushort, lpTargetPath: *ushort, ucchMax: ulong) -> ulong
export import def #extern #dllimport ReadFile(hFile: *, lpBuffer: *, nNumberOfBytesToRead: ulong, lpNumberOfBytesRead: *ulong, lpOverlapped: *OVERLAPPED) -> int
export import def #extern #dllimport ReadFileEx(hFile: *, lpBuffer: *, nNumberOfBytesToRead: ulong, lpOverlapped: *OVERLAPPED, lpCompletionRoutine: def (ulong, ulong, *OVERLAPPED) -> ()) -> int
export import def #extern #dllimport ReadFileScatter(hFile: *, aSegmentArray: *FILE_SEGMENT_ELEMENT, nNumberOfBytesToRead: ulong, lpReserved: *ulong, lpOverlapped: *OVERLAPPED) -> int
export import def #extern #dllimport RemoveDirectoryA(lpPathName: *char) -> int
export import def #extern #dllimport RemoveDirectoryW(lpPathName: *ushort) -> int
export import def #extern #dllimport SetEndOfFile(hFile: *) -> int
export import def #extern #dllimport SetFileAttributesA(lpFileName: *char, dwFileAttributes: ulong) -> int
export import def #extern #dllimport SetFileAttributesW(lpFileName: *ushort, dwFileAttributes: ulong) -> int
export import def #extern #dllimport SetFileInformationByHandle(hFile: *, FileInformationClass: FILE_INFO_BY_HANDLE_CLASS, lpFileInformation: *, dwBufferSize: ulong) -> int
export import def #extern #dllimport SetFilePointer(hFile: *, lDistanceToMove: long, lpDistanceToMoveHigh: *long, dwMoveMethod: ulong) -> ulong
export import def #extern #dllimport SetFilePointerEx(hFile: *, liDistanceToMove: LARGE_INTEGER, lpNewFilePointer: *LARGE_INTEGER, dwMoveMethod: ulong) -> int
export import def #extern #dllimport SetFileTime(hFile: *, lpCreationTime: *FILETIME, lpLastAccessTime: *FILETIME, lpLastWriteTime: *FILETIME) -> int
export import def #extern #dllimport SetFileValidData(hFile: *, ValidDataLength: int64) -> int
export import def #extern #dllimport UnlockFile(hFile: *, dwFileOffsetLow: ulong, dwFileOffsetHigh: ulong, nNumberOfBytesToUnlockLow: ulong, nNumberOfBytesToUnlockHigh: ulong) -> int
export import def #extern #dllimport UnlockFileEx(hFile: *, dwReserved: ulong, nNumberOfBytesToUnlockLow: ulong, nNumberOfBytesToUnlockHigh: ulong, lpOverlapped: *OVERLAPPED) -> int
export import def #extern #dllimport WriteFile(hFile: *, lpBuffer: *, nNumberOfBytesToWrite: ulong, lpNumberOfBytesWritten: *ulong, lpOverlapped: *OVERLAPPED) -> int
export import def #extern #dllimport WriteFileEx(hFile: *, lpBuffer: *, nNumberOfBytesToWrite: ulong, lpOverlapped: *OVERLAPPED, lpCompletionRoutine: def (ulong, ulong, *OVERLAPPED) -> ()) -> int
export import def #extern #dllimport WriteFileGather(hFile: *, aSegmentArray: *FILE_SEGMENT_ELEMENT, nNumberOfBytesToWrite: ulong, lpReserved: *ulong, lpOverlapped: *OVERLAPPED) -> int
export import def #extern #dllimport GetTempPathW(nBufferLength: ulong, lpBuffer: *ushort) -> ulong
export import def #extern #dllimport GetVolumeNameForVolumeMountPointW(lpszVolumeMountPoint: *ushort, lpszVolumeName: *ushort, cchBufferLength: ulong) -> int
export import def #extern #dllimport GetVolumePathNamesForVolumeNameW(lpszVolumeName: *ushort, lpszVolumePathNames: *ushort, cchBufferLength: ulong, lpcchReturnLength: *ulong) -> int
export import def #extern #dllimport CreateFile2(lpFileName: *ushort, dwDesiredAccess: ulong, dwShareMode: ulong, dwCreationDisposition: ulong, pCreateExParams: *CREATEFILE2_EXTENDED_PARAMETERS) -> *
export import def #extern #dllimport SetFileIoOverlappedRange(FileHandle: *, OverlappedRangeStart: *char, Length: ulong) -> int
export import def #extern #dllimport GetCompressedFileSizeA(lpFileName: *char, lpFileSizeHigh: *ulong) -> ulong
export import def #extern #dllimport GetCompressedFileSizeW(lpFileName: *ushort, lpFileSizeHigh: *ulong) -> ulong
export import def #extern #dllimport FindFirstStreamW(lpFileName: *ushort, InfoLevel: STREAM_INFO_LEVELS, lpFindStreamData: *, dwFlags: ulong) -> *
export import def #extern #dllimport FindNextStreamW(hFindStream: *, lpFindStreamData: *) -> int
export import def #extern #dllimport AreFileApisANSI() -> int
export import def #extern #dllimport GetTempPathA(nBufferLength: ulong, lpBuffer: *char) -> ulong
export import def #extern #dllimport FindFirstFileNameW(lpFileName: *ushort, dwFlags: ulong, StringLength: *ulong, LinkName: *ushort) -> *
export import def #extern #dllimport FindNextFileNameW(hFindStream: *, StringLength: *ulong, LinkName: *ushort) -> int
export import def #extern #dllimport GetVolumeInformationA(lpRootPathName: *char, lpVolumeNameBuffer: *char, nVolumeNameSize: ulong, lpVolumeSerialNumber: *ulong, lpMaximumComponentLength: *ulong, lpFileSystemFlags: *ulong, lpFileSystemNameBuffer: *char, nFileSystemNameSize: ulong) -> int
export import def #extern #dllimport GetTempFileNameA(lpPathName: *char, lpPrefixString: *char, uUnique: uint, lpTempFileName: *char) -> uint
export import def #extern #dllimport SetFileApisToOEM()
export import def #extern #dllimport SetFileApisToANSI()
export import def #extern #dllimport CopyFileFromAppW(lpExistingFileName: *ushort, lpNewFileName: *ushort, bFailIfExists: int) -> int
export import def #extern #dllimport CreateDirectoryFromAppW(lpPathName: *ushort, lpSecurityAttributes: *SECURITY_ATTRIBUTES) -> int
export import def #extern #dllimport CreateFileFromAppW(lpFileName: *ushort, dwDesiredAccess: ulong, dwShareMode: ulong, lpSecurityAttributes: *SECURITY_ATTRIBUTES, dwCreationDisposition: ulong, dwFlagsAndAttributes: ulong, hTemplateFile: *) -> *
export import def #extern #dllimport CreateFile2FromAppW(lpFileName: *ushort, dwDesiredAccess: ulong, dwShareMode: ulong, dwCreationDisposition: ulong, pCreateExParams: *CREATEFILE2_EXTENDED_PARAMETERS) -> *
export import def #extern #dllimport DeleteFileFromAppW(lpFileName: *ushort) -> int
export import def #extern #dllimport FindFirstFileExFromAppW(lpFileName: *ushort, fInfoLevelId: FINDEX_INFO_LEVELS, lpFindFileData: *, fSearchOp: FINDEX_SEARCH_OPS, lpSearchFilter: *, dwAdditionalFlags: ulong) -> *
export import def #extern #dllimport GetFileAttributesExFromAppW(lpFileName: *ushort, fInfoLevelId: GET_FILEEX_INFO_LEVELS, lpFileInformation: *) -> int
export import def #extern #dllimport MoveFileFromAppW(lpExistingFileName: *ushort, lpNewFileName: *ushort) -> int
export import def #extern #dllimport RemoveDirectoryFromAppW(lpPathName: *ushort) -> int
export import def #extern #dllimport ReplaceFileFromAppW(lpReplacedFileName: *ushort, lpReplacementFileName: *ushort, lpBackupFileName: *ushort, dwReplaceFlags: ulong, lpExclude: *, lpReserved: *) -> int
export import def #extern #dllimport SetFileAttributesFromAppW(lpFileName: *ushort, dwFileAttributes: ulong) -> int
export import def #extern #dllimport IsDebuggerPresent() -> int
export import def #extern #dllimport DebugBreak()
export import def #extern #dllimport OutputDebugStringA(lpOutputString: *char)
export import def #extern #dllimport OutputDebugStringW(lpOutputString: *ushort)
export import def #extern #dllimport ContinueDebugEvent(dwProcessId: ulong, dwThreadId: ulong, dwContinueStatus: ulong) -> int
export import def #extern #dllimport WaitForDebugEvent(lpDebugEvent: *DEBUG_EVENT, dwMilliseconds: ulong) -> int
export import def #extern #dllimport DebugActiveProcess(dwProcessId: ulong) -> int
export import def #extern #dllimport DebugActiveProcessStop(dwProcessId: ulong) -> int
export import def #extern #dllimport CheckRemoteDebuggerPresent(hProcess: *, pbDebuggerPresent: *int) -> int
export import def #extern #dllimport WaitForDebugEventEx(lpDebugEvent: *DEBUG_EVENT, dwMilliseconds: ulong) -> int
export import def #extern #dllimport EncodePointer(Ptr: *) -> *
export import def #extern #dllimport DecodePointer(Ptr: *) -> *
export import def #extern #dllimport EncodeSystemPointer(Ptr: *) -> *
export import def #extern #dllimport DecodeSystemPointer(Ptr: *) -> *
export import def #extern #dllimport EncodeRemotePointer(ProcessHandle: *, Ptr: *, EncodedPtr: **) -> long
export import def #extern #dllimport DecodeRemotePointer(ProcessHandle: *, Ptr: *, DecodedPtr: **) -> long
export import def #extern #dllimport Beep(dwFreq: ulong, dwDuration: ulong) -> int
export import def #extern #dllimport CloseHandle(hObject: *) -> int
export import def #extern #dllimport DuplicateHandle(hSourceProcessHandle: *, hSourceHandle: *, hTargetProcessHandle: *, lpTargetHandle: **, dwDesiredAccess: ulong, bInheritHandle: int, dwOptions: ulong) -> int
export import def #extern #dllimport CompareObjectHandles(hFirstObjectHandle: *, hSecondObjectHandle: *) -> int
export import def #extern #dllimport GetHandleInformation(hObject: *, lpdwFlags: *ulong) -> int
export import def #extern #dllimport SetHandleInformation(hObject: *, dwMask: ulong, dwFlags: ulong) -> int
export import def #extern #dllimport RaiseException(dwExceptionCode: ulong, dwExceptionFlags: ulong, nNumberOfArguments: ulong, lpArguments: *uint64)
export import def #extern #dllimport UnhandledExceptionFilter(ExceptionInfo: *EXCEPTION_POINTERS) -> long
export import def #extern #dllimport SetUnhandledExceptionFilter(lpTopLevelExceptionFilter: def (*EXCEPTION_POINTERS) -> (long)) -> def (*EXCEPTION_POINTERS) -> (long)
export import def #extern #dllimport GetLastError() -> ulong
export import def #extern #dllimport SetLastError(dwErrCode: ulong)
export import def #extern #dllimport GetErrorMode() -> uint
export import def #extern #dllimport SetErrorMode(uMode: uint) -> uint
export import def #extern #dllimport AddVectoredExceptionHandler(First: ulong, Handler: def (*EXCEPTION_POINTERS) -> (long)) -> *
export import def #extern #dllimport RemoveVectoredExceptionHandler(Handle: *) -> ulong
export import def #extern #dllimport AddVectoredContinueHandler(First: ulong, Handler: def (*EXCEPTION_POINTERS) -> (long)) -> *
export import def #extern #dllimport RemoveVectoredContinueHandler(Handle: *) -> ulong
export import def #extern #dllimport RaiseFailFastException(pExceptionRecord: *EXCEPTION_RECORD, pContextRecord: *CONTEXT, dwFlags: ulong)
export import def #extern #dllimport FatalAppExitA(uAction: uint, lpMessageText: *char)
export import def #extern #dllimport FatalAppExitW(uAction: uint, lpMessageText: *ushort)
export import def #extern #dllimport GetThreadErrorMode() -> ulong
export import def #extern #dllimport SetThreadErrorMode(dwNewMode: ulong, lpOldMode: *ulong) -> int
export import def #extern #dllimport TerminateProcessOnMemoryExhaustion(FailedAllocationSize: uint64)
export import def #extern #dllimport FlsAlloc(lpCallback: def (*) -> ()) -> ulong
export import def #extern #dllimport FlsGetValue(dwFlsIndex: ulong) -> *
export import def #extern #dllimport FlsSetValue(dwFlsIndex: ulong, lpFlsData: *) -> int
export import def #extern #dllimport FlsFree(dwFlsIndex: ulong) -> int
export import def #extern #dllimport IsThreadAFiber() -> int
export import def #extern #dllimport CreatePipe(hReadPipe: **, hWritePipe: **, lpPipeAttributes: *SECURITY_ATTRIBUTES, nSize: ulong) -> int
export import def #extern #dllimport ConnectNamedPipe(hNamedPipe: *, lpOverlapped: *OVERLAPPED) -> int
export import def #extern #dllimport DisconnectNamedPipe(hNamedPipe: *) -> int
export import def #extern #dllimport SetNamedPipeHandleState(hNamedPipe: *, lpMode: *ulong, lpMaxCollectionCount: *ulong, lpCollectDataTimeout: *ulong) -> int
export import def #extern #dllimport PeekNamedPipe(hNamedPipe: *, lpBuffer: *, nBufferSize: ulong, lpBytesRead: *ulong, lpTotalBytesAvail: *ulong, lpBytesLeftThisMessage: *ulong) -> int
export import def #extern #dllimport TransactNamedPipe(hNamedPipe: *, lpInBuffer: *, nInBufferSize: ulong, lpOutBuffer: *, nOutBufferSize: ulong, lpBytesRead: *ulong, lpOverlapped: *OVERLAPPED) -> int
export import def #extern #dllimport CreateNamedPipeW(lpName: *ushort, dwOpenMode: ulong, dwPipeMode: ulong, nMaxInstances: ulong, nOutBufferSize: ulong, nInBufferSize: ulong, nDefaultTimeOut: ulong, lpSecurityAttributes: *SECURITY_ATTRIBUTES) -> *
export import def #extern #dllimport WaitNamedPipeW(lpNamedPipeName: *ushort, nTimeOut: ulong) -> int
export import def #extern #dllimport GetNamedPipeClientComputerNameW(Pipe: *, ClientComputerName: *ushort, ClientComputerNameLength: ulong) -> int
export import def #extern #dllimport ImpersonateNamedPipeClient(hNamedPipe: *) -> int
export import def #extern #dllimport GetNamedPipeInfo(hNamedPipe: *, lpFlags: *ulong, lpOutBufferSize: *ulong, lpInBufferSize: *ulong, lpMaxInstances: *ulong) -> int
export import def #extern #dllimport GetNamedPipeHandleStateW(hNamedPipe: *, lpState: *ulong, lpCurInstances: *ulong, lpMaxCollectionCount: *ulong, lpCollectDataTimeout: *ulong, lpUserName: *ushort, nMaxUserNameSize: ulong) -> int
export import def #extern #dllimport CallNamedPipeW(lpNamedPipeName: *ushort, lpInBuffer: *, nInBufferSize: ulong, lpOutBuffer: *, nOutBufferSize: ulong, lpBytesRead: *ulong, nTimeOut: ulong) -> int
export import def #extern #dllimport QueryPerformanceCounter(lpPerformanceCount: *LARGE_INTEGER) -> int
export import def #extern #dllimport QueryPerformanceFrequency(lpFrequency: *LARGE_INTEGER) -> int
export import def #extern #dllimport HeapCreate(flOptions: ulong, dwInitialSize: uint64, dwMaximumSize: uint64) -> *
export import def #extern #dllimport HeapDestroy(hHeap: *) -> int
export import def #extern #dllimport HeapAlloc(hHeap: *, dwFlags: ulong, dwBytes: uint64) -> *
export import def #extern #dllimport HeapReAlloc(hHeap: *, dwFlags: ulong, lpMem: *, dwBytes: uint64) -> *
export import def #extern #dllimport HeapFree(hHeap: *, dwFlags: ulong, lpMem: *) -> int
export import def #extern #dllimport HeapSize(hHeap: *, dwFlags: ulong, lpMem: *) -> uint64
export import def #extern #dllimport GetProcessHeap() -> *
export import def #extern #dllimport HeapCompact(hHeap: *, dwFlags: ulong) -> uint64
export import def #extern #dllimport HeapSetInformation(HeapHandle: *, HeapInformationClass: HEAP_INFORMATION_CLASS, HeapInformation: *, HeapInformationLength: uint64) -> int
export import def #extern #dllimport HeapValidate(hHeap: *, dwFlags: ulong, lpMem: *) -> int
export import def #extern HeapSummary(hHeap: *, dwFlags: ulong, lpSummary: *HEAP_SUMMARY) -> int
export import def #extern #dllimport GetProcessHeaps(NumberOfHeaps: ulong, ProcessHeaps: **) -> ulong
export import def #extern #dllimport HeapLock(hHeap: *) -> int
export import def #extern #dllimport HeapUnlock(hHeap: *) -> int
export import def #extern #dllimport HeapWalk(hHeap: *, lpEntry: *PROCESS_HEAP_ENTRY) -> int
export import def #extern #dllimport HeapQueryInformation(HeapHandle: *, HeapInformationClass: HEAP_INFORMATION_CLASS, HeapInformation: *, HeapInformationLength: uint64, ReturnLength: *uint64) -> int
export import def #extern #dllimport CreateIoCompletionPort(FileHandle: *, ExistingCompletionPort: *, CompletionKey: uint64, NumberOfConcurrentThreads: ulong) -> *
export import def #extern #dllimport GetQueuedCompletionStatus(CompletionPort: *, lpNumberOfBytesTransferred: *ulong, lpCompletionKey: *uint64, lpOverlapped: **OVERLAPPED, dwMilliseconds: ulong) -> int
export import def #extern #dllimport GetQueuedCompletionStatusEx(CompletionPort: *, lpCompletionPortEntries: *OVERLAPPED_ENTRY, ulCount: ulong, ulNumEntriesRemoved: *ulong, dwMilliseconds: ulong, fAlertable: int) -> int
export import def #extern #dllimport PostQueuedCompletionStatus(CompletionPort: *, dwNumberOfBytesTransferred: ulong, dwCompletionKey: uint64, lpOverlapped: *OVERLAPPED) -> int
export import def #extern #dllimport DeviceIoControl(hDevice: *, dwIoControlCode: ulong, lpInBuffer: *, nInBufferSize: ulong, lpOutBuffer: *, nOutBufferSize: ulong, lpBytesReturned: *ulong, lpOverlapped: *OVERLAPPED) -> int
export import def #extern #dllimport GetOverlappedResult(hFile: *, lpOverlapped: *OVERLAPPED, lpNumberOfBytesTransferred: *ulong, bWait: int) -> int
export import def #extern #dllimport CancelIoEx(hFile: *, lpOverlapped: *OVERLAPPED) -> int
export import def #extern #dllimport CancelIo(hFile: *) -> int
export import def #extern #dllimport GetOverlappedResultEx(hFile: *, lpOverlapped: *OVERLAPPED, lpNumberOfBytesTransferred: *ulong, dwMilliseconds: ulong, bAlertable: int) -> int
export import def #extern #dllimport CancelSynchronousIo(hThread: *) -> int
export import def #extern #dllimport InitializeSRWLock(SRWLock: *RTL_SRWLOCK)
export import def #extern #dllimport ReleaseSRWLockExclusive(SRWLock: *RTL_SRWLOCK)
export import def #extern #dllimport ReleaseSRWLockShared(SRWLock: *RTL_SRWLOCK)
export import def #extern #dllimport AcquireSRWLockExclusive(SRWLock: *RTL_SRWLOCK)
export import def #extern #dllimport AcquireSRWLockShared(SRWLock: *RTL_SRWLOCK)
export import def #extern #dllimport TryAcquireSRWLockExclusive(SRWLock: *RTL_SRWLOCK) -> char
export import def #extern #dllimport TryAcquireSRWLockShared(SRWLock: *RTL_SRWLOCK) -> char
export import def #extern #dllimport InitializeCriticalSection(lpCriticalSection: *RTL_CRITICAL_SECTION)
export import def #extern #dllimport EnterCriticalSection(lpCriticalSection: *RTL_CRITICAL_SECTION)
export import def #extern #dllimport LeaveCriticalSection(lpCriticalSection: *RTL_CRITICAL_SECTION)
export import def #extern #dllimport InitializeCriticalSectionAndSpinCount(lpCriticalSection: *RTL_CRITICAL_SECTION, dwSpinCount: ulong) -> int
export import def #extern #dllimport InitializeCriticalSectionEx(lpCriticalSection: *RTL_CRITICAL_SECTION, dwSpinCount: ulong, Flags: ulong) -> int
export import def #extern #dllimport SetCriticalSectionSpinCount(lpCriticalSection: *RTL_CRITICAL_SECTION, dwSpinCount: ulong) -> ulong
export import def #extern #dllimport TryEnterCriticalSection(lpCriticalSection: *RTL_CRITICAL_SECTION) -> int
export import def #extern #dllimport DeleteCriticalSection(lpCriticalSection: *RTL_CRITICAL_SECTION)
export import def #extern #dllimport InitOnceInitialize(InitOnce: *RTL_RUN_ONCE)
export import def #extern #dllimport InitOnceExecuteOnce(InitOnce: *RTL_RUN_ONCE, InitFn: def (*RTL_RUN_ONCE, *, **) -> (int), Parameter: *, Context: **) -> int
export import def #extern #dllimport InitOnceBeginInitialize(lpInitOnce: *RTL_RUN_ONCE, dwFlags: ulong, fPending: *int, lpContext: **) -> int
export import def #extern #dllimport InitOnceComplete(lpInitOnce: *RTL_RUN_ONCE, dwFlags: ulong, lpContext: *) -> int
export import def #extern #dllimport InitializeConditionVariable(ConditionVariable: *RTL_CONDITION_VARIABLE)
export import def #extern #dllimport WakeConditionVariable(ConditionVariable: *RTL_CONDITION_VARIABLE)
export import def #extern #dllimport WakeAllConditionVariable(ConditionVariable: *RTL_CONDITION_VARIABLE)
export import def #extern #dllimport SleepConditionVariableCS(ConditionVariable: *RTL_CONDITION_VARIABLE, CriticalSection: *RTL_CRITICAL_SECTION, dwMilliseconds: ulong) -> int
export import def #extern #dllimport SleepConditionVariableSRW(ConditionVariable: *RTL_CONDITION_VARIABLE, SRWLock: *RTL_SRWLOCK, dwMilliseconds: ulong, Flags: ulong) -> int
export import def #extern #dllimport SetEvent(hEvent: *) -> int
export import def #extern #dllimport ResetEvent(hEvent: *) -> int
export import def #extern #dllimport ReleaseSemaphore(hSemaphore: *, lReleaseCount: long, lpPreviousCount: *long) -> int
export import def #extern #dllimport ReleaseMutex(hMutex: *) -> int
export import def #extern #dllimport WaitForSingleObject(hHandle: *, dwMilliseconds: ulong) -> ulong
export import def #extern #dllimport SleepEx(dwMilliseconds: ulong, bAlertable: int) -> ulong
export import def #extern #dllimport WaitForSingleObjectEx(hHandle: *, dwMilliseconds: ulong, bAlertable: int) -> ulong
export import def #extern #dllimport WaitForMultipleObjectsEx(nCount: ulong, lpHandles: **, bWaitAll: int, dwMilliseconds: ulong, bAlertable: int) -> ulong
export import def #extern #dllimport CreateMutexA(lpMutexAttributes: *SECURITY_ATTRIBUTES, bInitialOwner: int, lpName: *char) -> *
export import def #extern #dllimport CreateMutexW(lpMutexAttributes: *SECURITY_ATTRIBUTES, bInitialOwner: int, lpName: *ushort) -> *
export import def #extern #dllimport OpenMutexW(dwDesiredAccess: ulong, bInheritHandle: int, lpName: *ushort) -> *
export import def #extern #dllimport CreateEventA(lpEventAttributes: *SECURITY_ATTRIBUTES, bManualReset: int, bInitialState: int, lpName: *char) -> *
export import def #extern #dllimport CreateEventW(lpEventAttributes: *SECURITY_ATTRIBUTES, bManualReset: int, bInitialState: int, lpName: *ushort) -> *
export import def #extern #dllimport OpenEventA(dwDesiredAccess: ulong, bInheritHandle: int, lpName: *char) -> *
export import def #extern #dllimport OpenEventW(dwDesiredAccess: ulong, bInheritHandle: int, lpName: *ushort) -> *
export import def #extern #dllimport OpenSemaphoreW(dwDesiredAccess: ulong, bInheritHandle: int, lpName: *ushort) -> *
export import def #extern #dllimport OpenWaitableTimerW(dwDesiredAccess: ulong, bInheritHandle: int, lpTimerName: *ushort) -> *
export import def #extern SetWaitableTimerEx(hTimer: *, lpDueTime: *LARGE_INTEGER, lPeriod: long, pfnCompletionRoutine: def (*, ulong, ulong) -> (), lpArgToCompletionRoutine: *, WakeContext: *REASON_CONTEXT, TolerableDelay: ulong) -> int
export import def #extern #dllimport SetWaitableTimer(hTimer: *, lpDueTime: *LARGE_INTEGER, lPeriod: long, pfnCompletionRoutine: def (*, ulong, ulong) -> (), lpArgToCompletionRoutine: *, fResume: int) -> int
export import def #extern #dllimport CancelWaitableTimer(hTimer: *) -> int
export import def #extern #dllimport CreateMutexExA(lpMutexAttributes: *SECURITY_ATTRIBUTES, lpName: *char, dwFlags: ulong, dwDesiredAccess: ulong) -> *
export import def #extern #dllimport CreateMutexExW(lpMutexAttributes: *SECURITY_ATTRIBUTES, lpName: *ushort, dwFlags: ulong, dwDesiredAccess: ulong) -> *
export import def #extern #dllimport CreateEventExA(lpEventAttributes: *SECURITY_ATTRIBUTES, lpName: *char, dwFlags: ulong, dwDesiredAccess: ulong) -> *
export import def #extern #dllimport CreateEventExW(lpEventAttributes: *SECURITY_ATTRIBUTES, lpName: *ushort, dwFlags: ulong, dwDesiredAccess: ulong) -> *
export import def #extern #dllimport CreateSemaphoreExW(lpSemaphoreAttributes: *SECURITY_ATTRIBUTES, lInitialCount: long, lMaximumCount: long, lpName: *ushort, dwFlags: ulong, dwDesiredAccess: ulong) -> *
export import def #extern #dllimport CreateWaitableTimerExW(lpTimerAttributes: *SECURITY_ATTRIBUTES, lpTimerName: *ushort, dwFlags: ulong, dwDesiredAccess: ulong) -> *
export import def #extern EnterSynchronizationBarrier(lpBarrier: *RTL_BARRIER, dwFlags: ulong) -> int
export import def #extern InitializeSynchronizationBarrier(lpBarrier: *RTL_BARRIER, lTotalThreads: long, lSpinCount: long) -> int
export import def #extern DeleteSynchronizationBarrier(lpBarrier: *RTL_BARRIER) -> int
export import def #extern #dllimport Sleep(dwMilliseconds: ulong)
export import def #extern WaitOnAddress(Address: *, CompareAddress: *, AddressSize: uint64, dwMilliseconds: ulong) -> int
export import def #extern WakeByAddressSingle(Address: *)
export import def #extern WakeByAddressAll(Address: *)
export import def #extern #dllimport SignalObjectAndWait(hObjectToSignal: *, hObjectToWaitOn: *, dwMilliseconds: ulong, bAlertable: int) -> ulong
export import def #extern #dllimport WaitForMultipleObjects(nCount: ulong, lpHandles: **, bWaitAll: int, dwMilliseconds: ulong) -> ulong
export import def #extern #dllimport CreateSemaphoreW(lpSemaphoreAttributes: *SECURITY_ATTRIBUTES, lInitialCount: long, lMaximumCount: long, lpName: *ushort) -> *
export import def #extern #dllimport CreateWaitableTimerW(lpTimerAttributes: *SECURITY_ATTRIBUTES, bManualReset: int, lpTimerName: *ushort) -> *
export import def #extern #dllimport InitializeSListHead(ListHead: *SLIST_HEADER)
export import def #extern #dllimport InterlockedPopEntrySList(ListHead: *SLIST_HEADER) -> *SLIST_ENTRY
export import def #extern #dllimport InterlockedPushEntrySList(ListHead: *SLIST_HEADER, ListEntry: *SLIST_ENTRY) -> *SLIST_ENTRY
export import def #extern #dllimport InterlockedPushListSListEx(ListHead: *SLIST_HEADER, List: *SLIST_ENTRY, ListEnd: *SLIST_ENTRY, Count: ulong) -> *SLIST_ENTRY
export import def #extern #dllimport InterlockedFlushSList(ListHead: *SLIST_HEADER) -> *SLIST_ENTRY
export import def #extern #dllimport QueryDepthSList(ListHead: *SLIST_HEADER) -> ushort
export import def #extern #dllimport QueueUserAPC(pfnAPC: def (uint64) -> (), hThread: *, dwData: uint64) -> ulong
export import def #extern #dllimport GetProcessTimes(hProcess: *, lpCreationTime: *FILETIME, lpExitTime: *FILETIME, lpKernelTime: *FILETIME, lpUserTime: *FILETIME) -> int
export import def #extern #dllimport GetCurrentProcess() -> *
export import def #extern #dllimport GetCurrentProcessId() -> ulong
export import def #extern #dllimport ExitProcess(uExitCode: uint)
export import def #extern #dllimport TerminateProcess(hProcess: *, uExitCode: uint) -> int
export import def #extern #dllimport GetExitCodeProcess(hProcess: *, lpExitCode: *ulong) -> int
export import def #extern #dllimport SwitchToThread() -> int
export import def #extern #dllimport CreateThread(lpThreadAttributes: *SECURITY_ATTRIBUTES, dwStackSize: uint64, lpStartAddress: def (*) -> (ulong), lpParameter: *, dwCreationFlags: ulong, lpThreadId: *ulong) -> *
export import def #extern #dllimport CreateRemoteThread(hProcess: *, lpThreadAttributes: *SECURITY_ATTRIBUTES, dwStackSize: uint64, lpStartAddress: def (*) -> (ulong), lpParameter: *, dwCreationFlags: ulong, lpThreadId: *ulong) -> *
export import def #extern #dllimport GetCurrentThread() -> *
export import def #extern #dllimport GetCurrentThreadId() -> ulong
export import def #extern #dllimport OpenThread(dwDesiredAccess: ulong, bInheritHandle: int, dwThreadId: ulong) -> *
export import def #extern #dllimport SetThreadPriority(hThread: *, nPriority: int) -> int
export import def #extern #dllimport SetThreadPriorityBoost(hThread: *, bDisablePriorityBoost: int) -> int
export import def #extern #dllimport GetThreadPriorityBoost(hThread: *, pDisablePriorityBoost: *int) -> int
export import def #extern #dllimport GetThreadPriority(hThread: *) -> int
export import def #extern #dllimport ExitThread(dwExitCode: ulong)
export import def #extern #dllimport TerminateThread(hThread: *, dwExitCode: ulong) -> int
export import def #extern #dllimport GetExitCodeThread(hThread: *, lpExitCode: *ulong) -> int
export import def #extern #dllimport SuspendThread(hThread: *) -> ulong
export import def #extern #dllimport ResumeThread(hThread: *) -> ulong
export import def #extern #dllimport TlsAlloc() -> ulong
export import def #extern #dllimport TlsGetValue(dwTlsIndex: ulong) -> *
export import def #extern #dllimport TlsSetValue(dwTlsIndex: ulong, lpTlsValue: *) -> int
export import def #extern #dllimport TlsFree(dwTlsIndex: ulong) -> int
export import def #extern #dllimport CreateProcessA(lpApplicationName: *char, lpCommandLine: *char, lpProcessAttributes: *SECURITY_ATTRIBUTES, lpThreadAttributes: *SECURITY_ATTRIBUTES, bInheritHandles: int, dwCreationFlags: ulong, lpEnvironment: *, lpCurrentDirectory: *char, lpStartupInfo: *STARTUPINFOA, lpProcessInformation: *PROCESS_INFORMATION) -> int
export import def #extern #dllimport CreateProcessW(lpApplicationName: *ushort, lpCommandLine: *ushort, lpProcessAttributes: *SECURITY_ATTRIBUTES, lpThreadAttributes: *SECURITY_ATTRIBUTES, bInheritHandles: int, dwCreationFlags: ulong, lpEnvironment: *, lpCurrentDirectory: *ushort, lpStartupInfo: *STARTUPINFOW, lpProcessInformation: *PROCESS_INFORMATION) -> int
export import def #extern #dllimport SetProcessShutdownParameters(dwLevel: ulong, dwFlags: ulong) -> int
export import def #extern #dllimport GetProcessVersion(ProcessId: ulong) -> ulong
export import def #extern #dllimport GetStartupInfoW(lpStartupInfo: *STARTUPINFOW)
export import def #extern #dllimport CreateProcessAsUserW(hToken: *, lpApplicationName: *ushort, lpCommandLine: *ushort, lpProcessAttributes: *SECURITY_ATTRIBUTES, lpThreadAttributes: *SECURITY_ATTRIBUTES, bInheritHandles: int, dwCreationFlags: ulong, lpEnvironment: *, lpCurrentDirectory: *ushort, lpStartupInfo: *STARTUPINFOW, lpProcessInformation: *PROCESS_INFORMATION) -> int
export import def #extern #dllimport SetThreadToken(Thread: **, Token: *) -> int
export import def #extern #dllimport OpenProcessToken(ProcessHandle: *, DesiredAccess: ulong, TokenHandle: **) -> int
export import def #extern #dllimport OpenThreadToken(ThreadHandle: *, DesiredAccess: ulong, OpenAsSelf: int, TokenHandle: **) -> int
export import def #extern #dllimport SetPriorityClass(hProcess: *, dwPriorityClass: ulong) -> int
export import def #extern #dllimport GetPriorityClass(hProcess: *) -> ulong
export import def #extern #dllimport SetThreadStackGuarantee(StackSizeInBytes: *ulong) -> int
export import def #extern #dllimport ProcessIdToSessionId(dwProcessId: ulong, pSessionId: *ulong) -> int
export import def #extern #dllimport GetProcessId(Process: *) -> ulong
export import def #extern #dllimport GetThreadId(Thread: *) -> ulong
export import def #extern #dllimport FlushProcessWriteBuffers()
export import def #extern #dllimport GetProcessIdOfThread(Thread: *) -> ulong
export import def #extern #dllimport InitializeProcThreadAttributeList(lpAttributeList: *s__PROC_THREAD_ATTRIBUTE_LIST, dwAttributeCount: ulong, dwFlags: ulong, lpSize: *uint64) -> int
export import def #extern #dllimport DeleteProcThreadAttributeList(lpAttributeList: *s__PROC_THREAD_ATTRIBUTE_LIST)
export import def #extern #dllimport UpdateProcThreadAttribute(lpAttributeList: *s__PROC_THREAD_ATTRIBUTE_LIST, dwFlags: ulong, Attribute: uint64, lpValue: *, cbSize: uint64, lpPreviousValue: *, lpReturnSize: *uint64) -> int
export import def #extern #dllimport SetProcessDynamicEHContinuationTargets(Process: *, NumberOfTargets: ushort, Targets: *PROCESS_DYNAMIC_EH_CONTINUATION_TARGET) -> int
export import def #extern #dllimport SetProcessDynamicEnforcedCetCompatibleRanges(Process: *, NumberOfRanges: ushort, Ranges: *PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE) -> int
export import def #extern #dllimport SetProcessAffinityUpdateMode(hProcess: *, dwFlags: ulong) -> int
export import def #extern #dllimport QueryProcessAffinityUpdateMode(hProcess: *, lpdwFlags: *ulong) -> int
export import def #extern #dllimport CreateRemoteThreadEx(hProcess: *, lpThreadAttributes: *SECURITY_ATTRIBUTES, dwStackSize: uint64, lpStartAddress: def (*) -> (ulong), lpParameter: *, dwCreationFlags: ulong, lpAttributeList: *s__PROC_THREAD_ATTRIBUTE_LIST, lpThreadId: *ulong) -> *
export import def #extern #dllimport GetCurrentThreadStackLimits(LowLimit: *uint64, HighLimit: *uint64)
export import def #extern #dllimport GetThreadContext(hThread: *, lpContext: *CONTEXT) -> int
export import def #extern #dllimport GetProcessMitigationPolicy(hProcess: *, MitigationPolicy: PROCESS_MITIGATION_POLICY, lpBuffer: *, dwLength: uint64) -> int
export import def #extern #dllimport SetThreadContext(hThread: *, lpContext: *CONTEXT) -> int
export import def #extern #dllimport SetProcessMitigationPolicy(MitigationPolicy: PROCESS_MITIGATION_POLICY, lpBuffer: *, dwLength: uint64) -> int
export import def #extern #dllimport FlushInstructionCache(hProcess: *, lpBaseAddress: *, dwSize: uint64) -> int
export import def #extern #dllimport GetThreadTimes(hThread: *, lpCreationTime: *FILETIME, lpExitTime: *FILETIME, lpKernelTime: *FILETIME, lpUserTime: *FILETIME) -> int
export import def #extern #dllimport OpenProcess(dwDesiredAccess: ulong, bInheritHandle: int, dwProcessId: ulong) -> *
export import def #extern #dllimport IsProcessorFeaturePresent(ProcessorFeature: ulong) -> int
export import def #extern #dllimport GetProcessHandleCount(hProcess: *, pdwHandleCount: *ulong) -> int
export import def #extern #dllimport GetCurrentProcessorNumber() -> ulong
export import def #extern #dllimport SetThreadIdealProcessorEx(hThread: *, lpIdealProcessor: *PROCESSOR_NUMBER, lpPreviousIdealProcessor: *PROCESSOR_NUMBER) -> int
export import def #extern #dllimport GetThreadIdealProcessorEx(hThread: *, lpIdealProcessor: *PROCESSOR_NUMBER) -> int
export import def #extern #dllimport GetCurrentProcessorNumberEx(ProcNumber: *PROCESSOR_NUMBER)
export import def #extern #dllimport GetProcessPriorityBoost(hProcess: *, pDisablePriorityBoost: *int) -> int
export import def #extern #dllimport SetProcessPriorityBoost(hProcess: *, bDisablePriorityBoost: int) -> int
export import def #extern #dllimport GetThreadIOPendingFlag(hThread: *, lpIOIsPending: *int) -> int
export import def #extern #dllimport GetSystemTimes(lpIdleTime: *FILETIME, lpKernelTime: *FILETIME, lpUserTime: *FILETIME) -> int
export import def #extern #dllimport GetThreadInformation(hThread: *, ThreadInformationClass: THREAD_INFORMATION_CLASS, ThreadInformation: *, ThreadInformationSize: ulong) -> int
export import def #extern #dllimport SetThreadInformation(hThread: *, ThreadInformationClass: THREAD_INFORMATION_CLASS, ThreadInformation: *, ThreadInformationSize: ulong) -> int
export import def #extern #dllimport IsProcessCritical(hProcess: *, Critical: *int) -> int
export import def #extern #dllimport SetProtectedPolicy(PolicyGuid: *GUID, PolicyValue: uint64, OldPolicyValue: *uint64) -> int
export import def #extern #dllimport QueryProtectedPolicy(PolicyGuid: *GUID, PolicyValue: *uint64) -> int
export import def #extern #dllimport SetThreadIdealProcessor(hThread: *, dwIdealProcessor: ulong) -> ulong
export import def #extern #dllimport SetProcessInformation(hProcess: *, ProcessInformationClass: PROCESS_INFORMATION_CLASS, ProcessInformation: *, ProcessInformationSize: ulong) -> int
export import def #extern #dllimport GetProcessInformation(hProcess: *, ProcessInformationClass: PROCESS_INFORMATION_CLASS, ProcessInformation: *, ProcessInformationSize: ulong) -> int
export import def #extern GetSystemCpuSetInformation(Information: *s__SYSTEM_CPU_SET_INFORMATION, BufferLength: ulong, ReturnedLength: *ulong, Process: *, Flags: ulong) -> int
export import def #extern GetProcessDefaultCpuSets(Process: *, CpuSetIds: *ulong, CpuSetIdCount: ulong, RequiredIdCount: *ulong) -> int
export import def #extern SetProcessDefaultCpuSets(Process: *, CpuSetIds: *ulong, CpuSetIdCount: ulong) -> int
export import def #extern GetThreadSelectedCpuSets(Thread: *, CpuSetIds: *ulong, CpuSetIdCount: ulong, RequiredIdCount: *ulong) -> int
export import def #extern SetThreadSelectedCpuSets(Thread: *, CpuSetIds: *ulong, CpuSetIdCount: ulong) -> int
export import def #extern #dllimport CreateProcessAsUserA(hToken: *, lpApplicationName: *char, lpCommandLine: *char, lpProcessAttributes: *SECURITY_ATTRIBUTES, lpThreadAttributes: *SECURITY_ATTRIBUTES, bInheritHandles: int, dwCreationFlags: ulong, lpEnvironment: *, lpCurrentDirectory: *char, lpStartupInfo: *STARTUPINFOA, lpProcessInformation: *PROCESS_INFORMATION) -> int
export import def #extern #dllimport GetProcessShutdownParameters(lpdwLevel: *ulong, lpdwFlags: *ulong) -> int
export import def #extern #dllimport SetThreadDescription(hThread: *, lpThreadDescription: *ushort) -> long
export import def #extern #dllimport GetThreadDescription(hThread: *, ppszThreadDescription: **ushort) -> long
export import def #extern #dllimport GlobalMemoryStatusEx(lpBuffer: *MEMORYSTATUSEX) -> int
export import def #extern #dllimport GetSystemInfo(lpSystemInfo: *SYSTEM_INFO)
export import def #extern #dllimport GetSystemTime(lpSystemTime: *SYSTEMTIME)
export import def #extern #dllimport GetSystemTimeAsFileTime(lpSystemTimeAsFileTime: *FILETIME)
export import def #extern #dllimport GetLocalTime(lpSystemTime: *SYSTEMTIME)
export import def #extern #dllimport IsUserCetAvailableInEnvironment(UserCetEnvironment: ulong) -> int
export import def #extern #dllimport GetSystemLeapSecondInformation(Enabled: *int, Flags: *ulong) -> int
export import def #extern #dllimport GetVersion() -> ulong
export import def #extern #dllimport SetLocalTime(lpSystemTime: *SYSTEMTIME) -> int
export import def #extern #dllimport GetTickCount() -> ulong
export import def #extern #dllimport GetTickCount64() -> uint64
export import def #extern #dllimport GetSystemTimeAdjustment(lpTimeAdjustment: *ulong, lpTimeIncrement: *ulong, lpTimeAdjustmentDisabled: *int) -> int
export import def #extern #dllimport GetSystemTimeAdjustmentPrecise(lpTimeAdjustment: *uint64, lpTimeIncrement: *uint64, lpTimeAdjustmentDisabled: *int) -> int
export import def #extern #dllimport GetSystemDirectoryA(lpBuffer: *char, uSize: uint) -> uint
export import def #extern #dllimport GetSystemDirectoryW(lpBuffer: *ushort, uSize: uint) -> uint
export import def #extern #dllimport GetWindowsDirectoryA(lpBuffer: *char, uSize: uint) -> uint
export import def #extern #dllimport GetWindowsDirectoryW(lpBuffer: *ushort, uSize: uint) -> uint
export import def #extern #dllimport GetSystemWindowsDirectoryA(lpBuffer: *char, uSize: uint) -> uint
export import def #extern #dllimport GetSystemWindowsDirectoryW(lpBuffer: *ushort, uSize: uint) -> uint
export import def #extern #dllimport GetComputerNameExA(NameType: COMPUTER_NAME_FORMAT, lpBuffer: *char, nSize: *ulong) -> int
export import def #extern #dllimport GetComputerNameExW(NameType: COMPUTER_NAME_FORMAT, lpBuffer: *ushort, nSize: *ulong) -> int
export import def #extern #dllimport SetComputerNameExW(NameType: COMPUTER_NAME_FORMAT, lpBuffer: *ushort) -> int
export import def #extern #dllimport SetSystemTime(lpSystemTime: *SYSTEMTIME) -> int
export import def #extern #dllimport GetVersionExA(lpVersionInformation: *OSVERSIONINFOA) -> int
export import def #extern #dllimport GetVersionExW(lpVersionInformation: *RTL_OSVERSIONINFOW) -> int
export import def #extern #dllimport GetLogicalProcessorInformation(Buffer: *SYSTEM_LOGICAL_PROCESSOR_INFORMATION, ReturnedLength: *ulong) -> int
export import def #extern #dllimport GetLogicalProcessorInformationEx(RelationshipType: LOGICAL_PROCESSOR_RELATIONSHIP, Buffer: *s__SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX, ReturnedLength: *ulong) -> int
export import def #extern #dllimport GetNativeSystemInfo(lpSystemInfo: *SYSTEM_INFO)
export import def #extern #dllimport GetSystemTimePreciseAsFileTime(lpSystemTimeAsFileTime: *FILETIME)
export import def #extern #dllimport GetProductInfo(dwOSMajorVersion: ulong, dwOSMinorVersion: ulong, dwSpMajorVersion: ulong, dwSpMinorVersion: ulong, pdwReturnedProductType: *ulong) -> int
export import def #extern #dllimport GetOsSafeBootMode(Flags: *ulong) -> int
export import def #extern #dllimport EnumSystemFirmwareTables(FirmwareTableProviderSignature: ulong, pFirmwareTableEnumBuffer: *, BufferSize: ulong) -> uint
export import def #extern #dllimport GetSystemFirmwareTable(FirmwareTableProviderSignature: ulong, FirmwareTableID: ulong, pFirmwareTableBuffer: *, BufferSize: ulong) -> uint
export import def #extern #dllimport DnsHostnameToComputerNameExW(Hostname: *ushort, ComputerName: *ushort, nSize: *ulong) -> int
export import def #extern #dllimport GetPhysicallyInstalledSystemMemory(TotalMemoryInKilobytes: *uint64) -> int
export import def #extern #dllimport SetComputerNameEx2W(NameType: COMPUTER_NAME_FORMAT, Flags: ulong, lpBuffer: *ushort) -> int
export import def #extern #dllimport SetSystemTimeAdjustment(dwTimeAdjustment: ulong, bTimeAdjustmentDisabled: int) -> int
export import def #extern #dllimport SetSystemTimeAdjustmentPrecise(dwTimeAdjustment: uint64, bTimeAdjustmentDisabled: int) -> int
export import def #extern #dllimport InstallELAMCertificateInfo(ELAMFile: *) -> int
export import def #extern #dllimport GetProcessorSystemCycleTime(Group: ushort, Buffer: *SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION, ReturnedLength: *ulong) -> int
export import def #extern #dllimport GetOsManufacturingMode(pbEnabled: *int) -> int
export import def #extern #dllimport GetIntegratedDisplaySize(sizeInInches: *double) -> long
export import def #extern #dllimport SetComputerNameA(lpComputerName: *char) -> int
export import def #extern #dllimport SetComputerNameW(lpComputerName: *ushort) -> int
export import def #extern #dllimport SetComputerNameExA(NameType: COMPUTER_NAME_FORMAT, lpBuffer: *char) -> int
export import def #extern #dllimport VirtualAlloc(lpAddress: *, dwSize: uint64, flAllocationType: ulong, flProtect: ulong) -> *
export import def #extern #dllimport VirtualProtect(lpAddress: *, dwSize: uint64, flNewProtect: ulong, lpflOldProtect: *ulong) -> int
export import def #extern #dllimport VirtualFree(lpAddress: *, dwSize: uint64, dwFreeType: ulong) -> int
export import def #extern #dllimport VirtualQuery(lpAddress: *, lpBuffer: *MEMORY_BASIC_INFORMATION, dwLength: uint64) -> uint64
export import def #extern #dllimport VirtualAllocEx(hProcess: *, lpAddress: *, dwSize: uint64, flAllocationType: ulong, flProtect: ulong) -> *
export import def #extern #dllimport VirtualProtectEx(hProcess: *, lpAddress: *, dwSize: uint64, flNewProtect: ulong, lpflOldProtect: *ulong) -> int
export import def #extern #dllimport VirtualQueryEx(hProcess: *, lpAddress: *, lpBuffer: *MEMORY_BASIC_INFORMATION, dwLength: uint64) -> uint64
export import def #extern #dllimport ReadProcessMemory(hProcess: *, lpBaseAddress: *, lpBuffer: *, nSize: uint64, lpNumberOfBytesRead: *uint64) -> int
export import def #extern #dllimport WriteProcessMemory(hProcess: *, lpBaseAddress: *, lpBuffer: *, nSize: uint64, lpNumberOfBytesWritten: *uint64) -> int
export import def #extern #dllimport CreateFileMappingW(hFile: *, lpFileMappingAttributes: *SECURITY_ATTRIBUTES, flProtect: ulong, dwMaximumSizeHigh: ulong, dwMaximumSizeLow: ulong, lpName: *ushort) -> *
export import def #extern #dllimport OpenFileMappingW(dwDesiredAccess: ulong, bInheritHandle: int, lpName: *ushort) -> *
export import def #extern #dllimport MapViewOfFile(hFileMappingObject: *, dwDesiredAccess: ulong, dwFileOffsetHigh: ulong, dwFileOffsetLow: ulong, dwNumberOfBytesToMap: uint64) -> *
export import def #extern #dllimport MapViewOfFileEx(hFileMappingObject: *, dwDesiredAccess: ulong, dwFileOffsetHigh: ulong, dwFileOffsetLow: ulong, dwNumberOfBytesToMap: uint64, lpBaseAddress: *) -> *
export import def #extern #dllimport VirtualFreeEx(hProcess: *, lpAddress: *, dwSize: uint64, dwFreeType: ulong) -> int
export import def #extern #dllimport FlushViewOfFile(lpBaseAddress: *, dwNumberOfBytesToFlush: uint64) -> int
export import def #extern #dllimport UnmapViewOfFile(lpBaseAddress: *) -> int
export import def #extern #dllimport GetLargePageMinimum() -> uint64
export import def #extern #dllimport GetProcessWorkingSetSizeEx(hProcess: *, lpMinimumWorkingSetSize: *uint64, lpMaximumWorkingSetSize: *uint64, Flags: *ulong) -> int
export import def #extern #dllimport SetProcessWorkingSetSizeEx(hProcess: *, dwMinimumWorkingSetSize: uint64, dwMaximumWorkingSetSize: uint64, Flags: ulong) -> int
export import def #extern #dllimport VirtualLock(lpAddress: *, dwSize: uint64) -> int
export import def #extern #dllimport VirtualUnlock(lpAddress: *, dwSize: uint64) -> int
export import def #extern #dllimport GetWriteWatch(dwFlags: ulong, lpBaseAddress: *, dwRegionSize: uint64, lpAddresses: **, lpdwCount: *uint64, lpdwGranularity: *ulong) -> uint
export import def #extern #dllimport ResetWriteWatch(lpBaseAddress: *, dwRegionSize: uint64) -> uint
export import def #extern #dllimport CreateMemoryResourceNotification(NotificationType: MEMORY_RESOURCE_NOTIFICATION_TYPE) -> *
export import def #extern #dllimport QueryMemoryResourceNotification(ResourceNotificationHandle: *, ResourceState: *int) -> int
export import def #extern #dllimport GetSystemFileCacheSize(lpMinimumFileCacheSize: *uint64, lpMaximumFileCacheSize: *uint64, lpFlags: *ulong) -> int
export import def #extern #dllimport SetSystemFileCacheSize(MinimumFileCacheSize: uint64, MaximumFileCacheSize: uint64, Flags: ulong) -> int
export import def #extern #dllimport CreateFileMappingNumaW(hFile: *, lpFileMappingAttributes: *SECURITY_ATTRIBUTES, flProtect: ulong, dwMaximumSizeHigh: ulong, dwMaximumSizeLow: ulong, lpName: *ushort, nndPreferred: ulong) -> *
export import def #extern #dllimport PrefetchVirtualMemory(hProcess: *, NumberOfEntries: uint64, VirtualAddresses: *WIN32_MEMORY_RANGE_ENTRY, Flags: ulong) -> int
export import def #extern #dllimport CreateFileMappingFromApp(hFile: *, SecurityAttributes: *SECURITY_ATTRIBUTES, PageProtection: ulong, MaximumSize: uint64, Name: *ushort) -> *
export import def #extern #dllimport MapViewOfFileFromApp(hFileMappingObject: *, DesiredAccess: ulong, FileOffset: uint64, NumberOfBytesToMap: uint64) -> *
export import def #extern #dllimport UnmapViewOfFileEx(BaseAddress: *, UnmapFlags: ulong) -> int
export import def #extern #dllimport AllocateUserPhysicalPages(hProcess: *, NumberOfPages: *uint64, PageArray: *uint64) -> int
export import def #extern #dllimport FreeUserPhysicalPages(hProcess: *, NumberOfPages: *uint64, PageArray: *uint64) -> int
export import def #extern #dllimport MapUserPhysicalPages(VirtualAddress: *, NumberOfPages: uint64, PageArray: *uint64) -> int
export import def #extern #dllimport AllocateUserPhysicalPagesNuma(hProcess: *, NumberOfPages: *uint64, PageArray: *uint64, nndPreferred: ulong) -> int
export import def #extern #dllimport VirtualAllocExNuma(hProcess: *, lpAddress: *, dwSize: uint64, flAllocationType: ulong, flProtect: ulong, nndPreferred: ulong) -> *
export import def #extern #dllimport GetMemoryErrorHandlingCapabilities(Capabilities: *ulong) -> int
export import def #extern #dllimport RegisterBadMemoryNotification(Callback: *) -> *
export import def #extern #dllimport UnregisterBadMemoryNotification(RegistrationHandle: *) -> int
export import def #extern OfferVirtualMemory(VirtualAddress: *, Size: uint64, Priority: OFFER_PRIORITY) -> ulong
export import def #extern ReclaimVirtualMemory(VirtualAddress: *, Size: uint64) -> ulong
export import def #extern DiscardVirtualMemory(VirtualAddress: *, Size: uint64) -> ulong
export import def #extern #dllimport SetProcessValidCallTargets(hProcess: *, VirtualAddress: *, RegionSize: uint64, NumberOfOffsets: ulong, OffsetInformation: *CFG_CALL_TARGET_INFO) -> int
export import def #extern #dllimport SetProcessValidCallTargetsForMappedView(Process: *, VirtualAddress: *, RegionSize: uint64, NumberOfOffsets: ulong, OffsetInformation: *CFG_CALL_TARGET_INFO, Section: *, ExpectedFileOffset: uint64) -> int
export import def #extern #dllimport VirtualAllocFromApp(BaseAddress: *, Size: uint64, AllocationType: ulong, Protection: ulong) -> *
export import def #extern #dllimport VirtualProtectFromApp(Address: *, Size: uint64, NewProtection: ulong, OldProtection: *ulong) -> int
export import def #extern #dllimport OpenFileMappingFromApp(DesiredAccess: ulong, InheritHandle: int, Name: *ushort) -> *
export import def #extern #dllimport QueryVirtualMemoryInformation(Process: *, VirtualAddress: *, MemoryInformationClass: WIN32_MEMORY_INFORMATION_CLASS, MemoryInformation: *, MemoryInformationSize: uint64, ReturnSize: *uint64) -> int
export import def #extern #dllimport MapViewOfFileNuma2(FileMappingHandle: *, ProcessHandle: *, Offset: uint64, BaseAddress: *, ViewSize: uint64, AllocationType: ulong, PageProtection: ulong, PreferredNode: ulong) -> *
export import def #extern #dllimport UnmapViewOfFile2(Process: *, BaseAddress: *, UnmapFlags: ulong) -> int
export import def #extern #dllimport VirtualUnlockEx(Process: *, Address: *, Size: uint64) -> int
export import def #extern #dllimport VirtualAlloc2(Process: *, BaseAddress: *, Size: uint64, AllocationType: ulong, PageProtection: ulong, ExtendedParameters: *MEM_EXTENDED_PARAMETER, ParameterCount: ulong) -> *
export import def #extern #dllimport MapViewOfFile3(FileMapping: *, Process: *, BaseAddress: *, Offset: uint64, ViewSize: uint64, AllocationType: ulong, PageProtection: ulong, ExtendedParameters: *MEM_EXTENDED_PARAMETER, ParameterCount: ulong) -> *
export import def #extern #dllimport VirtualAlloc2FromApp(Process: *, BaseAddress: *, Size: uint64, AllocationType: ulong, PageProtection: ulong, ExtendedParameters: *MEM_EXTENDED_PARAMETER, ParameterCount: ulong) -> *
export import def #extern #dllimport MapViewOfFile3FromApp(FileMapping: *, Process: *, BaseAddress: *, Offset: uint64, ViewSize: uint64, AllocationType: ulong, PageProtection: ulong, ExtendedParameters: *MEM_EXTENDED_PARAMETER, ParameterCount: ulong) -> *
export import def #extern #dllimport CreateFileMapping2(File: *, SecurityAttributes: *SECURITY_ATTRIBUTES, DesiredAccess: ulong, PageProtection: ulong, AllocationAttributes: ulong, MaximumSize: uint64, Name: *ushort, ExtendedParameters: *MEM_EXTENDED_PARAMETER, ParameterCount: ulong) -> *
export import def #extern #dllimport IsEnclaveTypeSupported(flEnclaveType: ulong) -> int
export import def #extern #dllimport CreateEnclave(hProcess: *, lpAddress: *, dwSize: uint64, dwInitialCommitment: uint64, flEnclaveType: ulong, lpEnclaveInformation: *, dwInfoLength: ulong, lpEnclaveError: *ulong) -> *
export import def #extern #dllimport LoadEnclaveData(hProcess: *, lpAddress: *, lpBuffer: *, nSize: uint64, flProtect: ulong, lpPageInformation: *, dwInfoLength: ulong, lpNumberOfBytesWritten: *uint64, lpEnclaveError: *ulong) -> int
export import def #extern #dllimport InitializeEnclave(hProcess: *, lpAddress: *, lpEnclaveInformation: *, dwInfoLength: ulong, lpEnclaveError: *ulong) -> int
export import def #extern #dllimport LoadEnclaveImageA(lpEnclaveAddress: *, lpImageName: *char) -> int
export import def #extern #dllimport LoadEnclaveImageW(lpEnclaveAddress: *, lpImageName: *ushort) -> int
export import def #extern #dllimport CallEnclave(lpRoutine: def (*) -> (*), lpParameter: *, fWaitForThread: int, lpReturnValue: **) -> int
export import def #extern #dllimport TerminateEnclave(lpAddress: *, fWait: int) -> int
export import def #extern #dllimport DeleteEnclave(lpAddress: *) -> int
export import def #extern #dllimport QueueUserWorkItem(Function: def (*) -> (ulong), Context: *, Flags: ulong) -> int
export import def #extern #dllimport UnregisterWaitEx(WaitHandle: *, CompletionEvent: *) -> int
export import def #extern #dllimport CreateTimerQueue() -> *
export import def #extern #dllimport CreateTimerQueueTimer(phNewTimer: **, TimerQueue: *, Callback: def (*, char) -> (), Parameter: *, DueTime: ulong, Period: ulong, Flags: ulong) -> int
export import def #extern #dllimport ChangeTimerQueueTimer(TimerQueue: *, Timer: *, DueTime: ulong, Period: ulong) -> int
export import def #extern #dllimport DeleteTimerQueueTimer(TimerQueue: *, Timer: *, CompletionEvent: *) -> int
export import def #extern #dllimport DeleteTimerQueueEx(TimerQueue: *, CompletionEvent: *) -> int
export import def #extern #dllimport CreateThreadpool(reserved: *) -> *TP_POOL
export import def #extern #dllimport SetThreadpoolThreadMaximum(ptpp: *TP_POOL, cthrdMost: ulong)
export import def #extern #dllimport SetThreadpoolThreadMinimum(ptpp: *TP_POOL, cthrdMic: ulong) -> int
export import def #extern #dllimport SetThreadpoolStackInformation(ptpp: *TP_POOL, ptpsi: *TP_POOL_STACK_INFORMATION) -> int
export import def #extern #dllimport QueryThreadpoolStackInformation(ptpp: *TP_POOL, ptpsi: *TP_POOL_STACK_INFORMATION) -> int
export import def #extern #dllimport CloseThreadpool(ptpp: *TP_POOL)
export import def #extern #dllimport CreateThreadpoolCleanupGroup() -> *TP_CLEANUP_GROUP
export import def #extern #dllimport CloseThreadpoolCleanupGroupMembers(ptpcg: *TP_CLEANUP_GROUP, fCancelPendingCallbacks: int, pvCleanupContext: *)
export import def #extern #dllimport CloseThreadpoolCleanupGroup(ptpcg: *TP_CLEANUP_GROUP)
export import def #extern #dllimport SetEventWhenCallbackReturns(pci: *TP_CALLBACK_INSTANCE, evt: *)
export import def #extern #dllimport ReleaseSemaphoreWhenCallbackReturns(pci: *TP_CALLBACK_INSTANCE, sem: *, crel: ulong)
export import def #extern #dllimport ReleaseMutexWhenCallbackReturns(pci: *TP_CALLBACK_INSTANCE, mut: *)
export import def #extern #dllimport LeaveCriticalSectionWhenCallbackReturns(pci: *TP_CALLBACK_INSTANCE, pcs: *RTL_CRITICAL_SECTION)
export import def #extern #dllimport FreeLibraryWhenCallbackReturns(pci: *TP_CALLBACK_INSTANCE, mod: *s_HINSTANCE__)
export import def #extern #dllimport CallbackMayRunLong(pci: *TP_CALLBACK_INSTANCE) -> int
export import def #extern #dllimport DisassociateCurrentThreadFromCallback(pci: *TP_CALLBACK_INSTANCE)
export import def #extern #dllimport TrySubmitThreadpoolCallback(pfns: def (*TP_CALLBACK_INSTANCE, *) -> (), pv: *, pcbe: *TP_CALLBACK_ENVIRON_V3) -> int
export import def #extern #dllimport CreateThreadpoolWork(pfnwk: def (*TP_CALLBACK_INSTANCE, *, *TP_WORK) -> (), pv: *, pcbe: *TP_CALLBACK_ENVIRON_V3) -> *TP_WORK
export import def #extern #dllimport SubmitThreadpoolWork(pwk: *TP_WORK)
export import def #extern #dllimport WaitForThreadpoolWorkCallbacks(pwk: *TP_WORK, fCancelPendingCallbacks: int)
export import def #extern #dllimport CloseThreadpoolWork(pwk: *TP_WORK)
export import def #extern #dllimport CreateThreadpoolTimer(pfnti: def (*TP_CALLBACK_INSTANCE, *, *TP_TIMER) -> (), pv: *, pcbe: *TP_CALLBACK_ENVIRON_V3) -> *TP_TIMER
export import def #extern #dllimport SetThreadpoolTimer(pti: *TP_TIMER, pftDueTime: *FILETIME, msPeriod: ulong, msWindowLength: ulong)
export import def #extern #dllimport IsThreadpoolTimerSet(pti: *TP_TIMER) -> int
export import def #extern #dllimport WaitForThreadpoolTimerCallbacks(pti: *TP_TIMER, fCancelPendingCallbacks: int)
export import def #extern #dllimport CloseThreadpoolTimer(pti: *TP_TIMER)
export import def #extern #dllimport CreateThreadpoolWait(pfnwa: def (*TP_CALLBACK_INSTANCE, *, *TP_WAIT, ulong) -> (), pv: *, pcbe: *TP_CALLBACK_ENVIRON_V3) -> *TP_WAIT
export import def #extern #dllimport SetThreadpoolWait(pwa: *TP_WAIT, h: *, pftTimeout: *FILETIME)
export import def #extern #dllimport WaitForThreadpoolWaitCallbacks(pwa: *TP_WAIT, fCancelPendingCallbacks: int)
export import def #extern #dllimport CloseThreadpoolWait(pwa: *TP_WAIT)
export import def #extern #dllimport CreateThreadpoolIo(fl: *, pfnio: def (*TP_CALLBACK_INSTANCE, *, *, ulong, uint64, *TP_IO) -> (), pv: *, pcbe: *TP_CALLBACK_ENVIRON_V3) -> *TP_IO
export import def #extern #dllimport StartThreadpoolIo(pio: *TP_IO)
export import def #extern #dllimport CancelThreadpoolIo(pio: *TP_IO)
export import def #extern #dllimport WaitForThreadpoolIoCallbacks(pio: *TP_IO, fCancelPendingCallbacks: int)
export import def #extern #dllimport CloseThreadpoolIo(pio: *TP_IO)
export import def #extern #dllimport SetThreadpoolTimerEx(pti: *TP_TIMER, pftDueTime: *FILETIME, msPeriod: ulong, msWindowLength: ulong) -> int
export import def #extern #dllimport SetThreadpoolWaitEx(pwa: *TP_WAIT, h: *, pftTimeout: *FILETIME, Reserved: *) -> int
export import def #extern #dllimport IsProcessInJob(ProcessHandle: *, JobHandle: *, Result: *int) -> int
export import def #extern #dllimport CreateJobObjectW(lpJobAttributes: *SECURITY_ATTRIBUTES, lpName: *ushort) -> *
export import def #extern #dllimport FreeMemoryJobObject(Buffer: *)
export import def #extern #dllimport OpenJobObjectW(dwDesiredAccess: ulong, bInheritHandle: int, lpName: *ushort) -> *
export import def #extern #dllimport AssignProcessToJobObject(hJob: *, hProcess: *) -> int
export import def #extern #dllimport TerminateJobObject(hJob: *, uExitCode: uint) -> int
export import def #extern #dllimport SetInformationJobObject(hJob: *, JobObjectInformationClass: JOBOBJECTINFOCLASS, lpJobObjectInformation: *, cbJobObjectInformationLength: ulong) -> int
export import def #extern #dllimport SetIoRateControlInformationJobObject(hJob: *, IoRateControlInfo: *JOBOBJECT_IO_RATE_CONTROL_INFORMATION) -> ulong
export import def #extern #dllimport QueryInformationJobObject(hJob: *, JobObjectInformationClass: JOBOBJECTINFOCLASS, lpJobObjectInformation: *, cbJobObjectInformationLength: ulong, lpReturnLength: *ulong) -> int
export import def #extern #dllimport QueryIoRateControlInformationJobObject(hJob: *, VolumeName: *ushort, InfoBlocks: **JOBOBJECT_IO_RATE_CONTROL_INFORMATION, InfoBlockCount: *ulong) -> ulong
export import def #extern #dllimport Wow64DisableWow64FsRedirection(OldValue: **) -> int
export import def #extern #dllimport Wow64RevertWow64FsRedirection(OlValue: *) -> int
export import def #extern #dllimport IsWow64Process(hProcess: *, Wow64Process: *int) -> int
export import def #extern #dllimport GetSystemWow64DirectoryA(lpBuffer: *char, uSize: uint) -> uint
export import def #extern #dllimport GetSystemWow64DirectoryW(lpBuffer: *ushort, uSize: uint) -> uint
export import def #extern #dllimport Wow64SetThreadDefaultGuestMachine(Machine: ushort) -> ushort
export import def #extern #dllimport IsWow64Process2(hProcess: *, pProcessMachine: *ushort, pNativeMachine: *ushort) -> int
export import def #extern #dllimport GetSystemWow64Directory2A(lpBuffer: *char, uSize: uint, ImageFileMachineType: ushort) -> uint
export import def #extern #dllimport GetSystemWow64Directory2W(lpBuffer: *ushort, uSize: uint, ImageFileMachineType: ushort) -> uint
export import def #extern #dllimport IsWow64GuestMachineSupported(WowGuestMachine: ushort, MachineIsSupported: *int) -> long
export import def #extern #dllimport Wow64GetThreadContext(hThread: *, lpContext: *WOW64_CONTEXT) -> int
export import def #extern #dllimport Wow64SetThreadContext(hThread: *, lpContext: *WOW64_CONTEXT) -> int
export import def #extern #dllimport Wow64SuspendThread(hThread: *) -> ulong
export import def #extern #dllimport DisableThreadLibraryCalls(hLibModule: *s_HINSTANCE__) -> int
export import def #extern #dllimport FindResourceExW(hModule: *s_HINSTANCE__, lpType: *ushort, lpName: *ushort, wLanguage: ushort) -> *s_HRSRC__
export import def #extern #dllimport FindStringOrdinal(dwFindStringOrdinalFlags: ulong, lpStringSource: *ushort, cchSource: int, lpStringValue: *ushort, cchValue: int, bIgnoreCase: int) -> int
export import def #extern #dllimport FreeLibrary(hLibModule: *s_HINSTANCE__) -> int
export import def #extern #dllimport FreeLibraryAndExitThread(hLibModule: *s_HINSTANCE__, dwExitCode: ulong)
export import def #extern #dllimport FreeResource(hResData: *) -> int
export import def #extern #dllimport GetModuleFileNameA(hModule: *s_HINSTANCE__, lpFilename: *char, nSize: ulong) -> ulong
export import def #extern #dllimport GetModuleFileNameW(hModule: *s_HINSTANCE__, lpFilename: *ushort, nSize: ulong) -> ulong
export import def #extern #dllimport GetModuleHandleA(lpModuleName: *char) -> *s_HINSTANCE__
export import def #extern #dllimport GetModuleHandleW(lpModuleName: *ushort) -> *s_HINSTANCE__
export import def #extern #dllimport GetModuleHandleExA(dwFlags: ulong, lpModuleName: *char, phModule: **s_HINSTANCE__) -> int
export import def #extern #dllimport GetModuleHandleExW(dwFlags: ulong, lpModuleName: *ushort, phModule: **s_HINSTANCE__) -> int
export import def #extern #dllimport GetProcAddress(hModule: *s_HINSTANCE__, lpProcName: *char) -> def () -> (int64)
export import def #extern #dllimport LoadLibraryExA(lpLibFileName: *char, hFile: *, dwFlags: ulong) -> *s_HINSTANCE__
export import def #extern #dllimport LoadLibraryExW(lpLibFileName: *ushort, hFile: *, dwFlags: ulong) -> *s_HINSTANCE__
export import def #extern #dllimport LoadResource(hModule: *s_HINSTANCE__, hResInfo: *s_HRSRC__) -> *
export import def #extern #dllimport LoadStringA(hInstance: *s_HINSTANCE__, uID: uint, lpBuffer: *char, cchBufferMax: int) -> int
export import def #extern #dllimport LoadStringW(hInstance: *s_HINSTANCE__, uID: uint, lpBuffer: *ushort, cchBufferMax: int) -> int
export import def #extern #dllimport LockResource(hResData: *) -> *
export import def #extern #dllimport SizeofResource(hModule: *s_HINSTANCE__, hResInfo: *s_HRSRC__) -> ulong
export import def #extern #dllimport AddDllDirectory(NewDirectory: *ushort) -> *
export import def #extern #dllimport RemoveDllDirectory(Cookie: *) -> int
export import def #extern #dllimport SetDefaultDllDirectories(DirectoryFlags: ulong) -> int
export import def #extern #dllimport EnumResourceLanguagesExA(hModule: *s_HINSTANCE__, lpType: *char, lpName: *char, lpEnumFunc: def (*s_HINSTANCE__, *char, *char, ushort, int64) -> (int), lParam: int64, dwFlags: ulong, LangId: ushort) -> int
export import def #extern #dllimport EnumResourceLanguagesExW(hModule: *s_HINSTANCE__, lpType: *ushort, lpName: *ushort, lpEnumFunc: def (*s_HINSTANCE__, *ushort, *ushort, ushort, int64) -> (int), lParam: int64, dwFlags: ulong, LangId: ushort) -> int
export import def #extern #dllimport EnumResourceNamesExA(hModule: *s_HINSTANCE__, lpType: *char, lpEnumFunc: def (*s_HINSTANCE__, *char, *char, int64) -> (int), lParam: int64, dwFlags: ulong, LangId: ushort) -> int
export import def #extern #dllimport EnumResourceNamesExW(hModule: *s_HINSTANCE__, lpType: *ushort, lpEnumFunc: def (*s_HINSTANCE__, *ushort, *ushort, int64) -> (int), lParam: int64, dwFlags: ulong, LangId: ushort) -> int
export import def #extern #dllimport EnumResourceTypesExA(hModule: *s_HINSTANCE__, lpEnumFunc: def (*s_HINSTANCE__, *char, int64) -> (int), lParam: int64, dwFlags: ulong, LangId: ushort) -> int
export import def #extern #dllimport EnumResourceTypesExW(hModule: *s_HINSTANCE__, lpEnumFunc: def (*s_HINSTANCE__, *ushort, int64) -> (int), lParam: int64, dwFlags: ulong, LangId: ushort) -> int
export import def #extern #dllimport FindResourceW(hModule: *s_HINSTANCE__, lpName: *ushort, lpType: *ushort) -> *s_HRSRC__
export import def #extern #dllimport LoadLibraryA(lpLibFileName: *char) -> *s_HINSTANCE__
export import def #extern #dllimport LoadLibraryW(lpLibFileName: *ushort) -> *s_HINSTANCE__
export import def #extern #dllimport EnumResourceNamesW(hModule: *s_HINSTANCE__, lpType: *ushort, lpEnumFunc: def (*s_HINSTANCE__, *ushort, *ushort, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport AccessCheck(pSecurityDescriptor: *, ClientToken: *, DesiredAccess: ulong, GenericMapping: *GENERIC_MAPPING, PrivilegeSet: *PRIVILEGE_SET, PrivilegeSetLength: *ulong, GrantedAccess: *ulong, AccessStatus: *int) -> int
export import def #extern #dllimport AccessCheckAndAuditAlarmW(SubsystemName: *ushort, HandleId: *, ObjectTypeName: *ushort, ObjectName: *ushort, SecurityDescriptor: *, DesiredAccess: ulong, GenericMapping: *GENERIC_MAPPING, ObjectCreation: int, GrantedAccess: *ulong, AccessStatus: *int, pfGenerateOnClose: *int) -> int
export import def #extern #dllimport AccessCheckByType(pSecurityDescriptor: *, PrincipalSelfSid: *, ClientToken: *, DesiredAccess: ulong, ObjectTypeList: *OBJECT_TYPE_LIST, ObjectTypeListLength: ulong, GenericMapping: *GENERIC_MAPPING, PrivilegeSet: *PRIVILEGE_SET, PrivilegeSetLength: *ulong, GrantedAccess: *ulong, AccessStatus: *int) -> int
export import def #extern #dllimport AccessCheckByTypeResultList(pSecurityDescriptor: *, PrincipalSelfSid: *, ClientToken: *, DesiredAccess: ulong, ObjectTypeList: *OBJECT_TYPE_LIST, ObjectTypeListLength: ulong, GenericMapping: *GENERIC_MAPPING, PrivilegeSet: *PRIVILEGE_SET, PrivilegeSetLength: *ulong, GrantedAccessList: *ulong, AccessStatusList: *ulong) -> int
export import def #extern #dllimport AccessCheckByTypeAndAuditAlarmW(SubsystemName: *ushort, HandleId: *, ObjectTypeName: *ushort, ObjectName: *ushort, SecurityDescriptor: *, PrincipalSelfSid: *, DesiredAccess: ulong, AuditType: AUDIT_EVENT_TYPE, Flags: ulong, ObjectTypeList: *OBJECT_TYPE_LIST, ObjectTypeListLength: ulong, GenericMapping: *GENERIC_MAPPING, ObjectCreation: int, GrantedAccess: *ulong, AccessStatus: *int, pfGenerateOnClose: *int) -> int
export import def #extern #dllimport AccessCheckByTypeResultListAndAuditAlarmW(SubsystemName: *ushort, HandleId: *, ObjectTypeName: *ushort, ObjectName: *ushort, SecurityDescriptor: *, PrincipalSelfSid: *, DesiredAccess: ulong, AuditType: AUDIT_EVENT_TYPE, Flags: ulong, ObjectTypeList: *OBJECT_TYPE_LIST, ObjectTypeListLength: ulong, GenericMapping: *GENERIC_MAPPING, ObjectCreation: int, GrantedAccessList: *ulong, AccessStatusList: *ulong, pfGenerateOnClose: *int) -> int
export import def #extern #dllimport AccessCheckByTypeResultListAndAuditAlarmByHandleW(SubsystemName: *ushort, HandleId: *, ClientToken: *, ObjectTypeName: *ushort, ObjectName: *ushort, SecurityDescriptor: *, PrincipalSelfSid: *, DesiredAccess: ulong, AuditType: AUDIT_EVENT_TYPE, Flags: ulong, ObjectTypeList: *OBJECT_TYPE_LIST, ObjectTypeListLength: ulong, GenericMapping: *GENERIC_MAPPING, ObjectCreation: int, GrantedAccessList: *ulong, AccessStatusList: *ulong, pfGenerateOnClose: *int) -> int
export import def #extern #dllimport AddAccessAllowedAce(pAcl: *ACL, dwAceRevision: ulong, AccessMask: ulong, pSid: *) -> int
export import def #extern #dllimport AddAccessAllowedAceEx(pAcl: *ACL, dwAceRevision: ulong, AceFlags: ulong, AccessMask: ulong, pSid: *) -> int
export import def #extern #dllimport AddAccessAllowedObjectAce(pAcl: *ACL, dwAceRevision: ulong, AceFlags: ulong, AccessMask: ulong, ObjectTypeGuid: *GUID, InheritedObjectTypeGuid: *GUID, pSid: *) -> int
export import def #extern #dllimport AddAccessDeniedAce(pAcl: *ACL, dwAceRevision: ulong, AccessMask: ulong, pSid: *) -> int
export import def #extern #dllimport AddAccessDeniedAceEx(pAcl: *ACL, dwAceRevision: ulong, AceFlags: ulong, AccessMask: ulong, pSid: *) -> int
export import def #extern #dllimport AddAccessDeniedObjectAce(pAcl: *ACL, dwAceRevision: ulong, AceFlags: ulong, AccessMask: ulong, ObjectTypeGuid: *GUID, InheritedObjectTypeGuid: *GUID, pSid: *) -> int
export import def #extern #dllimport AddAce(pAcl: *ACL, dwAceRevision: ulong, dwStartingAceIndex: ulong, pAceList: *, nAceListLength: ulong) -> int
export import def #extern #dllimport AddAuditAccessAce(pAcl: *ACL, dwAceRevision: ulong, dwAccessMask: ulong, pSid: *, bAuditSuccess: int, bAuditFailure: int) -> int
export import def #extern #dllimport AddAuditAccessAceEx(pAcl: *ACL, dwAceRevision: ulong, AceFlags: ulong, dwAccessMask: ulong, pSid: *, bAuditSuccess: int, bAuditFailure: int) -> int
export import def #extern #dllimport AddAuditAccessObjectAce(pAcl: *ACL, dwAceRevision: ulong, AceFlags: ulong, AccessMask: ulong, ObjectTypeGuid: *GUID, InheritedObjectTypeGuid: *GUID, pSid: *, bAuditSuccess: int, bAuditFailure: int) -> int
export import def #extern #dllimport AddMandatoryAce(pAcl: *ACL, dwAceRevision: ulong, AceFlags: ulong, MandatoryPolicy: ulong, pLabelSid: *) -> int
export import def #extern #dllimport AddResourceAttributeAce(pAcl: *ACL, dwAceRevision: ulong, AceFlags: ulong, AccessMask: ulong, pSid: *, pAttributeInfo: *CLAIM_SECURITY_ATTRIBUTES_INFORMATION, pReturnLength: *ulong) -> int
export import def #extern #dllimport AddScopedPolicyIDAce(pAcl: *ACL, dwAceRevision: ulong, AceFlags: ulong, AccessMask: ulong, pSid: *) -> int
export import def #extern #dllimport AdjustTokenGroups(TokenHandle: *, ResetToDefault: int, NewState: *TOKEN_GROUPS, BufferLength: ulong, PreviousState: *TOKEN_GROUPS, ReturnLength: *ulong) -> int
export import def #extern #dllimport AdjustTokenPrivileges(TokenHandle: *, DisableAllPrivileges: int, NewState: *TOKEN_PRIVILEGES, BufferLength: ulong, PreviousState: *TOKEN_PRIVILEGES, ReturnLength: *ulong) -> int
export import def #extern #dllimport AllocateAndInitializeSid(pIdentifierAuthority: *SID_IDENTIFIER_AUTHORITY, nSubAuthorityCount: char, nSubAuthority0: ulong, nSubAuthority1: ulong, nSubAuthority2: ulong, nSubAuthority3: ulong, nSubAuthority4: ulong, nSubAuthority5: ulong, nSubAuthority6: ulong, nSubAuthority7: ulong, pSid: **) -> int
export import def #extern #dllimport AllocateLocallyUniqueId(Luid: *LUID) -> int
export import def #extern #dllimport AreAllAccessesGranted(GrantedAccess: ulong, DesiredAccess: ulong) -> int
export import def #extern #dllimport AreAnyAccessesGranted(GrantedAccess: ulong, DesiredAccess: ulong) -> int
export import def #extern #dllimport CheckTokenMembership(TokenHandle: *, SidToCheck: *, IsMember: *int) -> int
export import def #extern #dllimport CheckTokenCapability(TokenHandle: *, CapabilitySidToCheck: *, HasCapability: *int) -> int
export import def #extern #dllimport GetAppContainerAce(Acl: *ACL, StartingAceIndex: ulong, AppContainerAce: **, AppContainerAceIndex: *ulong) -> int
export import def #extern #dllimport CheckTokenMembershipEx(TokenHandle: *, SidToCheck: *, Flags: ulong, IsMember: *int) -> int
export import def #extern #dllimport ConvertToAutoInheritPrivateObjectSecurity(ParentDescriptor: *, CurrentSecurityDescriptor: *, NewSecurityDescriptor: **, ObjectType: *GUID, IsDirectoryObject: char, GenericMapping: *GENERIC_MAPPING) -> int
export import def #extern #dllimport CopySid(nDestinationSidLength: ulong, pDestinationSid: *, pSourceSid: *) -> int
export import def #extern #dllimport CreatePrivateObjectSecurity(ParentDescriptor: *, CreatorDescriptor: *, NewDescriptor: **, IsDirectoryObject: int, Token: *, GenericMapping: *GENERIC_MAPPING) -> int
export import def #extern #dllimport CreatePrivateObjectSecurityEx(ParentDescriptor: *, CreatorDescriptor: *, NewDescriptor: **, ObjectType: *GUID, IsContainerObject: int, AutoInheritFlags: ulong, Token: *, GenericMapping: *GENERIC_MAPPING) -> int
export import def #extern #dllimport CreatePrivateObjectSecurityWithMultipleInheritance(ParentDescriptor: *, CreatorDescriptor: *, NewDescriptor: **, ObjectTypes: **GUID, GuidCount: ulong, IsContainerObject: int, AutoInheritFlags: ulong, Token: *, GenericMapping: *GENERIC_MAPPING) -> int
export import def #extern #dllimport CreateRestrictedToken(ExistingTokenHandle: *, Flags: ulong, DisableSidCount: ulong, SidsToDisable: *SID_AND_ATTRIBUTES, DeletePrivilegeCount: ulong, PrivilegesToDelete: *LUID_AND_ATTRIBUTES, RestrictedSidCount: ulong, SidsToRestrict: *SID_AND_ATTRIBUTES, NewTokenHandle: **) -> int
export import def #extern #dllimport CreateWellKnownSid(WellKnownSidType: WELL_KNOWN_SID_TYPE, DomainSid: *, pSid: *, cbSid: *ulong) -> int
export import def #extern #dllimport EqualDomainSid(pSid1: *, pSid2: *, pfEqual: *int) -> int
export import def #extern #dllimport DeleteAce(pAcl: *ACL, dwAceIndex: ulong) -> int
export import def #extern #dllimport DestroyPrivateObjectSecurity(ObjectDescriptor: **) -> int
export import def #extern #dllimport DuplicateToken(ExistingTokenHandle: *, ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL, DuplicateTokenHandle: **) -> int
export import def #extern #dllimport DuplicateTokenEx(hExistingToken: *, dwDesiredAccess: ulong, lpTokenAttributes: *SECURITY_ATTRIBUTES, ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL, TokenType: TOKEN_TYPE, phNewToken: **) -> int
export import def #extern #dllimport EqualPrefixSid(pSid1: *, pSid2: *) -> int
export import def #extern #dllimport EqualSid(pSid1: *, pSid2: *) -> int
export import def #extern #dllimport FindFirstFreeAce(pAcl: *ACL, pAce: **) -> int
export import def #extern #dllimport FreeSid(pSid: *) -> *
export import def #extern #dllimport GetAce(pAcl: *ACL, dwAceIndex: ulong, pAce: **) -> int
export import def #extern #dllimport GetAclInformation(pAcl: *ACL, pAclInformation: *, nAclInformationLength: ulong, dwAclInformationClass: ACL_INFORMATION_CLASS) -> int
export import def #extern #dllimport GetFileSecurityW(lpFileName: *ushort, RequestedInformation: ulong, pSecurityDescriptor: *, nLength: ulong, lpnLengthNeeded: *ulong) -> int
export import def #extern #dllimport GetKernelObjectSecurity(Handle: *, RequestedInformation: ulong, pSecurityDescriptor: *, nLength: ulong, lpnLengthNeeded: *ulong) -> int
export import def #extern #dllimport GetLengthSid(pSid: *) -> ulong
export import def #extern #dllimport GetPrivateObjectSecurity(ObjectDescriptor: *, SecurityInformation: ulong, ResultantDescriptor: *, DescriptorLength: ulong, ReturnLength: *ulong) -> int
export import def #extern #dllimport GetSecurityDescriptorControl(pSecurityDescriptor: *, pControl: *ushort, lpdwRevision: *ulong) -> int
export import def #extern #dllimport GetSecurityDescriptorDacl(pSecurityDescriptor: *, lpbDaclPresent: *int, pDacl: **ACL, lpbDaclDefaulted: *int) -> int
export import def #extern #dllimport GetSecurityDescriptorGroup(pSecurityDescriptor: *, pGroup: **, lpbGroupDefaulted: *int) -> int
export import def #extern #dllimport GetSecurityDescriptorLength(pSecurityDescriptor: *) -> ulong
export import def #extern #dllimport GetSecurityDescriptorOwner(pSecurityDescriptor: *, pOwner: **, lpbOwnerDefaulted: *int) -> int
export import def #extern #dllimport GetSecurityDescriptorRMControl(SecurityDescriptor: *, RMControl: *char) -> ulong
export import def #extern #dllimport GetSecurityDescriptorSacl(pSecurityDescriptor: *, lpbSaclPresent: *int, pSacl: **ACL, lpbSaclDefaulted: *int) -> int
export import def #extern #dllimport GetSidIdentifierAuthority(pSid: *) -> *SID_IDENTIFIER_AUTHORITY
export import def #extern #dllimport GetSidLengthRequired(nSubAuthorityCount: char) -> ulong
export import def #extern #dllimport GetSidSubAuthority(pSid: *, nSubAuthority: ulong) -> *ulong
export import def #extern #dllimport GetSidSubAuthorityCount(pSid: *) -> *char
export import def #extern #dllimport GetTokenInformation(TokenHandle: *, TokenInformationClass: TOKEN_INFORMATION_CLASS, TokenInformation: *, TokenInformationLength: ulong, ReturnLength: *ulong) -> int
export import def #extern #dllimport GetWindowsAccountDomainSid(pSid: *, pDomainSid: *, cbDomainSid: *ulong) -> int
export import def #extern #dllimport ImpersonateAnonymousToken(ThreadHandle: *) -> int
export import def #extern #dllimport ImpersonateLoggedOnUser(hToken: *) -> int
export import def #extern #dllimport ImpersonateSelf(ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL) -> int
export import def #extern #dllimport InitializeAcl(pAcl: *ACL, nAclLength: ulong, dwAclRevision: ulong) -> int
export import def #extern #dllimport InitializeSecurityDescriptor(pSecurityDescriptor: *, dwRevision: ulong) -> int
export import def #extern #dllimport InitializeSid(Sid: *, pIdentifierAuthority: *SID_IDENTIFIER_AUTHORITY, nSubAuthorityCount: char) -> int
export import def #extern #dllimport IsTokenRestricted(TokenHandle: *) -> int
export import def #extern #dllimport IsValidAcl(pAcl: *ACL) -> int
export import def #extern #dllimport IsValidSecurityDescriptor(pSecurityDescriptor: *) -> int
export import def #extern #dllimport IsValidSid(pSid: *) -> int
export import def #extern #dllimport IsWellKnownSid(pSid: *, WellKnownSidType: WELL_KNOWN_SID_TYPE) -> int
export import def #extern #dllimport MakeAbsoluteSD(pSelfRelativeSecurityDescriptor: *, pAbsoluteSecurityDescriptor: *, lpdwAbsoluteSecurityDescriptorSize: *ulong, pDacl: *ACL, lpdwDaclSize: *ulong, pSacl: *ACL, lpdwSaclSize: *ulong, pOwner: *, lpdwOwnerSize: *ulong, pPrimaryGroup: *, lpdwPrimaryGroupSize: *ulong) -> int
export import def #extern #dllimport MakeSelfRelativeSD(pAbsoluteSecurityDescriptor: *, pSelfRelativeSecurityDescriptor: *, lpdwBufferLength: *ulong) -> int
export import def #extern #dllimport MapGenericMask(AccessMask: *ulong, GenericMapping: *GENERIC_MAPPING)
export import def #extern #dllimport ObjectCloseAuditAlarmW(SubsystemName: *ushort, HandleId: *, GenerateOnClose: int) -> int
export import def #extern #dllimport ObjectDeleteAuditAlarmW(SubsystemName: *ushort, HandleId: *, GenerateOnClose: int) -> int
export import def #extern #dllimport ObjectOpenAuditAlarmW(SubsystemName: *ushort, HandleId: *, ObjectTypeName: *ushort, ObjectName: *ushort, pSecurityDescriptor: *, ClientToken: *, DesiredAccess: ulong, GrantedAccess: ulong, Privileges: *PRIVILEGE_SET, ObjectCreation: int, AccessGranted: int, GenerateOnClose: *int) -> int
export import def #extern #dllimport ObjectPrivilegeAuditAlarmW(SubsystemName: *ushort, HandleId: *, ClientToken: *, DesiredAccess: ulong, Privileges: *PRIVILEGE_SET, AccessGranted: int) -> int
export import def #extern #dllimport PrivilegeCheck(ClientToken: *, RequiredPrivileges: *PRIVILEGE_SET, pfResult: *int) -> int
export import def #extern #dllimport PrivilegedServiceAuditAlarmW(SubsystemName: *ushort, ServiceName: *ushort, ClientToken: *, Privileges: *PRIVILEGE_SET, AccessGranted: int) -> int
export import def #extern #dllimport QuerySecurityAccessMask(SecurityInformation: ulong, DesiredAccess: *ulong)
export import def #extern #dllimport RevertToSelf() -> int
export import def #extern #dllimport SetAclInformation(pAcl: *ACL, pAclInformation: *, nAclInformationLength: ulong, dwAclInformationClass: ACL_INFORMATION_CLASS) -> int
export import def #extern #dllimport SetFileSecurityW(lpFileName: *ushort, SecurityInformation: ulong, pSecurityDescriptor: *) -> int
export import def #extern #dllimport SetKernelObjectSecurity(Handle: *, SecurityInformation: ulong, SecurityDescriptor: *) -> int
export import def #extern #dllimport SetPrivateObjectSecurity(SecurityInformation: ulong, ModificationDescriptor: *, ObjectsSecurityDescriptor: **, GenericMapping: *GENERIC_MAPPING, Token: *) -> int
export import def #extern #dllimport SetPrivateObjectSecurityEx(SecurityInformation: ulong, ModificationDescriptor: *, ObjectsSecurityDescriptor: **, AutoInheritFlags: ulong, GenericMapping: *GENERIC_MAPPING, Token: *) -> int
export import def #extern #dllimport SetSecurityAccessMask(SecurityInformation: ulong, DesiredAccess: *ulong)
export import def #extern #dllimport SetSecurityDescriptorControl(pSecurityDescriptor: *, ControlBitsOfInterest: ushort, ControlBitsToSet: ushort) -> int
export import def #extern #dllimport SetSecurityDescriptorDacl(pSecurityDescriptor: *, bDaclPresent: int, pDacl: *ACL, bDaclDefaulted: int) -> int
export import def #extern #dllimport SetSecurityDescriptorGroup(pSecurityDescriptor: *, pGroup: *, bGroupDefaulted: int) -> int
export import def #extern #dllimport SetSecurityDescriptorOwner(pSecurityDescriptor: *, pOwner: *, bOwnerDefaulted: int) -> int
export import def #extern #dllimport SetSecurityDescriptorRMControl(SecurityDescriptor: *, RMControl: *char) -> ulong
export import def #extern #dllimport SetSecurityDescriptorSacl(pSecurityDescriptor: *, bSaclPresent: int, pSacl: *ACL, bSaclDefaulted: int) -> int
export import def #extern #dllimport SetTokenInformation(TokenHandle: *, TokenInformationClass: TOKEN_INFORMATION_CLASS, TokenInformation: *, TokenInformationLength: ulong) -> int
export import def #extern #dllimport SetCachedSigningLevel(SourceFiles: **, SourceFileCount: ulong, Flags: ulong, TargetFile: *) -> int
export import def #extern #dllimport GetCachedSigningLevel(File: *, Flags: *ulong, SigningLevel: *ulong, Thumbprint: *char, ThumbprintSize: *ulong, ThumbprintAlgorithm: *ulong) -> int
export import def #extern #dllimport CveEventWrite(CveId: *ushort, AdditionalDetails: *ushort) -> long
export import def #extern #dllimport DeriveCapabilitySidsFromName(CapName: *ushort, CapabilityGroupSids: ***, CapabilityGroupSidCount: *ulong, CapabilitySids: ***, CapabilitySidCount: *ulong) -> int
export import def #extern #dllimport CreatePrivateNamespaceW(lpPrivateNamespaceAttributes: *SECURITY_ATTRIBUTES, lpBoundaryDescriptor: *, lpAliasPrefix: *ushort) -> *
export import def #extern #dllimport OpenPrivateNamespaceW(lpBoundaryDescriptor: *, lpAliasPrefix: *ushort) -> *
export import def #extern #dllimport ClosePrivateNamespace(Handle: *, Flags: ulong) -> char
export import def #extern #dllimport CreateBoundaryDescriptorW(Name: *ushort, Flags: ulong) -> *
export import def #extern #dllimport AddSIDToBoundaryDescriptor(BoundaryDescriptor: **, RequiredSid: *) -> int
export import def #extern #dllimport DeleteBoundaryDescriptor(BoundaryDescriptor: *)
export import def #extern #dllimport GetNumaHighestNodeNumber(HighestNodeNumber: *ulong) -> int
export import def #extern #dllimport GetNumaNodeProcessorMaskEx(Node: ushort, ProcessorMask: *GROUP_AFFINITY) -> int
export import def #extern #dllimport GetNumaProximityNodeEx(ProximityId: ulong, NodeNumber: *ushort) -> int
export import def #extern #dllimport GetProcessGroupAffinity(hProcess: *, GroupCount: *ushort, GroupArray: *ushort) -> int
export import def #extern #dllimport GetThreadGroupAffinity(hThread: *, GroupAffinity: *GROUP_AFFINITY) -> int
export import def #extern #dllimport SetThreadGroupAffinity(hThread: *, GroupAffinity: *GROUP_AFFINITY, PreviousGroupAffinity: *GROUP_AFFINITY) -> int
export import def #extern GetAppContainerNamedObjectPath(Token: *, AppContainerSid: *, ObjectPathLength: ulong, ObjectPath: *ushort, ReturnLength: *ulong) -> int
export import def #extern #dllimport QueryThreadCycleTime(ThreadHandle: *, CycleTime: *uint64) -> int
export import def #extern #dllimport QueryProcessCycleTime(ProcessHandle: *, CycleTime: *uint64) -> int
export import def #extern #dllimport QueryIdleProcessorCycleTime(BufferLength: *ulong, ProcessorIdleCycleTime: *uint64) -> int
export import def #extern #dllimport QueryIdleProcessorCycleTimeEx(Group: ushort, BufferLength: *ulong, ProcessorIdleCycleTime: *uint64) -> int
export import def #extern #dllimport QueryInterruptTimePrecise(lpInterruptTimePrecise: *uint64)
export import def #extern #dllimport QueryUnbiasedInterruptTimePrecise(lpUnbiasedInterruptTimePrecise: *uint64)
export import def #extern #dllimport QueryInterruptTime(lpInterruptTime: *uint64)
export import def #extern #dllimport QueryUnbiasedInterruptTime(UnbiasedTime: *uint64) -> int
export import def #extern #dllimport QueryAuxiliaryCounterFrequency(lpAuxiliaryCounterFrequency: *uint64) -> long
export import def #extern #dllimport ConvertAuxiliaryCounterToPerformanceCounter(ullAuxiliaryCounterValue: uint64, lpPerformanceCounterValue: *uint64, lpConversionError: *uint64) -> long
export import def #extern #dllimport ConvertPerformanceCounterToAuxiliaryCounter(ullPerformanceCounterValue: uint64, lpAuxiliaryCounterValue: *uint64, lpConversionError: *uint64) -> long
export import def #extern #dllimport GlobalAlloc(uFlags: uint, dwBytes: uint64) -> *
export import def #extern #dllimport GlobalReAlloc(hMem: *, dwBytes: uint64, uFlags: uint) -> *
export import def #extern #dllimport GlobalSize(hMem: *) -> uint64
export import def #extern #dllimport GlobalUnlock(hMem: *) -> int
export import def #extern #dllimport GlobalLock(hMem: *) -> *
export import def #extern #dllimport GlobalFlags(hMem: *) -> uint
export import def #extern #dllimport GlobalHandle(pMem: *) -> *
export import def #extern #dllimport GlobalFree(hMem: *) -> *
export import def #extern #dllimport GlobalCompact(dwMinFree: ulong) -> uint64
export import def #extern #dllimport GlobalFix(hMem: *)
export import def #extern #dllimport GlobalUnfix(hMem: *)
export import def #extern #dllimport GlobalWire(hMem: *) -> *
export import def #extern #dllimport GlobalUnWire(hMem: *) -> int
export import def #extern #dllimport GlobalMemoryStatus(lpBuffer: *MEMORYSTATUS)
export import def #extern #dllimport LocalAlloc(uFlags: uint, uBytes: uint64) -> *
export import def #extern #dllimport LocalReAlloc(hMem: *, uBytes: uint64, uFlags: uint) -> *
export import def #extern #dllimport LocalLock(hMem: *) -> *
export import def #extern #dllimport LocalHandle(pMem: *) -> *
export import def #extern #dllimport LocalUnlock(hMem: *) -> int
export import def #extern #dllimport LocalSize(hMem: *) -> uint64
export import def #extern #dllimport LocalFlags(hMem: *) -> uint
export import def #extern #dllimport LocalFree(hMem: *) -> *
export import def #extern #dllimport LocalShrink(hMem: *, cbNewSize: uint) -> uint64
export import def #extern #dllimport LocalCompact(uMinFree: uint) -> uint64
export import def #extern #dllimport GetBinaryTypeA(lpApplicationName: *char, lpBinaryType: *ulong) -> int
export import def #extern #dllimport GetBinaryTypeW(lpApplicationName: *ushort, lpBinaryType: *ulong) -> int
export import def #extern #dllimport GetShortPathNameA(lpszLongPath: *char, lpszShortPath: *char, cchBuffer: ulong) -> ulong
export import def #extern #dllimport GetLongPathNameTransactedA(lpszShortPath: *char, lpszLongPath: *char, cchBuffer: ulong, hTransaction: *) -> ulong
export import def #extern #dllimport GetLongPathNameTransactedW(lpszShortPath: *ushort, lpszLongPath: *ushort, cchBuffer: ulong, hTransaction: *) -> ulong
export import def #extern #dllimport GetProcessAffinityMask(hProcess: *, lpProcessAffinityMask: *uint64, lpSystemAffinityMask: *uint64) -> int
export import def #extern #dllimport SetProcessAffinityMask(hProcess: *, dwProcessAffinityMask: uint64) -> int
export import def #extern #dllimport GetProcessIoCounters(hProcess: *, lpIoCounters: *IO_COUNTERS) -> int
export import def #extern #dllimport GetProcessWorkingSetSize(hProcess: *, lpMinimumWorkingSetSize: *uint64, lpMaximumWorkingSetSize: *uint64) -> int
export import def #extern #dllimport SetProcessWorkingSetSize(hProcess: *, dwMinimumWorkingSetSize: uint64, dwMaximumWorkingSetSize: uint64) -> int
export import def #extern #dllimport FatalExit(ExitCode: int)
export import def #extern #dllimport SetEnvironmentStringsA(NewEnvironment: *char) -> int
export import def #extern #dllimport SwitchToFiber(lpFiber: *)
export import def #extern #dllimport DeleteFiber(lpFiber: *)
export import def #extern #dllimport ConvertFiberToThread() -> int
export import def #extern #dllimport CreateFiberEx(dwStackCommitSize: uint64, dwStackReserveSize: uint64, dwFlags: ulong, lpStartAddress: def (*) -> (), lpParameter: *) -> *
export import def #extern #dllimport ConvertThreadToFiberEx(lpParameter: *, dwFlags: ulong) -> *
export import def #extern #dllimport CreateFiber(dwStackSize: uint64, lpStartAddress: def (*) -> (), lpParameter: *) -> *
export import def #extern #dllimport ConvertThreadToFiber(lpParameter: *) -> *
export import def #extern #dllimport CreateUmsCompletionList(UmsCompletionList: **) -> int
export import def #extern #dllimport DequeueUmsCompletionListItems(UmsCompletionList: *, WaitTimeOut: ulong, UmsThreadList: **) -> int
export import def #extern #dllimport GetUmsCompletionListEvent(UmsCompletionList: *, UmsCompletionEvent: **) -> int
export import def #extern #dllimport ExecuteUmsThread(UmsThread: *) -> int
export import def #extern #dllimport UmsThreadYield(SchedulerParam: *) -> int
export import def #extern #dllimport DeleteUmsCompletionList(UmsCompletionList: *) -> int
export import def #extern #dllimport GetCurrentUmsThread() -> *
export import def #extern #dllimport GetNextUmsListItem(UmsContext: *) -> *
export import def #extern #dllimport QueryUmsThreadInformation(UmsThread: *, UmsThreadInfoClass: RTL_UMS_THREAD_INFO_CLASS, UmsThreadInformation: *, UmsThreadInformationLength: ulong, ReturnLength: *ulong) -> int
export import def #extern #dllimport SetUmsThreadInformation(UmsThread: *, UmsThreadInfoClass: RTL_UMS_THREAD_INFO_CLASS, UmsThreadInformation: *, UmsThreadInformationLength: ulong) -> int
export import def #extern #dllimport DeleteUmsThreadContext(UmsThread: *) -> int
export import def #extern #dllimport CreateUmsThreadContext(lpUmsThread: **) -> int
export import def #extern #dllimport EnterUmsSchedulingMode(SchedulerStartupInfo: *UMS_SCHEDULER_STARTUP_INFO) -> int
export import def #extern #dllimport GetUmsSystemThreadInformation(ThreadHandle: *, SystemThreadInfo: *UMS_SYSTEM_THREAD_INFORMATION) -> int
export import def #extern #dllimport SetThreadAffinityMask(hThread: *, dwThreadAffinityMask: uint64) -> uint64
export import def #extern #dllimport SetProcessDEPPolicy(dwFlags: ulong) -> int
export import def #extern #dllimport GetProcessDEPPolicy(hProcess: *, lpFlags: *ulong, lpPermanent: *int) -> int
export import def #extern #dllimport RequestWakeupLatency(latency: LATENCY_TIME) -> int
export import def #extern #dllimport IsSystemResumeAutomatic() -> int
export import def #extern #dllimport GetThreadSelectorEntry(hThread: *, dwSelector: ulong, lpSelectorEntry: *) -> int
export import def #extern #dllimport SetThreadExecutionState(esFlags: ulong) -> ulong
export import def #extern #dllimport PowerCreateRequest(Context: *REASON_CONTEXT) -> *
export import def #extern #dllimport PowerSetRequest(PowerRequest: *, RequestType: POWER_REQUEST_TYPE) -> int
export import def #extern #dllimport PowerClearRequest(PowerRequest: *, RequestType: POWER_REQUEST_TYPE) -> int
export import def #extern #dllimport SetFileCompletionNotificationModes(FileHandle: *, Flags: char) -> int
export import def #extern #dllimport Wow64GetThreadSelectorEntry(hThread: *, dwSelector: ulong, lpSelectorEntry: *WOW64_LDT_ENTRY) -> int
export import def #extern #dllimport DebugSetProcessKillOnExit(KillOnExit: int) -> int
export import def #extern #dllimport DebugBreakProcess(Process: *) -> int
export import def #extern #dllimport PulseEvent(hEvent: *) -> int
export import def #extern #dllimport GlobalDeleteAtom(nAtom: ushort) -> ushort
export import def #extern #dllimport InitAtomTable(nSize: ulong) -> int
export import def #extern #dllimport DeleteAtom(nAtom: ushort) -> ushort
export import def #extern #dllimport SetHandleCount(uNumber: uint) -> uint
export import def #extern #dllimport RequestDeviceWakeup(hDevice: *) -> int
export import def #extern #dllimport CancelDeviceWakeupRequest(hDevice: *) -> int
export import def #extern #dllimport GetDevicePowerState(hDevice: *, pfOn: *int) -> int
export import def #extern #dllimport SetMessageWaitingIndicator(hMsgIndicator: *, ulMsgCount: ulong) -> int
export import def #extern #dllimport SetFileShortNameA(hFile: *, lpShortName: *char) -> int
export import def #extern #dllimport SetFileShortNameW(hFile: *, lpShortName: *ushort) -> int
export import def #extern #dllimport LoadModule(lpModuleName: *char, lpParameterBlock: *) -> ulong
export import def #extern #dllimport WinExec(lpCmdLine: *char, uCmdShow: uint) -> uint
export import def #extern #dllimport ClearCommBreak(hFile: *) -> int
export import def #extern #dllimport ClearCommError(hFile: *, lpErrors: *ulong, lpStat: *COMSTAT) -> int
export import def #extern #dllimport SetupComm(hFile: *, dwInQueue: ulong, dwOutQueue: ulong) -> int
export import def #extern #dllimport EscapeCommFunction(hFile: *, dwFunc: ulong) -> int
export import def #extern #dllimport GetCommConfig(hCommDev: *, lpCC: *COMMCONFIG, lpdwSize: *ulong) -> int
export import def #extern #dllimport GetCommMask(hFile: *, lpEvtMask: *ulong) -> int
export import def #extern #dllimport GetCommProperties(hFile: *, lpCommProp: *COMMPROP) -> int
export import def #extern #dllimport GetCommModemStatus(hFile: *, lpModemStat: *ulong) -> int
export import def #extern #dllimport GetCommState(hFile: *, lpDCB: *DCB) -> int
export import def #extern #dllimport GetCommTimeouts(hFile: *, lpCommTimeouts: *COMMTIMEOUTS) -> int
export import def #extern #dllimport PurgeComm(hFile: *, dwFlags: ulong) -> int
export import def #extern #dllimport SetCommBreak(hFile: *) -> int
export import def #extern #dllimport SetCommConfig(hCommDev: *, lpCC: *COMMCONFIG, dwSize: ulong) -> int
export import def #extern #dllimport SetCommMask(hFile: *, dwEvtMask: ulong) -> int
export import def #extern #dllimport SetCommState(hFile: *, lpDCB: *DCB) -> int
export import def #extern #dllimport SetCommTimeouts(hFile: *, lpCommTimeouts: *COMMTIMEOUTS) -> int
export import def #extern #dllimport TransmitCommChar(hFile: *, cChar: char) -> int
export import def #extern #dllimport WaitCommEvent(hFile: *, lpEvtMask: *ulong, lpOverlapped: *OVERLAPPED) -> int
export import def #extern #dllimport OpenCommPort(uPortNumber: ulong, dwDesiredAccess: ulong, dwFlagsAndAttributes: ulong) -> *
export import def #extern #dllimport GetCommPorts(lpPortNumbers: *ulong, uPortNumbersCount: ulong, puPortNumbersFound: *ulong) -> ulong
export import def #extern #dllimport SetTapePosition(hDevice: *, dwPositionMethod: ulong, dwPartition: ulong, dwOffsetLow: ulong, dwOffsetHigh: ulong, bImmediate: int) -> ulong
export import def #extern #dllimport GetTapePosition(hDevice: *, dwPositionType: ulong, lpdwPartition: *ulong, lpdwOffsetLow: *ulong, lpdwOffsetHigh: *ulong) -> ulong
export import def #extern #dllimport PrepareTape(hDevice: *, dwOperation: ulong, bImmediate: int) -> ulong
export import def #extern #dllimport EraseTape(hDevice: *, dwEraseType: ulong, bImmediate: int) -> ulong
export import def #extern #dllimport CreateTapePartition(hDevice: *, dwPartitionMethod: ulong, dwCount: ulong, dwSize: ulong) -> ulong
export import def #extern #dllimport WriteTapemark(hDevice: *, dwTapemarkType: ulong, dwTapemarkCount: ulong, bImmediate: int) -> ulong
export import def #extern #dllimport GetTapeStatus(hDevice: *) -> ulong
export import def #extern #dllimport GetTapeParameters(hDevice: *, dwOperation: ulong, lpdwSize: *ulong, lpTapeInformation: *) -> ulong
export import def #extern #dllimport SetTapeParameters(hDevice: *, dwOperation: ulong, lpTapeInformation: *) -> ulong
export import def #extern #dllimport MulDiv(nNumber: int, nNumerator: int, nDenominator: int) -> int
export import def #extern #dllimport GetSystemDEPPolicy() -> DEP_SYSTEM_POLICY_TYPE
export import def #extern #dllimport GetSystemRegistryQuota(pdwQuotaAllowed: *ulong, pdwQuotaUsed: *ulong) -> int
export import def #extern #dllimport FileTimeToDosDateTime(lpFileTime: *FILETIME, lpFatDate: *ushort, lpFatTime: *ushort) -> int
export import def #extern #dllimport DosDateTimeToFileTime(wFatDate: ushort, wFatTime: ushort, lpFileTime: *FILETIME) -> int
export import def #extern #dllimport FormatMessageA(dwFlags: ulong, lpSource: *, dwMessageId: ulong, dwLanguageId: ulong, lpBuffer: *char, nSize: ulong, Arguments: **char) -> ulong
export import def #extern #dllimport FormatMessageW(dwFlags: ulong, lpSource: *, dwMessageId: ulong, dwLanguageId: ulong, lpBuffer: *ushort, nSize: ulong, Arguments: **char) -> ulong
export import def #extern #dllimport CreateMailslotA(lpName: *char, nMaxMessageSize: ulong, lReadTimeout: ulong, lpSecurityAttributes: *SECURITY_ATTRIBUTES) -> *
export import def #extern #dllimport CreateMailslotW(lpName: *ushort, nMaxMessageSize: ulong, lReadTimeout: ulong, lpSecurityAttributes: *SECURITY_ATTRIBUTES) -> *
export import def #extern #dllimport GetMailslotInfo(hMailslot: *, lpMaxMessageSize: *ulong, lpNextSize: *ulong, lpMessageCount: *ulong, lpReadTimeout: *ulong) -> int
export import def #extern #dllimport SetMailslotInfo(hMailslot: *, lReadTimeout: ulong) -> int
export import def #extern #dllimport EncryptFileA(lpFileName: *char) -> int
export import def #extern #dllimport EncryptFileW(lpFileName: *ushort) -> int
export import def #extern #dllimport DecryptFileA(lpFileName: *char, dwReserved: ulong) -> int
export import def #extern #dllimport DecryptFileW(lpFileName: *ushort, dwReserved: ulong) -> int
export import def #extern #dllimport FileEncryptionStatusA(lpFileName: *char, lpStatus: *ulong) -> int
export import def #extern #dllimport FileEncryptionStatusW(lpFileName: *ushort, lpStatus: *ulong) -> int
export import def #extern #dllimport OpenEncryptedFileRawA(lpFileName: *char, ulFlags: ulong, pvContext: **) -> ulong
export import def #extern #dllimport OpenEncryptedFileRawW(lpFileName: *ushort, ulFlags: ulong, pvContext: **) -> ulong
export import def #extern #dllimport ReadEncryptedFileRaw(pfExportCallback: def (*char, *, ulong) -> (ulong), pvCallbackContext: *, pvContext: *) -> ulong
export import def #extern #dllimport WriteEncryptedFileRaw(pfImportCallback: def (*char, *, *ulong) -> (ulong), pvCallbackContext: *, pvContext: *) -> ulong
export import def #extern #dllimport CloseEncryptedFileRaw(pvContext: *)
export import def #extern #dllimport lstrcmpA(lpString1: *char, lpString2: *char) -> int
export import def #extern #dllimport lstrcmpW(lpString1: *ushort, lpString2: *ushort) -> int
export import def #extern #dllimport lstrcmpiA(lpString1: *char, lpString2: *char) -> int
export import def #extern #dllimport lstrcmpiW(lpString1: *ushort, lpString2: *ushort) -> int
export import def #extern #dllimport lstrcpynA(lpString1: *char, lpString2: *char, iMaxLength: int) -> *char
export import def #extern #dllimport lstrcpynW(lpString1: *ushort, lpString2: *ushort, iMaxLength: int) -> *ushort
export import def #extern #dllimport lstrcpyA(lpString1: *char, lpString2: *char) -> *char
export import def #extern #dllimport lstrcpyW(lpString1: *ushort, lpString2: *ushort) -> *ushort
export import def #extern #dllimport lstrcatA(lpString1: *char, lpString2: *char) -> *char
export import def #extern #dllimport lstrcatW(lpString1: *ushort, lpString2: *ushort) -> *ushort
export import def #extern #dllimport lstrlenA(lpString: *char) -> int
export import def #extern #dllimport lstrlenW(lpString: *ushort) -> int
export import def #extern #dllimport OpenFile(lpFileName: *char, lpReOpenBuff: *OFSTRUCT, uStyle: uint) -> int
export import def #extern #dllimport _lopen(lpPathName: *char, iReadWrite: int) -> int
export import def #extern #dllimport _lcreat(lpPathName: *char, iAttribute: int) -> int
export import def #extern #dllimport _lread(hFile: int, lpBuffer: *, uBytes: uint) -> uint
export import def #extern #dllimport _lwrite(hFile: int, lpBuffer: *char, uBytes: uint) -> uint
export import def #extern #dllimport _hread(hFile: int, lpBuffer: *, lBytes: long) -> long
export import def #extern #dllimport _hwrite(hFile: int, lpBuffer: *char, lBytes: long) -> long
export import def #extern #dllimport _lclose(hFile: int) -> int
export import def #extern #dllimport _llseek(hFile: int, lOffset: long, iOrigin: int) -> long
export import def #extern #dllimport IsTextUnicode(lpv: *, iSize: int, lpiResult: *int) -> int
export import def #extern #dllimport BackupRead(hFile: *, lpBuffer: *char, nNumberOfBytesToRead: ulong, lpNumberOfBytesRead: *ulong, bAbort: int, bProcessSecurity: int, lpContext: **) -> int
export import def #extern #dllimport BackupSeek(hFile: *, dwLowBytesToSeek: ulong, dwHighBytesToSeek: ulong, lpdwLowByteSeeked: *ulong, lpdwHighByteSeeked: *ulong, lpContext: **) -> int
export import def #extern #dllimport BackupWrite(hFile: *, lpBuffer: *char, nNumberOfBytesToWrite: ulong, lpNumberOfBytesWritten: *ulong, bAbort: int, bProcessSecurity: int, lpContext: **) -> int
export import def #extern #dllimport OpenMutexA(dwDesiredAccess: ulong, bInheritHandle: int, lpName: *char) -> *
export import def #extern #dllimport CreateSemaphoreA(lpSemaphoreAttributes: *SECURITY_ATTRIBUTES, lInitialCount: long, lMaximumCount: long, lpName: *char) -> *
export import def #extern #dllimport OpenSemaphoreA(dwDesiredAccess: ulong, bInheritHandle: int, lpName: *char) -> *
export import def #extern #dllimport CreateWaitableTimerA(lpTimerAttributes: *SECURITY_ATTRIBUTES, bManualReset: int, lpTimerName: *char) -> *
export import def #extern #dllimport OpenWaitableTimerA(dwDesiredAccess: ulong, bInheritHandle: int, lpTimerName: *char) -> *
export import def #extern #dllimport CreateSemaphoreExA(lpSemaphoreAttributes: *SECURITY_ATTRIBUTES, lInitialCount: long, lMaximumCount: long, lpName: *char, dwFlags: ulong, dwDesiredAccess: ulong) -> *
export import def #extern #dllimport CreateWaitableTimerExA(lpTimerAttributes: *SECURITY_ATTRIBUTES, lpTimerName: *char, dwFlags: ulong, dwDesiredAccess: ulong) -> *
export import def #extern #dllimport CreateFileMappingA(hFile: *, lpFileMappingAttributes: *SECURITY_ATTRIBUTES, flProtect: ulong, dwMaximumSizeHigh: ulong, dwMaximumSizeLow: ulong, lpName: *char) -> *
export import def #extern #dllimport CreateFileMappingNumaA(hFile: *, lpFileMappingAttributes: *SECURITY_ATTRIBUTES, flProtect: ulong, dwMaximumSizeHigh: ulong, dwMaximumSizeLow: ulong, lpName: *char, nndPreferred: ulong) -> *
export import def #extern #dllimport OpenFileMappingA(dwDesiredAccess: ulong, bInheritHandle: int, lpName: *char) -> *
export import def #extern #dllimport GetLogicalDriveStringsA(nBufferLength: ulong, lpBuffer: *char) -> ulong
export import def #extern #dllimport LoadPackagedLibrary(lpwLibFileName: *ushort, Reserved: ulong) -> *s_HINSTANCE__
export import def #extern #dllimport QueryFullProcessImageNameA(hProcess: *, dwFlags: ulong, lpExeName: *char, lpdwSize: *ulong) -> int
export import def #extern #dllimport QueryFullProcessImageNameW(hProcess: *, dwFlags: ulong, lpExeName: *ushort, lpdwSize: *ulong) -> int
export import def #extern #dllimport GetStartupInfoA(lpStartupInfo: *STARTUPINFOA)
export import def #extern #dllimport GetFirmwareEnvironmentVariableA(lpName: *char, lpGuid: *char, pBuffer: *, nSize: ulong) -> ulong
export import def #extern #dllimport GetFirmwareEnvironmentVariableW(lpName: *ushort, lpGuid: *ushort, pBuffer: *, nSize: ulong) -> ulong
export import def #extern #dllimport GetFirmwareEnvironmentVariableExA(lpName: *char, lpGuid: *char, pBuffer: *, nSize: ulong, pdwAttribubutes: *ulong) -> ulong
export import def #extern #dllimport GetFirmwareEnvironmentVariableExW(lpName: *ushort, lpGuid: *ushort, pBuffer: *, nSize: ulong, pdwAttribubutes: *ulong) -> ulong
export import def #extern #dllimport SetFirmwareEnvironmentVariableA(lpName: *char, lpGuid: *char, pValue: *, nSize: ulong) -> int
export import def #extern #dllimport SetFirmwareEnvironmentVariableW(lpName: *ushort, lpGuid: *ushort, pValue: *, nSize: ulong) -> int
export import def #extern #dllimport SetFirmwareEnvironmentVariableExA(lpName: *char, lpGuid: *char, pValue: *, nSize: ulong, dwAttributes: ulong) -> int
export import def #extern #dllimport SetFirmwareEnvironmentVariableExW(lpName: *ushort, lpGuid: *ushort, pValue: *, nSize: ulong, dwAttributes: ulong) -> int
export import def #extern #dllimport GetFirmwareType(FirmwareType: *FIRMWARE_TYPE) -> int
export import def #extern #dllimport IsNativeVhdBoot(NativeVhdBoot: *int) -> int
export import def #extern #dllimport FindResourceA(hModule: *s_HINSTANCE__, lpName: *char, lpType: *char) -> *s_HRSRC__
export import def #extern #dllimport FindResourceExA(hModule: *s_HINSTANCE__, lpType: *char, lpName: *char, wLanguage: ushort) -> *s_HRSRC__
export import def #extern #dllimport EnumResourceTypesA(hModule: *s_HINSTANCE__, lpEnumFunc: def (*s_HINSTANCE__, *char, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport EnumResourceTypesW(hModule: *s_HINSTANCE__, lpEnumFunc: def (*s_HINSTANCE__, *ushort, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport EnumResourceNamesA(hModule: *s_HINSTANCE__, lpType: *char, lpEnumFunc: def (*s_HINSTANCE__, *char, *char, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport EnumResourceLanguagesA(hModule: *s_HINSTANCE__, lpType: *char, lpName: *char, lpEnumFunc: def (*s_HINSTANCE__, *char, *char, ushort, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport EnumResourceLanguagesW(hModule: *s_HINSTANCE__, lpType: *ushort, lpName: *ushort, lpEnumFunc: def (*s_HINSTANCE__, *ushort, *ushort, ushort, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport BeginUpdateResourceA(pFileName: *char, bDeleteExistingResources: int) -> *
export import def #extern #dllimport BeginUpdateResourceW(pFileName: *ushort, bDeleteExistingResources: int) -> *
export import def #extern #dllimport UpdateResourceA(hUpdate: *, lpType: *char, lpName: *char, wLanguage: ushort, lpData: *, cb: ulong) -> int
export import def #extern #dllimport UpdateResourceW(hUpdate: *, lpType: *ushort, lpName: *ushort, wLanguage: ushort, lpData: *, cb: ulong) -> int
export import def #extern #dllimport EndUpdateResourceA(hUpdate: *, fDiscard: int) -> int
export import def #extern #dllimport EndUpdateResourceW(hUpdate: *, fDiscard: int) -> int
export import def #extern #dllimport GlobalAddAtomA(lpString: *char) -> ushort
export import def #extern #dllimport GlobalAddAtomW(lpString: *ushort) -> ushort
export import def #extern #dllimport GlobalAddAtomExA(lpString: *char, Flags: ulong) -> ushort
export import def #extern #dllimport GlobalAddAtomExW(lpString: *ushort, Flags: ulong) -> ushort
export import def #extern #dllimport GlobalFindAtomA(lpString: *char) -> ushort
export import def #extern #dllimport GlobalFindAtomW(lpString: *ushort) -> ushort
export import def #extern #dllimport GlobalGetAtomNameA(nAtom: ushort, lpBuffer: *char, nSize: int) -> uint
export import def #extern #dllimport GlobalGetAtomNameW(nAtom: ushort, lpBuffer: *ushort, nSize: int) -> uint
export import def #extern #dllimport AddAtomA(lpString: *char) -> ushort
export import def #extern #dllimport AddAtomW(lpString: *ushort) -> ushort
export import def #extern #dllimport FindAtomA(lpString: *char) -> ushort
export import def #extern #dllimport FindAtomW(lpString: *ushort) -> ushort
export import def #extern #dllimport GetAtomNameA(nAtom: ushort, lpBuffer: *char, nSize: int) -> uint
export import def #extern #dllimport GetAtomNameW(nAtom: ushort, lpBuffer: *ushort, nSize: int) -> uint
export import def #extern #dllimport GetProfileIntA(lpAppName: *char, lpKeyName: *char, nDefault: int) -> uint
export import def #extern #dllimport GetProfileIntW(lpAppName: *ushort, lpKeyName: *ushort, nDefault: int) -> uint
export import def #extern #dllimport GetProfileStringA(lpAppName: *char, lpKeyName: *char, lpDefault: *char, lpReturnedString: *char, nSize: ulong) -> ulong
export import def #extern #dllimport GetProfileStringW(lpAppName: *ushort, lpKeyName: *ushort, lpDefault: *ushort, lpReturnedString: *ushort, nSize: ulong) -> ulong
export import def #extern #dllimport WriteProfileStringA(lpAppName: *char, lpKeyName: *char, lpString: *char) -> int
export import def #extern #dllimport WriteProfileStringW(lpAppName: *ushort, lpKeyName: *ushort, lpString: *ushort) -> int
export import def #extern #dllimport GetProfileSectionA(lpAppName: *char, lpReturnedString: *char, nSize: ulong) -> ulong
export import def #extern #dllimport GetProfileSectionW(lpAppName: *ushort, lpReturnedString: *ushort, nSize: ulong) -> ulong
export import def #extern #dllimport WriteProfileSectionA(lpAppName: *char, lpString: *char) -> int
export import def #extern #dllimport WriteProfileSectionW(lpAppName: *ushort, lpString: *ushort) -> int
export import def #extern #dllimport GetPrivateProfileIntA(lpAppName: *char, lpKeyName: *char, nDefault: int, lpFileName: *char) -> uint
export import def #extern #dllimport GetPrivateProfileIntW(lpAppName: *ushort, lpKeyName: *ushort, nDefault: int, lpFileName: *ushort) -> uint
export import def #extern #dllimport GetPrivateProfileStringA(lpAppName: *char, lpKeyName: *char, lpDefault: *char, lpReturnedString: *char, nSize: ulong, lpFileName: *char) -> ulong
export import def #extern #dllimport GetPrivateProfileStringW(lpAppName: *ushort, lpKeyName: *ushort, lpDefault: *ushort, lpReturnedString: *ushort, nSize: ulong, lpFileName: *ushort) -> ulong
export import def #extern #dllimport WritePrivateProfileStringA(lpAppName: *char, lpKeyName: *char, lpString: *char, lpFileName: *char) -> int
export import def #extern #dllimport WritePrivateProfileStringW(lpAppName: *ushort, lpKeyName: *ushort, lpString: *ushort, lpFileName: *ushort) -> int
export import def #extern #dllimport GetPrivateProfileSectionA(lpAppName: *char, lpReturnedString: *char, nSize: ulong, lpFileName: *char) -> ulong
export import def #extern #dllimport GetPrivateProfileSectionW(lpAppName: *ushort, lpReturnedString: *ushort, nSize: ulong, lpFileName: *ushort) -> ulong
export import def #extern #dllimport WritePrivateProfileSectionA(lpAppName: *char, lpString: *char, lpFileName: *char) -> int
export import def #extern #dllimport WritePrivateProfileSectionW(lpAppName: *ushort, lpString: *ushort, lpFileName: *ushort) -> int
export import def #extern #dllimport GetPrivateProfileSectionNamesA(lpszReturnBuffer: *char, nSize: ulong, lpFileName: *char) -> ulong
export import def #extern #dllimport GetPrivateProfileSectionNamesW(lpszReturnBuffer: *ushort, nSize: ulong, lpFileName: *ushort) -> ulong
export import def #extern #dllimport GetPrivateProfileStructA(lpszSection: *char, lpszKey: *char, lpStruct: *, uSizeStruct: uint, szFile: *char) -> int
export import def #extern #dllimport GetPrivateProfileStructW(lpszSection: *ushort, lpszKey: *ushort, lpStruct: *, uSizeStruct: uint, szFile: *ushort) -> int
export import def #extern #dllimport WritePrivateProfileStructA(lpszSection: *char, lpszKey: *char, lpStruct: *, uSizeStruct: uint, szFile: *char) -> int
export import def #extern #dllimport WritePrivateProfileStructW(lpszSection: *ushort, lpszKey: *ushort, lpStruct: *, uSizeStruct: uint, szFile: *ushort) -> int
export import def #extern #dllimport Wow64EnableWow64FsRedirection(Wow64FsEnableRedirection: char) -> char
export import def #extern #dllimport SetDllDirectoryA(lpPathName: *char) -> int
export import def #extern #dllimport SetDllDirectoryW(lpPathName: *ushort) -> int
export import def #extern #dllimport GetDllDirectoryA(nBufferLength: ulong, lpBuffer: *char) -> ulong
export import def #extern #dllimport GetDllDirectoryW(nBufferLength: ulong, lpBuffer: *ushort) -> ulong
export import def #extern #dllimport SetSearchPathMode(Flags: ulong) -> int
export import def #extern #dllimport CreateDirectoryExA(lpTemplateDirectory: *char, lpNewDirectory: *char, lpSecurityAttributes: *SECURITY_ATTRIBUTES) -> int
export import def #extern #dllimport CreateDirectoryExW(lpTemplateDirectory: *ushort, lpNewDirectory: *ushort, lpSecurityAttributes: *SECURITY_ATTRIBUTES) -> int
export import def #extern #dllimport CreateDirectoryTransactedA(lpTemplateDirectory: *char, lpNewDirectory: *char, lpSecurityAttributes: *SECURITY_ATTRIBUTES, hTransaction: *) -> int
export import def #extern #dllimport CreateDirectoryTransactedW(lpTemplateDirectory: *ushort, lpNewDirectory: *ushort, lpSecurityAttributes: *SECURITY_ATTRIBUTES, hTransaction: *) -> int
export import def #extern #dllimport RemoveDirectoryTransactedA(lpPathName: *char, hTransaction: *) -> int
export import def #extern #dllimport RemoveDirectoryTransactedW(lpPathName: *ushort, hTransaction: *) -> int
export import def #extern #dllimport GetFullPathNameTransactedA(lpFileName: *char, nBufferLength: ulong, lpBuffer: *char, lpFilePart: **char, hTransaction: *) -> ulong
export import def #extern #dllimport GetFullPathNameTransactedW(lpFileName: *ushort, nBufferLength: ulong, lpBuffer: *ushort, lpFilePart: **ushort, hTransaction: *) -> ulong
export import def #extern #dllimport DefineDosDeviceA(dwFlags: ulong, lpDeviceName: *char, lpTargetPath: *char) -> int
export import def #extern #dllimport QueryDosDeviceA(lpDeviceName: *char, lpTargetPath: *char, ucchMax: ulong) -> ulong
export import def #extern #dllimport CreateFileTransactedA(lpFileName: *char, dwDesiredAccess: ulong, dwShareMode: ulong, lpSecurityAttributes: *SECURITY_ATTRIBUTES, dwCreationDisposition: ulong, dwFlagsAndAttributes: ulong, hTemplateFile: *, hTransaction: *, pusMiniVersion: *ushort, lpExtendedParameter: *) -> *
export import def #extern #dllimport CreateFileTransactedW(lpFileName: *ushort, dwDesiredAccess: ulong, dwShareMode: ulong, lpSecurityAttributes: *SECURITY_ATTRIBUTES, dwCreationDisposition: ulong, dwFlagsAndAttributes: ulong, hTemplateFile: *, hTransaction: *, pusMiniVersion: *ushort, lpExtendedParameter: *) -> *
export import def #extern #dllimport ReOpenFile(hOriginalFile: *, dwDesiredAccess: ulong, dwShareMode: ulong, dwFlagsAndAttributes: ulong) -> *
export import def #extern #dllimport SetFileAttributesTransactedA(lpFileName: *char, dwFileAttributes: ulong, hTransaction: *) -> int
export import def #extern #dllimport SetFileAttributesTransactedW(lpFileName: *ushort, dwFileAttributes: ulong, hTransaction: *) -> int
export import def #extern #dllimport GetFileAttributesTransactedA(lpFileName: *char, fInfoLevelId: GET_FILEEX_INFO_LEVELS, lpFileInformation: *, hTransaction: *) -> int
export import def #extern #dllimport GetFileAttributesTransactedW(lpFileName: *ushort, fInfoLevelId: GET_FILEEX_INFO_LEVELS, lpFileInformation: *, hTransaction: *) -> int
export import def #extern #dllimport GetCompressedFileSizeTransactedA(lpFileName: *char, lpFileSizeHigh: *ulong, hTransaction: *) -> ulong
export import def #extern #dllimport GetCompressedFileSizeTransactedW(lpFileName: *ushort, lpFileSizeHigh: *ulong, hTransaction: *) -> ulong
export import def #extern #dllimport DeleteFileTransactedA(lpFileName: *char, hTransaction: *) -> int
export import def #extern #dllimport DeleteFileTransactedW(lpFileName: *ushort, hTransaction: *) -> int
export import def #extern #dllimport CheckNameLegalDOS8Dot3A(lpName: *char, lpOemName: *char, OemNameSize: ulong, pbNameContainsSpaces: *int, pbNameLegal: *int) -> int
export import def #extern #dllimport CheckNameLegalDOS8Dot3W(lpName: *ushort, lpOemName: *char, OemNameSize: ulong, pbNameContainsSpaces: *int, pbNameLegal: *int) -> int
export import def #extern #dllimport FindFirstFileTransactedA(lpFileName: *char, fInfoLevelId: FINDEX_INFO_LEVELS, lpFindFileData: *, fSearchOp: FINDEX_SEARCH_OPS, lpSearchFilter: *, dwAdditionalFlags: ulong, hTransaction: *) -> *
export import def #extern #dllimport FindFirstFileTransactedW(lpFileName: *ushort, fInfoLevelId: FINDEX_INFO_LEVELS, lpFindFileData: *, fSearchOp: FINDEX_SEARCH_OPS, lpSearchFilter: *, dwAdditionalFlags: ulong, hTransaction: *) -> *
export import def #extern #dllimport CopyFileA(lpExistingFileName: *char, lpNewFileName: *char, bFailIfExists: int) -> int
export import def #extern #dllimport CopyFileW(lpExistingFileName: *ushort, lpNewFileName: *ushort, bFailIfExists: int) -> int
export import def #extern #dllimport CopyFileExA(lpExistingFileName: *char, lpNewFileName: *char, lpProgressRoutine: def (LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, ulong, ulong, *, *, *) -> (ulong), lpData: *, pbCancel: *int, dwCopyFlags: ulong) -> int
export import def #extern #dllimport CopyFileExW(lpExistingFileName: *ushort, lpNewFileName: *ushort, lpProgressRoutine: def (LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, ulong, ulong, *, *, *) -> (ulong), lpData: *, pbCancel: *int, dwCopyFlags: ulong) -> int
export import def #extern #dllimport CopyFileTransactedA(lpExistingFileName: *char, lpNewFileName: *char, lpProgressRoutine: def (LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, ulong, ulong, *, *, *) -> (ulong), lpData: *, pbCancel: *int, dwCopyFlags: ulong, hTransaction: *) -> int
export import def #extern #dllimport CopyFileTransactedW(lpExistingFileName: *ushort, lpNewFileName: *ushort, lpProgressRoutine: def (LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, ulong, ulong, *, *, *) -> (ulong), lpData: *, pbCancel: *int, dwCopyFlags: ulong, hTransaction: *) -> int
export import def #extern #dllimport CopyFile2(pwszExistingFileName: *ushort, pwszNewFileName: *ushort, pExtendedParameters: *COPYFILE2_EXTENDED_PARAMETERS) -> long
export import def #extern #dllimport MoveFileA(lpExistingFileName: *char, lpNewFileName: *char) -> int
export import def #extern #dllimport MoveFileW(lpExistingFileName: *ushort, lpNewFileName: *ushort) -> int
export import def #extern #dllimport MoveFileExA(lpExistingFileName: *char, lpNewFileName: *char, dwFlags: ulong) -> int
export import def #extern #dllimport MoveFileExW(lpExistingFileName: *ushort, lpNewFileName: *ushort, dwFlags: ulong) -> int
export import def #extern #dllimport MoveFileWithProgressA(lpExistingFileName: *char, lpNewFileName: *char, lpProgressRoutine: def (LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, ulong, ulong, *, *, *) -> (ulong), lpData: *, dwFlags: ulong) -> int
export import def #extern #dllimport MoveFileWithProgressW(lpExistingFileName: *ushort, lpNewFileName: *ushort, lpProgressRoutine: def (LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, ulong, ulong, *, *, *) -> (ulong), lpData: *, dwFlags: ulong) -> int
export import def #extern #dllimport MoveFileTransactedA(lpExistingFileName: *char, lpNewFileName: *char, lpProgressRoutine: def (LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, ulong, ulong, *, *, *) -> (ulong), lpData: *, dwFlags: ulong, hTransaction: *) -> int
export import def #extern #dllimport MoveFileTransactedW(lpExistingFileName: *ushort, lpNewFileName: *ushort, lpProgressRoutine: def (LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, ulong, ulong, *, *, *) -> (ulong), lpData: *, dwFlags: ulong, hTransaction: *) -> int
export import def #extern #dllimport ReplaceFileA(lpReplacedFileName: *char, lpReplacementFileName: *char, lpBackupFileName: *char, dwReplaceFlags: ulong, lpExclude: *, lpReserved: *) -> int
export import def #extern #dllimport ReplaceFileW(lpReplacedFileName: *ushort, lpReplacementFileName: *ushort, lpBackupFileName: *ushort, dwReplaceFlags: ulong, lpExclude: *, lpReserved: *) -> int
export import def #extern #dllimport CreateHardLinkA(lpFileName: *char, lpExistingFileName: *char, lpSecurityAttributes: *SECURITY_ATTRIBUTES) -> int
export import def #extern #dllimport CreateHardLinkW(lpFileName: *ushort, lpExistingFileName: *ushort, lpSecurityAttributes: *SECURITY_ATTRIBUTES) -> int
export import def #extern #dllimport CreateHardLinkTransactedA(lpFileName: *char, lpExistingFileName: *char, lpSecurityAttributes: *SECURITY_ATTRIBUTES, hTransaction: *) -> int
export import def #extern #dllimport CreateHardLinkTransactedW(lpFileName: *ushort, lpExistingFileName: *ushort, lpSecurityAttributes: *SECURITY_ATTRIBUTES, hTransaction: *) -> int
export import def #extern #dllimport FindFirstStreamTransactedW(lpFileName: *ushort, InfoLevel: STREAM_INFO_LEVELS, lpFindStreamData: *, dwFlags: ulong, hTransaction: *) -> *
export import def #extern #dllimport FindFirstFileNameTransactedW(lpFileName: *ushort, dwFlags: ulong, StringLength: *ulong, LinkName: *ushort, hTransaction: *) -> *
export import def #extern #dllimport CreateNamedPipeA(lpName: *char, dwOpenMode: ulong, dwPipeMode: ulong, nMaxInstances: ulong, nOutBufferSize: ulong, nInBufferSize: ulong, nDefaultTimeOut: ulong, lpSecurityAttributes: *SECURITY_ATTRIBUTES) -> *
export import def #extern #dllimport GetNamedPipeHandleStateA(hNamedPipe: *, lpState: *ulong, lpCurInstances: *ulong, lpMaxCollectionCount: *ulong, lpCollectDataTimeout: *ulong, lpUserName: *char, nMaxUserNameSize: ulong) -> int
export import def #extern #dllimport CallNamedPipeA(lpNamedPipeName: *char, lpInBuffer: *, nInBufferSize: ulong, lpOutBuffer: *, nOutBufferSize: ulong, lpBytesRead: *ulong, nTimeOut: ulong) -> int
export import def #extern #dllimport WaitNamedPipeA(lpNamedPipeName: *char, nTimeOut: ulong) -> int
export import def #extern #dllimport GetNamedPipeClientComputerNameA(Pipe: *, ClientComputerName: *char, ClientComputerNameLength: ulong) -> int
export import def #extern #dllimport GetNamedPipeClientProcessId(Pipe: *, ClientProcessId: *ulong) -> int
export import def #extern #dllimport GetNamedPipeClientSessionId(Pipe: *, ClientSessionId: *ulong) -> int
export import def #extern #dllimport GetNamedPipeServerProcessId(Pipe: *, ServerProcessId: *ulong) -> int
export import def #extern #dllimport GetNamedPipeServerSessionId(Pipe: *, ServerSessionId: *ulong) -> int
export import def #extern #dllimport SetVolumeLabelA(lpRootPathName: *char, lpVolumeName: *char) -> int
export import def #extern #dllimport SetVolumeLabelW(lpRootPathName: *ushort, lpVolumeName: *ushort) -> int
export import def #extern #dllimport SetFileBandwidthReservation(hFile: *, nPeriodMilliseconds: ulong, nBytesPerPeriod: ulong, bDiscardable: int, lpTransferSize: *ulong, lpNumOutstandingRequests: *ulong) -> int
export import def #extern #dllimport GetFileBandwidthReservation(hFile: *, lpPeriodMilliseconds: *ulong, lpBytesPerPeriod: *ulong, pDiscardable: *int, lpTransferSize: *ulong, lpNumOutstandingRequests: *ulong) -> int
export import def #extern #dllimport ClearEventLogA(hEventLog: *, lpBackupFileName: *char) -> int
export import def #extern #dllimport ClearEventLogW(hEventLog: *, lpBackupFileName: *ushort) -> int
export import def #extern #dllimport BackupEventLogA(hEventLog: *, lpBackupFileName: *char) -> int
export import def #extern #dllimport BackupEventLogW(hEventLog: *, lpBackupFileName: *ushort) -> int
export import def #extern #dllimport CloseEventLog(hEventLog: *) -> int
export import def #extern #dllimport DeregisterEventSource(hEventLog: *) -> int
export import def #extern #dllimport NotifyChangeEventLog(hEventLog: *, hEvent: *) -> int
export import def #extern #dllimport GetNumberOfEventLogRecords(hEventLog: *, NumberOfRecords: *ulong) -> int
export import def #extern #dllimport GetOldestEventLogRecord(hEventLog: *, OldestRecord: *ulong) -> int
export import def #extern #dllimport OpenEventLogA(lpUNCServerName: *char, lpSourceName: *char) -> *
export import def #extern #dllimport OpenEventLogW(lpUNCServerName: *ushort, lpSourceName: *ushort) -> *
export import def #extern #dllimport RegisterEventSourceA(lpUNCServerName: *char, lpSourceName: *char) -> *
export import def #extern #dllimport RegisterEventSourceW(lpUNCServerName: *ushort, lpSourceName: *ushort) -> *
export import def #extern #dllimport OpenBackupEventLogA(lpUNCServerName: *char, lpFileName: *char) -> *
export import def #extern #dllimport OpenBackupEventLogW(lpUNCServerName: *ushort, lpFileName: *ushort) -> *
export import def #extern #dllimport ReadEventLogA(hEventLog: *, dwReadFlags: ulong, dwRecordOffset: ulong, lpBuffer: *, nNumberOfBytesToRead: ulong, pnBytesRead: *ulong, pnMinNumberOfBytesNeeded: *ulong) -> int
export import def #extern #dllimport ReadEventLogW(hEventLog: *, dwReadFlags: ulong, dwRecordOffset: ulong, lpBuffer: *, nNumberOfBytesToRead: ulong, pnBytesRead: *ulong, pnMinNumberOfBytesNeeded: *ulong) -> int
export import def #extern #dllimport ReportEventA(hEventLog: *, wType: ushort, wCategory: ushort, dwEventID: ulong, lpUserSid: *, wNumStrings: ushort, dwDataSize: ulong, lpStrings: **char, lpRawData: *) -> int
export import def #extern #dllimport ReportEventW(hEventLog: *, wType: ushort, wCategory: ushort, dwEventID: ulong, lpUserSid: *, wNumStrings: ushort, dwDataSize: ulong, lpStrings: **ushort, lpRawData: *) -> int
export import def #extern #dllimport GetEventLogInformation(hEventLog: *, dwInfoLevel: ulong, lpBuffer: *, cbBufSize: ulong, pcbBytesNeeded: *ulong) -> int
export import def #extern #dllimport OperationStart(OperationStartParams: *OPERATION_START_PARAMETERS) -> int
export import def #extern #dllimport OperationEnd(OperationEndParams: *OPERATION_END_PARAMETERS) -> int
export import def #extern #dllimport AccessCheckAndAuditAlarmA(SubsystemName: *char, HandleId: *, ObjectTypeName: *char, ObjectName: *char, SecurityDescriptor: *, DesiredAccess: ulong, GenericMapping: *GENERIC_MAPPING, ObjectCreation: int, GrantedAccess: *ulong, AccessStatus: *int, pfGenerateOnClose: *int) -> int
export import def #extern #dllimport AccessCheckByTypeAndAuditAlarmA(SubsystemName: *char, HandleId: *, ObjectTypeName: *char, ObjectName: *char, SecurityDescriptor: *, PrincipalSelfSid: *, DesiredAccess: ulong, AuditType: AUDIT_EVENT_TYPE, Flags: ulong, ObjectTypeList: *OBJECT_TYPE_LIST, ObjectTypeListLength: ulong, GenericMapping: *GENERIC_MAPPING, ObjectCreation: int, GrantedAccess: *ulong, AccessStatus: *int, pfGenerateOnClose: *int) -> int
export import def #extern #dllimport AccessCheckByTypeResultListAndAuditAlarmA(SubsystemName: *char, HandleId: *, ObjectTypeName: *char, ObjectName: *char, SecurityDescriptor: *, PrincipalSelfSid: *, DesiredAccess: ulong, AuditType: AUDIT_EVENT_TYPE, Flags: ulong, ObjectTypeList: *OBJECT_TYPE_LIST, ObjectTypeListLength: ulong, GenericMapping: *GENERIC_MAPPING, ObjectCreation: int, GrantedAccess: *ulong, AccessStatusList: *ulong, pfGenerateOnClose: *int) -> int
export import def #extern #dllimport AccessCheckByTypeResultListAndAuditAlarmByHandleA(SubsystemName: *char, HandleId: *, ClientToken: *, ObjectTypeName: *char, ObjectName: *char, SecurityDescriptor: *, PrincipalSelfSid: *, DesiredAccess: ulong, AuditType: AUDIT_EVENT_TYPE, Flags: ulong, ObjectTypeList: *OBJECT_TYPE_LIST, ObjectTypeListLength: ulong, GenericMapping: *GENERIC_MAPPING, ObjectCreation: int, GrantedAccess: *ulong, AccessStatusList: *ulong, pfGenerateOnClose: *int) -> int
export import def #extern #dllimport ObjectOpenAuditAlarmA(SubsystemName: *char, HandleId: *, ObjectTypeName: *char, ObjectName: *char, pSecurityDescriptor: *, ClientToken: *, DesiredAccess: ulong, GrantedAccess: ulong, Privileges: *PRIVILEGE_SET, ObjectCreation: int, AccessGranted: int, GenerateOnClose: *int) -> int
export import def #extern #dllimport ObjectPrivilegeAuditAlarmA(SubsystemName: *char, HandleId: *, ClientToken: *, DesiredAccess: ulong, Privileges: *PRIVILEGE_SET, AccessGranted: int) -> int
export import def #extern #dllimport ObjectCloseAuditAlarmA(SubsystemName: *char, HandleId: *, GenerateOnClose: int) -> int
export import def #extern #dllimport ObjectDeleteAuditAlarmA(SubsystemName: *char, HandleId: *, GenerateOnClose: int) -> int
export import def #extern #dllimport PrivilegedServiceAuditAlarmA(SubsystemName: *char, ServiceName: *char, ClientToken: *, Privileges: *PRIVILEGE_SET, AccessGranted: int) -> int
export import def #extern #dllimport AddConditionalAce(pAcl: *ACL, dwAceRevision: ulong, AceFlags: ulong, AceType: char, AccessMask: ulong, pSid: *, ConditionStr: *ushort, ReturnLength: *ulong) -> int
export import def #extern #dllimport SetFileSecurityA(lpFileName: *char, SecurityInformation: ulong, pSecurityDescriptor: *) -> int
export import def #extern #dllimport GetFileSecurityA(lpFileName: *char, RequestedInformation: ulong, pSecurityDescriptor: *, nLength: ulong, lpnLengthNeeded: *ulong) -> int
export import def #extern #dllimport ReadDirectoryChangesW(hDirectory: *, lpBuffer: *, nBufferLength: ulong, bWatchSubtree: int, dwNotifyFilter: ulong, lpBytesReturned: *ulong, lpOverlapped: *OVERLAPPED, lpCompletionRoutine: def (ulong, ulong, *OVERLAPPED) -> ()) -> int
export import def #extern #dllimport ReadDirectoryChangesExW(hDirectory: *, lpBuffer: *, nBufferLength: ulong, bWatchSubtree: int, dwNotifyFilter: ulong, lpBytesReturned: *ulong, lpOverlapped: *OVERLAPPED, lpCompletionRoutine: def (ulong, ulong, *OVERLAPPED) -> (), ReadDirectoryNotifyInformationClass: READ_DIRECTORY_NOTIFY_INFORMATION_CLASS) -> int
export import def #extern #dllimport MapViewOfFileExNuma(hFileMappingObject: *, dwDesiredAccess: ulong, dwFileOffsetHigh: ulong, dwFileOffsetLow: ulong, dwNumberOfBytesToMap: uint64, lpBaseAddress: *, nndPreferred: ulong) -> *
export import def #extern #dllimport IsBadReadPtr(lp: *, ucb: uint64) -> int
export import def #extern #dllimport IsBadWritePtr(lp: *, ucb: uint64) -> int
export import def #extern #dllimport IsBadHugeReadPtr(lp: *, ucb: uint64) -> int
export import def #extern #dllimport IsBadHugeWritePtr(lp: *, ucb: uint64) -> int
export import def #extern #dllimport IsBadCodePtr(lpfn: def () -> (int64)) -> int
export import def #extern #dllimport IsBadStringPtrA(lpsz: *char, ucchMax: uint64) -> int
export import def #extern #dllimport IsBadStringPtrW(lpsz: *ushort, ucchMax: uint64) -> int
export import def #extern #dllimport LookupAccountSidA(lpSystemName: *char, Sid: *, Name: *char, cchName: *ulong, ReferencedDomainName: *char, cchReferencedDomainName: *ulong, peUse: *SID_NAME_USE) -> int
export import def #extern #dllimport LookupAccountSidW(lpSystemName: *ushort, Sid: *, Name: *ushort, cchName: *ulong, ReferencedDomainName: *ushort, cchReferencedDomainName: *ulong, peUse: *SID_NAME_USE) -> int
export import def #extern #dllimport LookupAccountNameA(lpSystemName: *char, lpAccountName: *char, Sid: *, cbSid: *ulong, ReferencedDomainName: *char, cchReferencedDomainName: *ulong, peUse: *SID_NAME_USE) -> int
export import def #extern #dllimport LookupAccountNameW(lpSystemName: *ushort, lpAccountName: *ushort, Sid: *, cbSid: *ulong, ReferencedDomainName: *ushort, cchReferencedDomainName: *ulong, peUse: *SID_NAME_USE) -> int
export import def #extern #dllimport LookupAccountNameLocalA(lpAccountName: *char, Sid: *, cbSid: *ulong, ReferencedDomainName: *char, cchReferencedDomainName: *ulong, peUse: *SID_NAME_USE) -> int
export import def #extern #dllimport LookupAccountNameLocalW(lpAccountName: *ushort, Sid: *, cbSid: *ulong, ReferencedDomainName: *ushort, cchReferencedDomainName: *ulong, peUse: *SID_NAME_USE) -> int
export import def #extern #dllimport LookupAccountSidLocalA(Sid: *, Name: *char, cchName: *ulong, ReferencedDomainName: *char, cchReferencedDomainName: *ulong, peUse: *SID_NAME_USE) -> int
export import def #extern #dllimport LookupAccountSidLocalW(Sid: *, Name: *ushort, cchName: *ulong, ReferencedDomainName: *ushort, cchReferencedDomainName: *ulong, peUse: *SID_NAME_USE) -> int
export import def #extern #dllimport LookupPrivilegeValueA(lpSystemName: *char, lpName: *char, lpLuid: *LUID) -> int
export import def #extern #dllimport LookupPrivilegeValueW(lpSystemName: *ushort, lpName: *ushort, lpLuid: *LUID) -> int
export import def #extern #dllimport LookupPrivilegeNameA(lpSystemName: *char, lpLuid: *LUID, lpName: *char, cchName: *ulong) -> int
export import def #extern #dllimport LookupPrivilegeNameW(lpSystemName: *ushort, lpLuid: *LUID, lpName: *ushort, cchName: *ulong) -> int
export import def #extern #dllimport LookupPrivilegeDisplayNameA(lpSystemName: *char, lpName: *char, lpDisplayName: *char, cchDisplayName: *ulong, lpLanguageId: *ulong) -> int
export import def #extern #dllimport LookupPrivilegeDisplayNameW(lpSystemName: *ushort, lpName: *ushort, lpDisplayName: *ushort, cchDisplayName: *ulong, lpLanguageId: *ulong) -> int
export import def #extern #dllimport BuildCommDCBA(lpDef: *char, lpDCB: *DCB) -> int
export import def #extern #dllimport BuildCommDCBW(lpDef: *ushort, lpDCB: *DCB) -> int
export import def #extern #dllimport BuildCommDCBAndTimeoutsA(lpDef: *char, lpDCB: *DCB, lpCommTimeouts: *COMMTIMEOUTS) -> int
export import def #extern #dllimport BuildCommDCBAndTimeoutsW(lpDef: *ushort, lpDCB: *DCB, lpCommTimeouts: *COMMTIMEOUTS) -> int
export import def #extern #dllimport CommConfigDialogA(lpszName: *char, hWnd: *s_HWND__, lpCC: *COMMCONFIG) -> int
export import def #extern #dllimport CommConfigDialogW(lpszName: *ushort, hWnd: *s_HWND__, lpCC: *COMMCONFIG) -> int
export import def #extern #dllimport GetDefaultCommConfigA(lpszName: *char, lpCC: *COMMCONFIG, lpdwSize: *ulong) -> int
export import def #extern #dllimport GetDefaultCommConfigW(lpszName: *ushort, lpCC: *COMMCONFIG, lpdwSize: *ulong) -> int
export import def #extern #dllimport SetDefaultCommConfigA(lpszName: *char, lpCC: *COMMCONFIG, dwSize: ulong) -> int
export import def #extern #dllimport SetDefaultCommConfigW(lpszName: *ushort, lpCC: *COMMCONFIG, dwSize: ulong) -> int
export import def #extern #dllimport GetComputerNameA(lpBuffer: *char, nSize: *ulong) -> int
export import def #extern #dllimport GetComputerNameW(lpBuffer: *ushort, nSize: *ulong) -> int
export import def #extern #dllimport DnsHostnameToComputerNameA(Hostname: *char, ComputerName: *char, nSize: *ulong) -> int
export import def #extern #dllimport DnsHostnameToComputerNameW(Hostname: *ushort, ComputerName: *ushort, nSize: *ulong) -> int
export import def #extern #dllimport GetUserNameA(lpBuffer: *char, pcbBuffer: *ulong) -> int
export import def #extern #dllimport GetUserNameW(lpBuffer: *ushort, pcbBuffer: *ulong) -> int
export import def #extern #dllimport LogonUserA(lpszUsername: *char, lpszDomain: *char, lpszPassword: *char, dwLogonType: ulong, dwLogonProvider: ulong, phToken: **) -> int
export import def #extern #dllimport LogonUserW(lpszUsername: *ushort, lpszDomain: *ushort, lpszPassword: *ushort, dwLogonType: ulong, dwLogonProvider: ulong, phToken: **) -> int
export import def #extern #dllimport LogonUserExA(lpszUsername: *char, lpszDomain: *char, lpszPassword: *char, dwLogonType: ulong, dwLogonProvider: ulong, phToken: **, ppLogonSid: **, ppProfileBuffer: **, pdwProfileLength: *ulong, pQuotaLimits: *QUOTA_LIMITS) -> int
export import def #extern #dllimport LogonUserExW(lpszUsername: *ushort, lpszDomain: *ushort, lpszPassword: *ushort, dwLogonType: ulong, dwLogonProvider: ulong, phToken: **, ppLogonSid: **, ppProfileBuffer: **, pdwProfileLength: *ulong, pQuotaLimits: *QUOTA_LIMITS) -> int
export import def #extern #dllimport CreateProcessWithLogonW(lpUsername: *ushort, lpDomain: *ushort, lpPassword: *ushort, dwLogonFlags: ulong, lpApplicationName: *ushort, lpCommandLine: *ushort, dwCreationFlags: ulong, lpEnvironment: *, lpCurrentDirectory: *ushort, lpStartupInfo: *STARTUPINFOW, lpProcessInformation: *PROCESS_INFORMATION) -> int
export import def #extern #dllimport CreateProcessWithTokenW(hToken: *, dwLogonFlags: ulong, lpApplicationName: *ushort, lpCommandLine: *ushort, dwCreationFlags: ulong, lpEnvironment: *, lpCurrentDirectory: *ushort, lpStartupInfo: *STARTUPINFOW, lpProcessInformation: *PROCESS_INFORMATION) -> int
export import def #extern #dllimport IsTokenUntrusted(TokenHandle: *) -> int
export import def #extern #dllimport RegisterWaitForSingleObject(phNewWaitObject: **, hObject: *, Callback: def (*, char) -> (), Context: *, dwMilliseconds: ulong, dwFlags: ulong) -> int
export import def #extern #dllimport UnregisterWait(WaitHandle: *) -> int
export import def #extern #dllimport BindIoCompletionCallback(FileHandle: *, Function: def (ulong, ulong, *OVERLAPPED) -> (), Flags: ulong) -> int
export import def #extern #dllimport SetTimerQueueTimer(TimerQueue: *, Callback: def (*, char) -> (), Parameter: *, DueTime: ulong, Period: ulong, PreferIo: int) -> *
export import def #extern #dllimport CancelTimerQueueTimer(TimerQueue: *, Timer: *) -> int
export import def #extern #dllimport DeleteTimerQueue(TimerQueue: *) -> int
export import def #extern #dllimport CreatePrivateNamespaceA(lpPrivateNamespaceAttributes: *SECURITY_ATTRIBUTES, lpBoundaryDescriptor: *, lpAliasPrefix: *char) -> *
export import def #extern #dllimport OpenPrivateNamespaceA(lpBoundaryDescriptor: *, lpAliasPrefix: *char) -> *
export import def #extern #dllimport CreateBoundaryDescriptorA(Name: *char, Flags: ulong) -> *
export import def #extern #dllimport AddIntegrityLabelToBoundaryDescriptor(BoundaryDescriptor: **, IntegrityLabel: *) -> int
export import def #extern #dllimport GetCurrentHwProfileA(lpHwProfileInfo: *HW_PROFILE_INFOA) -> int
export import def #extern #dllimport GetCurrentHwProfileW(lpHwProfileInfo: *HW_PROFILE_INFOW) -> int
export import def #extern #dllimport VerifyVersionInfoA(lpVersionInformation: *OSVERSIONINFOEXA, dwTypeMask: ulong, dwlConditionMask: uint64) -> int
export import def #extern #dllimport VerifyVersionInfoW(lpVersionInformation: *RTL_OSVERSIONINFOEXW, dwTypeMask: ulong, dwlConditionMask: uint64) -> int
export import def #extern #dllimport SystemTimeToTzSpecificLocalTime(lpTimeZoneInformation: *TIME_ZONE_INFORMATION, lpUniversalTime: *SYSTEMTIME, lpLocalTime: *SYSTEMTIME) -> int
export import def #extern #dllimport TzSpecificLocalTimeToSystemTime(lpTimeZoneInformation: *TIME_ZONE_INFORMATION, lpLocalTime: *SYSTEMTIME, lpUniversalTime: *SYSTEMTIME) -> int
export import def #extern #dllimport FileTimeToSystemTime(lpFileTime: *FILETIME, lpSystemTime: *SYSTEMTIME) -> int
export import def #extern #dllimport SystemTimeToFileTime(lpSystemTime: *SYSTEMTIME, lpFileTime: *FILETIME) -> int
export import def #extern #dllimport GetTimeZoneInformation(lpTimeZoneInformation: *TIME_ZONE_INFORMATION) -> ulong
export import def #extern #dllimport SetTimeZoneInformation(lpTimeZoneInformation: *TIME_ZONE_INFORMATION) -> int
export import def #extern #dllimport SetDynamicTimeZoneInformation(lpTimeZoneInformation: *DYNAMIC_TIME_ZONE_INFORMATION) -> int
export import def #extern #dllimport GetDynamicTimeZoneInformation(pTimeZoneInformation: *DYNAMIC_TIME_ZONE_INFORMATION) -> ulong
export import def #extern GetTimeZoneInformationForYear(wYear: ushort, pdtzi: *DYNAMIC_TIME_ZONE_INFORMATION, ptzi: *TIME_ZONE_INFORMATION) -> int
export import def #extern #dllimport EnumDynamicTimeZoneInformation(dwIndex: ulong, lpTimeZoneInformation: *DYNAMIC_TIME_ZONE_INFORMATION) -> ulong
export import def #extern #dllimport GetDynamicTimeZoneInformationEffectiveYears(lpTimeZoneInformation: *DYNAMIC_TIME_ZONE_INFORMATION, FirstYear: *ulong, LastYear: *ulong) -> ulong
export import def #extern #dllimport SystemTimeToTzSpecificLocalTimeEx(lpTimeZoneInformation: *DYNAMIC_TIME_ZONE_INFORMATION, lpUniversalTime: *SYSTEMTIME, lpLocalTime: *SYSTEMTIME) -> int
export import def #extern #dllimport TzSpecificLocalTimeToSystemTimeEx(lpTimeZoneInformation: *DYNAMIC_TIME_ZONE_INFORMATION, lpLocalTime: *SYSTEMTIME, lpUniversalTime: *SYSTEMTIME) -> int
export import def #extern #dllimport LocalFileTimeToLocalSystemTime(timeZoneInformation: *TIME_ZONE_INFORMATION, localFileTime: *FILETIME, localSystemTime: *SYSTEMTIME) -> int
export import def #extern #dllimport LocalSystemTimeToLocalFileTime(timeZoneInformation: *TIME_ZONE_INFORMATION, localSystemTime: *SYSTEMTIME, localFileTime: *FILETIME) -> int
export import def #extern #dllimport SetSystemPowerState(fSuspend: int, fForce: int) -> int
export import def #extern #dllimport GetSystemPowerStatus(lpSystemPowerStatus: *SYSTEM_POWER_STATUS) -> int
export import def #extern #dllimport MapUserPhysicalPagesScatter(VirtualAddresses: **, NumberOfPages: uint64, PageArray: *uint64) -> int
export import def #extern #dllimport CreateJobObjectA(lpJobAttributes: *SECURITY_ATTRIBUTES, lpName: *char) -> *
export import def #extern #dllimport OpenJobObjectA(dwDesiredAccess: ulong, bInheritHandle: int, lpName: *char) -> *
export import def #extern #dllimport CreateJobSet(NumJob: ulong, UserJobSet: *JOB_SET_ARRAY, Flags: ulong) -> int
export import def #extern #dllimport FindFirstVolumeA(lpszVolumeName: *char, cchBufferLength: ulong) -> *
export import def #extern #dllimport FindNextVolumeA(hFindVolume: *, lpszVolumeName: *char, cchBufferLength: ulong) -> int
export import def #extern #dllimport FindFirstVolumeMountPointA(lpszRootPathName: *char, lpszVolumeMountPoint: *char, cchBufferLength: ulong) -> *
export import def #extern #dllimport FindFirstVolumeMountPointW(lpszRootPathName: *ushort, lpszVolumeMountPoint: *ushort, cchBufferLength: ulong) -> *
export import def #extern #dllimport FindNextVolumeMountPointA(hFindVolumeMountPoint: *, lpszVolumeMountPoint: *char, cchBufferLength: ulong) -> int
export import def #extern #dllimport FindNextVolumeMountPointW(hFindVolumeMountPoint: *, lpszVolumeMountPoint: *ushort, cchBufferLength: ulong) -> int
export import def #extern #dllimport FindVolumeMountPointClose(hFindVolumeMountPoint: *) -> int
export import def #extern #dllimport SetVolumeMountPointA(lpszVolumeMountPoint: *char, lpszVolumeName: *char) -> int
export import def #extern #dllimport SetVolumeMountPointW(lpszVolumeMountPoint: *ushort, lpszVolumeName: *ushort) -> int
export import def #extern #dllimport DeleteVolumeMountPointA(lpszVolumeMountPoint: *char) -> int
export import def #extern #dllimport GetVolumeNameForVolumeMountPointA(lpszVolumeMountPoint: *char, lpszVolumeName: *char, cchBufferLength: ulong) -> int
export import def #extern #dllimport GetVolumePathNameA(lpszFileName: *char, lpszVolumePathName: *char, cchBufferLength: ulong) -> int
export import def #extern #dllimport GetVolumePathNamesForVolumeNameA(lpszVolumeName: *char, lpszVolumePathNames: *char, cchBufferLength: ulong, lpcchReturnLength: *ulong) -> int
export import def #extern #dllimport CreateActCtxA(pActCtx: *ACTCTXA) -> *
export import def #extern #dllimport CreateActCtxW(pActCtx: *ACTCTXW) -> *
export import def #extern #dllimport AddRefActCtx(hActCtx: *)
export import def #extern #dllimport ReleaseActCtx(hActCtx: *)
export import def #extern #dllimport ZombifyActCtx(hActCtx: *) -> int
export import def #extern #dllimport ActivateActCtx(hActCtx: *, lpCookie: *uint64) -> int
export import def #extern #dllimport DeactivateActCtx(dwFlags: ulong, ulCookie: uint64) -> int
export import def #extern #dllimport GetCurrentActCtx(lphActCtx: **) -> int
export import def #extern #dllimport FindActCtxSectionStringA(dwFlags: ulong, lpExtensionGuid: *GUID, ulSectionId: ulong, lpStringToFind: *char, ReturnedData: *ACTCTX_SECTION_KEYED_DATA) -> int
export import def #extern #dllimport FindActCtxSectionStringW(dwFlags: ulong, lpExtensionGuid: *GUID, ulSectionId: ulong, lpStringToFind: *ushort, ReturnedData: *ACTCTX_SECTION_KEYED_DATA) -> int
export import def #extern #dllimport FindActCtxSectionGuid(dwFlags: ulong, lpExtensionGuid: *GUID, ulSectionId: ulong, lpGuidToFind: *GUID, ReturnedData: *ACTCTX_SECTION_KEYED_DATA) -> int
export import def #extern #dllimport QueryActCtxW(dwFlags: ulong, hActCtx: *, pvSubInstance: *, ulInfoClass: ulong, pvBuffer: *, cbBuffer: uint64, pcbWrittenOrRequired: *uint64) -> int
export import def #extern #dllimport WTSGetActiveConsoleSessionId() -> ulong
export import def #extern #dllimport WTSGetServiceSessionId() -> ulong
export import def #extern #dllimport WTSIsServerContainer() -> char
export import def #extern #dllimport GetActiveProcessorGroupCount() -> ushort
export import def #extern #dllimport GetMaximumProcessorGroupCount() -> ushort
export import def #extern #dllimport GetActiveProcessorCount(GroupNumber: ushort) -> ulong
export import def #extern #dllimport GetMaximumProcessorCount(GroupNumber: ushort) -> ulong
export import def #extern #dllimport GetNumaProcessorNode(Processor: char, NodeNumber: *char) -> int
export import def #extern #dllimport GetNumaNodeNumberFromHandle(hFile: *, NodeNumber: *ushort) -> int
export import def #extern #dllimport GetNumaProcessorNodeEx(Processor: *PROCESSOR_NUMBER, NodeNumber: *ushort) -> int
export import def #extern #dllimport GetNumaNodeProcessorMask(Node: char, ProcessorMask: *uint64) -> int
export import def #extern #dllimport GetNumaAvailableMemoryNode(Node: char, AvailableBytes: *uint64) -> int
export import def #extern #dllimport GetNumaAvailableMemoryNodeEx(Node: ushort, AvailableBytes: *uint64) -> int
export import def #extern #dllimport GetNumaProximityNode(ProximityId: ulong, NodeNumber: *char) -> int
export import def #extern #dllimport RegisterApplicationRecoveryCallback(pRecoveyCallback: def (*) -> (ulong), pvParameter: *, dwPingInterval: ulong, dwFlags: ulong) -> long
export import def #extern #dllimport UnregisterApplicationRecoveryCallback() -> long
export import def #extern #dllimport RegisterApplicationRestart(pwzCommandline: *ushort, dwFlags: ulong) -> long
export import def #extern #dllimport UnregisterApplicationRestart() -> long
export import def #extern #dllimport GetApplicationRecoveryCallback(hProcess: *, pRecoveryCallback: *def (*) -> (ulong), ppvParameter: **, pdwPingInterval: *ulong, pdwFlags: *ulong) -> long
export import def #extern #dllimport GetApplicationRestartSettings(hProcess: *, pwzCommandline: *ushort, pcchSize: *ulong, pdwFlags: *ulong) -> long
export import def #extern #dllimport ApplicationRecoveryInProgress(pbCancelled: *int) -> long
export import def #extern #dllimport ApplicationRecoveryFinished(bSuccess: int)
export import def #extern #dllimport GetFileInformationByHandleEx(hFile: *, FileInformationClass: FILE_INFO_BY_HANDLE_CLASS, lpFileInformation: *, dwBufferSize: ulong) -> int
export import def #extern #dllimport OpenFileById(hVolumeHint: *, lpFileId: *FILE_ID_DESCRIPTOR, dwDesiredAccess: ulong, dwShareMode: ulong, lpSecurityAttributes: *SECURITY_ATTRIBUTES, dwFlagsAndAttributes: ulong) -> *
export import def #extern #dllimport CreateSymbolicLinkA(lpSymlinkFileName: *char, lpTargetFileName: *char, dwFlags: ulong) -> char
export import def #extern #dllimport CreateSymbolicLinkW(lpSymlinkFileName: *ushort, lpTargetFileName: *ushort, dwFlags: ulong) -> char
export import def #extern #dllimport QueryActCtxSettingsW(dwFlags: ulong, hActCtx: *, settingsNameSpace: *ushort, settingName: *ushort, pvBuffer: *ushort, dwBuffer: uint64, pdwWrittenOrRequired: *uint64) -> int
export import def #extern #dllimport CreateSymbolicLinkTransactedA(lpSymlinkFileName: *char, lpTargetFileName: *char, dwFlags: ulong, hTransaction: *) -> char
export import def #extern #dllimport CreateSymbolicLinkTransactedW(lpSymlinkFileName: *ushort, lpTargetFileName: *ushort, dwFlags: ulong, hTransaction: *) -> char
export import def #extern #dllimport ReplacePartitionUnit(TargetPartition: *ushort, SparePartition: *ushort, Flags: ulong) -> int
export import def #extern #dllimport AddSecureMemoryCacheCallback(pfnCallBack: def (*, uint64) -> (char)) -> int
export import def #extern #dllimport RemoveSecureMemoryCacheCallback(pfnCallBack: def (*, uint64) -> (char)) -> int
export import def #extern #dllimport CopyContext(Destination: *CONTEXT, ContextFlags: ulong, Source: *CONTEXT) -> int
export import def #extern #dllimport InitializeContext(Buffer: *, ContextFlags: ulong, Context: **CONTEXT, ContextLength: *ulong) -> int
export import def #extern #dllimport InitializeContext2(Buffer: *, ContextFlags: ulong, Context: **CONTEXT, ContextLength: *ulong, XStateCompactionMask: uint64) -> int
export import def #extern #dllimport GetEnabledXStateFeatures() -> uint64
export import def #extern #dllimport GetXStateFeaturesMask(Context: *CONTEXT, FeatureMask: *uint64) -> int
export import def #extern #dllimport LocateXStateFeature(Context: *CONTEXT, FeatureId: ulong, Length: *ulong) -> *
export import def #extern #dllimport SetXStateFeaturesMask(Context: *CONTEXT, FeatureMask: uint64) -> int
export import def #extern #dllimport EnableThreadProfiling(ThreadHandle: *, Flags: ulong, HardwareCounters: uint64, PerformanceDataHandle: **) -> ulong
export import def #extern #dllimport DisableThreadProfiling(PerformanceDataHandle: *) -> ulong
export import def #extern #dllimport QueryThreadProfiling(ThreadHandle: *, Enabled: *char) -> ulong
export import def #extern #dllimport ReadThreadProfilingData(PerformanceDataHandle: *, Flags: ulong, PerformanceData: *PERFORMANCE_DATA) -> ulong
export import def #extern #dllimport RaiseCustomSystemEventTrigger(CustomSystemEventTriggerConfig: *CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG) -> ulong
export import def #extern #dllimport AddFontResourceA(_0: *char) -> int
export import def #extern #dllimport AddFontResourceW(_0: *ushort) -> int
export import def #extern #dllimport AnimatePalette(hPal: *s_HPALETTE__, iStartIndex: uint, cEntries: uint, ppe: *PALETTEENTRY) -> int
export import def #extern #dllimport Arc(hdc: *s_HDC__, x1: int, y1: int, x2: int, y2: int, x3: int, y3: int, x4: int, y4: int) -> int
export import def #extern #dllimport BitBlt(hdc: *s_HDC__, x: int, y: int, cx: int, cy: int, hdcSrc: *s_HDC__, x1: int, y1: int, rop: ulong) -> int
export import def #extern #dllimport CancelDC(hdc: *s_HDC__) -> int
export import def #extern #dllimport Chord(hdc: *s_HDC__, x1: int, y1: int, x2: int, y2: int, x3: int, y3: int, x4: int, y4: int) -> int
export import def #extern #dllimport ChoosePixelFormat(hdc: *s_HDC__, ppfd: *PIXELFORMATDESCRIPTOR) -> int
export import def #extern #dllimport CloseMetaFile(hdc: *s_HDC__) -> *s_HMETAFILE__
export import def #extern #dllimport CombineRgn(hrgnDst: *s_HRGN__, hrgnSrc1: *s_HRGN__, hrgnSrc2: *s_HRGN__, iMode: int) -> int
export import def #extern #dllimport CopyMetaFileA(_0: *s_HMETAFILE__, _1: *char) -> *s_HMETAFILE__
export import def #extern #dllimport CopyMetaFileW(_0: *s_HMETAFILE__, _1: *ushort) -> *s_HMETAFILE__
export import def #extern #dllimport CreateBitmap(nWidth: int, nHeight: int, nPlanes: uint, nBitCount: uint, lpBits: *) -> *s_HBITMAP__
export import def #extern #dllimport CreateBitmapIndirect(pbm: *BITMAP) -> *s_HBITMAP__
export import def #extern #dllimport CreateBrushIndirect(plbrush: *LOGBRUSH) -> *s_HBRUSH__
export import def #extern #dllimport CreateCompatibleBitmap(hdc: *s_HDC__, cx: int, cy: int) -> *s_HBITMAP__
export import def #extern #dllimport CreateDiscardableBitmap(hdc: *s_HDC__, cx: int, cy: int) -> *s_HBITMAP__
export import def #extern #dllimport CreateCompatibleDC(hdc: *s_HDC__) -> *s_HDC__
export import def #extern #dllimport CreateDCA(pwszDriver: *char, pwszDevice: *char, pszPort: *char, pdm: *DEVMODEA) -> *s_HDC__
export import def #extern #dllimport CreateDCW(pwszDriver: *ushort, pwszDevice: *ushort, pszPort: *ushort, pdm: *DEVMODEW) -> *s_HDC__
export import def #extern #dllimport CreateDIBitmap(hdc: *s_HDC__, pbmih: *BITMAPINFOHEADER, flInit: ulong, pjBits: *, pbmi: *BITMAPINFO, iUsage: uint) -> *s_HBITMAP__
export import def #extern #dllimport CreateDIBPatternBrush(h: *, iUsage: uint) -> *s_HBRUSH__
export import def #extern #dllimport CreateDIBPatternBrushPt(lpPackedDIB: *, iUsage: uint) -> *s_HBRUSH__
export import def #extern #dllimport CreateEllipticRgn(x1: int, y1: int, x2: int, y2: int) -> *s_HRGN__
export import def #extern #dllimport CreateEllipticRgnIndirect(lprect: *RECT) -> *s_HRGN__
export import def #extern #dllimport CreateFontIndirectA(lplf: *LOGFONTA) -> *s_HFONT__
export import def #extern #dllimport CreateFontIndirectW(lplf: *LOGFONTW) -> *s_HFONT__
export import def #extern #dllimport CreateFontA(cHeight: int, cWidth: int, cEscapement: int, cOrientation: int, cWeight: int, bItalic: ulong, bUnderline: ulong, bStrikeOut: ulong, iCharSet: ulong, iOutPrecision: ulong, iClipPrecision: ulong, iQuality: ulong, iPitchAndFamily: ulong, pszFaceName: *char) -> *s_HFONT__
export import def #extern #dllimport CreateFontW(cHeight: int, cWidth: int, cEscapement: int, cOrientation: int, cWeight: int, bItalic: ulong, bUnderline: ulong, bStrikeOut: ulong, iCharSet: ulong, iOutPrecision: ulong, iClipPrecision: ulong, iQuality: ulong, iPitchAndFamily: ulong, pszFaceName: *ushort) -> *s_HFONT__
export import def #extern #dllimport CreateHatchBrush(iHatch: int, color: ulong) -> *s_HBRUSH__
export import def #extern #dllimport CreateICA(pszDriver: *char, pszDevice: *char, pszPort: *char, pdm: *DEVMODEA) -> *s_HDC__
export import def #extern #dllimport CreateICW(pszDriver: *ushort, pszDevice: *ushort, pszPort: *ushort, pdm: *DEVMODEW) -> *s_HDC__
export import def #extern #dllimport CreateMetaFileA(pszFile: *char) -> *s_HDC__
export import def #extern #dllimport CreateMetaFileW(pszFile: *ushort) -> *s_HDC__
export import def #extern #dllimport CreatePalette(plpal: *LOGPALETTE) -> *s_HPALETTE__
export import def #extern #dllimport CreatePen(iStyle: int, cWidth: int, color: ulong) -> *s_HPEN__
export import def #extern #dllimport CreatePenIndirect(plpen: *LOGPEN) -> *s_HPEN__
export import def #extern #dllimport CreatePolyPolygonRgn(pptl: *POINT, pc: *int, cPoly: int, iMode: int) -> *s_HRGN__
export import def #extern #dllimport CreatePatternBrush(hbm: *s_HBITMAP__) -> *s_HBRUSH__
export import def #extern #dllimport CreateRectRgn(x1: int, y1: int, x2: int, y2: int) -> *s_HRGN__
export import def #extern #dllimport CreateRectRgnIndirect(lprect: *RECT) -> *s_HRGN__
export import def #extern #dllimport CreateRoundRectRgn(x1: int, y1: int, x2: int, y2: int, w: int, h: int) -> *s_HRGN__
export import def #extern #dllimport CreateScalableFontResourceA(fdwHidden: ulong, lpszFont: *char, lpszFile: *char, lpszPath: *char) -> int
export import def #extern #dllimport CreateScalableFontResourceW(fdwHidden: ulong, lpszFont: *ushort, lpszFile: *ushort, lpszPath: *ushort) -> int
export import def #extern #dllimport CreateSolidBrush(color: ulong) -> *s_HBRUSH__
export import def #extern #dllimport DeleteDC(hdc: *s_HDC__) -> int
export import def #extern #dllimport DeleteMetaFile(hmf: *s_HMETAFILE__) -> int
export import def #extern #dllimport DeleteObject(ho: *) -> int
export import def #extern #dllimport DescribePixelFormat(hdc: *s_HDC__, iPixelFormat: int, nBytes: uint, ppfd: *PIXELFORMATDESCRIPTOR) -> int
export import def #extern #dllimport DeviceCapabilitiesA(pDevice: *char, pPort: *char, fwCapability: ushort, pOutput: *char, pDevMode: *DEVMODEA) -> int
export import def #extern #dllimport DeviceCapabilitiesW(pDevice: *ushort, pPort: *ushort, fwCapability: ushort, pOutput: *ushort, pDevMode: *DEVMODEW) -> int
export import def #extern #dllimport DrawEscape(hdc: *s_HDC__, iEscape: int, cjIn: int, lpIn: *char) -> int
export import def #extern #dllimport Ellipse(hdc: *s_HDC__, left: int, top: int, right: int, bottom: int) -> int
export import def #extern #dllimport EnumFontFamiliesExA(hdc: *s_HDC__, lpLogfont: *LOGFONTA, lpProc: def (*LOGFONTA, *TEXTMETRICA, ulong, int64) -> (int), lParam: int64, dwFlags: ulong) -> int
export import def #extern #dllimport EnumFontFamiliesExW(hdc: *s_HDC__, lpLogfont: *LOGFONTW, lpProc: def (*LOGFONTW, *TEXTMETRICW, ulong, int64) -> (int), lParam: int64, dwFlags: ulong) -> int
export import def #extern #dllimport EnumFontFamiliesA(hdc: *s_HDC__, lpLogfont: *char, lpProc: def (*LOGFONTA, *TEXTMETRICA, ulong, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport EnumFontFamiliesW(hdc: *s_HDC__, lpLogfont: *ushort, lpProc: def (*LOGFONTW, *TEXTMETRICW, ulong, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport EnumFontsA(hdc: *s_HDC__, lpLogfont: *char, lpProc: def (*LOGFONTA, *TEXTMETRICA, ulong, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport EnumFontsW(hdc: *s_HDC__, lpLogfont: *ushort, lpProc: def (*LOGFONTW, *TEXTMETRICW, ulong, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport EnumObjects(hdc: *s_HDC__, nType: int, lpFunc: def (*, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport EqualRgn(hrgn1: *s_HRGN__, hrgn2: *s_HRGN__) -> int
export import def #extern #dllimport Escape(hdc: *s_HDC__, iEscape: int, cjIn: int, pvIn: *char, pvOut: *) -> int
export import def #extern #dllimport ExtEscape(hdc: *s_HDC__, iEscape: int, cjInput: int, lpInData: *char, cjOutput: int, lpOutData: *char) -> int
export import def #extern #dllimport ExcludeClipRect(hdc: *s_HDC__, left: int, top: int, right: int, bottom: int) -> int
export import def #extern #dllimport ExtCreateRegion(lpx: *XFORM, nCount: ulong, lpData: *RGNDATA) -> *s_HRGN__
export import def #extern #dllimport ExtFloodFill(hdc: *s_HDC__, x: int, y: int, color: ulong, type_: uint) -> int
export import def #extern #dllimport FillRgn(hdc: *s_HDC__, hrgn: *s_HRGN__, hbr: *s_HBRUSH__) -> int
export import def #extern #dllimport FloodFill(hdc: *s_HDC__, x: int, y: int, color: ulong) -> int
export import def #extern #dllimport FrameRgn(hdc: *s_HDC__, hrgn: *s_HRGN__, hbr: *s_HBRUSH__, w: int, h: int) -> int
export import def #extern #dllimport GetROP2(hdc: *s_HDC__) -> int
export import def #extern #dllimport GetAspectRatioFilterEx(hdc: *s_HDC__, lpsize: *SIZE) -> int
export import def #extern #dllimport GetBkColor(hdc: *s_HDC__) -> ulong
export import def #extern #dllimport GetDCBrushColor(hdc: *s_HDC__) -> ulong
export import def #extern #dllimport GetDCPenColor(hdc: *s_HDC__) -> ulong
export import def #extern #dllimport GetBkMode(hdc: *s_HDC__) -> int
export import def #extern #dllimport GetBitmapBits(hbit: *s_HBITMAP__, cb: long, lpvBits: *) -> long
export import def #extern #dllimport GetBitmapDimensionEx(hbit: *s_HBITMAP__, lpsize: *SIZE) -> int
export import def #extern #dllimport GetBoundsRect(hdc: *s_HDC__, lprect: *RECT, flags: uint) -> uint
export import def #extern #dllimport GetBrushOrgEx(hdc: *s_HDC__, lppt: *POINT) -> int
export import def #extern #dllimport GetCharWidthA(hdc: *s_HDC__, iFirst: uint, iLast: uint, lpBuffer: *int) -> int
export import def #extern #dllimport GetCharWidthW(hdc: *s_HDC__, iFirst: uint, iLast: uint, lpBuffer: *int) -> int
export import def #extern #dllimport GetCharWidth32A(hdc: *s_HDC__, iFirst: uint, iLast: uint, lpBuffer: *int) -> int
export import def #extern #dllimport GetCharWidth32W(hdc: *s_HDC__, iFirst: uint, iLast: uint, lpBuffer: *int) -> int
export import def #extern #dllimport GetCharWidthFloatA(hdc: *s_HDC__, iFirst: uint, iLast: uint, lpBuffer: *float) -> int
export import def #extern #dllimport GetCharWidthFloatW(hdc: *s_HDC__, iFirst: uint, iLast: uint, lpBuffer: *float) -> int
export import def #extern #dllimport GetCharABCWidthsA(hdc: *s_HDC__, wFirst: uint, wLast: uint, lpABC: *ABC) -> int
export import def #extern #dllimport GetCharABCWidthsW(hdc: *s_HDC__, wFirst: uint, wLast: uint, lpABC: *ABC) -> int
export import def #extern #dllimport GetCharABCWidthsFloatA(hdc: *s_HDC__, iFirst: uint, iLast: uint, lpABC: *ABCFLOAT) -> int
export import def #extern #dllimport GetCharABCWidthsFloatW(hdc: *s_HDC__, iFirst: uint, iLast: uint, lpABC: *ABCFLOAT) -> int
export import def #extern #dllimport GetClipBox(hdc: *s_HDC__, lprect: *RECT) -> int
export import def #extern #dllimport GetClipRgn(hdc: *s_HDC__, hrgn: *s_HRGN__) -> int
export import def #extern #dllimport GetMetaRgn(hdc: *s_HDC__, hrgn: *s_HRGN__) -> int
export import def #extern #dllimport GetCurrentObject(hdc: *s_HDC__, type_: uint) -> *
export import def #extern #dllimport GetCurrentPositionEx(hdc: *s_HDC__, lppt: *POINT) -> int
export import def #extern #dllimport GetDeviceCaps(hdc: *s_HDC__, index: int) -> int
export import def #extern #dllimport GetDIBits(hdc: *s_HDC__, hbm: *s_HBITMAP__, start: uint, cLines: uint, lpvBits: *, lpbmi: *BITMAPINFO, usage: uint) -> int
export import def #extern #dllimport GetFontData(hdc: *s_HDC__, dwTable: ulong, dwOffset: ulong, pvBuffer: *, cjBuffer: ulong) -> ulong
export import def #extern #dllimport GetGlyphOutlineA(hdc: *s_HDC__, uChar: uint, fuFormat: uint, lpgm: *GLYPHMETRICS, cjBuffer: ulong, pvBuffer: *, lpmat2: *MAT2) -> ulong
export import def #extern #dllimport GetGlyphOutlineW(hdc: *s_HDC__, uChar: uint, fuFormat: uint, lpgm: *GLYPHMETRICS, cjBuffer: ulong, pvBuffer: *, lpmat2: *MAT2) -> ulong
export import def #extern #dllimport GetGraphicsMode(hdc: *s_HDC__) -> int
export import def #extern #dllimport GetMapMode(hdc: *s_HDC__) -> int
export import def #extern #dllimport GetMetaFileBitsEx(hMF: *s_HMETAFILE__, cbBuffer: uint, lpData: *) -> uint
export import def #extern #dllimport GetMetaFileA(lpName: *char) -> *s_HMETAFILE__
export import def #extern #dllimport GetMetaFileW(lpName: *ushort) -> *s_HMETAFILE__
export import def #extern #dllimport GetNearestColor(hdc: *s_HDC__, color: ulong) -> ulong
export import def #extern #dllimport GetNearestPaletteIndex(h: *s_HPALETTE__, color: ulong) -> uint
export import def #extern #dllimport GetObjectType(h: *) -> ulong
export import def #extern #dllimport GetOutlineTextMetricsA(hdc: *s_HDC__, cjCopy: uint, potm: *OUTLINETEXTMETRICA) -> uint
export import def #extern #dllimport GetOutlineTextMetricsW(hdc: *s_HDC__, cjCopy: uint, potm: *OUTLINETEXTMETRICW) -> uint
export import def #extern #dllimport GetPaletteEntries(hpal: *s_HPALETTE__, iStart: uint, cEntries: uint, pPalEntries: *PALETTEENTRY) -> uint
export import def #extern #dllimport GetPixel(hdc: *s_HDC__, x: int, y: int) -> ulong
export import def #extern #dllimport GetPixelFormat(hdc: *s_HDC__) -> int
export import def #extern #dllimport GetPolyFillMode(hdc: *s_HDC__) -> int
export import def #extern #dllimport GetRasterizerCaps(lpraststat: *RASTERIZER_STATUS, cjBytes: uint) -> int
export import def #extern #dllimport GetRandomRgn(hdc: *s_HDC__, hrgn: *s_HRGN__, i: int) -> int
export import def #extern #dllimport GetRegionData(hrgn: *s_HRGN__, nCount: ulong, lpRgnData: *RGNDATA) -> ulong
export import def #extern #dllimport GetRgnBox(hrgn: *s_HRGN__, lprc: *RECT) -> int
export import def #extern #dllimport GetStockObject(i: int) -> *
export import def #extern #dllimport GetStretchBltMode(hdc: *s_HDC__) -> int
export import def #extern #dllimport GetSystemPaletteEntries(hdc: *s_HDC__, iStart: uint, cEntries: uint, pPalEntries: *PALETTEENTRY) -> uint
export import def #extern #dllimport GetSystemPaletteUse(hdc: *s_HDC__) -> uint
export import def #extern #dllimport GetTextCharacterExtra(hdc: *s_HDC__) -> int
export import def #extern #dllimport GetTextAlign(hdc: *s_HDC__) -> uint
export import def #extern #dllimport GetTextColor(hdc: *s_HDC__) -> ulong
export import def #extern #dllimport GetTextExtentPointA(hdc: *s_HDC__, lpString: *char, c: int, lpsz: *SIZE) -> int
export import def #extern #dllimport GetTextExtentPointW(hdc: *s_HDC__, lpString: *ushort, c: int, lpsz: *SIZE) -> int
export import def #extern #dllimport GetTextExtentPoint32A(hdc: *s_HDC__, lpString: *char, c: int, psizl: *SIZE) -> int
export import def #extern #dllimport GetTextExtentPoint32W(hdc: *s_HDC__, lpString: *ushort, c: int, psizl: *SIZE) -> int
export import def #extern #dllimport GetTextExtentExPointA(hdc: *s_HDC__, lpszString: *char, cchString: int, nMaxExtent: int, lpnFit: *int, lpnDx: *int, lpSize: *SIZE) -> int
export import def #extern #dllimport GetTextExtentExPointW(hdc: *s_HDC__, lpszString: *ushort, cchString: int, nMaxExtent: int, lpnFit: *int, lpnDx: *int, lpSize: *SIZE) -> int
export import def #extern #dllimport GetTextCharset(hdc: *s_HDC__) -> int
export import def #extern #dllimport GetTextCharsetInfo(hdc: *s_HDC__, lpSig: *FONTSIGNATURE, dwFlags: ulong) -> int
export import def #extern #dllimport TranslateCharsetInfo(lpSrc: *ulong, lpCs: *CHARSETINFO, dwFlags: ulong) -> int
export import def #extern #dllimport GetFontLanguageInfo(hdc: *s_HDC__) -> ulong
export import def #extern #dllimport GetCharacterPlacementA(hdc: *s_HDC__, lpString: *char, nCount: int, nMexExtent: int, lpResults: *GCP_RESULTSA, dwFlags: ulong) -> ulong
export import def #extern #dllimport GetCharacterPlacementW(hdc: *s_HDC__, lpString: *ushort, nCount: int, nMexExtent: int, lpResults: *GCP_RESULTSW, dwFlags: ulong) -> ulong
export import def #extern #dllimport GetFontUnicodeRanges(hdc: *s_HDC__, lpgs: *GLYPHSET) -> ulong
export import def #extern #dllimport GetGlyphIndicesA(hdc: *s_HDC__, lpstr: *char, c: int, pgi: *ushort, fl: ulong) -> ulong
export import def #extern #dllimport GetGlyphIndicesW(hdc: *s_HDC__, lpstr: *ushort, c: int, pgi: *ushort, fl: ulong) -> ulong
export import def #extern #dllimport GetTextExtentPointI(hdc: *s_HDC__, pgiIn: *ushort, cgi: int, psize: *SIZE) -> int
export import def #extern #dllimport GetTextExtentExPointI(hdc: *s_HDC__, lpwszString: *ushort, cwchString: int, nMaxExtent: int, lpnFit: *int, lpnDx: *int, lpSize: *SIZE) -> int
export import def #extern #dllimport GetCharWidthI(hdc: *s_HDC__, giFirst: uint, cgi: uint, pgi: *ushort, piWidths: *int) -> int
export import def #extern #dllimport GetCharABCWidthsI(hdc: *s_HDC__, giFirst: uint, cgi: uint, pgi: *ushort, pabc: *ABC) -> int
export import def #extern #dllimport AddFontResourceExA(name: *char, fl: ulong, res: *) -> int
export import def #extern #dllimport AddFontResourceExW(name: *ushort, fl: ulong, res: *) -> int
export import def #extern #dllimport RemoveFontResourceExA(name: *char, fl: ulong, pdv: *) -> int
export import def #extern #dllimport RemoveFontResourceExW(name: *ushort, fl: ulong, pdv: *) -> int
export import def #extern #dllimport AddFontMemResourceEx(pFileView: *, cjSize: ulong, pvResrved: *, pNumFonts: *ulong) -> *
export import def #extern #dllimport RemoveFontMemResourceEx(h: *) -> int
export import def #extern #dllimport CreateFontIndirectExA(_0: *ENUMLOGFONTEXDVA) -> *s_HFONT__
export import def #extern #dllimport CreateFontIndirectExW(_0: *ENUMLOGFONTEXDVW) -> *s_HFONT__
export import def #extern #dllimport GetViewportExtEx(hdc: *s_HDC__, lpsize: *SIZE) -> int
export import def #extern #dllimport GetViewportOrgEx(hdc: *s_HDC__, lppoint: *POINT) -> int
export import def #extern #dllimport GetWindowExtEx(hdc: *s_HDC__, lpsize: *SIZE) -> int
export import def #extern #dllimport GetWindowOrgEx(hdc: *s_HDC__, lppoint: *POINT) -> int
export import def #extern #dllimport IntersectClipRect(hdc: *s_HDC__, left: int, top: int, right: int, bottom: int) -> int
export import def #extern #dllimport InvertRgn(hdc: *s_HDC__, hrgn: *s_HRGN__) -> int
export import def #extern #dllimport LineDDA(xStart: int, yStart: int, xEnd: int, yEnd: int, lpProc: def (int, int, int64) -> (), data: int64) -> int
export import def #extern #dllimport LineTo(hdc: *s_HDC__, x: int, y: int) -> int
export import def #extern #dllimport MaskBlt(hdcDest: *s_HDC__, xDest: int, yDest: int, width: int, height: int, hdcSrc: *s_HDC__, xSrc: int, ySrc: int, hbmMask: *s_HBITMAP__, xMask: int, yMask: int, rop: ulong) -> int
export import def #extern #dllimport PlgBlt(hdcDest: *s_HDC__, lpPoint: *POINT, hdcSrc: *s_HDC__, xSrc: int, ySrc: int, width: int, height: int, hbmMask: *s_HBITMAP__, xMask: int, yMask: int) -> int
export import def #extern #dllimport OffsetClipRgn(hdc: *s_HDC__, x: int, y: int) -> int
export import def #extern #dllimport OffsetRgn(hrgn: *s_HRGN__, x: int, y: int) -> int
export import def #extern #dllimport PatBlt(hdc: *s_HDC__, x: int, y: int, w: int, h: int, rop: ulong) -> int
export import def #extern #dllimport Pie(hdc: *s_HDC__, left: int, top: int, right: int, bottom: int, xr1: int, yr1: int, xr2: int, yr2: int) -> int
export import def #extern #dllimport PlayMetaFile(hdc: *s_HDC__, hmf: *s_HMETAFILE__) -> int
export import def #extern #dllimport PaintRgn(hdc: *s_HDC__, hrgn: *s_HRGN__) -> int
export import def #extern #dllimport PolyPolygon(hdc: *s_HDC__, apt: *POINT, asz: *int, csz: int) -> int
export import def #extern #dllimport PtInRegion(hrgn: *s_HRGN__, x: int, y: int) -> int
export import def #extern #dllimport PtVisible(hdc: *s_HDC__, x: int, y: int) -> int
export import def #extern #dllimport RectInRegion(hrgn: *s_HRGN__, lprect: *RECT) -> int
export import def #extern #dllimport RectVisible(hdc: *s_HDC__, lprect: *RECT) -> int
export import def #extern #dllimport Rectangle(hdc: *s_HDC__, left: int, top: int, right: int, bottom: int) -> int
export import def #extern #dllimport RestoreDC(hdc: *s_HDC__, nSavedDC: int) -> int
export import def #extern #dllimport ResetDCA(hdc: *s_HDC__, lpdm: *DEVMODEA) -> *s_HDC__
export import def #extern #dllimport ResetDCW(hdc: *s_HDC__, lpdm: *DEVMODEW) -> *s_HDC__
export import def #extern #dllimport RealizePalette(hdc: *s_HDC__) -> uint
export import def #extern #dllimport RemoveFontResourceA(lpFileName: *char) -> int
export import def #extern #dllimport RemoveFontResourceW(lpFileName: *ushort) -> int
export import def #extern #dllimport RoundRect(hdc: *s_HDC__, left: int, top: int, right: int, bottom: int, width: int, height: int) -> int
export import def #extern #dllimport ResizePalette(hpal: *s_HPALETTE__, n: uint) -> int
export import def #extern #dllimport SaveDC(hdc: *s_HDC__) -> int
export import def #extern #dllimport SelectClipRgn(hdc: *s_HDC__, hrgn: *s_HRGN__) -> int
export import def #extern #dllimport ExtSelectClipRgn(hdc: *s_HDC__, hrgn: *s_HRGN__, mode: int) -> int
export import def #extern #dllimport SetMetaRgn(hdc: *s_HDC__) -> int
export import def #extern #dllimport SelectObject(hdc: *s_HDC__, h: *) -> *
export import def #extern #dllimport SelectPalette(hdc: *s_HDC__, hPal: *s_HPALETTE__, bForceBkgd: int) -> *s_HPALETTE__
export import def #extern #dllimport SetBkColor(hdc: *s_HDC__, color: ulong) -> ulong
export import def #extern #dllimport SetDCBrushColor(hdc: *s_HDC__, color: ulong) -> ulong
export import def #extern #dllimport SetDCPenColor(hdc: *s_HDC__, color: ulong) -> ulong
export import def #extern #dllimport SetBkMode(hdc: *s_HDC__, mode: int) -> int
export import def #extern #dllimport SetBitmapBits(hbm: *s_HBITMAP__, cb: ulong, pvBits: *) -> long
export import def #extern #dllimport SetBoundsRect(hdc: *s_HDC__, lprect: *RECT, flags: uint) -> uint
export import def #extern #dllimport SetDIBits(hdc: *s_HDC__, hbm: *s_HBITMAP__, start: uint, cLines: uint, lpBits: *, lpbmi: *BITMAPINFO, ColorUse: uint) -> int
export import def #extern #dllimport SetDIBitsToDevice(hdc: *s_HDC__, xDest: int, yDest: int, w: ulong, h: ulong, xSrc: int, ySrc: int, StartScan: uint, cLines: uint, lpvBits: *, lpbmi: *BITMAPINFO, ColorUse: uint) -> int
export import def #extern #dllimport SetMapperFlags(hdc: *s_HDC__, flags: ulong) -> ulong
export import def #extern #dllimport SetGraphicsMode(hdc: *s_HDC__, iMode: int) -> int
export import def #extern #dllimport SetMapMode(hdc: *s_HDC__, iMode: int) -> int
export import def #extern #dllimport SetLayout(hdc: *s_HDC__, l: ulong) -> ulong
export import def #extern #dllimport GetLayout(hdc: *s_HDC__) -> ulong
export import def #extern #dllimport SetMetaFileBitsEx(cbBuffer: uint, lpData: *char) -> *s_HMETAFILE__
export import def #extern #dllimport SetPaletteEntries(hpal: *s_HPALETTE__, iStart: uint, cEntries: uint, pPalEntries: *PALETTEENTRY) -> uint
export import def #extern #dllimport SetPixel(hdc: *s_HDC__, x: int, y: int, color: ulong) -> ulong
export import def #extern #dllimport SetPixelV(hdc: *s_HDC__, x: int, y: int, color: ulong) -> int
export import def #extern #dllimport SetPixelFormat(hdc: *s_HDC__, format: int, ppfd: *PIXELFORMATDESCRIPTOR) -> int
export import def #extern #dllimport SetPolyFillMode(hdc: *s_HDC__, mode: int) -> int
export import def #extern #dllimport StretchBlt(hdcDest: *s_HDC__, xDest: int, yDest: int, wDest: int, hDest: int, hdcSrc: *s_HDC__, xSrc: int, ySrc: int, wSrc: int, hSrc: int, rop: ulong) -> int
export import def #extern #dllimport SetRectRgn(hrgn: *s_HRGN__, left: int, top: int, right: int, bottom: int) -> int
export import def #extern #dllimport StretchDIBits(hdc: *s_HDC__, xDest: int, yDest: int, DestWidth: int, DestHeight: int, xSrc: int, ySrc: int, SrcWidth: int, SrcHeight: int, lpBits: *, lpbmi: *BITMAPINFO, iUsage: uint, rop: ulong) -> int
export import def #extern #dllimport SetROP2(hdc: *s_HDC__, rop2: int) -> int
export import def #extern #dllimport SetStretchBltMode(hdc: *s_HDC__, mode: int) -> int
export import def #extern #dllimport SetSystemPaletteUse(hdc: *s_HDC__, use: uint) -> uint
export import def #extern #dllimport SetTextCharacterExtra(hdc: *s_HDC__, extra: int) -> int
export import def #extern #dllimport SetTextColor(hdc: *s_HDC__, color: ulong) -> ulong
export import def #extern #dllimport SetTextAlign(hdc: *s_HDC__, align: uint) -> uint
export import def #extern #dllimport SetTextJustification(hdc: *s_HDC__, extra: int, count: int) -> int
export import def #extern #dllimport UpdateColors(hdc: *s_HDC__) -> int
export import def #extern #dllimport AlphaBlend(hdcDest: *s_HDC__, xoriginDest: int, yoriginDest: int, wDest: int, hDest: int, hdcSrc: *s_HDC__, xoriginSrc: int, yoriginSrc: int, wSrc: int, hSrc: int, ftn: BLENDFUNCTION) -> int
export import def #extern #dllimport TransparentBlt(hdcDest: *s_HDC__, xoriginDest: int, yoriginDest: int, wDest: int, hDest: int, hdcSrc: *s_HDC__, xoriginSrc: int, yoriginSrc: int, wSrc: int, hSrc: int, crTransparent: uint) -> int
export import def #extern #dllimport GradientFill(hdc: *s_HDC__, pVertex: *TRIVERTEX, nVertex: ulong, pMesh: *, nMesh: ulong, ulMode: ulong) -> int
export import def #extern #dllimport GdiAlphaBlend(hdcDest: *s_HDC__, xoriginDest: int, yoriginDest: int, wDest: int, hDest: int, hdcSrc: *s_HDC__, xoriginSrc: int, yoriginSrc: int, wSrc: int, hSrc: int, ftn: BLENDFUNCTION) -> int
export import def #extern #dllimport GdiTransparentBlt(hdcDest: *s_HDC__, xoriginDest: int, yoriginDest: int, wDest: int, hDest: int, hdcSrc: *s_HDC__, xoriginSrc: int, yoriginSrc: int, wSrc: int, hSrc: int, crTransparent: uint) -> int
export import def #extern #dllimport GdiGradientFill(hdc: *s_HDC__, pVertex: *TRIVERTEX, nVertex: ulong, pMesh: *, nCount: ulong, ulMode: ulong) -> int
export import def #extern #dllimport PlayMetaFileRecord(hdc: *s_HDC__, lpHandleTable: *HANDLETABLE, lpMR: *METARECORD, noObjs: uint) -> int
export import def #extern #dllimport EnumMetaFile(hdc: *s_HDC__, hmf: *s_HMETAFILE__, proc: def (*s_HDC__, *HANDLETABLE, *METARECORD, int, int64) -> (int), param: int64) -> int
export import def #extern #dllimport CloseEnhMetaFile(hdc: *s_HDC__) -> *s_HENHMETAFILE__
export import def #extern #dllimport CopyEnhMetaFileA(hEnh: *s_HENHMETAFILE__, lpFileName: *char) -> *s_HENHMETAFILE__
export import def #extern #dllimport CopyEnhMetaFileW(hEnh: *s_HENHMETAFILE__, lpFileName: *ushort) -> *s_HENHMETAFILE__
export import def #extern #dllimport CreateEnhMetaFileA(hdc: *s_HDC__, lpFilename: *char, lprc: *RECT, lpDesc: *char) -> *s_HDC__
export import def #extern #dllimport CreateEnhMetaFileW(hdc: *s_HDC__, lpFilename: *ushort, lprc: *RECT, lpDesc: *ushort) -> *s_HDC__
export import def #extern #dllimport DeleteEnhMetaFile(hmf: *s_HENHMETAFILE__) -> int
export import def #extern #dllimport EnumEnhMetaFile(hdc: *s_HDC__, hmf: *s_HENHMETAFILE__, proc: def (*s_HDC__, *HANDLETABLE, *ENHMETARECORD, int, int64) -> (int), param: *, lpRect: *RECT) -> int
export import def #extern #dllimport GetEnhMetaFileA(lpName: *char) -> *s_HENHMETAFILE__
export import def #extern #dllimport GetEnhMetaFileW(lpName: *ushort) -> *s_HENHMETAFILE__
export import def #extern #dllimport GetEnhMetaFileBits(hEMF: *s_HENHMETAFILE__, nSize: uint, lpData: *char) -> uint
export import def #extern #dllimport GetEnhMetaFileDescriptionA(hemf: *s_HENHMETAFILE__, cchBuffer: uint, lpDescription: *char) -> uint
export import def #extern #dllimport GetEnhMetaFileDescriptionW(hemf: *s_HENHMETAFILE__, cchBuffer: uint, lpDescription: *ushort) -> uint
export import def #extern #dllimport GetEnhMetaFileHeader(hemf: *s_HENHMETAFILE__, nSize: uint, lpEnhMetaHeader: *ENHMETAHEADER) -> uint
export import def #extern #dllimport GetEnhMetaFilePaletteEntries(hemf: *s_HENHMETAFILE__, nNumEntries: uint, lpPaletteEntries: *PALETTEENTRY) -> uint
export import def #extern #dllimport GetEnhMetaFilePixelFormat(hemf: *s_HENHMETAFILE__, cbBuffer: uint, ppfd: *PIXELFORMATDESCRIPTOR) -> uint
export import def #extern #dllimport GetWinMetaFileBits(hemf: *s_HENHMETAFILE__, cbData16: uint, pData16: *char, iMapMode: int, hdcRef: *s_HDC__) -> uint
export import def #extern #dllimport PlayEnhMetaFile(hdc: *s_HDC__, hmf: *s_HENHMETAFILE__, lprect: *RECT) -> int
export import def #extern #dllimport PlayEnhMetaFileRecord(hdc: *s_HDC__, pht: *HANDLETABLE, pmr: *ENHMETARECORD, cht: uint) -> int
export import def #extern #dllimport SetEnhMetaFileBits(nSize: uint, pb: *char) -> *s_HENHMETAFILE__
export import def #extern #dllimport SetWinMetaFileBits(nSize: uint, lpMeta16Data: *char, hdcRef: *s_HDC__, lpMFP: *METAFILEPICT) -> *s_HENHMETAFILE__
export import def #extern #dllimport GdiComment(hdc: *s_HDC__, nSize: uint, lpData: *char) -> int
export import def #extern #dllimport GetTextMetricsA(hdc: *s_HDC__, lptm: *TEXTMETRICA) -> int
export import def #extern #dllimport GetTextMetricsW(hdc: *s_HDC__, lptm: *TEXTMETRICW) -> int
export import def #extern #dllimport AngleArc(hdc: *s_HDC__, x: int, y: int, r: ulong, StartAngle: float, SweepAngle: float) -> int
export import def #extern #dllimport PolyPolyline(hdc: *s_HDC__, apt: *POINT, asz: *ulong, csz: ulong) -> int
export import def #extern #dllimport GetWorldTransform(hdc: *s_HDC__, lpxf: *XFORM) -> int
export import def #extern #dllimport SetWorldTransform(hdc: *s_HDC__, lpxf: *XFORM) -> int
export import def #extern #dllimport ModifyWorldTransform(hdc: *s_HDC__, lpxf: *XFORM, mode: ulong) -> int
export import def #extern #dllimport CombineTransform(lpxfOut: *XFORM, lpxf1: *XFORM, lpxf2: *XFORM) -> int
export import def #extern #dllimport CreateDIBSection(hdc: *s_HDC__, pbmi: *BITMAPINFO, usage: uint, ppvBits: **, hSection: *, offset: ulong) -> *s_HBITMAP__
export import def #extern #dllimport GetDIBColorTable(hdc: *s_HDC__, iStart: uint, cEntries: uint, prgbq: *RGBQUAD) -> uint
export import def #extern #dllimport SetDIBColorTable(hdc: *s_HDC__, iStart: uint, cEntries: uint, prgbq: *RGBQUAD) -> uint
export import def #extern #dllimport SetColorAdjustment(hdc: *s_HDC__, lpca: *COLORADJUSTMENT) -> int
export import def #extern #dllimport GetColorAdjustment(hdc: *s_HDC__, lpca: *COLORADJUSTMENT) -> int
export import def #extern #dllimport CreateHalftonePalette(hdc: *s_HDC__) -> *s_HPALETTE__
export import def #extern #dllimport StartDocA(hdc: *s_HDC__, lpdi: *DOCINFOA) -> int
export import def #extern #dllimport StartDocW(hdc: *s_HDC__, lpdi: *DOCINFOW) -> int
export import def #extern #dllimport EndDoc(hdc: *s_HDC__) -> int
export import def #extern #dllimport StartPage(hdc: *s_HDC__) -> int
export import def #extern #dllimport EndPage(hdc: *s_HDC__) -> int
export import def #extern #dllimport AbortDoc(hdc: *s_HDC__) -> int
export import def #extern #dllimport SetAbortProc(hdc: *s_HDC__, proc: def (*s_HDC__, int) -> (int)) -> int
export import def #extern #dllimport AbortPath(hdc: *s_HDC__) -> int
export import def #extern #dllimport ArcTo(hdc: *s_HDC__, left: int, top: int, right: int, bottom: int, xr1: int, yr1: int, xr2: int, yr2: int) -> int
export import def #extern #dllimport BeginPath(hdc: *s_HDC__) -> int
export import def #extern #dllimport CloseFigure(hdc: *s_HDC__) -> int
export import def #extern #dllimport EndPath(hdc: *s_HDC__) -> int
export import def #extern #dllimport FillPath(hdc: *s_HDC__) -> int
export import def #extern #dllimport FlattenPath(hdc: *s_HDC__) -> int
export import def #extern #dllimport GetPath(hdc: *s_HDC__, apt: *POINT, aj: *char, cpt: int) -> int
export import def #extern #dllimport PathToRegion(hdc: *s_HDC__) -> *s_HRGN__
export import def #extern #dllimport PolyDraw(hdc: *s_HDC__, apt: *POINT, aj: *char, cpt: int) -> int
export import def #extern #dllimport SelectClipPath(hdc: *s_HDC__, mode: int) -> int
export import def #extern #dllimport SetArcDirection(hdc: *s_HDC__, dir: int) -> int
export import def #extern #dllimport SetMiterLimit(hdc: *s_HDC__, limit: float, old: *float) -> int
export import def #extern #dllimport StrokeAndFillPath(hdc: *s_HDC__) -> int
export import def #extern #dllimport StrokePath(hdc: *s_HDC__) -> int
export import def #extern #dllimport WidenPath(hdc: *s_HDC__) -> int
export import def #extern #dllimport ExtCreatePen(iPenStyle: ulong, cWidth: ulong, plbrush: *LOGBRUSH, cStyle: ulong, pstyle: *ulong) -> *s_HPEN__
export import def #extern #dllimport GetMiterLimit(hdc: *s_HDC__, plimit: *float) -> int
export import def #extern #dllimport GetArcDirection(hdc: *s_HDC__) -> int
export import def #extern #dllimport GetObjectA(h: *, c: int, pv: *) -> int
export import def #extern #dllimport GetObjectW(h: *, c: int, pv: *) -> int
export import def #extern #dllimport MoveToEx(hdc: *s_HDC__, x: int, y: int, lppt: *POINT) -> int
export import def #extern #dllimport TextOutA(hdc: *s_HDC__, x: int, y: int, lpString: *char, c: int) -> int
export import def #extern #dllimport TextOutW(hdc: *s_HDC__, x: int, y: int, lpString: *ushort, c: int) -> int
export import def #extern #dllimport ExtTextOutA(hdc: *s_HDC__, x: int, y: int, options: uint, lprect: *RECT, lpString: *char, c: uint, lpDx: *int) -> int
export import def #extern #dllimport ExtTextOutW(hdc: *s_HDC__, x: int, y: int, options: uint, lprect: *RECT, lpString: *ushort, c: uint, lpDx: *int) -> int
export import def #extern #dllimport PolyTextOutA(hdc: *s_HDC__, ppt: *POLYTEXTA, nstrings: int) -> int
export import def #extern #dllimport PolyTextOutW(hdc: *s_HDC__, ppt: *POLYTEXTW, nstrings: int) -> int
export import def #extern #dllimport CreatePolygonRgn(pptl: *POINT, cPoint: int, iMode: int) -> *s_HRGN__
export import def #extern #dllimport DPtoLP(hdc: *s_HDC__, lppt: *POINT, c: int) -> int
export import def #extern #dllimport LPtoDP(hdc: *s_HDC__, lppt: *POINT, c: int) -> int
export import def #extern #dllimport Polygon(hdc: *s_HDC__, apt: *POINT, cpt: int) -> int
export import def #extern #dllimport Polyline(hdc: *s_HDC__, apt: *POINT, cpt: int) -> int
export import def #extern #dllimport PolyBezier(hdc: *s_HDC__, apt: *POINT, cpt: ulong) -> int
export import def #extern #dllimport PolyBezierTo(hdc: *s_HDC__, apt: *POINT, cpt: ulong) -> int
export import def #extern #dllimport PolylineTo(hdc: *s_HDC__, apt: *POINT, cpt: ulong) -> int
export import def #extern #dllimport SetViewportExtEx(hdc: *s_HDC__, x: int, y: int, lpsz: *SIZE) -> int
export import def #extern #dllimport SetViewportOrgEx(hdc: *s_HDC__, x: int, y: int, lppt: *POINT) -> int
export import def #extern #dllimport SetWindowExtEx(hdc: *s_HDC__, x: int, y: int, lpsz: *SIZE) -> int
export import def #extern #dllimport SetWindowOrgEx(hdc: *s_HDC__, x: int, y: int, lppt: *POINT) -> int
export import def #extern #dllimport OffsetViewportOrgEx(hdc: *s_HDC__, x: int, y: int, lppt: *POINT) -> int
export import def #extern #dllimport OffsetWindowOrgEx(hdc: *s_HDC__, x: int, y: int, lppt: *POINT) -> int
export import def #extern #dllimport ScaleViewportExtEx(hdc: *s_HDC__, xn: int, dx: int, yn: int, yd: int, lpsz: *SIZE) -> int
export import def #extern #dllimport ScaleWindowExtEx(hdc: *s_HDC__, xn: int, xd: int, yn: int, yd: int, lpsz: *SIZE) -> int
export import def #extern #dllimport SetBitmapDimensionEx(hbm: *s_HBITMAP__, w: int, h: int, lpsz: *SIZE) -> int
export import def #extern #dllimport SetBrushOrgEx(hdc: *s_HDC__, x: int, y: int, lppt: *POINT) -> int
export import def #extern #dllimport GetTextFaceA(hdc: *s_HDC__, c: int, lpName: *char) -> int
export import def #extern #dllimport GetTextFaceW(hdc: *s_HDC__, c: int, lpName: *ushort) -> int
export import def #extern #dllimport GetKerningPairsA(hdc: *s_HDC__, nPairs: ulong, lpKernPair: *KERNINGPAIR) -> ulong
export import def #extern #dllimport GetKerningPairsW(hdc: *s_HDC__, nPairs: ulong, lpKernPair: *KERNINGPAIR) -> ulong
export import def #extern #dllimport GetDCOrgEx(hdc: *s_HDC__, lppt: *POINT) -> int
export import def #extern #dllimport FixBrushOrgEx(hdc: *s_HDC__, x: int, y: int, ptl: *POINT) -> int
export import def #extern #dllimport UnrealizeObject(h: *) -> int
export import def #extern #dllimport GdiFlush() -> int
export import def #extern #dllimport GdiSetBatchLimit(dw: ulong) -> ulong
export import def #extern #dllimport GdiGetBatchLimit() -> ulong
export import def #extern #dllimport SetICMMode(hdc: *s_HDC__, mode: int) -> int
export import def #extern #dllimport CheckColorsInGamut(hdc: *s_HDC__, lpRGBTriple: *RGBTRIPLE, dlpBuffer: *, nCount: ulong) -> int
export import def #extern #dllimport GetColorSpace(hdc: *s_HDC__) -> *s_HCOLORSPACE__
export import def #extern #dllimport GetLogColorSpaceA(hColorSpace: *s_HCOLORSPACE__, lpBuffer: *LOGCOLORSPACEA, nSize: ulong) -> int
export import def #extern #dllimport GetLogColorSpaceW(hColorSpace: *s_HCOLORSPACE__, lpBuffer: *LOGCOLORSPACEW, nSize: ulong) -> int
export import def #extern #dllimport CreateColorSpaceA(lplcs: *LOGCOLORSPACEA) -> *s_HCOLORSPACE__
export import def #extern #dllimport CreateColorSpaceW(lplcs: *LOGCOLORSPACEW) -> *s_HCOLORSPACE__
export import def #extern #dllimport SetColorSpace(hdc: *s_HDC__, hcs: *s_HCOLORSPACE__) -> *s_HCOLORSPACE__
export import def #extern #dllimport DeleteColorSpace(hcs: *s_HCOLORSPACE__) -> int
export import def #extern #dllimport GetICMProfileA(hdc: *s_HDC__, pBufSize: *ulong, pszFilename: *char) -> int
export import def #extern #dllimport GetICMProfileW(hdc: *s_HDC__, pBufSize: *ulong, pszFilename: *ushort) -> int
export import def #extern #dllimport SetICMProfileA(hdc: *s_HDC__, lpFileName: *char) -> int
export import def #extern #dllimport SetICMProfileW(hdc: *s_HDC__, lpFileName: *ushort) -> int
export import def #extern #dllimport GetDeviceGammaRamp(hdc: *s_HDC__, lpRamp: *) -> int
export import def #extern #dllimport SetDeviceGammaRamp(hdc: *s_HDC__, lpRamp: *) -> int
export import def #extern #dllimport ColorMatchToTarget(hdc: *s_HDC__, hdcTarget: *s_HDC__, action: ulong) -> int
export import def #extern #dllimport EnumICMProfilesA(hdc: *s_HDC__, proc: def (*char, int64) -> (int), param: int64) -> int
export import def #extern #dllimport EnumICMProfilesW(hdc: *s_HDC__, proc: def (*ushort, int64) -> (int), param: int64) -> int
export import def #extern #dllimport UpdateICMRegKeyA(reserved: ulong, lpszCMID: *char, lpszFileName: *char, command: uint) -> int
export import def #extern #dllimport UpdateICMRegKeyW(reserved: ulong, lpszCMID: *ushort, lpszFileName: *ushort, command: uint) -> int
export import def #extern #dllimport ColorCorrectPalette(hdc: *s_HDC__, hPal: *s_HPALETTE__, deFirst: ulong, num: ulong) -> int
export import def #extern #dllimport wglCopyContext(_0: *s_HGLRC__, _1: *s_HGLRC__, _2: uint) -> int
export import def #extern #dllimport wglCreateContext(_0: *s_HDC__) -> *s_HGLRC__
export import def #extern #dllimport wglCreateLayerContext(_0: *s_HDC__, _1: int) -> *s_HGLRC__
export import def #extern #dllimport wglDeleteContext(_0: *s_HGLRC__) -> int
export import def #extern #dllimport wglGetCurrentContext() -> *s_HGLRC__
export import def #extern #dllimport wglGetCurrentDC() -> *s_HDC__
export import def #extern #dllimport wglGetProcAddress(_0: *char) -> def () -> (int64)
export import def #extern #dllimport wglMakeCurrent(_0: *s_HDC__, _1: *s_HGLRC__) -> int
export import def #extern #dllimport wglShareLists(_0: *s_HGLRC__, _1: *s_HGLRC__) -> int
export import def #extern #dllimport wglUseFontBitmapsA(_0: *s_HDC__, _1: ulong, _2: ulong, _3: ulong) -> int
export import def #extern #dllimport wglUseFontBitmapsW(_0: *s_HDC__, _1: ulong, _2: ulong, _3: ulong) -> int
export import def #extern #dllimport SwapBuffers(_0: *s_HDC__) -> int
export import def #extern #dllimport wglUseFontOutlinesA(_0: *s_HDC__, _1: ulong, _2: ulong, _3: ulong, _4: float, _5: float, _6: int, _7: *GLYPHMETRICSFLOAT) -> int
export import def #extern #dllimport wglUseFontOutlinesW(_0: *s_HDC__, _1: ulong, _2: ulong, _3: ulong, _4: float, _5: float, _6: int, _7: *GLYPHMETRICSFLOAT) -> int
export import def #extern #dllimport wglDescribeLayerPlane(_0: *s_HDC__, _1: int, _2: int, _3: uint, _4: *LAYERPLANEDESCRIPTOR) -> int
export import def #extern #dllimport wglSetLayerPaletteEntries(_0: *s_HDC__, _1: int, _2: int, _3: int, _4: *ulong) -> int
export import def #extern #dllimport wglGetLayerPaletteEntries(_0: *s_HDC__, _1: int, _2: int, _3: int, _4: *ulong) -> int
export import def #extern #dllimport wglRealizeLayerPalette(_0: *s_HDC__, _1: int, _2: int) -> int
export import def #extern #dllimport wglSwapLayerBuffers(_0: *s_HDC__, _1: uint) -> int
export import def #extern #dllimport wglSwapMultipleBuffers(_0: uint, _1: *WGLSWAP) -> ulong
export import def #extern #dllimport wvsprintfA(_0: *char, _1: *char, arglist: *char) -> int
export import def #extern #dllimport wvsprintfW(_0: *ushort, _1: *ushort, arglist: *char) -> int
export import def #extern #dllimport wsprintfA(_0: *char, _1: *char, ...) -> int
export import def #extern #dllimport wsprintfW(_0: *ushort, _1: *ushort, ...) -> int
export import def #extern #dllimport LoadKeyboardLayoutA(pwszKLID: *char, Flags: uint) -> *s_HKL__
export import def #extern #dllimport LoadKeyboardLayoutW(pwszKLID: *ushort, Flags: uint) -> *s_HKL__
export import def #extern #dllimport ActivateKeyboardLayout(hkl: *s_HKL__, Flags: uint) -> *s_HKL__
export import def #extern #dllimport ToUnicodeEx(wVirtKey: uint, wScanCode: uint, lpKeyState: *char, pwszBuff: *ushort, cchBuff: int, wFlags: uint, dwhkl: *s_HKL__) -> int
export import def #extern #dllimport UnloadKeyboardLayout(hkl: *s_HKL__) -> int
export import def #extern #dllimport GetKeyboardLayoutNameA(pwszKLID: *char) -> int
export import def #extern #dllimport GetKeyboardLayoutNameW(pwszKLID: *ushort) -> int
export import def #extern #dllimport GetKeyboardLayoutList(nBuff: int, lpList: **s_HKL__) -> int
export import def #extern #dllimport GetKeyboardLayout(idThread: ulong) -> *s_HKL__
export import def #extern #dllimport GetMouseMovePointsEx(cbSize: uint, lppt: *MOUSEMOVEPOINT, lpptBuf: *MOUSEMOVEPOINT, nBufPoints: int, resolution: ulong) -> int
export import def #extern #dllimport CreateDesktopA(lpszDesktop: *char, lpszDevice: *char, pDevmode: *DEVMODEA, dwFlags: ulong, dwDesiredAccess: ulong, lpsa: *SECURITY_ATTRIBUTES) -> *s_HDESK__
export import def #extern #dllimport CreateDesktopW(lpszDesktop: *ushort, lpszDevice: *ushort, pDevmode: *DEVMODEW, dwFlags: ulong, dwDesiredAccess: ulong, lpsa: *SECURITY_ATTRIBUTES) -> *s_HDESK__
export import def #extern #dllimport CreateDesktopExA(lpszDesktop: *char, lpszDevice: *char, pDevmode: *DEVMODEA, dwFlags: ulong, dwDesiredAccess: ulong, lpsa: *SECURITY_ATTRIBUTES, ulHeapSize: ulong, pvoid: *) -> *s_HDESK__
export import def #extern #dllimport CreateDesktopExW(lpszDesktop: *ushort, lpszDevice: *ushort, pDevmode: *DEVMODEW, dwFlags: ulong, dwDesiredAccess: ulong, lpsa: *SECURITY_ATTRIBUTES, ulHeapSize: ulong, pvoid: *) -> *s_HDESK__
export import def #extern #dllimport OpenDesktopA(lpszDesktop: *char, dwFlags: ulong, fInherit: int, dwDesiredAccess: ulong) -> *s_HDESK__
export import def #extern #dllimport OpenDesktopW(lpszDesktop: *ushort, dwFlags: ulong, fInherit: int, dwDesiredAccess: ulong) -> *s_HDESK__
export import def #extern #dllimport OpenInputDesktop(dwFlags: ulong, fInherit: int, dwDesiredAccess: ulong) -> *s_HDESK__
export import def #extern #dllimport EnumDesktopsA(hwinsta: *s_HWINSTA__, lpEnumFunc: def (*char, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport EnumDesktopsW(hwinsta: *s_HWINSTA__, lpEnumFunc: def (*ushort, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport EnumDesktopWindows(hDesktop: *s_HDESK__, lpfn: def (*s_HWND__, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport SwitchDesktop(hDesktop: *s_HDESK__) -> int
export import def #extern #dllimport SetThreadDesktop(hDesktop: *s_HDESK__) -> int
export import def #extern #dllimport CloseDesktop(hDesktop: *s_HDESK__) -> int
export import def #extern #dllimport GetThreadDesktop(dwThreadId: ulong) -> *s_HDESK__
export import def #extern #dllimport CreateWindowStationA(lpwinsta: *char, dwFlags: ulong, dwDesiredAccess: ulong, lpsa: *SECURITY_ATTRIBUTES) -> *s_HWINSTA__
export import def #extern #dllimport CreateWindowStationW(lpwinsta: *ushort, dwFlags: ulong, dwDesiredAccess: ulong, lpsa: *SECURITY_ATTRIBUTES) -> *s_HWINSTA__
export import def #extern #dllimport OpenWindowStationA(lpszWinSta: *char, fInherit: int, dwDesiredAccess: ulong) -> *s_HWINSTA__
export import def #extern #dllimport OpenWindowStationW(lpszWinSta: *ushort, fInherit: int, dwDesiredAccess: ulong) -> *s_HWINSTA__
export import def #extern #dllimport EnumWindowStationsA(lpEnumFunc: def (*char, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport EnumWindowStationsW(lpEnumFunc: def (*ushort, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport CloseWindowStation(hWinSta: *s_HWINSTA__) -> int
export import def #extern #dllimport SetProcessWindowStation(hWinSta: *s_HWINSTA__) -> int
export import def #extern #dllimport GetProcessWindowStation() -> *s_HWINSTA__
export import def #extern #dllimport SetUserObjectSecurity(hObj: *, pSIRequested: *ulong, pSID: *) -> int
export import def #extern #dllimport GetUserObjectSecurity(hObj: *, pSIRequested: *ulong, pSID: *, nLength: ulong, lpnLengthNeeded: *ulong) -> int
export import def #extern #dllimport GetUserObjectInformationA(hObj: *, nIndex: int, pvInfo: *, nLength: ulong, lpnLengthNeeded: *ulong) -> int
export import def #extern #dllimport GetUserObjectInformationW(hObj: *, nIndex: int, pvInfo: *, nLength: ulong, lpnLengthNeeded: *ulong) -> int
export import def #extern #dllimport SetUserObjectInformationA(hObj: *, nIndex: int, pvInfo: *, nLength: ulong) -> int
export import def #extern #dllimport SetUserObjectInformationW(hObj: *, nIndex: int, pvInfo: *, nLength: ulong) -> int
export import def #extern #dllimport IsHungAppWindow(hwnd: *s_HWND__) -> int
export import def #extern #dllimport DisableProcessWindowsGhosting()
export import def #extern #dllimport RegisterWindowMessageA(lpString: *char) -> uint
export import def #extern #dllimport RegisterWindowMessageW(lpString: *ushort) -> uint
export import def #extern #dllimport TrackMouseEvent(lpEventTrack: *TRACKMOUSEEVENT) -> int
export import def #extern #dllimport DrawEdge(hdc: *s_HDC__, qrc: *RECT, edge: uint, grfFlags: uint) -> int
export import def #extern #dllimport DrawFrameControl(_0: *s_HDC__, _1: *RECT, _2: uint, _3: uint) -> int
export import def #extern #dllimport DrawCaption(hwnd: *s_HWND__, hdc: *s_HDC__, lprect: *RECT, flags: uint) -> int
export import def #extern #dllimport DrawAnimatedRects(hwnd: *s_HWND__, idAni: int, lprcFrom: *RECT, lprcTo: *RECT) -> int
export import def #extern #dllimport GetMessageA(lpMsg: *MSG, hWnd: *s_HWND__, wMsgFilterMin: uint, wMsgFilterMax: uint) -> int
export import def #extern #dllimport GetMessageW(lpMsg: *MSG, hWnd: *s_HWND__, wMsgFilterMin: uint, wMsgFilterMax: uint) -> int
export import def #extern #dllimport TranslateMessage(lpMsg: *MSG) -> int
export import def #extern #dllimport DispatchMessageA(lpMsg: *MSG) -> int64
export import def #extern #dllimport DispatchMessageW(lpMsg: *MSG) -> int64
export import def #extern #dllimport SetMessageQueue(cMessagesMax: int) -> int
export import def #extern #dllimport PeekMessageA(lpMsg: *MSG, hWnd: *s_HWND__, wMsgFilterMin: uint, wMsgFilterMax: uint, wRemoveMsg: uint) -> int
export import def #extern #dllimport PeekMessageW(lpMsg: *MSG, hWnd: *s_HWND__, wMsgFilterMin: uint, wMsgFilterMax: uint, wRemoveMsg: uint) -> int
export import def #extern #dllimport RegisterHotKey(hWnd: *s_HWND__, id: int, fsModifiers: uint, vk: uint) -> int
export import def #extern #dllimport UnregisterHotKey(hWnd: *s_HWND__, id: int) -> int
export import def #extern #dllimport ExitWindowsEx(uFlags: uint, dwReason: ulong) -> int
export import def #extern #dllimport SwapMouseButton(fSwap: int) -> int
export import def #extern #dllimport GetMessagePos() -> ulong
export import def #extern #dllimport GetMessageTime() -> long
export import def #extern #dllimport GetMessageExtraInfo() -> int64
export import def #extern #dllimport GetUnpredictedMessagePos() -> ulong
export import def #extern #dllimport IsWow64Message() -> int
export import def #extern #dllimport SetMessageExtraInfo(lParam: int64) -> int64
export import def #extern #dllimport SendMessageA(hWnd: *s_HWND__, Msg: uint, wParam: uint64, lParam: int64) -> int64
export import def #extern #dllimport SendMessageW(hWnd: *s_HWND__, Msg: uint, wParam: uint64, lParam: int64) -> int64
export import def #extern #dllimport SendMessageTimeoutA(hWnd: *s_HWND__, Msg: uint, wParam: uint64, lParam: int64, fuFlags: uint, uTimeout: uint, lpdwResult: *uint64) -> int64
export import def #extern #dllimport SendMessageTimeoutW(hWnd: *s_HWND__, Msg: uint, wParam: uint64, lParam: int64, fuFlags: uint, uTimeout: uint, lpdwResult: *uint64) -> int64
export import def #extern #dllimport SendNotifyMessageA(hWnd: *s_HWND__, Msg: uint, wParam: uint64, lParam: int64) -> int
export import def #extern #dllimport SendNotifyMessageW(hWnd: *s_HWND__, Msg: uint, wParam: uint64, lParam: int64) -> int
export import def #extern #dllimport SendMessageCallbackA(hWnd: *s_HWND__, Msg: uint, wParam: uint64, lParam: int64, lpResultCallBack: def (*s_HWND__, uint, uint64, int64) -> (), dwData: uint64) -> int
export import def #extern #dllimport SendMessageCallbackW(hWnd: *s_HWND__, Msg: uint, wParam: uint64, lParam: int64, lpResultCallBack: def (*s_HWND__, uint, uint64, int64) -> (), dwData: uint64) -> int
export import def #extern #dllimport BroadcastSystemMessageExA(flags: ulong, lpInfo: *ulong, Msg: uint, wParam: uint64, lParam: int64, pbsmInfo: *BSMINFO) -> long
export import def #extern #dllimport BroadcastSystemMessageExW(flags: ulong, lpInfo: *ulong, Msg: uint, wParam: uint64, lParam: int64, pbsmInfo: *BSMINFO) -> long
export import def #extern #dllimport BroadcastSystemMessageA(flags: ulong, lpInfo: *ulong, Msg: uint, wParam: uint64, lParam: int64) -> long
export import def #extern #dllimport BroadcastSystemMessageW(flags: ulong, lpInfo: *ulong, Msg: uint, wParam: uint64, lParam: int64) -> long
export import def #extern #dllimport RegisterDeviceNotificationA(hRecipient: *, NotificationFilter: *, Flags: ulong) -> *
export import def #extern #dllimport RegisterDeviceNotificationW(hRecipient: *, NotificationFilter: *, Flags: ulong) -> *
export import def #extern #dllimport UnregisterDeviceNotification(Handle: *) -> int
export import def #extern #dllimport RegisterPowerSettingNotification(hRecipient: *, PowerSettingGuid: *GUID, Flags: ulong) -> *
export import def #extern #dllimport UnregisterPowerSettingNotification(Handle: *) -> int
export import def #extern #dllimport RegisterSuspendResumeNotification(hRecipient: *, Flags: ulong) -> *
export import def #extern #dllimport UnregisterSuspendResumeNotification(Handle: *) -> int
export import def #extern #dllimport PostMessageA(hWnd: *s_HWND__, Msg: uint, wParam: uint64, lParam: int64) -> int
export import def #extern #dllimport PostMessageW(hWnd: *s_HWND__, Msg: uint, wParam: uint64, lParam: int64) -> int
export import def #extern #dllimport PostThreadMessageA(idThread: ulong, Msg: uint, wParam: uint64, lParam: int64) -> int
export import def #extern #dllimport PostThreadMessageW(idThread: ulong, Msg: uint, wParam: uint64, lParam: int64) -> int
export import def #extern #dllimport AttachThreadInput(idAttach: ulong, idAttachTo: ulong, fAttach: int) -> int
export import def #extern #dllimport ReplyMessage(lResult: int64) -> int
export import def #extern #dllimport WaitMessage() -> int
export import def #extern #dllimport WaitForInputIdle(hProcess: *, dwMilliseconds: ulong) -> ulong
export import def #extern #dllimport DefWindowProcA(hWnd: *s_HWND__, Msg: uint, wParam: uint64, lParam: int64) -> int64
export import def #extern #dllimport DefWindowProcW(hWnd: *s_HWND__, Msg: uint, wParam: uint64, lParam: int64) -> int64
export import def #extern #dllimport PostQuitMessage(nExitCode: int)
export import def #extern #dllimport CallWindowProcA(lpPrevWndFunc: def (*s_HWND__, uint, uint64, int64) -> (int64), hWnd: *s_HWND__, Msg: uint, wParam: uint64, lParam: int64) -> int64
export import def #extern #dllimport CallWindowProcW(lpPrevWndFunc: def (*s_HWND__, uint, uint64, int64) -> (int64), hWnd: *s_HWND__, Msg: uint, wParam: uint64, lParam: int64) -> int64
export import def #extern #dllimport InSendMessage() -> int
export import def #extern #dllimport InSendMessageEx(lpReserved: *) -> ulong
export import def #extern #dllimport GetDoubleClickTime() -> uint
export import def #extern #dllimport SetDoubleClickTime(_0: uint) -> int
export import def #extern #dllimport RegisterClassA(lpWndClass: *WNDCLASSA) -> ushort
export import def #extern #dllimport RegisterClassW(lpWndClass: *WNDCLASSW) -> ushort
export import def #extern #dllimport UnregisterClassA(lpClassName: *char, hInstance: *s_HINSTANCE__) -> int
export import def #extern #dllimport UnregisterClassW(lpClassName: *ushort, hInstance: *s_HINSTANCE__) -> int
export import def #extern #dllimport GetClassInfoA(hInstance: *s_HINSTANCE__, lpClassName: *char, lpWndClass: *WNDCLASSA) -> int
export import def #extern #dllimport GetClassInfoW(hInstance: *s_HINSTANCE__, lpClassName: *ushort, lpWndClass: *WNDCLASSW) -> int
export import def #extern #dllimport RegisterClassExA(_0: *WNDCLASSEXA) -> ushort
export import def #extern #dllimport RegisterClassExW(_0: *WNDCLASSEXW) -> ushort
export import def #extern #dllimport GetClassInfoExA(hInstance: *s_HINSTANCE__, lpszClass: *char, lpwcx: *WNDCLASSEXA) -> int
export import def #extern #dllimport GetClassInfoExW(hInstance: *s_HINSTANCE__, lpszClass: *ushort, lpwcx: *WNDCLASSEXW) -> int
export import def #extern #dllimport CreateWindowExA(dwExStyle: ulong, lpClassName: *char, lpWindowName: *char, dwStyle: ulong, X: int, Y: int, nWidth: int, nHeight: int, hWndParent: *s_HWND__, hMenu: *s_HMENU__, hInstance: *s_HINSTANCE__, lpParam: *) -> *s_HWND__
export import def #extern #dllimport CreateWindowExW(dwExStyle: ulong, lpClassName: *ushort, lpWindowName: *ushort, dwStyle: ulong, X: int, Y: int, nWidth: int, nHeight: int, hWndParent: *s_HWND__, hMenu: *s_HMENU__, hInstance: *s_HINSTANCE__, lpParam: *) -> *s_HWND__
export import def #extern #dllimport IsWindow(hWnd: *s_HWND__) -> int
export import def #extern #dllimport IsMenu(hMenu: *s_HMENU__) -> int
export import def #extern #dllimport IsChild(hWndParent: *s_HWND__, hWnd: *s_HWND__) -> int
export import def #extern #dllimport DestroyWindow(hWnd: *s_HWND__) -> int
export import def #extern #dllimport ShowWindow(hWnd: *s_HWND__, nCmdShow: int) -> int
export import def #extern #dllimport AnimateWindow(hWnd: *s_HWND__, dwTime: ulong, dwFlags: ulong) -> int
export import def #extern #dllimport UpdateLayeredWindow(hWnd: *s_HWND__, hdcDst: *s_HDC__, pptDst: *POINT, psize: *SIZE, hdcSrc: *s_HDC__, pptSrc: *POINT, crKey: ulong, pblend: *BLENDFUNCTION, dwFlags: ulong) -> int
export import def #extern #dllimport UpdateLayeredWindowIndirect(hWnd: *s_HWND__, pULWInfo: *UPDATELAYEREDWINDOWINFO) -> int
export import def #extern #dllimport GetLayeredWindowAttributes(hwnd: *s_HWND__, pcrKey: *ulong, pbAlpha: *char, pdwFlags: *ulong) -> int
export import def #extern #dllimport PrintWindow(hwnd: *s_HWND__, hdcBlt: *s_HDC__, nFlags: uint) -> int
export import def #extern #dllimport SetLayeredWindowAttributes(hwnd: *s_HWND__, crKey: ulong, bAlpha: char, dwFlags: ulong) -> int
export import def #extern #dllimport ShowWindowAsync(hWnd: *s_HWND__, nCmdShow: int) -> int
export import def #extern #dllimport FlashWindow(hWnd: *s_HWND__, bInvert: int) -> int
export import def #extern #dllimport FlashWindowEx(pfwi: *FLASHWINFO) -> int
export import def #extern #dllimport ShowOwnedPopups(hWnd: *s_HWND__, fShow: int) -> int
export import def #extern #dllimport OpenIcon(hWnd: *s_HWND__) -> int
export import def #extern #dllimport CloseWindow(hWnd: *s_HWND__) -> int
export import def #extern #dllimport MoveWindow(hWnd: *s_HWND__, X: int, Y: int, nWidth: int, nHeight: int, bRepaint: int) -> int
export import def #extern #dllimport SetWindowPos(hWnd: *s_HWND__, hWndInsertAfter: *s_HWND__, X: int, Y: int, cx: int, cy: int, uFlags: uint) -> int
export import def #extern #dllimport GetWindowPlacement(hWnd: *s_HWND__, lpwndpl: *WINDOWPLACEMENT) -> int
export import def #extern #dllimport SetWindowPlacement(hWnd: *s_HWND__, lpwndpl: *WINDOWPLACEMENT) -> int
export import def #extern #dllimport GetWindowDisplayAffinity(hWnd: *s_HWND__, pdwAffinity: *ulong) -> int
export import def #extern #dllimport SetWindowDisplayAffinity(hWnd: *s_HWND__, dwAffinity: ulong) -> int
export import def #extern #dllimport BeginDeferWindowPos(nNumWindows: int) -> *
export import def #extern #dllimport DeferWindowPos(hWinPosInfo: *, hWnd: *s_HWND__, hWndInsertAfter: *s_HWND__, x: int, y: int, cx: int, cy: int, uFlags: uint) -> *
export import def #extern #dllimport EndDeferWindowPos(hWinPosInfo: *) -> int
export import def #extern #dllimport IsWindowVisible(hWnd: *s_HWND__) -> int
export import def #extern #dllimport IsIconic(hWnd: *s_HWND__) -> int
export import def #extern #dllimport AnyPopup() -> int
export import def #extern #dllimport BringWindowToTop(hWnd: *s_HWND__) -> int
export import def #extern #dllimport IsZoomed(hWnd: *s_HWND__) -> int
export import def #extern #dllimport CreateDialogParamA(hInstance: *s_HINSTANCE__, lpTemplateName: *char, hWndParent: *s_HWND__, lpDialogFunc: def (*s_HWND__, uint, uint64, int64) -> (int64), dwInitParam: int64) -> *s_HWND__
export import def #extern #dllimport CreateDialogParamW(hInstance: *s_HINSTANCE__, lpTemplateName: *ushort, hWndParent: *s_HWND__, lpDialogFunc: def (*s_HWND__, uint, uint64, int64) -> (int64), dwInitParam: int64) -> *s_HWND__
export import def #extern #dllimport CreateDialogIndirectParamA(hInstance: *s_HINSTANCE__, lpTemplate: *DLGTEMPLATE, hWndParent: *s_HWND__, lpDialogFunc: def (*s_HWND__, uint, uint64, int64) -> (int64), dwInitParam: int64) -> *s_HWND__
export import def #extern #dllimport CreateDialogIndirectParamW(hInstance: *s_HINSTANCE__, lpTemplate: *DLGTEMPLATE, hWndParent: *s_HWND__, lpDialogFunc: def (*s_HWND__, uint, uint64, int64) -> (int64), dwInitParam: int64) -> *s_HWND__
export import def #extern #dllimport DialogBoxParamA(hInstance: *s_HINSTANCE__, lpTemplateName: *char, hWndParent: *s_HWND__, lpDialogFunc: def (*s_HWND__, uint, uint64, int64) -> (int64), dwInitParam: int64) -> int64
export import def #extern #dllimport DialogBoxParamW(hInstance: *s_HINSTANCE__, lpTemplateName: *ushort, hWndParent: *s_HWND__, lpDialogFunc: def (*s_HWND__, uint, uint64, int64) -> (int64), dwInitParam: int64) -> int64
export import def #extern #dllimport DialogBoxIndirectParamA(hInstance: *s_HINSTANCE__, hDialogTemplate: *DLGTEMPLATE, hWndParent: *s_HWND__, lpDialogFunc: def (*s_HWND__, uint, uint64, int64) -> (int64), dwInitParam: int64) -> int64
export import def #extern #dllimport DialogBoxIndirectParamW(hInstance: *s_HINSTANCE__, hDialogTemplate: *DLGTEMPLATE, hWndParent: *s_HWND__, lpDialogFunc: def (*s_HWND__, uint, uint64, int64) -> (int64), dwInitParam: int64) -> int64
export import def #extern #dllimport EndDialog(hDlg: *s_HWND__, nResult: int64) -> int
export import def #extern #dllimport GetDlgItem(hDlg: *s_HWND__, nIDDlgItem: int) -> *s_HWND__
export import def #extern #dllimport SetDlgItemInt(hDlg: *s_HWND__, nIDDlgItem: int, uValue: uint, bSigned: int) -> int
export import def #extern #dllimport GetDlgItemInt(hDlg: *s_HWND__, nIDDlgItem: int, lpTranslated: *int, bSigned: int) -> uint
export import def #extern #dllimport SetDlgItemTextA(hDlg: *s_HWND__, nIDDlgItem: int, lpString: *char) -> int
export import def #extern #dllimport SetDlgItemTextW(hDlg: *s_HWND__, nIDDlgItem: int, lpString: *ushort) -> int
export import def #extern #dllimport GetDlgItemTextA(hDlg: *s_HWND__, nIDDlgItem: int, lpString: *char, cchMax: int) -> uint
export import def #extern #dllimport GetDlgItemTextW(hDlg: *s_HWND__, nIDDlgItem: int, lpString: *ushort, cchMax: int) -> uint
export import def #extern #dllimport CheckDlgButton(hDlg: *s_HWND__, nIDButton: int, uCheck: uint) -> int
export import def #extern #dllimport CheckRadioButton(hDlg: *s_HWND__, nIDFirstButton: int, nIDLastButton: int, nIDCheckButton: int) -> int
export import def #extern #dllimport IsDlgButtonChecked(hDlg: *s_HWND__, nIDButton: int) -> uint
export import def #extern #dllimport SendDlgItemMessageA(hDlg: *s_HWND__, nIDDlgItem: int, Msg: uint, wParam: uint64, lParam: int64) -> int64
export import def #extern #dllimport SendDlgItemMessageW(hDlg: *s_HWND__, nIDDlgItem: int, Msg: uint, wParam: uint64, lParam: int64) -> int64
export import def #extern #dllimport GetNextDlgGroupItem(hDlg: *s_HWND__, hCtl: *s_HWND__, bPrevious: int) -> *s_HWND__
export import def #extern #dllimport GetNextDlgTabItem(hDlg: *s_HWND__, hCtl: *s_HWND__, bPrevious: int) -> *s_HWND__
export import def #extern #dllimport GetDlgCtrlID(hWnd: *s_HWND__) -> int
export import def #extern #dllimport GetDialogBaseUnits() -> long
export import def #extern #dllimport DefDlgProcA(hDlg: *s_HWND__, Msg: uint, wParam: uint64, lParam: int64) -> int64
export import def #extern #dllimport DefDlgProcW(hDlg: *s_HWND__, Msg: uint, wParam: uint64, lParam: int64) -> int64
export import def #extern SetDialogControlDpiChangeBehavior(hWnd: *s_HWND__, mask: DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS, values: DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS) -> int
export import def #extern GetDialogControlDpiChangeBehavior(hWnd: *s_HWND__) -> DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS
export import def #extern SetDialogDpiChangeBehavior(hDlg: *s_HWND__, mask: DIALOG_DPI_CHANGE_BEHAVIORS, values: DIALOG_DPI_CHANGE_BEHAVIORS) -> int
export import def #extern GetDialogDpiChangeBehavior(hDlg: *s_HWND__) -> DIALOG_DPI_CHANGE_BEHAVIORS
export import def #extern #dllimport CallMsgFilterA(lpMsg: *MSG, nCode: int) -> int
export import def #extern #dllimport CallMsgFilterW(lpMsg: *MSG, nCode: int) -> int
export import def #extern #dllimport OpenClipboard(hWndNewOwner: *s_HWND__) -> int
export import def #extern #dllimport CloseClipboard() -> int
export import def #extern #dllimport GetClipboardSequenceNumber() -> ulong
export import def #extern #dllimport GetClipboardOwner() -> *s_HWND__
export import def #extern #dllimport SetClipboardViewer(hWndNewViewer: *s_HWND__) -> *s_HWND__
export import def #extern #dllimport GetClipboardViewer() -> *s_HWND__
export import def #extern #dllimport ChangeClipboardChain(hWndRemove: *s_HWND__, hWndNewNext: *s_HWND__) -> int
export import def #extern #dllimport SetClipboardData(uFormat: uint, hMem: *) -> *
export import def #extern #dllimport GetClipboardData(uFormat: uint) -> *
export import def #extern #dllimport RegisterClipboardFormatA(lpszFormat: *char) -> uint
export import def #extern #dllimport RegisterClipboardFormatW(lpszFormat: *ushort) -> uint
export import def #extern #dllimport CountClipboardFormats() -> int
export import def #extern #dllimport EnumClipboardFormats(format: uint) -> uint
export import def #extern #dllimport GetClipboardFormatNameA(format: uint, lpszFormatName: *char, cchMaxCount: int) -> int
export import def #extern #dllimport GetClipboardFormatNameW(format: uint, lpszFormatName: *ushort, cchMaxCount: int) -> int
export import def #extern #dllimport EmptyClipboard() -> int
export import def #extern #dllimport IsClipboardFormatAvailable(format: uint) -> int
export import def #extern #dllimport GetPriorityClipboardFormat(paFormatPriorityList: *uint, cFormats: int) -> int
export import def #extern #dllimport GetOpenClipboardWindow() -> *s_HWND__
export import def #extern #dllimport AddClipboardFormatListener(hwnd: *s_HWND__) -> int
export import def #extern #dllimport RemoveClipboardFormatListener(hwnd: *s_HWND__) -> int
export import def #extern #dllimport GetUpdatedClipboardFormats(lpuiFormats: *uint, cFormats: uint, pcFormatsOut: *uint) -> int
export import def #extern #dllimport CharToOemA(pSrc: *char, pDst: *char) -> int
export import def #extern #dllimport CharToOemW(pSrc: *ushort, pDst: *char) -> int
export import def #extern #dllimport OemToCharA(pSrc: *char, pDst: *char) -> int
export import def #extern #dllimport OemToCharW(pSrc: *char, pDst: *ushort) -> int
export import def #extern #dllimport CharToOemBuffA(lpszSrc: *char, lpszDst: *char, cchDstLength: ulong) -> int
export import def #extern #dllimport CharToOemBuffW(lpszSrc: *ushort, lpszDst: *char, cchDstLength: ulong) -> int
export import def #extern #dllimport OemToCharBuffA(lpszSrc: *char, lpszDst: *char, cchDstLength: ulong) -> int
export import def #extern #dllimport OemToCharBuffW(lpszSrc: *char, lpszDst: *ushort, cchDstLength: ulong) -> int
export import def #extern #dllimport CharUpperA(lpsz: *char) -> *char
export import def #extern #dllimport CharUpperW(lpsz: *ushort) -> *ushort
export import def #extern #dllimport CharUpperBuffA(lpsz: *char, cchLength: ulong) -> ulong
export import def #extern #dllimport CharUpperBuffW(lpsz: *ushort, cchLength: ulong) -> ulong
export import def #extern #dllimport CharLowerA(lpsz: *char) -> *char
export import def #extern #dllimport CharLowerW(lpsz: *ushort) -> *ushort
export import def #extern #dllimport CharLowerBuffA(lpsz: *char, cchLength: ulong) -> ulong
export import def #extern #dllimport CharLowerBuffW(lpsz: *ushort, cchLength: ulong) -> ulong
export import def #extern #dllimport CharNextA(lpsz: *char) -> *char
export import def #extern #dllimport CharNextW(lpsz: *ushort) -> *ushort
export import def #extern #dllimport CharPrevA(lpszStart: *char, lpszCurrent: *char) -> *char
export import def #extern #dllimport CharPrevW(lpszStart: *ushort, lpszCurrent: *ushort) -> *ushort
export import def #extern #dllimport CharNextExA(CodePage: ushort, lpCurrentChar: *char, dwFlags: ulong) -> *char
export import def #extern #dllimport CharPrevExA(CodePage: ushort, lpStart: *char, lpCurrentChar: *char, dwFlags: ulong) -> *char
export import def #extern #dllimport IsCharAlphaA(ch: char) -> int
export import def #extern #dllimport IsCharAlphaW(ch: ushort) -> int
export import def #extern #dllimport IsCharAlphaNumericA(ch: char) -> int
export import def #extern #dllimport IsCharAlphaNumericW(ch: ushort) -> int
export import def #extern #dllimport IsCharUpperA(ch: char) -> int
export import def #extern #dllimport IsCharUpperW(ch: ushort) -> int
export import def #extern #dllimport IsCharLowerA(ch: char) -> int
export import def #extern #dllimport IsCharLowerW(ch: ushort) -> int
export import def #extern #dllimport SetFocus(hWnd: *s_HWND__) -> *s_HWND__
export import def #extern #dllimport GetActiveWindow() -> *s_HWND__
export import def #extern #dllimport GetFocus() -> *s_HWND__
export import def #extern #dllimport GetKBCodePage() -> uint
export import def #extern #dllimport GetKeyState(nVirtKey: int) -> short
export import def #extern #dllimport GetAsyncKeyState(vKey: int) -> short
export import def #extern #dllimport GetKeyboardState(lpKeyState: *char) -> int
export import def #extern #dllimport SetKeyboardState(lpKeyState: *char) -> int
export import def #extern #dllimport GetKeyNameTextA(lParam: long, lpString: *char, cchSize: int) -> int
export import def #extern #dllimport GetKeyNameTextW(lParam: long, lpString: *ushort, cchSize: int) -> int
export import def #extern #dllimport GetKeyboardType(nTypeFlag: int) -> int
export import def #extern #dllimport ToAscii(uVirtKey: uint, uScanCode: uint, lpKeyState: *char, lpChar: *ushort, uFlags: uint) -> int
export import def #extern #dllimport ToAsciiEx(uVirtKey: uint, uScanCode: uint, lpKeyState: *char, lpChar: *ushort, uFlags: uint, dwhkl: *s_HKL__) -> int
export import def #extern #dllimport ToUnicode(wVirtKey: uint, wScanCode: uint, lpKeyState: *char, pwszBuff: *ushort, cchBuff: int, wFlags: uint) -> int
export import def #extern #dllimport OemKeyScan(wOemChar: ushort) -> ulong
export import def #extern #dllimport VkKeyScanA(ch: char) -> short
export import def #extern #dllimport VkKeyScanW(ch: ushort) -> short
export import def #extern #dllimport VkKeyScanExA(ch: char, dwhkl: *s_HKL__) -> short
export import def #extern #dllimport VkKeyScanExW(ch: ushort, dwhkl: *s_HKL__) -> short
export import def #extern #dllimport keybd_event(bVk: char, bScan: char, dwFlags: ulong, dwExtraInfo: uint64)
export import def #extern #dllimport mouse_event(dwFlags: ulong, dx: ulong, dy: ulong, dwData: ulong, dwExtraInfo: uint64)
export import def #extern #dllimport SendInput(cInputs: uint, pInputs: *INPUT, cbSize: int) -> uint
export import def #extern #dllimport GetTouchInputInfo(hTouchInput: *s_HTOUCHINPUT__, cInputs: uint, pInputs: *TOUCHINPUT, cbSize: int) -> int
export import def #extern #dllimport CloseTouchInputHandle(hTouchInput: *s_HTOUCHINPUT__) -> int
export import def #extern #dllimport RegisterTouchWindow(hwnd: *s_HWND__, ulFlags: ulong) -> int
export import def #extern #dllimport UnregisterTouchWindow(hwnd: *s_HWND__) -> int
export import def #extern #dllimport IsTouchWindow(hwnd: *s_HWND__, pulFlags: *ulong) -> int
export import def #extern #dllimport InitializeTouchInjection(maxCount: uint, dwMode: ulong) -> int
export import def #extern #dllimport InjectTouchInput(count: uint, contacts: *POINTER_TOUCH_INFO) -> int
export import def #extern #dllimport GetPointerType(pointerId: uint, pointerType: *ulong) -> int
export import def #extern #dllimport GetPointerCursorId(pointerId: uint, cursorId: *uint) -> int
export import def #extern #dllimport GetPointerInfo(pointerId: uint, pointerInfo: *POINTER_INFO) -> int
export import def #extern #dllimport GetPointerInfoHistory(pointerId: uint, entriesCount: *uint, pointerInfo: *POINTER_INFO) -> int
export import def #extern #dllimport GetPointerFrameInfo(pointerId: uint, pointerCount: *uint, pointerInfo: *POINTER_INFO) -> int
export import def #extern #dllimport GetPointerFrameInfoHistory(pointerId: uint, entriesCount: *uint, pointerCount: *uint, pointerInfo: *POINTER_INFO) -> int
export import def #extern #dllimport GetPointerTouchInfo(pointerId: uint, touchInfo: *POINTER_TOUCH_INFO) -> int
export import def #extern #dllimport GetPointerTouchInfoHistory(pointerId: uint, entriesCount: *uint, touchInfo: *POINTER_TOUCH_INFO) -> int
export import def #extern #dllimport GetPointerFrameTouchInfo(pointerId: uint, pointerCount: *uint, touchInfo: *POINTER_TOUCH_INFO) -> int
export import def #extern #dllimport GetPointerFrameTouchInfoHistory(pointerId: uint, entriesCount: *uint, pointerCount: *uint, touchInfo: *POINTER_TOUCH_INFO) -> int
export import def #extern #dllimport GetPointerPenInfo(pointerId: uint, penInfo: *POINTER_PEN_INFO) -> int
export import def #extern #dllimport GetPointerPenInfoHistory(pointerId: uint, entriesCount: *uint, penInfo: *POINTER_PEN_INFO) -> int
export import def #extern #dllimport GetPointerFramePenInfo(pointerId: uint, pointerCount: *uint, penInfo: *POINTER_PEN_INFO) -> int
export import def #extern #dllimport GetPointerFramePenInfoHistory(pointerId: uint, entriesCount: *uint, pointerCount: *uint, penInfo: *POINTER_PEN_INFO) -> int
export import def #extern #dllimport SkipPointerFrameMessages(pointerId: uint) -> int
export import def #extern #dllimport RegisterPointerInputTarget(hwnd: *s_HWND__, pointerType: ulong) -> int
export import def #extern #dllimport UnregisterPointerInputTarget(hwnd: *s_HWND__, pointerType: ulong) -> int
export import def #extern #dllimport RegisterPointerInputTargetEx(hwnd: *s_HWND__, pointerType: ulong, fObserve: int) -> int
export import def #extern #dllimport UnregisterPointerInputTargetEx(hwnd: *s_HWND__, pointerType: ulong) -> int
export import def #extern #dllimport CreateSyntheticPointerDevice(pointerType: ulong, maxCount: ulong, mode: POINTER_FEEDBACK_MODE) -> *s_HSYNTHETICPOINTERDEVICE__
export import def #extern #dllimport InjectSyntheticPointerInput(device: *s_HSYNTHETICPOINTERDEVICE__, pointerInfo: *POINTER_TYPE_INFO, count: uint) -> int
export import def #extern #dllimport DestroySyntheticPointerDevice(device: *s_HSYNTHETICPOINTERDEVICE__)
export import def #extern #dllimport EnableMouseInPointer(fEnable: int) -> int
export import def #extern #dllimport IsMouseInPointerEnabled() -> int
export import def #extern #dllimport EnableMouseInPointerForThread() -> int
export import def #extern #dllimport RegisterTouchHitTestingWindow(hwnd: *s_HWND__, value: ulong) -> int
export import def #extern #dllimport EvaluateProximityToRect(controlBoundingBox: *RECT, pHitTestingInput: *TOUCH_HIT_TESTING_INPUT, pProximityEval: *TOUCH_HIT_TESTING_PROXIMITY_EVALUATION) -> int
export import def #extern #dllimport EvaluateProximityToPolygon(numVertices: uint, controlPolygon: *POINT, pHitTestingInput: *TOUCH_HIT_TESTING_INPUT, pProximityEval: *TOUCH_HIT_TESTING_PROXIMITY_EVALUATION) -> int
export import def #extern #dllimport PackTouchHitTestingProximityEvaluation(pHitTestingInput: *TOUCH_HIT_TESTING_INPUT, pProximityEval: *TOUCH_HIT_TESTING_PROXIMITY_EVALUATION) -> int64
export import def #extern #dllimport GetWindowFeedbackSetting(hwnd: *s_HWND__, feedback: FEEDBACK_TYPE, dwFlags: ulong, pSize: *uint, config: *) -> int
export import def #extern #dllimport SetWindowFeedbackSetting(hwnd: *s_HWND__, feedback: FEEDBACK_TYPE, dwFlags: ulong, size: uint, configuration: *) -> int
export import def #extern #dllimport GetPointerInputTransform(pointerId: uint, historyCount: uint, inputTransform: *INPUT_TRANSFORM) -> int
export import def #extern #dllimport GetLastInputInfo(plii: *LASTINPUTINFO) -> int
export import def #extern #dllimport MapVirtualKeyA(uCode: uint, uMapType: uint) -> uint
export import def #extern #dllimport MapVirtualKeyW(uCode: uint, uMapType: uint) -> uint
export import def #extern #dllimport MapVirtualKeyExA(uCode: uint, uMapType: uint, dwhkl: *s_HKL__) -> uint
export import def #extern #dllimport MapVirtualKeyExW(uCode: uint, uMapType: uint, dwhkl: *s_HKL__) -> uint
export import def #extern #dllimport GetInputState() -> int
export import def #extern #dllimport GetQueueStatus(flags: uint) -> ulong
export import def #extern #dllimport GetCapture() -> *s_HWND__
export import def #extern #dllimport SetCapture(hWnd: *s_HWND__) -> *s_HWND__
export import def #extern #dllimport ReleaseCapture() -> int
export import def #extern #dllimport MsgWaitForMultipleObjects(nCount: ulong, pHandles: **, fWaitAll: int, dwMilliseconds: ulong, dwWakeMask: ulong) -> ulong
export import def #extern #dllimport MsgWaitForMultipleObjectsEx(nCount: ulong, pHandles: **, dwMilliseconds: ulong, dwWakeMask: ulong, dwFlags: ulong) -> ulong
export import def #extern #dllimport SetTimer(hWnd: *s_HWND__, nIDEvent: uint64, uElapse: uint, lpTimerFunc: def (*s_HWND__, uint, uint64, ulong) -> ()) -> uint64
export import def #extern #dllimport SetCoalescableTimer(hWnd: *s_HWND__, nIDEvent: uint64, uElapse: uint, lpTimerFunc: def (*s_HWND__, uint, uint64, ulong) -> (), uToleranceDelay: ulong) -> uint64
export import def #extern #dllimport KillTimer(hWnd: *s_HWND__, uIDEvent: uint64) -> int
export import def #extern #dllimport IsWindowUnicode(hWnd: *s_HWND__) -> int
export import def #extern #dllimport EnableWindow(hWnd: *s_HWND__, bEnable: int) -> int
export import def #extern #dllimport IsWindowEnabled(hWnd: *s_HWND__) -> int
export import def #extern #dllimport LoadAcceleratorsA(hInstance: *s_HINSTANCE__, lpTableName: *char) -> *s_HACCEL__
export import def #extern #dllimport LoadAcceleratorsW(hInstance: *s_HINSTANCE__, lpTableName: *ushort) -> *s_HACCEL__
export import def #extern #dllimport CreateAcceleratorTableA(paccel: *ACCEL, cAccel: int) -> *s_HACCEL__
export import def #extern #dllimport CreateAcceleratorTableW(paccel: *ACCEL, cAccel: int) -> *s_HACCEL__
export import def #extern #dllimport DestroyAcceleratorTable(hAccel: *s_HACCEL__) -> int
export import def #extern #dllimport CopyAcceleratorTableA(hAccelSrc: *s_HACCEL__, lpAccelDst: *ACCEL, cAccelEntries: int) -> int
export import def #extern #dllimport CopyAcceleratorTableW(hAccelSrc: *s_HACCEL__, lpAccelDst: *ACCEL, cAccelEntries: int) -> int
export import def #extern #dllimport TranslateAcceleratorA(hWnd: *s_HWND__, hAccTable: *s_HACCEL__, lpMsg: *MSG) -> int
export import def #extern #dllimport TranslateAcceleratorW(hWnd: *s_HWND__, hAccTable: *s_HACCEL__, lpMsg: *MSG) -> int
export import def #extern #dllimport GetSystemMetrics(nIndex: int) -> int
export import def #extern #dllimport GetSystemMetricsForDpi(nIndex: int, dpi: uint) -> int
export import def #extern #dllimport LoadMenuA(hInstance: *s_HINSTANCE__, lpMenuName: *char) -> *s_HMENU__
export import def #extern #dllimport LoadMenuW(hInstance: *s_HINSTANCE__, lpMenuName: *ushort) -> *s_HMENU__
export import def #extern #dllimport LoadMenuIndirectA(lpMenuTemplate: *) -> *s_HMENU__
export import def #extern #dllimport LoadMenuIndirectW(lpMenuTemplate: *) -> *s_HMENU__
export import def #extern #dllimport GetMenu(hWnd: *s_HWND__) -> *s_HMENU__
export import def #extern #dllimport SetMenu(hWnd: *s_HWND__, hMenu: *s_HMENU__) -> int
export import def #extern #dllimport ChangeMenuA(hMenu: *s_HMENU__, cmd: uint, lpszNewItem: *char, cmdInsert: uint, flags: uint) -> int
export import def #extern #dllimport ChangeMenuW(hMenu: *s_HMENU__, cmd: uint, lpszNewItem: *ushort, cmdInsert: uint, flags: uint) -> int
export import def #extern #dllimport HiliteMenuItem(hWnd: *s_HWND__, hMenu: *s_HMENU__, uIDHiliteItem: uint, uHilite: uint) -> int
export import def #extern #dllimport GetMenuStringA(hMenu: *s_HMENU__, uIDItem: uint, lpString: *char, cchMax: int, flags: uint) -> int
export import def #extern #dllimport GetMenuStringW(hMenu: *s_HMENU__, uIDItem: uint, lpString: *ushort, cchMax: int, flags: uint) -> int
export import def #extern #dllimport GetMenuState(hMenu: *s_HMENU__, uId: uint, uFlags: uint) -> uint
export import def #extern #dllimport DrawMenuBar(hWnd: *s_HWND__) -> int
export import def #extern #dllimport GetSystemMenu(hWnd: *s_HWND__, bRevert: int) -> *s_HMENU__
export import def #extern #dllimport CreateMenu() -> *s_HMENU__
export import def #extern #dllimport CreatePopupMenu() -> *s_HMENU__
export import def #extern #dllimport DestroyMenu(hMenu: *s_HMENU__) -> int
export import def #extern #dllimport CheckMenuItem(hMenu: *s_HMENU__, uIDCheckItem: uint, uCheck: uint) -> ulong
export import def #extern #dllimport EnableMenuItem(hMenu: *s_HMENU__, uIDEnableItem: uint, uEnable: uint) -> int
export import def #extern #dllimport GetSubMenu(hMenu: *s_HMENU__, nPos: int) -> *s_HMENU__
export import def #extern #dllimport GetMenuItemID(hMenu: *s_HMENU__, nPos: int) -> uint
export import def #extern #dllimport GetMenuItemCount(hMenu: *s_HMENU__) -> int
export import def #extern #dllimport InsertMenuA(hMenu: *s_HMENU__, uPosition: uint, uFlags: uint, uIDNewItem: uint64, lpNewItem: *char) -> int
export import def #extern #dllimport InsertMenuW(hMenu: *s_HMENU__, uPosition: uint, uFlags: uint, uIDNewItem: uint64, lpNewItem: *ushort) -> int
export import def #extern #dllimport AppendMenuA(hMenu: *s_HMENU__, uFlags: uint, uIDNewItem: uint64, lpNewItem: *char) -> int
export import def #extern #dllimport AppendMenuW(hMenu: *s_HMENU__, uFlags: uint, uIDNewItem: uint64, lpNewItem: *ushort) -> int
export import def #extern #dllimport ModifyMenuA(hMnu: *s_HMENU__, uPosition: uint, uFlags: uint, uIDNewItem: uint64, lpNewItem: *char) -> int
export import def #extern #dllimport ModifyMenuW(hMnu: *s_HMENU__, uPosition: uint, uFlags: uint, uIDNewItem: uint64, lpNewItem: *ushort) -> int
export import def #extern #dllimport RemoveMenu(hMenu: *s_HMENU__, uPosition: uint, uFlags: uint) -> int
export import def #extern #dllimport DeleteMenu(hMenu: *s_HMENU__, uPosition: uint, uFlags: uint) -> int
export import def #extern #dllimport SetMenuItemBitmaps(hMenu: *s_HMENU__, uPosition: uint, uFlags: uint, hBitmapUnchecked: *s_HBITMAP__, hBitmapChecked: *s_HBITMAP__) -> int
export import def #extern #dllimport GetMenuCheckMarkDimensions() -> long
export import def #extern #dllimport TrackPopupMenu(hMenu: *s_HMENU__, uFlags: uint, x: int, y: int, nReserved: int, hWnd: *s_HWND__, prcRect: *RECT) -> int
export import def #extern #dllimport TrackPopupMenuEx(hMenu: *s_HMENU__, uFlags: uint, x: int, y: int, hwnd: *s_HWND__, lptpm: *TPMPARAMS) -> int
export import def #extern #dllimport CalculatePopupWindowPosition(anchorPoint: *POINT, windowSize: *SIZE, flags: uint, excludeRect: *RECT, popupWindowPosition: *RECT) -> int
export import def #extern #dllimport GetMenuInfo(_0: *s_HMENU__, _1: *MENUINFO) -> int
export import def #extern #dllimport SetMenuInfo(_0: *s_HMENU__, _1: *MENUINFO) -> int
export import def #extern #dllimport EndMenu() -> int
export import def #extern #dllimport InsertMenuItemA(hmenu: *s_HMENU__, item: uint, fByPosition: int, lpmi: *MENUITEMINFOA) -> int
export import def #extern #dllimport InsertMenuItemW(hmenu: *s_HMENU__, item: uint, fByPosition: int, lpmi: *MENUITEMINFOW) -> int
export import def #extern #dllimport GetMenuItemInfoA(hmenu: *s_HMENU__, item: uint, fByPosition: int, lpmii: *MENUITEMINFOA) -> int
export import def #extern #dllimport GetMenuItemInfoW(hmenu: *s_HMENU__, item: uint, fByPosition: int, lpmii: *MENUITEMINFOW) -> int
export import def #extern #dllimport SetMenuItemInfoA(hmenu: *s_HMENU__, item: uint, fByPositon: int, lpmii: *MENUITEMINFOA) -> int
export import def #extern #dllimport SetMenuItemInfoW(hmenu: *s_HMENU__, item: uint, fByPositon: int, lpmii: *MENUITEMINFOW) -> int
export import def #extern #dllimport GetMenuDefaultItem(hMenu: *s_HMENU__, fByPos: uint, gmdiFlags: uint) -> uint
export import def #extern #dllimport SetMenuDefaultItem(hMenu: *s_HMENU__, uItem: uint, fByPos: uint) -> int
export import def #extern #dllimport GetMenuItemRect(hWnd: *s_HWND__, hMenu: *s_HMENU__, uItem: uint, lprcItem: *RECT) -> int
export import def #extern #dllimport MenuItemFromPoint(hWnd: *s_HWND__, hMenu: *s_HMENU__, ptScreen: POINT) -> int
export import def #extern #dllimport DragObject(hwndParent: *s_HWND__, hwndFrom: *s_HWND__, fmt: uint, data: uint64, hcur: *s_HICON__) -> ulong
export import def #extern #dllimport DragDetect(hwnd: *s_HWND__, pt: POINT) -> int
export import def #extern #dllimport DrawIcon(hDC: *s_HDC__, X: int, Y: int, hIcon: *s_HICON__) -> int
export import def #extern #dllimport DrawTextA(hdc: *s_HDC__, lpchText: *char, cchText: int, lprc: *RECT, format: uint) -> int
export import def #extern #dllimport DrawTextW(hdc: *s_HDC__, lpchText: *ushort, cchText: int, lprc: *RECT, format: uint) -> int
export import def #extern #dllimport DrawTextExA(hdc: *s_HDC__, lpchText: *char, cchText: int, lprc: *RECT, format: uint, lpdtp: *DRAWTEXTPARAMS) -> int
export import def #extern #dllimport DrawTextExW(hdc: *s_HDC__, lpchText: *ushort, cchText: int, lprc: *RECT, format: uint, lpdtp: *DRAWTEXTPARAMS) -> int
export import def #extern #dllimport GrayStringA(hDC: *s_HDC__, hBrush: *s_HBRUSH__, lpOutputFunc: def (*s_HDC__, int64, int) -> (int), lpData: int64, nCount: int, X: int, Y: int, nWidth: int, nHeight: int) -> int
export import def #extern #dllimport GrayStringW(hDC: *s_HDC__, hBrush: *s_HBRUSH__, lpOutputFunc: def (*s_HDC__, int64, int) -> (int), lpData: int64, nCount: int, X: int, Y: int, nWidth: int, nHeight: int) -> int
export import def #extern #dllimport DrawStateA(hdc: *s_HDC__, hbrFore: *s_HBRUSH__, qfnCallBack: def (*s_HDC__, int64, uint64, int, int) -> (int), lData: int64, wData: uint64, x: int, y: int, cx: int, cy: int, uFlags: uint) -> int
export import def #extern #dllimport DrawStateW(hdc: *s_HDC__, hbrFore: *s_HBRUSH__, qfnCallBack: def (*s_HDC__, int64, uint64, int, int) -> (int), lData: int64, wData: uint64, x: int, y: int, cx: int, cy: int, uFlags: uint) -> int
export import def #extern #dllimport TabbedTextOutA(hdc: *s_HDC__, x: int, y: int, lpString: *char, chCount: int, nTabPositions: int, lpnTabStopPositions: *int, nTabOrigin: int) -> long
export import def #extern #dllimport TabbedTextOutW(hdc: *s_HDC__, x: int, y: int, lpString: *ushort, chCount: int, nTabPositions: int, lpnTabStopPositions: *int, nTabOrigin: int) -> long
export import def #extern #dllimport GetTabbedTextExtentA(hdc: *s_HDC__, lpString: *char, chCount: int, nTabPositions: int, lpnTabStopPositions: *int) -> ulong
export import def #extern #dllimport GetTabbedTextExtentW(hdc: *s_HDC__, lpString: *ushort, chCount: int, nTabPositions: int, lpnTabStopPositions: *int) -> ulong
export import def #extern #dllimport UpdateWindow(hWnd: *s_HWND__) -> int
export import def #extern #dllimport SetActiveWindow(hWnd: *s_HWND__) -> *s_HWND__
export import def #extern #dllimport GetForegroundWindow() -> *s_HWND__
export import def #extern #dllimport PaintDesktop(hdc: *s_HDC__) -> int
export import def #extern #dllimport SwitchToThisWindow(hwnd: *s_HWND__, fUnknown: int)
export import def #extern #dllimport SetForegroundWindow(hWnd: *s_HWND__) -> int
export import def #extern #dllimport AllowSetForegroundWindow(dwProcessId: ulong) -> int
export import def #extern #dllimport LockSetForegroundWindow(uLockCode: uint) -> int
export import def #extern #dllimport WindowFromDC(hDC: *s_HDC__) -> *s_HWND__
export import def #extern #dllimport GetDC(hWnd: *s_HWND__) -> *s_HDC__
export import def #extern #dllimport GetDCEx(hWnd: *s_HWND__, hrgnClip: *s_HRGN__, flags: ulong) -> *s_HDC__
export import def #extern #dllimport GetWindowDC(hWnd: *s_HWND__) -> *s_HDC__
export import def #extern #dllimport ReleaseDC(hWnd: *s_HWND__, hDC: *s_HDC__) -> int
export import def #extern #dllimport BeginPaint(hWnd: *s_HWND__, lpPaint: *PAINTSTRUCT) -> *s_HDC__
export import def #extern #dllimport EndPaint(hWnd: *s_HWND__, lpPaint: *PAINTSTRUCT) -> int
export import def #extern #dllimport GetUpdateRect(hWnd: *s_HWND__, lpRect: *RECT, bErase: int) -> int
export import def #extern #dllimport GetUpdateRgn(hWnd: *s_HWND__, hRgn: *s_HRGN__, bErase: int) -> int
export import def #extern #dllimport SetWindowRgn(hWnd: *s_HWND__, hRgn: *s_HRGN__, bRedraw: int) -> int
export import def #extern #dllimport GetWindowRgn(hWnd: *s_HWND__, hRgn: *s_HRGN__) -> int
export import def #extern #dllimport GetWindowRgnBox(hWnd: *s_HWND__, lprc: *RECT) -> int
export import def #extern #dllimport ExcludeUpdateRgn(hDC: *s_HDC__, hWnd: *s_HWND__) -> int
export import def #extern #dllimport InvalidateRect(hWnd: *s_HWND__, lpRect: *RECT, bErase: int) -> int
export import def #extern #dllimport ValidateRect(hWnd: *s_HWND__, lpRect: *RECT) -> int
export import def #extern #dllimport InvalidateRgn(hWnd: *s_HWND__, hRgn: *s_HRGN__, bErase: int) -> int
export import def #extern #dllimport ValidateRgn(hWnd: *s_HWND__, hRgn: *s_HRGN__) -> int
export import def #extern #dllimport RedrawWindow(hWnd: *s_HWND__, lprcUpdate: *RECT, hrgnUpdate: *s_HRGN__, flags: uint) -> int
export import def #extern #dllimport LockWindowUpdate(hWndLock: *s_HWND__) -> int
export import def #extern #dllimport ScrollWindow(hWnd: *s_HWND__, XAmount: int, YAmount: int, lpRect: *RECT, lpClipRect: *RECT) -> int
export import def #extern #dllimport ScrollDC(hDC: *s_HDC__, dx: int, dy: int, lprcScroll: *RECT, lprcClip: *RECT, hrgnUpdate: *s_HRGN__, lprcUpdate: *RECT) -> int
export import def #extern #dllimport ScrollWindowEx(hWnd: *s_HWND__, dx: int, dy: int, prcScroll: *RECT, prcClip: *RECT, hrgnUpdate: *s_HRGN__, prcUpdate: *RECT, flags: uint) -> int
export import def #extern #dllimport SetScrollPos(hWnd: *s_HWND__, nBar: int, nPos: int, bRedraw: int) -> int
export import def #extern #dllimport GetScrollPos(hWnd: *s_HWND__, nBar: int) -> int
export import def #extern #dllimport SetScrollRange(hWnd: *s_HWND__, nBar: int, nMinPos: int, nMaxPos: int, bRedraw: int) -> int
export import def #extern #dllimport GetScrollRange(hWnd: *s_HWND__, nBar: int, lpMinPos: *int, lpMaxPos: *int) -> int
export import def #extern #dllimport ShowScrollBar(hWnd: *s_HWND__, wBar: int, bShow: int) -> int
export import def #extern #dllimport EnableScrollBar(hWnd: *s_HWND__, wSBflags: uint, wArrows: uint) -> int
export import def #extern #dllimport SetPropA(hWnd: *s_HWND__, lpString: *char, hData: *) -> int
export import def #extern #dllimport SetPropW(hWnd: *s_HWND__, lpString: *ushort, hData: *) -> int
export import def #extern #dllimport GetPropA(hWnd: *s_HWND__, lpString: *char) -> *
export import def #extern #dllimport GetPropW(hWnd: *s_HWND__, lpString: *ushort) -> *
export import def #extern #dllimport RemovePropA(hWnd: *s_HWND__, lpString: *char) -> *
export import def #extern #dllimport RemovePropW(hWnd: *s_HWND__, lpString: *ushort) -> *
export import def #extern #dllimport EnumPropsExA(hWnd: *s_HWND__, lpEnumFunc: def (*s_HWND__, *char, *, uint64) -> (int), lParam: int64) -> int
export import def #extern #dllimport EnumPropsExW(hWnd: *s_HWND__, lpEnumFunc: def (*s_HWND__, *ushort, *, uint64) -> (int), lParam: int64) -> int
export import def #extern #dllimport EnumPropsA(hWnd: *s_HWND__, lpEnumFunc: def (*s_HWND__, *char, *) -> (int)) -> int
export import def #extern #dllimport EnumPropsW(hWnd: *s_HWND__, lpEnumFunc: def (*s_HWND__, *ushort, *) -> (int)) -> int
export import def #extern #dllimport SetWindowTextA(hWnd: *s_HWND__, lpString: *char) -> int
export import def #extern #dllimport SetWindowTextW(hWnd: *s_HWND__, lpString: *ushort) -> int
export import def #extern #dllimport GetWindowTextA(hWnd: *s_HWND__, lpString: *char, nMaxCount: int) -> int
export import def #extern #dllimport GetWindowTextW(hWnd: *s_HWND__, lpString: *ushort, nMaxCount: int) -> int
export import def #extern #dllimport GetWindowTextLengthA(hWnd: *s_HWND__) -> int
export import def #extern #dllimport GetWindowTextLengthW(hWnd: *s_HWND__) -> int
export import def #extern #dllimport GetClientRect(hWnd: *s_HWND__, lpRect: *RECT) -> int
export import def #extern #dllimport GetWindowRect(hWnd: *s_HWND__, lpRect: *RECT) -> int
export import def #extern #dllimport AdjustWindowRect(lpRect: *RECT, dwStyle: ulong, bMenu: int) -> int
export import def #extern #dllimport AdjustWindowRectEx(lpRect: *RECT, dwStyle: ulong, bMenu: int, dwExStyle: ulong) -> int
export import def #extern #dllimport AdjustWindowRectExForDpi(lpRect: *RECT, dwStyle: ulong, bMenu: int, dwExStyle: ulong, dpi: uint) -> int
export import def #extern #dllimport SetWindowContextHelpId(_0: *s_HWND__, _1: ulong) -> int
export import def #extern #dllimport GetWindowContextHelpId(_0: *s_HWND__) -> ulong
export import def #extern #dllimport SetMenuContextHelpId(_0: *s_HMENU__, _1: ulong) -> int
export import def #extern #dllimport GetMenuContextHelpId(_0: *s_HMENU__) -> ulong
export import def #extern #dllimport MessageBoxA(hWnd: *s_HWND__, lpText: *char, lpCaption: *char, uType: uint) -> int
export import def #extern #dllimport MessageBoxW(hWnd: *s_HWND__, lpText: *ushort, lpCaption: *ushort, uType: uint) -> int
export import def #extern #dllimport MessageBoxExA(hWnd: *s_HWND__, lpText: *char, lpCaption: *char, uType: uint, wLanguageId: ushort) -> int
export import def #extern #dllimport MessageBoxExW(hWnd: *s_HWND__, lpText: *ushort, lpCaption: *ushort, uType: uint, wLanguageId: ushort) -> int
export import def #extern #dllimport MessageBoxIndirectA(lpmbp: *MSGBOXPARAMSA) -> int
export import def #extern #dllimport MessageBoxIndirectW(lpmbp: *MSGBOXPARAMSW) -> int
export import def #extern #dllimport MessageBeep(uType: uint) -> int
export import def #extern #dllimport ShowCursor(bShow: int) -> int
export import def #extern #dllimport SetCursorPos(X: int, Y: int) -> int
export import def #extern #dllimport SetPhysicalCursorPos(X: int, Y: int) -> int
export import def #extern #dllimport SetCursor(hCursor: *s_HICON__) -> *s_HICON__
export import def #extern #dllimport GetCursorPos(lpPoint: *POINT) -> int
export import def #extern #dllimport GetPhysicalCursorPos(lpPoint: *POINT) -> int
export import def #extern #dllimport GetClipCursor(lpRect: *RECT) -> int
export import def #extern #dllimport GetCursor() -> *s_HICON__
export import def #extern #dllimport CreateCaret(hWnd: *s_HWND__, hBitmap: *s_HBITMAP__, nWidth: int, nHeight: int) -> int
export import def #extern #dllimport GetCaretBlinkTime() -> uint
export import def #extern #dllimport SetCaretBlinkTime(uMSeconds: uint) -> int
export import def #extern #dllimport DestroyCaret() -> int
export import def #extern #dllimport HideCaret(hWnd: *s_HWND__) -> int
export import def #extern #dllimport ShowCaret(hWnd: *s_HWND__) -> int
export import def #extern #dllimport SetCaretPos(X: int, Y: int) -> int
export import def #extern #dllimport GetCaretPos(lpPoint: *POINT) -> int
export import def #extern #dllimport ClientToScreen(hWnd: *s_HWND__, lpPoint: *POINT) -> int
export import def #extern #dllimport ScreenToClient(hWnd: *s_HWND__, lpPoint: *POINT) -> int
export import def #extern #dllimport LogicalToPhysicalPoint(hWnd: *s_HWND__, lpPoint: *POINT) -> int
export import def #extern #dllimport PhysicalToLogicalPoint(hWnd: *s_HWND__, lpPoint: *POINT) -> int
export import def #extern #dllimport LogicalToPhysicalPointForPerMonitorDPI(hWnd: *s_HWND__, lpPoint: *POINT) -> int
export import def #extern #dllimport PhysicalToLogicalPointForPerMonitorDPI(hWnd: *s_HWND__, lpPoint: *POINT) -> int
export import def #extern #dllimport MapWindowPoints(hWndFrom: *s_HWND__, hWndTo: *s_HWND__, lpPoints: *POINT, cPoints: uint) -> int
export import def #extern #dllimport WindowFromPoint(Point: POINT) -> *s_HWND__
export import def #extern #dllimport WindowFromPhysicalPoint(Point: POINT) -> *s_HWND__
export import def #extern #dllimport ChildWindowFromPoint(hWndParent: *s_HWND__, Point: POINT) -> *s_HWND__
export import def #extern #dllimport ClipCursor(lpRect: *RECT) -> int
export import def #extern #dllimport ChildWindowFromPointEx(hwnd: *s_HWND__, pt: POINT, flags: uint) -> *s_HWND__
export import def #extern #dllimport GetSysColor(nIndex: int) -> ulong
export import def #extern #dllimport GetSysColorBrush(nIndex: int) -> *s_HBRUSH__
export import def #extern #dllimport SetSysColors(cElements: int, lpaElements: *int, lpaRgbValues: *ulong) -> int
export import def #extern #dllimport DrawFocusRect(hDC: *s_HDC__, lprc: *RECT) -> int
export import def #extern #dllimport FillRect(hDC: *s_HDC__, lprc: *RECT, hbr: *s_HBRUSH__) -> int
export import def #extern #dllimport FrameRect(hDC: *s_HDC__, lprc: *RECT, hbr: *s_HBRUSH__) -> int
export import def #extern #dllimport InvertRect(hDC: *s_HDC__, lprc: *RECT) -> int
export import def #extern #dllimport SetRect(lprc: *RECT, xLeft: int, yTop: int, xRight: int, yBottom: int) -> int
export import def #extern #dllimport SetRectEmpty(lprc: *RECT) -> int
export import def #extern #dllimport CopyRect(lprcDst: *RECT, lprcSrc: *RECT) -> int
export import def #extern #dllimport InflateRect(lprc: *RECT, dx: int, dy: int) -> int
export import def #extern #dllimport IntersectRect(lprcDst: *RECT, lprcSrc1: *RECT, lprcSrc2: *RECT) -> int
export import def #extern #dllimport UnionRect(lprcDst: *RECT, lprcSrc1: *RECT, lprcSrc2: *RECT) -> int
export import def #extern #dllimport SubtractRect(lprcDst: *RECT, lprcSrc1: *RECT, lprcSrc2: *RECT) -> int
export import def #extern #dllimport OffsetRect(lprc: *RECT, dx: int, dy: int) -> int
export import def #extern #dllimport IsRectEmpty(lprc: *RECT) -> int
export import def #extern #dllimport EqualRect(lprc1: *RECT, lprc2: *RECT) -> int
export import def #extern #dllimport PtInRect(lprc: *RECT, pt: POINT) -> int
export import def #extern #dllimport GetWindowWord(hWnd: *s_HWND__, nIndex: int) -> ushort
export import def #extern #dllimport SetWindowWord(hWnd: *s_HWND__, nIndex: int, wNewWord: ushort) -> ushort
export import def #extern #dllimport GetWindowLongA(hWnd: *s_HWND__, nIndex: int) -> long
export import def #extern #dllimport GetWindowLongW(hWnd: *s_HWND__, nIndex: int) -> long
export import def #extern #dllimport SetWindowLongA(hWnd: *s_HWND__, nIndex: int, dwNewLong: long) -> long
export import def #extern #dllimport SetWindowLongW(hWnd: *s_HWND__, nIndex: int, dwNewLong: long) -> long
export import def #extern #dllimport GetWindowLongPtrA(hWnd: *s_HWND__, nIndex: int) -> int64
export import def #extern #dllimport GetWindowLongPtrW(hWnd: *s_HWND__, nIndex: int) -> int64
export import def #extern #dllimport SetWindowLongPtrA(hWnd: *s_HWND__, nIndex: int, dwNewLong: int64) -> int64
export import def #extern #dllimport SetWindowLongPtrW(hWnd: *s_HWND__, nIndex: int, dwNewLong: int64) -> int64
export import def #extern #dllimport GetClassWord(hWnd: *s_HWND__, nIndex: int) -> ushort
export import def #extern #dllimport SetClassWord(hWnd: *s_HWND__, nIndex: int, wNewWord: ushort) -> ushort
export import def #extern #dllimport GetClassLongA(hWnd: *s_HWND__, nIndex: int) -> ulong
export import def #extern #dllimport GetClassLongW(hWnd: *s_HWND__, nIndex: int) -> ulong
export import def #extern #dllimport SetClassLongA(hWnd: *s_HWND__, nIndex: int, dwNewLong: long) -> ulong
export import def #extern #dllimport SetClassLongW(hWnd: *s_HWND__, nIndex: int, dwNewLong: long) -> ulong
export import def #extern #dllimport GetClassLongPtrA(hWnd: *s_HWND__, nIndex: int) -> uint64
export import def #extern #dllimport GetClassLongPtrW(hWnd: *s_HWND__, nIndex: int) -> uint64
export import def #extern #dllimport SetClassLongPtrA(hWnd: *s_HWND__, nIndex: int, dwNewLong: int64) -> uint64
export import def #extern #dllimport SetClassLongPtrW(hWnd: *s_HWND__, nIndex: int, dwNewLong: int64) -> uint64
export import def #extern #dllimport GetProcessDefaultLayout(pdwDefaultLayout: *ulong) -> int
export import def #extern #dllimport SetProcessDefaultLayout(dwDefaultLayout: ulong) -> int
export import def #extern #dllimport GetDesktopWindow() -> *s_HWND__
export import def #extern #dllimport GetParent(hWnd: *s_HWND__) -> *s_HWND__
export import def #extern #dllimport SetParent(hWndChild: *s_HWND__, hWndNewParent: *s_HWND__) -> *s_HWND__
export import def #extern #dllimport EnumChildWindows(hWndParent: *s_HWND__, lpEnumFunc: def (*s_HWND__, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport FindWindowA(lpClassName: *char, lpWindowName: *char) -> *s_HWND__
export import def #extern #dllimport FindWindowW(lpClassName: *ushort, lpWindowName: *ushort) -> *s_HWND__
export import def #extern #dllimport FindWindowExA(hWndParent: *s_HWND__, hWndChildAfter: *s_HWND__, lpszClass: *char, lpszWindow: *char) -> *s_HWND__
export import def #extern #dllimport FindWindowExW(hWndParent: *s_HWND__, hWndChildAfter: *s_HWND__, lpszClass: *ushort, lpszWindow: *ushort) -> *s_HWND__
export import def #extern #dllimport GetShellWindow() -> *s_HWND__
export import def #extern #dllimport RegisterShellHookWindow(hwnd: *s_HWND__) -> int
export import def #extern #dllimport DeregisterShellHookWindow(hwnd: *s_HWND__) -> int
export import def #extern #dllimport EnumWindows(lpEnumFunc: def (*s_HWND__, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport EnumThreadWindows(dwThreadId: ulong, lpfn: def (*s_HWND__, int64) -> (int), lParam: int64) -> int
export import def #extern #dllimport GetClassNameA(hWnd: *s_HWND__, lpClassName: *char, nMaxCount: int) -> int
export import def #extern #dllimport GetClassNameW(hWnd: *s_HWND__, lpClassName: *ushort, nMaxCount: int) -> int
export import def #extern #dllimport GetTopWindow(hWnd: *s_HWND__) -> *s_HWND__
export import def #extern #dllimport GetWindowThreadProcessId(hWnd: *s_HWND__, lpdwProcessId: *ulong) -> ulong
export import def #extern #dllimport IsGUIThread(bConvert: int) -> int
export import def #extern #dllimport GetLastActivePopup(hWnd: *s_HWND__) -> *s_HWND__
export import def #extern #dllimport GetWindow(hWnd: *s_HWND__, uCmd: uint) -> *s_HWND__
export import def #extern #dllimport SetWindowsHookA(nFilterType: int, pfnFilterProc: def (int, uint64, int64) -> (int64)) -> *s_HHOOK__
export import def #extern #dllimport SetWindowsHookW(nFilterType: int, pfnFilterProc: def (int, uint64, int64) -> (int64)) -> *s_HHOOK__
export import def #extern #dllimport UnhookWindowsHook(nCode: int, pfnFilterProc: def (int, uint64, int64) -> (int64)) -> int
export import def #extern #dllimport SetWindowsHookExA(idHook: int, lpfn: def (int, uint64, int64) -> (int64), hmod: *s_HINSTANCE__, dwThreadId: ulong) -> *s_HHOOK__
export import def #extern #dllimport SetWindowsHookExW(idHook: int, lpfn: def (int, uint64, int64) -> (int64), hmod: *s_HINSTANCE__, dwThreadId: ulong) -> *s_HHOOK__
export import def #extern #dllimport UnhookWindowsHookEx(hhk: *s_HHOOK__) -> int
export import def #extern #dllimport CallNextHookEx(hhk: *s_HHOOK__, nCode: int, wParam: uint64, lParam: int64) -> int64
export import def #extern #dllimport CheckMenuRadioItem(hmenu: *s_HMENU__, first: uint, last: uint, check: uint, flags: uint) -> int
export import def #extern #dllimport LoadBitmapA(hInstance: *s_HINSTANCE__, lpBitmapName: *char) -> *s_HBITMAP__
export import def #extern #dllimport LoadBitmapW(hInstance: *s_HINSTANCE__, lpBitmapName: *ushort) -> *s_HBITMAP__
export import def #extern #dllimport LoadCursorA(hInstance: *s_HINSTANCE__, lpCursorName: *char) -> *s_HICON__
export import def #extern #dllimport LoadCursorW(hInstance: *s_HINSTANCE__, lpCursorName: *ushort) -> *s_HICON__
export import def #extern #dllimport LoadCursorFromFileA(lpFileName: *char) -> *s_HICON__
export import def #extern #dllimport LoadCursorFromFileW(lpFileName: *ushort) -> *s_HICON__
export import def #extern #dllimport CreateCursor(hInst: *s_HINSTANCE__, xHotSpot: int, yHotSpot: int, nWidth: int, nHeight: int, pvANDPlane: *, pvXORPlane: *) -> *s_HICON__
export import def #extern #dllimport DestroyCursor(hCursor: *s_HICON__) -> int
export import def #extern #dllimport SetSystemCursor(hcur: *s_HICON__, id: ulong) -> int
export import def #extern #dllimport LoadIconA(hInstance: *s_HINSTANCE__, lpIconName: *char) -> *s_HICON__
export import def #extern #dllimport LoadIconW(hInstance: *s_HINSTANCE__, lpIconName: *ushort) -> *s_HICON__
export import def #extern #dllimport PrivateExtractIconsA(szFileName: *char, nIconIndex: int, cxIcon: int, cyIcon: int, phicon: **s_HICON__, piconid: *uint, nIcons: uint, flags: uint) -> uint
export import def #extern #dllimport PrivateExtractIconsW(szFileName: *ushort, nIconIndex: int, cxIcon: int, cyIcon: int, phicon: **s_HICON__, piconid: *uint, nIcons: uint, flags: uint) -> uint
export import def #extern #dllimport CreateIcon(hInstance: *s_HINSTANCE__, nWidth: int, nHeight: int, cPlanes: char, cBitsPixel: char, lpbANDbits: *char, lpbXORbits: *char) -> *s_HICON__
export import def #extern #dllimport DestroyIcon(hIcon: *s_HICON__) -> int
export import def #extern #dllimport LookupIconIdFromDirectory(presbits: *char, fIcon: int) -> int
export import def #extern #dllimport LookupIconIdFromDirectoryEx(presbits: *char, fIcon: int, cxDesired: int, cyDesired: int, Flags: uint) -> int
export import def #extern #dllimport CreateIconFromResource(presbits: *char, dwResSize: ulong, fIcon: int, dwVer: ulong) -> *s_HICON__
export import def #extern #dllimport CreateIconFromResourceEx(presbits: *char, dwResSize: ulong, fIcon: int, dwVer: ulong, cxDesired: int, cyDesired: int, Flags: uint) -> *s_HICON__
export import def #extern #dllimport LoadImageA(hInst: *s_HINSTANCE__, name: *char, type_: uint, cx: int, cy: int, fuLoad: uint) -> *
export import def #extern #dllimport LoadImageW(hInst: *s_HINSTANCE__, name: *ushort, type_: uint, cx: int, cy: int, fuLoad: uint) -> *
export import def #extern #dllimport CopyImage(h: *, type_: uint, cx: int, cy: int, flags: uint) -> *
export import def #extern #dllimport DrawIconEx(hdc: *s_HDC__, xLeft: int, yTop: int, hIcon: *s_HICON__, cxWidth: int, cyWidth: int, istepIfAniCur: uint, hbrFlickerFreeDraw: *s_HBRUSH__, diFlags: uint) -> int
export import def #extern #dllimport CreateIconIndirect(piconinfo: *ICONINFO) -> *s_HICON__
export import def #extern #dllimport CopyIcon(hIcon: *s_HICON__) -> *s_HICON__
export import def #extern #dllimport GetIconInfo(hIcon: *s_HICON__, piconinfo: *ICONINFO) -> int
export import def #extern #dllimport GetIconInfoExA(hicon: *s_HICON__, piconinfo: *ICONINFOEXA) -> int
export import def #extern #dllimport GetIconInfoExW(hicon: *s_HICON__, piconinfo: *ICONINFOEXW) -> int
export import def #extern #dllimport IsDialogMessageA(hDlg: *s_HWND__, lpMsg: *MSG) -> int
export import def #extern #dllimport IsDialogMessageW(hDlg: *s_HWND__, lpMsg: *MSG) -> int
export import def #extern #dllimport MapDialogRect(hDlg: *s_HWND__, lpRect: *RECT) -> int
export import def #extern #dllimport DlgDirListA(hDlg: *s_HWND__, lpPathSpec: *char, nIDListBox: int, nIDStaticPath: int, uFileType: uint) -> int
export import def #extern #dllimport DlgDirListW(hDlg: *s_HWND__, lpPathSpec: *ushort, nIDListBox: int, nIDStaticPath: int, uFileType: uint) -> int
export import def #extern #dllimport DlgDirSelectExA(hwndDlg: *s_HWND__, lpString: *char, chCount: int, idListBox: int) -> int
export import def #extern #dllimport DlgDirSelectExW(hwndDlg: *s_HWND__, lpString: *ushort, chCount: int, idListBox: int) -> int
export import def #extern #dllimport DlgDirListComboBoxA(hDlg: *s_HWND__, lpPathSpec: *char, nIDComboBox: int, nIDStaticPath: int, uFiletype: uint) -> int
export import def #extern #dllimport DlgDirListComboBoxW(hDlg: *s_HWND__, lpPathSpec: *ushort, nIDComboBox: int, nIDStaticPath: int, uFiletype: uint) -> int
export import def #extern #dllimport DlgDirSelectComboBoxExA(hwndDlg: *s_HWND__, lpString: *char, cchOut: int, idComboBox: int) -> int
export import def #extern #dllimport DlgDirSelectComboBoxExW(hwndDlg: *s_HWND__, lpString: *ushort, cchOut: int, idComboBox: int) -> int
export import def #extern #dllimport SetScrollInfo(hwnd: *s_HWND__, nBar: int, lpsi: *SCROLLINFO, redraw: int) -> int
export import def #extern #dllimport GetScrollInfo(hwnd: *s_HWND__, nBar: int, lpsi: *SCROLLINFO) -> int
export import def #extern #dllimport DefFrameProcA(hWnd: *s_HWND__, hWndMDIClient: *s_HWND__, uMsg: uint, wParam: uint64, lParam: int64) -> int64
export import def #extern #dllimport DefFrameProcW(hWnd: *s_HWND__, hWndMDIClient: *s_HWND__, uMsg: uint, wParam: uint64, lParam: int64) -> int64
export import def #extern #dllimport DefMDIChildProcA(hWnd: *s_HWND__, uMsg: uint, wParam: uint64, lParam: int64) -> int64
export import def #extern #dllimport DefMDIChildProcW(hWnd: *s_HWND__, uMsg: uint, wParam: uint64, lParam: int64) -> int64
export import def #extern #dllimport TranslateMDISysAccel(hWndClient: *s_HWND__, lpMsg: *MSG) -> int
export import def #extern #dllimport ArrangeIconicWindows(hWnd: *s_HWND__) -> uint
export import def #extern #dllimport CreateMDIWindowA(lpClassName: *char, lpWindowName: *char, dwStyle: ulong, X: int, Y: int, nWidth: int, nHeight: int, hWndParent: *s_HWND__, hInstance: *s_HINSTANCE__, lParam: int64) -> *s_HWND__
export import def #extern #dllimport CreateMDIWindowW(lpClassName: *ushort, lpWindowName: *ushort, dwStyle: ulong, X: int, Y: int, nWidth: int, nHeight: int, hWndParent: *s_HWND__, hInstance: *s_HINSTANCE__, lParam: int64) -> *s_HWND__
export import def #extern #dllimport TileWindows(hwndParent: *s_HWND__, wHow: uint, lpRect: *RECT, cKids: uint, lpKids: **s_HWND__) -> ushort
export import def #extern #dllimport CascadeWindows(hwndParent: *s_HWND__, wHow: uint, lpRect: *RECT, cKids: uint, lpKids: **s_HWND__) -> ushort
export import def #extern #dllimport WinHelpA(hWndMain: *s_HWND__, lpszHelp: *char, uCommand: uint, dwData: uint64) -> int
export import def #extern #dllimport WinHelpW(hWndMain: *s_HWND__, lpszHelp: *ushort, uCommand: uint, dwData: uint64) -> int
export import def #extern #dllimport GetGuiResources(hProcess: *, uiFlags: ulong) -> ulong
export import def #extern #dllimport ChangeDisplaySettingsA(lpDevMode: *DEVMODEA, dwFlags: ulong) -> long
export import def #extern #dllimport ChangeDisplaySettingsW(lpDevMode: *DEVMODEW, dwFlags: ulong) -> long
export import def #extern #dllimport ChangeDisplaySettingsExA(lpszDeviceName: *char, lpDevMode: *DEVMODEA, hwnd: *s_HWND__, dwflags: ulong, lParam: *) -> long
export import def #extern #dllimport ChangeDisplaySettingsExW(lpszDeviceName: *ushort, lpDevMode: *DEVMODEW, hwnd: *s_HWND__, dwflags: ulong, lParam: *) -> long
export import def #extern #dllimport EnumDisplaySettingsA(lpszDeviceName: *char, iModeNum: ulong, lpDevMode: *DEVMODEA) -> int
export import def #extern #dllimport EnumDisplaySettingsW(lpszDeviceName: *ushort, iModeNum: ulong, lpDevMode: *DEVMODEW) -> int
export import def #extern #dllimport EnumDisplaySettingsExA(lpszDeviceName: *char, iModeNum: ulong, lpDevMode: *DEVMODEA, dwFlags: ulong) -> int
export import def #extern #dllimport EnumDisplaySettingsExW(lpszDeviceName: *ushort, iModeNum: ulong, lpDevMode: *DEVMODEW, dwFlags: ulong) -> int
export import def #extern #dllimport EnumDisplayDevicesA(lpDevice: *char, iDevNum: ulong, lpDisplayDevice: *DISPLAY_DEVICEA, dwFlags: ulong) -> int
export import def #extern #dllimport EnumDisplayDevicesW(lpDevice: *ushort, iDevNum: ulong, lpDisplayDevice: *DISPLAY_DEVICEW, dwFlags: ulong) -> int
export import def #extern #dllimport GetDisplayConfigBufferSizes(flags: uint, numPathArrayElements: *uint, numModeInfoArrayElements: *uint) -> long
export import def #extern #dllimport SetDisplayConfig(numPathArrayElements: uint, pathArray: *DISPLAYCONFIG_PATH_INFO, numModeInfoArrayElements: uint, modeInfoArray: *DISPLAYCONFIG_MODE_INFO, flags: uint) -> long
export import def #extern #dllimport QueryDisplayConfig(flags: uint, numPathArrayElements: *uint, pathArray: *DISPLAYCONFIG_PATH_INFO, numModeInfoArrayElements: *uint, modeInfoArray: *DISPLAYCONFIG_MODE_INFO, currentTopologyId: *DISPLAYCONFIG_TOPOLOGY_ID) -> long
export import def #extern #dllimport DisplayConfigGetDeviceInfo(requestPacket: *DISPLAYCONFIG_DEVICE_INFO_HEADER) -> long
export import def #extern #dllimport DisplayConfigSetDeviceInfo(setPacket: *DISPLAYCONFIG_DEVICE_INFO_HEADER) -> long
export import def #extern #dllimport SystemParametersInfoA(uiAction: uint, uiParam: uint, pvParam: *, fWinIni: uint) -> int
export import def #extern #dllimport SystemParametersInfoW(uiAction: uint, uiParam: uint, pvParam: *, fWinIni: uint) -> int
export import def #extern #dllimport SystemParametersInfoForDpi(uiAction: uint, uiParam: uint, pvParam: *, fWinIni: uint, dpi: uint) -> int
export import def #extern #dllimport SoundSentry() -> int
export import def #extern #dllimport SetDebugErrorLevel(dwLevel: ulong)
export import def #extern #dllimport SetLastErrorEx(dwErrCode: ulong, dwType: ulong)
export import def #extern #dllimport InternalGetWindowText(hWnd: *s_HWND__, pString: *ushort, cchMaxCount: int) -> int
export import def #extern #dllimport CancelShutdown() -> int
export import def #extern #dllimport MonitorFromPoint(pt: POINT, dwFlags: ulong) -> *s_HMONITOR__
export import def #extern #dllimport MonitorFromRect(lprc: *RECT, dwFlags: ulong) -> *s_HMONITOR__
export import def #extern #dllimport MonitorFromWindow(hwnd: *s_HWND__, dwFlags: ulong) -> *s_HMONITOR__
export import def #extern #dllimport GetMonitorInfoA(hMonitor: *s_HMONITOR__, lpmi: *MONITORINFO) -> int
export import def #extern #dllimport GetMonitorInfoW(hMonitor: *s_HMONITOR__, lpmi: *MONITORINFO) -> int
export import def #extern #dllimport EnumDisplayMonitors(hdc: *s_HDC__, lprcClip: *RECT, lpfnEnum: def (*s_HMONITOR__, *s_HDC__, *RECT, int64) -> (int), dwData: int64) -> int
export import def #extern #dllimport NotifyWinEvent(event: ulong, hwnd: *s_HWND__, idObject: long, idChild: long)
export import def #extern #dllimport SetWinEventHook(eventMin: ulong, eventMax: ulong, hmodWinEventProc: *s_HINSTANCE__, pfnWinEventProc: def (*s_HWINEVENTHOOK__, ulong, *s_HWND__, long, long, ulong, ulong) -> (), idProcess: ulong, idThread: ulong, dwFlags: ulong) -> *s_HWINEVENTHOOK__
export import def #extern #dllimport IsWinEventHookInstalled(event: ulong) -> int
export import def #extern #dllimport UnhookWinEvent(hWinEventHook: *s_HWINEVENTHOOK__) -> int
export import def #extern #dllimport GetGUIThreadInfo(idThread: ulong, pgui: *GUITHREADINFO) -> int
export import def #extern #dllimport BlockInput(fBlockIt: int) -> int
export import def #extern #dllimport SetProcessDPIAware() -> int
export import def #extern #dllimport IsProcessDPIAware() -> int
export import def #extern #dllimport SetThreadDpiAwarenessContext(dpiContext: *s_DPI_AWARENESS_CONTEXT__) -> *s_DPI_AWARENESS_CONTEXT__
export import def #extern #dllimport GetThreadDpiAwarenessContext() -> *s_DPI_AWARENESS_CONTEXT__
export import def #extern #dllimport GetWindowDpiAwarenessContext(hwnd: *s_HWND__) -> *s_DPI_AWARENESS_CONTEXT__
export import def #extern #dllimport GetAwarenessFromDpiAwarenessContext(value: *s_DPI_AWARENESS_CONTEXT__) -> DPI_AWARENESS
export import def #extern #dllimport GetDpiFromDpiAwarenessContext(value: *s_DPI_AWARENESS_CONTEXT__) -> uint
export import def #extern #dllimport AreDpiAwarenessContextsEqual(dpiContextA: *s_DPI_AWARENESS_CONTEXT__, dpiContextB: *s_DPI_AWARENESS_CONTEXT__) -> int
export import def #extern #dllimport IsValidDpiAwarenessContext(value: *s_DPI_AWARENESS_CONTEXT__) -> int
export import def #extern #dllimport GetDpiForWindow(hwnd: *s_HWND__) -> uint
export import def #extern #dllimport GetDpiForSystem() -> uint
export import def #extern #dllimport GetSystemDpiForProcess(hProcess: *) -> uint
export import def #extern #dllimport EnableNonClientDpiScaling(hwnd: *s_HWND__) -> int
export import def #extern #dllimport InheritWindowMonitor(hwnd: *s_HWND__, hwndInherit: *s_HWND__) -> int
export import def #extern #dllimport SetProcessDpiAwarenessContext(value: *s_DPI_AWARENESS_CONTEXT__) -> int
export import def #extern #dllimport GetDpiAwarenessContextForProcess(hProcess: *) -> *s_DPI_AWARENESS_CONTEXT__
export import def #extern #dllimport SetThreadDpiHostingBehavior(value: DPI_HOSTING_BEHAVIOR) -> DPI_HOSTING_BEHAVIOR
export import def #extern #dllimport GetThreadDpiHostingBehavior() -> DPI_HOSTING_BEHAVIOR
export import def #extern #dllimport GetWindowDpiHostingBehavior(hwnd: *s_HWND__) -> DPI_HOSTING_BEHAVIOR
export import def #extern #dllimport GetWindowModuleFileNameA(hwnd: *s_HWND__, pszFileName: *char, cchFileNameMax: uint) -> uint
export import def #extern #dllimport GetWindowModuleFileNameW(hwnd: *s_HWND__, pszFileName: *ushort, cchFileNameMax: uint) -> uint
export import def #extern #dllimport GetCursorInfo(pci: *CURSORINFO) -> int
export import def #extern #dllimport GetWindowInfo(hwnd: *s_HWND__, pwi: *WINDOWINFO) -> int
export import def #extern #dllimport GetTitleBarInfo(hwnd: *s_HWND__, pti: *TITLEBARINFO) -> int
export import def #extern #dllimport GetMenuBarInfo(hwnd: *s_HWND__, idObject: long, idItem: long, pmbi: *MENUBARINFO) -> int
export import def #extern #dllimport GetScrollBarInfo(hwnd: *s_HWND__, idObject: long, psbi: *SCROLLBARINFO) -> int
export import def #extern #dllimport GetComboBoxInfo(hwndCombo: *s_HWND__, pcbi: *COMBOBOXINFO) -> int
export import def #extern #dllimport GetAncestor(hwnd: *s_HWND__, gaFlags: uint) -> *s_HWND__
export import def #extern #dllimport RealChildWindowFromPoint(hwndParent: *s_HWND__, ptParentClientCoords: POINT) -> *s_HWND__
export import def #extern #dllimport RealGetWindowClassA(hwnd: *s_HWND__, ptszClassName: *char, cchClassNameMax: uint) -> uint
export import def #extern #dllimport RealGetWindowClassW(hwnd: *s_HWND__, ptszClassName: *ushort, cchClassNameMax: uint) -> uint
export import def #extern #dllimport GetAltTabInfoA(hwnd: *s_HWND__, iItem: int, pati: *ALTTABINFO, pszItemText: *char, cchItemText: uint) -> int
export import def #extern #dllimport GetAltTabInfoW(hwnd: *s_HWND__, iItem: int, pati: *ALTTABINFO, pszItemText: *ushort, cchItemText: uint) -> int
export import def #extern #dllimport GetListBoxInfo(hwnd: *s_HWND__) -> ulong
export import def #extern #dllimport LockWorkStation() -> int
export import def #extern #dllimport UserHandleGrantAccess(hUserHandle: *, hJob: *, bGrant: int) -> int
export import def #extern #dllimport GetRawInputData(hRawInput: *s_HRAWINPUT__, uiCommand: uint, pData: *, pcbSize: *uint, cbSizeHeader: uint) -> uint
export import def #extern #dllimport GetRawInputDeviceInfoA(hDevice: *, uiCommand: uint, pData: *, pcbSize: *uint) -> uint
export import def #extern #dllimport GetRawInputDeviceInfoW(hDevice: *, uiCommand: uint, pData: *, pcbSize: *uint) -> uint
export import def #extern #dllimport GetRawInputBuffer(pData: *RAWINPUT, pcbSize: *uint, cbSizeHeader: uint) -> uint
export import def #extern #dllimport RegisterRawInputDevices(pRawInputDevices: *RAWINPUTDEVICE, uiNumDevices: uint, cbSize: uint) -> int
export import def #extern #dllimport GetRegisteredRawInputDevices(pRawInputDevices: *RAWINPUTDEVICE, puiNumDevices: *uint, cbSize: uint) -> uint
export import def #extern #dllimport GetRawInputDeviceList(pRawInputDeviceList: *RAWINPUTDEVICELIST, puiNumDevices: *uint, cbSize: uint) -> uint
export import def #extern #dllimport DefRawInputProc(paRawInput: **RAWINPUT, nInput: int, cbSizeHeader: uint) -> int64
export import def #extern #dllimport GetPointerDevices(deviceCount: *uint, pointerDevices: *POINTER_DEVICE_INFO) -> int
export import def #extern #dllimport GetPointerDevice(device: *, pointerDevice: *POINTER_DEVICE_INFO) -> int
export import def #extern #dllimport GetPointerDeviceProperties(device: *, propertyCount: *uint, pointerProperties: *POINTER_DEVICE_PROPERTY) -> int
export import def #extern #dllimport RegisterPointerDeviceNotifications(window: *s_HWND__, notifyRange: int) -> int
export import def #extern #dllimport GetPointerDeviceRects(device: *, pointerDeviceRect: *RECT, displayRect: *RECT) -> int
export import def #extern #dllimport GetPointerDeviceCursors(device: *, cursorCount: *uint, deviceCursors: *POINTER_DEVICE_CURSOR_INFO) -> int
export import def #extern #dllimport GetRawPointerDeviceData(pointerId: uint, historyCount: uint, propertiesCount: uint, pProperties: *POINTER_DEVICE_PROPERTY, pValues: *long) -> int
export import def #extern #dllimport ChangeWindowMessageFilter(message: uint, dwFlag: ulong) -> int
export import def #extern #dllimport ChangeWindowMessageFilterEx(hwnd: *s_HWND__, message: uint, action: ulong, pChangeFilterStruct: *CHANGEFILTERSTRUCT) -> int
export import def #extern #dllimport GetGestureInfo(hGestureInfo: *s_HGESTUREINFO__, pGestureInfo: *GESTUREINFO) -> int
export import def #extern #dllimport GetGestureExtraArgs(hGestureInfo: *s_HGESTUREINFO__, cbExtraArgs: uint, pExtraArgs: *char) -> int
export import def #extern #dllimport CloseGestureInfoHandle(hGestureInfo: *s_HGESTUREINFO__) -> int
export import def #extern #dllimport SetGestureConfig(hwnd: *s_HWND__, dwReserved: ulong, cIDs: uint, pGestureConfig: *GESTURECONFIG, cbSize: uint) -> int
export import def #extern #dllimport GetGestureConfig(hwnd: *s_HWND__, dwReserved: ulong, dwFlags: ulong, pcIDs: *uint, pGestureConfig: *GESTURECONFIG, cbSize: uint) -> int
export import def #extern #dllimport ShutdownBlockReasonCreate(hWnd: *s_HWND__, pwszReason: *ushort) -> int
export import def #extern #dllimport ShutdownBlockReasonQuery(hWnd: *s_HWND__, pwszBuff: *ushort, pcchBuff: *ulong) -> int
export import def #extern #dllimport ShutdownBlockReasonDestroy(hWnd: *s_HWND__) -> int
export import def #extern #dllimport GetCurrentInputMessageSource(inputMessageSource: *INPUT_MESSAGE_SOURCE) -> int
export import def #extern #dllimport GetCIMSSM(inputMessageSource: *INPUT_MESSAGE_SOURCE) -> int
export import def #extern #dllimport GetAutoRotationState(pState: *AR_STATE) -> int
export import def #extern #dllimport GetDisplayAutoRotationPreferences(pOrientation: *ORIENTATION_PREFERENCE) -> int
export import def #extern #dllimport GetDisplayAutoRotationPreferencesByProcessId(dwProcessId: ulong, pOrientation: *ORIENTATION_PREFERENCE, fRotateScreen: *int) -> int
export import def #extern #dllimport SetDisplayAutoRotationPreferences(orientation: ORIENTATION_PREFERENCE) -> int
export import def #extern #dllimport IsImmersiveProcess(hProcess: *) -> int
export import def #extern #dllimport SetProcessRestrictionExemption(fEnableExemption: int) -> int
export import def #extern #dllimport GetDateFormatA(Locale: ulong, dwFlags: ulong, lpDate: *SYSTEMTIME, lpFormat: *char, lpDateStr: *char, cchDate: int) -> int
export import def #extern #dllimport GetDateFormatW(Locale: ulong, dwFlags: ulong, lpDate: *SYSTEMTIME, lpFormat: *ushort, lpDateStr: *ushort, cchDate: int) -> int
export import def #extern #dllimport GetTimeFormatA(Locale: ulong, dwFlags: ulong, lpTime: *SYSTEMTIME, lpFormat: *char, lpTimeStr: *char, cchTime: int) -> int
export import def #extern #dllimport GetTimeFormatW(Locale: ulong, dwFlags: ulong, lpTime: *SYSTEMTIME, lpFormat: *ushort, lpTimeStr: *ushort, cchTime: int) -> int
export import def #extern #dllimport GetTimeFormatEx(lpLocaleName: *ushort, dwFlags: ulong, lpTime: *SYSTEMTIME, lpFormat: *ushort, lpTimeStr: *ushort, cchTime: int) -> int
export import def #extern #dllimport GetDateFormatEx(lpLocaleName: *ushort, dwFlags: ulong, lpDate: *SYSTEMTIME, lpFormat: *ushort, lpDateStr: *ushort, cchDate: int, lpCalendar: *ushort) -> int
export import def #extern #dllimport GetDurationFormatEx(lpLocaleName: *ushort, dwFlags: ulong, lpDuration: *SYSTEMTIME, ullDuration: uint64, lpFormat: *ushort, lpDurationStr: *ushort, cchDuration: int) -> int
export import def #extern #dllimport CompareStringEx(lpLocaleName: *ushort, dwCmpFlags: ulong, lpString1: *ushort, cchCount1: int, lpString2: *ushort, cchCount2: int, lpVersionInformation: *NLSVERSIONINFO, lpReserved: *, lParam: int64) -> int
export import def #extern #dllimport CompareStringOrdinal(lpString1: *ushort, cchCount1: int, lpString2: *ushort, cchCount2: int, bIgnoreCase: int) -> int
export import def #extern #dllimport CompareStringW(Locale: ulong, dwCmpFlags: ulong, lpString1: *ushort, cchCount1: int, lpString2: *ushort, cchCount2: int) -> int
export import def #extern #dllimport FoldStringW(dwMapFlags: ulong, lpSrcStr: *ushort, cchSrc: int, lpDestStr: *ushort, cchDest: int) -> int
export import def #extern #dllimport GetStringTypeExW(Locale: ulong, dwInfoType: ulong, lpSrcStr: *ushort, cchSrc: int, lpCharType: *ushort) -> int
export import def #extern #dllimport GetStringTypeW(dwInfoType: ulong, lpSrcStr: *ushort, cchSrc: int, lpCharType: *ushort) -> int
export import def #extern #dllimport MultiByteToWideChar(CodePage: uint, dwFlags: ulong, lpMultiByteStr: *char, cbMultiByte: int, lpWideCharStr: *ushort, cchWideChar: int) -> int
export import def #extern #dllimport WideCharToMultiByte(CodePage: uint, dwFlags: ulong, lpWideCharStr: *ushort, cchWideChar: int, lpMultiByteStr: *char, cbMultiByte: int, lpDefaultChar: *char, lpUsedDefaultChar: *int) -> int
export import def #extern #dllimport IsValidCodePage(CodePage: uint) -> int
export import def #extern #dllimport GetACP() -> uint
export import def #extern #dllimport GetOEMCP() -> uint
export import def #extern #dllimport GetCPInfo(CodePage: uint, lpCPInfo: *CPINFO) -> int
export import def #extern #dllimport GetCPInfoExA(CodePage: uint, dwFlags: ulong, lpCPInfoEx: *CPINFOEXA) -> int
export import def #extern #dllimport GetCPInfoExW(CodePage: uint, dwFlags: ulong, lpCPInfoEx: *CPINFOEXW) -> int
export import def #extern #dllimport CompareStringA(Locale: ulong, dwCmpFlags: ulong, lpString1: *char, cchCount1: int, lpString2: *char, cchCount2: int) -> int
export import def #extern #dllimport FindNLSString(Locale: ulong, dwFindNLSStringFlags: ulong, lpStringSource: *ushort, cchSource: int, lpStringValue: *ushort, cchValue: int, pcchFound: *int) -> int
export import def #extern #dllimport LCMapStringW(Locale: ulong, dwMapFlags: ulong, lpSrcStr: *ushort, cchSrc: int, lpDestStr: *ushort, cchDest: int) -> int
export import def #extern #dllimport LCMapStringA(Locale: ulong, dwMapFlags: ulong, lpSrcStr: *char, cchSrc: int, lpDestStr: *char, cchDest: int) -> int
export import def #extern #dllimport GetLocaleInfoW(Locale: ulong, LCType: ulong, lpLCData: *ushort, cchData: int) -> int
export import def #extern #dllimport GetLocaleInfoA(Locale: ulong, LCType: ulong, lpLCData: *char, cchData: int) -> int
export import def #extern #dllimport SetLocaleInfoA(Locale: ulong, LCType: ulong, lpLCData: *char) -> int
export import def #extern #dllimport SetLocaleInfoW(Locale: ulong, LCType: ulong, lpLCData: *ushort) -> int
export import def #extern #dllimport GetCalendarInfoA(Locale: ulong, Calendar: ulong, CalType: ulong, lpCalData: *char, cchData: int, lpValue: *ulong) -> int
export import def #extern #dllimport GetCalendarInfoW(Locale: ulong, Calendar: ulong, CalType: ulong, lpCalData: *ushort, cchData: int, lpValue: *ulong) -> int
export import def #extern #dllimport SetCalendarInfoA(Locale: ulong, Calendar: ulong, CalType: ulong, lpCalData: *char) -> int
export import def #extern #dllimport SetCalendarInfoW(Locale: ulong, Calendar: ulong, CalType: ulong, lpCalData: *ushort) -> int
export import def #extern #dllimport LoadStringByReference(Flags: ulong, Language: *ushort, SourceString: *ushort, Buffer: *ushort, cchBuffer: ulong, Directory: *ushort, pcchBufferOut: *ulong) -> int
export import def #extern #dllimport IsDBCSLeadByte(TestChar: char) -> int
export import def #extern #dllimport IsDBCSLeadByteEx(CodePage: uint, TestChar: char) -> int
export import def #extern #dllimport LocaleNameToLCID(lpName: *ushort, dwFlags: ulong) -> ulong
export import def #extern #dllimport LCIDToLocaleName(Locale: ulong, lpName: *ushort, cchName: int, dwFlags: ulong) -> int
export import def #extern #dllimport GetDurationFormat(Locale: ulong, dwFlags: ulong, lpDuration: *SYSTEMTIME, ullDuration: uint64, lpFormat: *ushort, lpDurationStr: *ushort, cchDuration: int) -> int
export import def #extern #dllimport GetNumberFormatA(Locale: ulong, dwFlags: ulong, lpValue: *char, lpFormat: *NUMBERFMTA, lpNumberStr: *char, cchNumber: int) -> int
export import def #extern #dllimport GetNumberFormatW(Locale: ulong, dwFlags: ulong, lpValue: *ushort, lpFormat: *NUMBERFMTW, lpNumberStr: *ushort, cchNumber: int) -> int
export import def #extern #dllimport GetCurrencyFormatA(Locale: ulong, dwFlags: ulong, lpValue: *char, lpFormat: *CURRENCYFMTA, lpCurrencyStr: *char, cchCurrency: int) -> int
export import def #extern #dllimport GetCurrencyFormatW(Locale: ulong, dwFlags: ulong, lpValue: *ushort, lpFormat: *CURRENCYFMTW, lpCurrencyStr: *ushort, cchCurrency: int) -> int
export import def #extern #dllimport EnumCalendarInfoA(lpCalInfoEnumProc: def (*char) -> (int), Locale: ulong, Calendar: ulong, CalType: ulong) -> int
export import def #extern #dllimport EnumCalendarInfoW(lpCalInfoEnumProc: def (*ushort) -> (int), Locale: ulong, Calendar: ulong, CalType: ulong) -> int
export import def #extern #dllimport EnumCalendarInfoExA(lpCalInfoEnumProcEx: def (*char, ulong) -> (int), Locale: ulong, Calendar: ulong, CalType: ulong) -> int
export import def #extern #dllimport EnumCalendarInfoExW(lpCalInfoEnumProcEx: def (*ushort, ulong) -> (int), Locale: ulong, Calendar: ulong, CalType: ulong) -> int
export import def #extern #dllimport EnumTimeFormatsA(lpTimeFmtEnumProc: def (*char) -> (int), Locale: ulong, dwFlags: ulong) -> int
export import def #extern #dllimport EnumTimeFormatsW(lpTimeFmtEnumProc: def (*ushort) -> (int), Locale: ulong, dwFlags: ulong) -> int
export import def #extern #dllimport EnumDateFormatsA(lpDateFmtEnumProc: def (*char) -> (int), Locale: ulong, dwFlags: ulong) -> int
export import def #extern #dllimport EnumDateFormatsW(lpDateFmtEnumProc: def (*ushort) -> (int), Locale: ulong, dwFlags: ulong) -> int
export import def #extern #dllimport EnumDateFormatsExA(lpDateFmtEnumProcEx: def (*char, ulong) -> (int), Locale: ulong, dwFlags: ulong) -> int
export import def #extern #dllimport EnumDateFormatsExW(lpDateFmtEnumProcEx: def (*ushort, ulong) -> (int), Locale: ulong, dwFlags: ulong) -> int
export import def #extern #dllimport IsValidLanguageGroup(LanguageGroup: ulong, dwFlags: ulong) -> int
export import def #extern #dllimport GetNLSVersion(Function: ulong, Locale: ulong, lpVersionInformation: *NLSVERSIONINFO) -> int
export import def #extern #dllimport IsValidLocale(Locale: ulong, dwFlags: ulong) -> int
export import def #extern #dllimport GetGeoInfoA(Location: long, GeoType: ulong, lpGeoData: *char, cchData: int, LangId: ushort) -> int
export import def #extern #dllimport GetGeoInfoW(Location: long, GeoType: ulong, lpGeoData: *ushort, cchData: int, LangId: ushort) -> int
export import def #extern #dllimport GetGeoInfoEx(location: *ushort, geoType: ulong, geoData: *ushort, geoDataCount: int) -> int
export import def #extern #dllimport EnumSystemGeoID(GeoClass: ulong, ParentGeoId: long, lpGeoEnumProc: def (long) -> (int)) -> int
export import def #extern #dllimport EnumSystemGeoNames(geoClass: ulong, geoEnumProc: def (*ushort, int64) -> (int), data: int64) -> int
export import def #extern #dllimport GetUserGeoID(GeoClass: ulong) -> long
export import def #extern #dllimport GetUserDefaultGeoName(geoName: *ushort, geoNameCount: int) -> int
export import def #extern #dllimport SetUserGeoID(GeoId: long) -> int
export import def #extern #dllimport SetUserGeoName(geoName: *ushort) -> int
export import def #extern #dllimport ConvertDefaultLocale(Locale: ulong) -> ulong
export import def #extern #dllimport GetSystemDefaultUILanguage() -> ushort
export import def #extern #dllimport GetThreadLocale() -> ulong
export import def #extern #dllimport SetThreadLocale(Locale: ulong) -> int
export import def #extern #dllimport GetUserDefaultUILanguage() -> ushort
export import def #extern #dllimport GetUserDefaultLangID() -> ushort
export import def #extern #dllimport GetSystemDefaultLangID() -> ushort
export import def #extern #dllimport GetSystemDefaultLCID() -> ulong
export import def #extern #dllimport GetUserDefaultLCID() -> ulong
export import def #extern #dllimport SetThreadUILanguage(LangId: ushort) -> ushort
export import def #extern #dllimport GetThreadUILanguage() -> ushort
export import def #extern #dllimport GetProcessPreferredUILanguages(dwFlags: ulong, pulNumLanguages: *ulong, pwszLanguagesBuffer: *ushort, pcchLanguagesBuffer: *ulong) -> int
export import def #extern #dllimport SetProcessPreferredUILanguages(dwFlags: ulong, pwszLanguagesBuffer: *ushort, pulNumLanguages: *ulong) -> int
export import def #extern #dllimport GetUserPreferredUILanguages(dwFlags: ulong, pulNumLanguages: *ulong, pwszLanguagesBuffer: *ushort, pcchLanguagesBuffer: *ulong) -> int
export import def #extern #dllimport GetSystemPreferredUILanguages(dwFlags: ulong, pulNumLanguages: *ulong, pwszLanguagesBuffer: *ushort, pcchLanguagesBuffer: *ulong) -> int
export import def #extern #dllimport GetThreadPreferredUILanguages(dwFlags: ulong, pulNumLanguages: *ulong, pwszLanguagesBuffer: *ushort, pcchLanguagesBuffer: *ulong) -> int
export import def #extern #dllimport SetThreadPreferredUILanguages(dwFlags: ulong, pwszLanguagesBuffer: *ushort, pulNumLanguages: *ulong) -> int
export import def #extern #dllimport GetFileMUIInfo(dwFlags: ulong, pcwszFilePath: *ushort, pFileMUIInfo: *FILEMUIINFO, pcbFileMUIInfo: *ulong) -> int
export import def #extern #dllimport GetFileMUIPath(dwFlags: ulong, pcwszFilePath: *ushort, pwszLanguage: *ushort, pcchLanguage: *ulong, pwszFileMUIPath: *ushort, pcchFileMUIPath: *ulong, pululEnumerator: *uint64) -> int
export import def #extern #dllimport GetUILanguageInfo(dwFlags: ulong, pwmszLanguage: *ushort, pwszFallbackLanguages: *ushort, pcchFallbackLanguages: *ulong, pAttributes: *ulong) -> int
export import def #extern #dllimport SetThreadPreferredUILanguages2(flags: ulong, languages: *ushort, numLanguagesSet: *ulong, snapshot: **s_HSAVEDUILANGUAGES__) -> int
export import def #extern #dllimport RestoreThreadPreferredUILanguages(snapshot: *s_HSAVEDUILANGUAGES__)
export import def #extern #dllimport NotifyUILanguageChange(dwFlags: ulong, pcwstrNewLanguage: *ushort, pcwstrPreviousLanguage: *ushort, dwReserved: ulong, pdwStatusRtrn: *ulong) -> int
export import def #extern #dllimport GetStringTypeExA(Locale: ulong, dwInfoType: ulong, lpSrcStr: *char, cchSrc: int, lpCharType: *ushort) -> int
export import def #extern #dllimport GetStringTypeA(Locale: ulong, dwInfoType: ulong, lpSrcStr: *char, cchSrc: int, lpCharType: *ushort) -> int
export import def #extern #dllimport FoldStringA(dwMapFlags: ulong, lpSrcStr: *char, cchSrc: int, lpDestStr: *char, cchDest: int) -> int
export import def #extern #dllimport EnumSystemLocalesA(lpLocaleEnumProc: def (*char) -> (int), dwFlags: ulong) -> int
export import def #extern #dllimport EnumSystemLocalesW(lpLocaleEnumProc: def (*ushort) -> (int), dwFlags: ulong) -> int
export import def #extern #dllimport EnumSystemLanguageGroupsA(lpLanguageGroupEnumProc: def (ulong, *char, *char, ulong, int64) -> (int), dwFlags: ulong, lParam: int64) -> int
export import def #extern #dllimport EnumSystemLanguageGroupsW(lpLanguageGroupEnumProc: def (ulong, *ushort, *ushort, ulong, int64) -> (int), dwFlags: ulong, lParam: int64) -> int
export import def #extern #dllimport EnumLanguageGroupLocalesA(lpLangGroupLocaleEnumProc: def (ulong, ulong, *char, int64) -> (int), LanguageGroup: ulong, dwFlags: ulong, lParam: int64) -> int
export import def #extern #dllimport EnumLanguageGroupLocalesW(lpLangGroupLocaleEnumProc: def (ulong, ulong, *ushort, int64) -> (int), LanguageGroup: ulong, dwFlags: ulong, lParam: int64) -> int
export import def #extern #dllimport EnumUILanguagesA(lpUILanguageEnumProc: def (*char, int64) -> (int), dwFlags: ulong, lParam: int64) -> int
export import def #extern #dllimport EnumUILanguagesW(lpUILanguageEnumProc: def (*ushort, int64) -> (int), dwFlags: ulong, lParam: int64) -> int
export import def #extern #dllimport EnumSystemCodePagesA(lpCodePageEnumProc: def (*char) -> (int), dwFlags: ulong) -> int
export import def #extern #dllimport EnumSystemCodePagesW(lpCodePageEnumProc: def (*ushort) -> (int), dwFlags: ulong) -> int
export import def #extern #dllimport IdnToAscii(dwFlags: ulong, lpUnicodeCharStr: *ushort, cchUnicodeChar: int, lpASCIICharStr: *ushort, cchASCIIChar: int) -> int
export import def #extern #dllimport IdnToUnicode(dwFlags: ulong, lpASCIICharStr: *ushort, cchASCIIChar: int, lpUnicodeCharStr: *ushort, cchUnicodeChar: int) -> int
export import def #extern #dllimport IdnToNameprepUnicode(dwFlags: ulong, lpUnicodeCharStr: *ushort, cchUnicodeChar: int, lpNameprepCharStr: *ushort, cchNameprepChar: int) -> int
export import def #extern #dllimport NormalizeString(NormForm: NORM_FORM, lpSrcString: *ushort, cwSrcLength: int, lpDstString: *ushort, cwDstLength: int) -> int
export import def #extern #dllimport IsNormalizedString(NormForm: NORM_FORM, lpString: *ushort, cwLength: int) -> int
export import def #extern #dllimport VerifyScripts(dwFlags: ulong, lpLocaleScripts: *ushort, cchLocaleScripts: int, lpTestScripts: *ushort, cchTestScripts: int) -> int
export import def #extern #dllimport GetStringScripts(dwFlags: ulong, lpString: *ushort, cchString: int, lpScripts: *ushort, cchScripts: int) -> int
export import def #extern #dllimport GetLocaleInfoEx(lpLocaleName: *ushort, LCType: ulong, lpLCData: *ushort, cchData: int) -> int
export import def #extern #dllimport GetCalendarInfoEx(lpLocaleName: *ushort, Calendar: ulong, lpReserved: *ushort, CalType: ulong, lpCalData: *ushort, cchData: int, lpValue: *ulong) -> int
export import def #extern #dllimport GetNumberFormatEx(lpLocaleName: *ushort, dwFlags: ulong, lpValue: *ushort, lpFormat: *NUMBERFMTW, lpNumberStr: *ushort, cchNumber: int) -> int
export import def #extern #dllimport GetCurrencyFormatEx(lpLocaleName: *ushort, dwFlags: ulong, lpValue: *ushort, lpFormat: *CURRENCYFMTW, lpCurrencyStr: *ushort, cchCurrency: int) -> int
export import def #extern #dllimport GetUserDefaultLocaleName(lpLocaleName: *ushort, cchLocaleName: int) -> int
export import def #extern #dllimport GetSystemDefaultLocaleName(lpLocaleName: *ushort, cchLocaleName: int) -> int
export import def #extern #dllimport IsNLSDefinedString(Function: ulong, dwFlags: ulong, lpVersionInformation: *NLSVERSIONINFO, lpString: *ushort, cchStr: int) -> int
export import def #extern #dllimport GetNLSVersionEx(function: ulong, lpLocaleName: *ushort, lpVersionInformation: *NLSVERSIONINFOEX) -> int
export import def #extern #dllimport IsValidNLSVersion(function: ulong, lpLocaleName: *ushort, lpVersionInformation: *NLSVERSIONINFOEX) -> ulong
export import def #extern #dllimport FindNLSStringEx(lpLocaleName: *ushort, dwFindNLSStringFlags: ulong, lpStringSource: *ushort, cchSource: int, lpStringValue: *ushort, cchValue: int, pcchFound: *int, lpVersionInformation: *NLSVERSIONINFO, lpReserved: *, sortHandle: int64) -> int
export import def #extern #dllimport LCMapStringEx(lpLocaleName: *ushort, dwMapFlags: ulong, lpSrcStr: *ushort, cchSrc: int, lpDestStr: *ushort, cchDest: int, lpVersionInformation: *NLSVERSIONINFO, lpReserved: *, sortHandle: int64) -> int
export import def #extern #dllimport IsValidLocaleName(lpLocaleName: *ushort) -> int
export import def #extern #dllimport EnumCalendarInfoExEx(pCalInfoEnumProcExEx: def (*ushort, ulong, *ushort, int64) -> (int), lpLocaleName: *ushort, Calendar: ulong, lpReserved: *ushort, CalType: ulong, lParam: int64) -> int
export import def #extern #dllimport EnumDateFormatsExEx(lpDateFmtEnumProcExEx: def (*ushort, ulong, int64) -> (int), lpLocaleName: *ushort, dwFlags: ulong, lParam: int64) -> int
export import def #extern #dllimport EnumTimeFormatsEx(lpTimeFmtEnumProcEx: def (*ushort, int64) -> (int), lpLocaleName: *ushort, dwFlags: ulong, lParam: int64) -> int
export import def #extern #dllimport EnumSystemLocalesEx(lpLocaleEnumProcEx: def (*ushort, ulong, int64) -> (int), dwFlags: ulong, lParam: int64, lpReserved: *) -> int
export import def #extern #dllimport ResolveLocaleName(lpNameToResolve: *ushort, lpLocaleName: *ushort, cchLocaleName: int) -> int
export import def #extern #dllimport AllocConsole() -> int
export import def #extern #dllimport FreeConsole() -> int
export import def #extern #dllimport AttachConsole(dwProcessId: ulong) -> int
export import def #extern #dllimport GetConsoleCP() -> uint
export import def #extern #dllimport GetConsoleOutputCP() -> uint
export import def #extern #dllimport GetConsoleMode(hConsoleHandle: *, lpMode: *ulong) -> int
export import def #extern #dllimport SetConsoleMode(hConsoleHandle: *, dwMode: ulong) -> int
export import def #extern #dllimport GetNumberOfConsoleInputEvents(hConsoleInput: *, lpNumberOfEvents: *ulong) -> int
export import def #extern #dllimport ReadConsoleInputA(hConsoleInput: *, lpBuffer: *INPUT_RECORD, nLength: ulong, lpNumberOfEventsRead: *ulong) -> int
export import def #extern #dllimport ReadConsoleInputW(hConsoleInput: *, lpBuffer: *INPUT_RECORD, nLength: ulong, lpNumberOfEventsRead: *ulong) -> int
export import def #extern #dllimport PeekConsoleInputA(hConsoleInput: *, lpBuffer: *INPUT_RECORD, nLength: ulong, lpNumberOfEventsRead: *ulong) -> int
export import def #extern #dllimport PeekConsoleInputW(hConsoleInput: *, lpBuffer: *INPUT_RECORD, nLength: ulong, lpNumberOfEventsRead: *ulong) -> int
export import def #extern #dllimport ReadConsoleA(hConsoleInput: *, lpBuffer: *, nNumberOfCharsToRead: ulong, lpNumberOfCharsRead: *ulong, pInputControl: *CONSOLE_READCONSOLE_CONTROL) -> int
export import def #extern #dllimport ReadConsoleW(hConsoleInput: *, lpBuffer: *, nNumberOfCharsToRead: ulong, lpNumberOfCharsRead: *ulong, pInputControl: *CONSOLE_READCONSOLE_CONTROL) -> int
export import def #extern #dllimport WriteConsoleA(hConsoleOutput: *, lpBuffer: *, nNumberOfCharsToWrite: ulong, lpNumberOfCharsWritten: *ulong, lpReserved: *) -> int
export import def #extern #dllimport WriteConsoleW(hConsoleOutput: *, lpBuffer: *, nNumberOfCharsToWrite: ulong, lpNumberOfCharsWritten: *ulong, lpReserved: *) -> int
export import def #extern #dllimport SetConsoleCtrlHandler(HandlerRoutine: def (ulong) -> (int), Add: int) -> int
export import def #extern #dllimport CreatePseudoConsole(size: COORD, hInput: *, hOutput: *, dwFlags: ulong, phPC: **) -> long
export import def #extern #dllimport ResizePseudoConsole(hPC: *, size: COORD) -> long
export import def #extern #dllimport ClosePseudoConsole(hPC: *)
export import def #extern #dllimport FillConsoleOutputCharacterA(hConsoleOutput: *, cCharacter: char, nLength: ulong, dwWriteCoord: COORD, lpNumberOfCharsWritten: *ulong) -> int
export import def #extern #dllimport FillConsoleOutputCharacterW(hConsoleOutput: *, cCharacter: ushort, nLength: ulong, dwWriteCoord: COORD, lpNumberOfCharsWritten: *ulong) -> int
export import def #extern #dllimport FillConsoleOutputAttribute(hConsoleOutput: *, wAttribute: ushort, nLength: ulong, dwWriteCoord: COORD, lpNumberOfAttrsWritten: *ulong) -> int
export import def #extern #dllimport GenerateConsoleCtrlEvent(dwCtrlEvent: ulong, dwProcessGroupId: ulong) -> int
export import def #extern #dllimport CreateConsoleScreenBuffer(dwDesiredAccess: ulong, dwShareMode: ulong, lpSecurityAttributes: *SECURITY_ATTRIBUTES, dwFlags: ulong, lpScreenBufferData: *) -> *
export import def #extern #dllimport SetConsoleActiveScreenBuffer(hConsoleOutput: *) -> int
export import def #extern #dllimport FlushConsoleInputBuffer(hConsoleInput: *) -> int
export import def #extern #dllimport SetConsoleCP(wCodePageID: uint) -> int
export import def #extern #dllimport SetConsoleOutputCP(wCodePageID: uint) -> int
export import def #extern #dllimport GetConsoleCursorInfo(hConsoleOutput: *, lpConsoleCursorInfo: *CONSOLE_CURSOR_INFO) -> int
export import def #extern #dllimport SetConsoleCursorInfo(hConsoleOutput: *, lpConsoleCursorInfo: *CONSOLE_CURSOR_INFO) -> int
export import def #extern #dllimport GetConsoleScreenBufferInfo(hConsoleOutput: *, lpConsoleScreenBufferInfo: *CONSOLE_SCREEN_BUFFER_INFO) -> int
export import def #extern #dllimport GetConsoleScreenBufferInfoEx(hConsoleOutput: *, lpConsoleScreenBufferInfoEx: *CONSOLE_SCREEN_BUFFER_INFOEX) -> int
export import def #extern #dllimport SetConsoleScreenBufferInfoEx(hConsoleOutput: *, lpConsoleScreenBufferInfoEx: *CONSOLE_SCREEN_BUFFER_INFOEX) -> int
export import def #extern #dllimport SetConsoleScreenBufferSize(hConsoleOutput: *, dwSize: COORD) -> int
export import def #extern #dllimport SetConsoleCursorPosition(hConsoleOutput: *, dwCursorPosition: COORD) -> int
export import def #extern #dllimport GetLargestConsoleWindowSize(hConsoleOutput: *) -> COORD
export import def #extern #dllimport SetConsoleTextAttribute(hConsoleOutput: *, wAttributes: ushort) -> int
export import def #extern #dllimport SetConsoleWindowInfo(hConsoleOutput: *, bAbsolute: int, lpConsoleWindow: *SMALL_RECT) -> int
export import def #extern #dllimport WriteConsoleOutputCharacterA(hConsoleOutput: *, lpCharacter: *char, nLength: ulong, dwWriteCoord: COORD, lpNumberOfCharsWritten: *ulong) -> int
export import def #extern #dllimport WriteConsoleOutputCharacterW(hConsoleOutput: *, lpCharacter: *ushort, nLength: ulong, dwWriteCoord: COORD, lpNumberOfCharsWritten: *ulong) -> int
export import def #extern #dllimport WriteConsoleOutputAttribute(hConsoleOutput: *, lpAttribute: *ushort, nLength: ulong, dwWriteCoord: COORD, lpNumberOfAttrsWritten: *ulong) -> int
export import def #extern #dllimport ReadConsoleOutputCharacterA(hConsoleOutput: *, lpCharacter: *char, nLength: ulong, dwReadCoord: COORD, lpNumberOfCharsRead: *ulong) -> int
export import def #extern #dllimport ReadConsoleOutputCharacterW(hConsoleOutput: *, lpCharacter: *ushort, nLength: ulong, dwReadCoord: COORD, lpNumberOfCharsRead: *ulong) -> int
export import def #extern #dllimport ReadConsoleOutputAttribute(hConsoleOutput: *, lpAttribute: *ushort, nLength: ulong, dwReadCoord: COORD, lpNumberOfAttrsRead: *ulong) -> int
export import def #extern #dllimport WriteConsoleInputA(hConsoleInput: *, lpBuffer: *INPUT_RECORD, nLength: ulong, lpNumberOfEventsWritten: *ulong) -> int
export import def #extern #dllimport WriteConsoleInputW(hConsoleInput: *, lpBuffer: *INPUT_RECORD, nLength: ulong, lpNumberOfEventsWritten: *ulong) -> int
export import def #extern #dllimport ScrollConsoleScreenBufferA(hConsoleOutput: *, lpScrollRectangle: *SMALL_RECT, lpClipRectangle: *SMALL_RECT, dwDestinationOrigin: COORD, lpFill: *CHAR_INFO) -> int
export import def #extern #dllimport ScrollConsoleScreenBufferW(hConsoleOutput: *, lpScrollRectangle: *SMALL_RECT, lpClipRectangle: *SMALL_RECT, dwDestinationOrigin: COORD, lpFill: *CHAR_INFO) -> int
export import def #extern #dllimport WriteConsoleOutputA(hConsoleOutput: *, lpBuffer: *CHAR_INFO, dwBufferSize: COORD, dwBufferCoord: COORD, lpWriteRegion: *SMALL_RECT) -> int
export import def #extern #dllimport WriteConsoleOutputW(hConsoleOutput: *, lpBuffer: *CHAR_INFO, dwBufferSize: COORD, dwBufferCoord: COORD, lpWriteRegion: *SMALL_RECT) -> int
export import def #extern #dllimport ReadConsoleOutputA(hConsoleOutput: *, lpBuffer: *CHAR_INFO, dwBufferSize: COORD, dwBufferCoord: COORD, lpReadRegion: *SMALL_RECT) -> int
export import def #extern #dllimport ReadConsoleOutputW(hConsoleOutput: *, lpBuffer: *CHAR_INFO, dwBufferSize: COORD, dwBufferCoord: COORD, lpReadRegion: *SMALL_RECT) -> int
export import def #extern #dllimport GetConsoleTitleA(lpConsoleTitle: *char, nSize: ulong) -> ulong
export import def #extern #dllimport GetConsoleTitleW(lpConsoleTitle: *ushort, nSize: ulong) -> ulong
export import def #extern #dllimport GetConsoleOriginalTitleA(lpConsoleTitle: *char, nSize: ulong) -> ulong
export import def #extern #dllimport GetConsoleOriginalTitleW(lpConsoleTitle: *ushort, nSize: ulong) -> ulong
export import def #extern #dllimport SetConsoleTitleA(lpConsoleTitle: *char) -> int
export import def #extern #dllimport SetConsoleTitleW(lpConsoleTitle: *ushort) -> int
export import def #extern #dllimport GetNumberOfConsoleMouseButtons(lpNumberOfMouseButtons: *ulong) -> int
export import def #extern #dllimport GetConsoleFontSize(hConsoleOutput: *, nFont: ulong) -> COORD
export import def #extern #dllimport GetCurrentConsoleFont(hConsoleOutput: *, bMaximumWindow: int, lpConsoleCurrentFont: *CONSOLE_FONT_INFO) -> int
export import def #extern #dllimport GetCurrentConsoleFontEx(hConsoleOutput: *, bMaximumWindow: int, lpConsoleCurrentFontEx: *CONSOLE_FONT_INFOEX) -> int
export import def #extern #dllimport SetCurrentConsoleFontEx(hConsoleOutput: *, bMaximumWindow: int, lpConsoleCurrentFontEx: *CONSOLE_FONT_INFOEX) -> int
export import def #extern #dllimport GetConsoleSelectionInfo(lpConsoleSelectionInfo: *CONSOLE_SELECTION_INFO) -> int
export import def #extern #dllimport GetConsoleHistoryInfo(lpConsoleHistoryInfo: *CONSOLE_HISTORY_INFO) -> int
export import def #extern #dllimport SetConsoleHistoryInfo(lpConsoleHistoryInfo: *CONSOLE_HISTORY_INFO) -> int
export import def #extern #dllimport GetConsoleDisplayMode(lpModeFlags: *ulong) -> int
export import def #extern #dllimport SetConsoleDisplayMode(hConsoleOutput: *, dwFlags: ulong, lpNewScreenBufferDimensions: *COORD) -> int
export import def #extern #dllimport GetConsoleWindow() -> *s_HWND__
export import def #extern #dllimport AddConsoleAliasA(Source: *char, Target: *char, ExeName: *char) -> int
export import def #extern #dllimport AddConsoleAliasW(Source: *ushort, Target: *ushort, ExeName: *ushort) -> int
export import def #extern #dllimport GetConsoleAliasA(Source: *char, TargetBuffer: *char, TargetBufferLength: ulong, ExeName: *char) -> ulong
export import def #extern #dllimport GetConsoleAliasW(Source: *ushort, TargetBuffer: *ushort, TargetBufferLength: ulong, ExeName: *ushort) -> ulong
export import def #extern #dllimport GetConsoleAliasesLengthA(ExeName: *char) -> ulong
export import def #extern #dllimport GetConsoleAliasesLengthW(ExeName: *ushort) -> ulong
export import def #extern #dllimport GetConsoleAliasExesLengthA() -> ulong
export import def #extern #dllimport GetConsoleAliasExesLengthW() -> ulong
export import def #extern #dllimport GetConsoleAliasesA(AliasBuffer: *char, AliasBufferLength: ulong, ExeName: *char) -> ulong
export import def #extern #dllimport GetConsoleAliasesW(AliasBuffer: *ushort, AliasBufferLength: ulong, ExeName: *ushort) -> ulong
export import def #extern #dllimport GetConsoleAliasExesA(ExeNameBuffer: *char, ExeNameBufferLength: ulong) -> ulong
export import def #extern #dllimport GetConsoleAliasExesW(ExeNameBuffer: *ushort, ExeNameBufferLength: ulong) -> ulong
export import def #extern #dllimport ExpungeConsoleCommandHistoryA(ExeName: *char)
export import def #extern #dllimport ExpungeConsoleCommandHistoryW(ExeName: *ushort)
export import def #extern #dllimport SetConsoleNumberOfCommandsA(Number: ulong, ExeName: *char) -> int
export import def #extern #dllimport SetConsoleNumberOfCommandsW(Number: ulong, ExeName: *ushort) -> int
export import def #extern #dllimport GetConsoleCommandHistoryLengthA(ExeName: *char) -> ulong
export import def #extern #dllimport GetConsoleCommandHistoryLengthW(ExeName: *ushort) -> ulong
export import def #extern #dllimport GetConsoleCommandHistoryA(Commands: *char, CommandBufferLength: ulong, ExeName: *char) -> ulong
export import def #extern #dllimport GetConsoleCommandHistoryW(Commands: *ushort, CommandBufferLength: ulong, ExeName: *ushort) -> ulong
export import def #extern #dllimport GetConsoleProcessList(lpdwProcessList: *ulong, dwProcessCount: ulong) -> ulong
export import def #extern VerFindFileA(uFlags: ulong, szFileName: *char, szWinDir: *char, szAppDir: *char, szCurDir: *char, puCurDirLen: *uint, szDestDir: *char, puDestDirLen: *uint) -> ulong
export import def #extern VerFindFileW(uFlags: ulong, szFileName: *ushort, szWinDir: *ushort, szAppDir: *ushort, szCurDir: *ushort, puCurDirLen: *uint, szDestDir: *ushort, puDestDirLen: *uint) -> ulong
export import def #extern VerInstallFileA(uFlags: ulong, szSrcFileName: *char, szDestFileName: *char, szSrcDir: *char, szDestDir: *char, szCurDir: *char, szTmpFile: *char, puTmpFileLen: *uint) -> ulong
export import def #extern VerInstallFileW(uFlags: ulong, szSrcFileName: *ushort, szDestFileName: *ushort, szSrcDir: *ushort, szDestDir: *ushort, szCurDir: *ushort, szTmpFile: *ushort, puTmpFileLen: *uint) -> ulong
export import def #extern GetFileVersionInfoSizeA(lptstrFilename: *char, lpdwHandle: *ulong) -> ulong
export import def #extern GetFileVersionInfoSizeW(lptstrFilename: *ushort, lpdwHandle: *ulong) -> ulong
export import def #extern GetFileVersionInfoA(lptstrFilename: *char, dwHandle: ulong, dwLen: ulong, lpData: *) -> int
export import def #extern GetFileVersionInfoW(lptstrFilename: *ushort, dwHandle: ulong, dwLen: ulong, lpData: *) -> int
export import def #extern GetFileVersionInfoSizeExA(dwFlags: ulong, lpwstrFilename: *char, lpdwHandle: *ulong) -> ulong
export import def #extern GetFileVersionInfoSizeExW(dwFlags: ulong, lpwstrFilename: *ushort, lpdwHandle: *ulong) -> ulong
export import def #extern GetFileVersionInfoExA(dwFlags: ulong, lpwstrFilename: *char, dwHandle: ulong, dwLen: ulong, lpData: *) -> int
export import def #extern GetFileVersionInfoExW(dwFlags: ulong, lpwstrFilename: *ushort, dwHandle: ulong, dwLen: ulong, lpData: *) -> int
export import def #extern VerLanguageNameA(wLang: ulong, szLang: *char, cchLang: ulong) -> ulong
export import def #extern VerLanguageNameW(wLang: ulong, szLang: *ushort, cchLang: ulong) -> ulong
export import def #extern VerQueryValueA(pBlock: *, lpSubBlock: *char, lplpBuffer: **, puLen: *uint) -> int
export import def #extern VerQueryValueW(pBlock: *, lpSubBlock: *ushort, lplpBuffer: **, puLen: *uint) -> int
export import def #extern #dllimport RegCloseKey(hKey: *s_HKEY__) -> long
export import def #extern #dllimport RegOverridePredefKey(hKey: *s_HKEY__, hNewHKey: *s_HKEY__) -> long
export import def #extern #dllimport RegOpenUserClassesRoot(hToken: *, dwOptions: ulong, samDesired: ulong, phkResult: **s_HKEY__) -> long
export import def #extern #dllimport RegOpenCurrentUser(samDesired: ulong, phkResult: **s_HKEY__) -> long
export import def #extern #dllimport RegDisablePredefinedCache() -> long
export import def #extern #dllimport RegDisablePredefinedCacheEx() -> long
export import def #extern #dllimport RegConnectRegistryA(lpMachineName: *char, hKey: *s_HKEY__, phkResult: **s_HKEY__) -> long
export import def #extern #dllimport RegConnectRegistryW(lpMachineName: *ushort, hKey: *s_HKEY__, phkResult: **s_HKEY__) -> long
export import def #extern #dllimport RegConnectRegistryExA(lpMachineName: *char, hKey: *s_HKEY__, Flags: ulong, phkResult: **s_HKEY__) -> long
export import def #extern #dllimport RegConnectRegistryExW(lpMachineName: *ushort, hKey: *s_HKEY__, Flags: ulong, phkResult: **s_HKEY__) -> long
export import def #extern #dllimport RegCreateKeyA(hKey: *s_HKEY__, lpSubKey: *char, phkResult: **s_HKEY__) -> long
export import def #extern #dllimport RegCreateKeyW(hKey: *s_HKEY__, lpSubKey: *ushort, phkResult: **s_HKEY__) -> long
export import def #extern #dllimport RegCreateKeyExA(hKey: *s_HKEY__, lpSubKey: *char, Reserved: ulong, lpClass: *char, dwOptions: ulong, samDesired: ulong, lpSecurityAttributes: *SECURITY_ATTRIBUTES, phkResult: **s_HKEY__, lpdwDisposition: *ulong) -> long
export import def #extern #dllimport RegCreateKeyExW(hKey: *s_HKEY__, lpSubKey: *ushort, Reserved: ulong, lpClass: *ushort, dwOptions: ulong, samDesired: ulong, lpSecurityAttributes: *SECURITY_ATTRIBUTES, phkResult: **s_HKEY__, lpdwDisposition: *ulong) -> long
export import def #extern #dllimport RegCreateKeyTransactedA(hKey: *s_HKEY__, lpSubKey: *char, Reserved: ulong, lpClass: *char, dwOptions: ulong, samDesired: ulong, lpSecurityAttributes: *SECURITY_ATTRIBUTES, phkResult: **s_HKEY__, lpdwDisposition: *ulong, hTransaction: *, pExtendedParemeter: *) -> long
export import def #extern #dllimport RegCreateKeyTransactedW(hKey: *s_HKEY__, lpSubKey: *ushort, Reserved: ulong, lpClass: *ushort, dwOptions: ulong, samDesired: ulong, lpSecurityAttributes: *SECURITY_ATTRIBUTES, phkResult: **s_HKEY__, lpdwDisposition: *ulong, hTransaction: *, pExtendedParemeter: *) -> long
export import def #extern #dllimport RegDeleteKeyA(hKey: *s_HKEY__, lpSubKey: *char) -> long
export import def #extern #dllimport RegDeleteKeyW(hKey: *s_HKEY__, lpSubKey: *ushort) -> long
export import def #extern #dllimport RegDeleteKeyExA(hKey: *s_HKEY__, lpSubKey: *char, samDesired: ulong, Reserved: ulong) -> long
export import def #extern #dllimport RegDeleteKeyExW(hKey: *s_HKEY__, lpSubKey: *ushort, samDesired: ulong, Reserved: ulong) -> long
export import def #extern #dllimport RegDeleteKeyTransactedA(hKey: *s_HKEY__, lpSubKey: *char, samDesired: ulong, Reserved: ulong, hTransaction: *, pExtendedParameter: *) -> long
export import def #extern #dllimport RegDeleteKeyTransactedW(hKey: *s_HKEY__, lpSubKey: *ushort, samDesired: ulong, Reserved: ulong, hTransaction: *, pExtendedParameter: *) -> long
export import def #extern #dllimport RegDisableReflectionKey(hBase: *s_HKEY__) -> long
export import def #extern #dllimport RegEnableReflectionKey(hBase: *s_HKEY__) -> long
export import def #extern #dllimport RegQueryReflectionKey(hBase: *s_HKEY__, bIsReflectionDisabled: *int) -> long
export import def #extern #dllimport RegDeleteValueA(hKey: *s_HKEY__, lpValueName: *char) -> long
export import def #extern #dllimport RegDeleteValueW(hKey: *s_HKEY__, lpValueName: *ushort) -> long
export import def #extern #dllimport RegEnumKeyA(hKey: *s_HKEY__, dwIndex: ulong, lpName: *char, cchName: ulong) -> long
export import def #extern #dllimport RegEnumKeyW(hKey: *s_HKEY__, dwIndex: ulong, lpName: *ushort, cchName: ulong) -> long
export import def #extern #dllimport RegEnumKeyExA(hKey: *s_HKEY__, dwIndex: ulong, lpName: *char, lpcchName: *ulong, lpReserved: *ulong, lpClass: *char, lpcchClass: *ulong, lpftLastWriteTime: *FILETIME) -> long
export import def #extern #dllimport RegEnumKeyExW(hKey: *s_HKEY__, dwIndex: ulong, lpName: *ushort, lpcchName: *ulong, lpReserved: *ulong, lpClass: *ushort, lpcchClass: *ulong, lpftLastWriteTime: *FILETIME) -> long
export import def #extern #dllimport RegEnumValueA(hKey: *s_HKEY__, dwIndex: ulong, lpValueName: *char, lpcchValueName: *ulong, lpReserved: *ulong, lpType: *ulong, lpData: *char, lpcbData: *ulong) -> long
export import def #extern #dllimport RegEnumValueW(hKey: *s_HKEY__, dwIndex: ulong, lpValueName: *ushort, lpcchValueName: *ulong, lpReserved: *ulong, lpType: *ulong, lpData: *char, lpcbData: *ulong) -> long
export import def #extern #dllimport RegFlushKey(hKey: *s_HKEY__) -> long
export import def #extern #dllimport RegGetKeySecurity(hKey: *s_HKEY__, SecurityInformation: ulong, pSecurityDescriptor: *, lpcbSecurityDescriptor: *ulong) -> long
export import def #extern #dllimport RegLoadKeyA(hKey: *s_HKEY__, lpSubKey: *char, lpFile: *char) -> long
export import def #extern #dllimport RegLoadKeyW(hKey: *s_HKEY__, lpSubKey: *ushort, lpFile: *ushort) -> long
export import def #extern #dllimport RegNotifyChangeKeyValue(hKey: *s_HKEY__, bWatchSubtree: int, dwNotifyFilter: ulong, hEvent: *, fAsynchronous: int) -> long
export import def #extern #dllimport RegOpenKeyA(hKey: *s_HKEY__, lpSubKey: *char, phkResult: **s_HKEY__) -> long
export import def #extern #dllimport RegOpenKeyW(hKey: *s_HKEY__, lpSubKey: *ushort, phkResult: **s_HKEY__) -> long
export import def #extern #dllimport RegOpenKeyExA(hKey: *s_HKEY__, lpSubKey: *char, ulOptions: ulong, samDesired: ulong, phkResult: **s_HKEY__) -> long
export import def #extern #dllimport RegOpenKeyExW(hKey: *s_HKEY__, lpSubKey: *ushort, ulOptions: ulong, samDesired: ulong, phkResult: **s_HKEY__) -> long
export import def #extern #dllimport RegOpenKeyTransactedA(hKey: *s_HKEY__, lpSubKey: *char, ulOptions: ulong, samDesired: ulong, phkResult: **s_HKEY__, hTransaction: *, pExtendedParemeter: *) -> long
export import def #extern #dllimport RegOpenKeyTransactedW(hKey: *s_HKEY__, lpSubKey: *ushort, ulOptions: ulong, samDesired: ulong, phkResult: **s_HKEY__, hTransaction: *, pExtendedParemeter: *) -> long
export import def #extern #dllimport RegQueryInfoKeyA(hKey: *s_HKEY__, lpClass: *char, lpcchClass: *ulong, lpReserved: *ulong, lpcSubKeys: *ulong, lpcbMaxSubKeyLen: *ulong, lpcbMaxClassLen: *ulong, lpcValues: *ulong, lpcbMaxValueNameLen: *ulong, lpcbMaxValueLen: *ulong, lpcbSecurityDescriptor: *ulong, lpftLastWriteTime: *FILETIME) -> long
export import def #extern #dllimport RegQueryInfoKeyW(hKey: *s_HKEY__, lpClass: *ushort, lpcchClass: *ulong, lpReserved: *ulong, lpcSubKeys: *ulong, lpcbMaxSubKeyLen: *ulong, lpcbMaxClassLen: *ulong, lpcValues: *ulong, lpcbMaxValueNameLen: *ulong, lpcbMaxValueLen: *ulong, lpcbSecurityDescriptor: *ulong, lpftLastWriteTime: *FILETIME) -> long
export import def #extern #dllimport RegQueryValueA(hKey: *s_HKEY__, lpSubKey: *char, lpData: *char, lpcbData: *long) -> long
export import def #extern #dllimport RegQueryValueW(hKey: *s_HKEY__, lpSubKey: *ushort, lpData: *ushort, lpcbData: *long) -> long
export import def #extern #dllimport RegQueryMultipleValuesA(hKey: *s_HKEY__, val_list: *VALENTA, num_vals: ulong, lpValueBuf: *char, ldwTotsize: *ulong) -> long
export import def #extern #dllimport RegQueryMultipleValuesW(hKey: *s_HKEY__, val_list: *VALENTW, num_vals: ulong, lpValueBuf: *ushort, ldwTotsize: *ulong) -> long
export import def #extern #dllimport RegQueryValueExA(hKey: *s_HKEY__, lpValueName: *char, lpReserved: *ulong, lpType: *ulong, lpData: *char, lpcbData: *ulong) -> long
export import def #extern #dllimport RegQueryValueExW(hKey: *s_HKEY__, lpValueName: *ushort, lpReserved: *ulong, lpType: *ulong, lpData: *char, lpcbData: *ulong) -> long
export import def #extern #dllimport RegReplaceKeyA(hKey: *s_HKEY__, lpSubKey: *char, lpNewFile: *char, lpOldFile: *char) -> long
export import def #extern #dllimport RegReplaceKeyW(hKey: *s_HKEY__, lpSubKey: *ushort, lpNewFile: *ushort, lpOldFile: *ushort) -> long
export import def #extern #dllimport RegRestoreKeyA(hKey: *s_HKEY__, lpFile: *char, dwFlags: ulong) -> long
export import def #extern #dllimport RegRestoreKeyW(hKey: *s_HKEY__, lpFile: *ushort, dwFlags: ulong) -> long
export import def #extern #dllimport RegRenameKey(hKey: *s_HKEY__, lpSubKeyName: *ushort, lpNewKeyName: *ushort) -> long
export import def #extern #dllimport RegSaveKeyA(hKey: *s_HKEY__, lpFile: *char, lpSecurityAttributes: *SECURITY_ATTRIBUTES) -> long
export import def #extern #dllimport RegSaveKeyW(hKey: *s_HKEY__, lpFile: *ushort, lpSecurityAttributes: *SECURITY_ATTRIBUTES) -> long
export import def #extern #dllimport RegSetKeySecurity(hKey: *s_HKEY__, SecurityInformation: ulong, pSecurityDescriptor: *) -> long
export import def #extern #dllimport RegSetValueA(hKey: *s_HKEY__, lpSubKey: *char, dwType: ulong, lpData: *char, cbData: ulong) -> long
export import def #extern #dllimport RegSetValueW(hKey: *s_HKEY__, lpSubKey: *ushort, dwType: ulong, lpData: *ushort, cbData: ulong) -> long
export import def #extern #dllimport RegSetValueExA(hKey: *s_HKEY__, lpValueName: *char, Reserved: ulong, dwType: ulong, lpData: *char, cbData: ulong) -> long
export import def #extern #dllimport RegSetValueExW(hKey: *s_HKEY__, lpValueName: *ushort, Reserved: ulong, dwType: ulong, lpData: *char, cbData: ulong) -> long
export import def #extern #dllimport RegUnLoadKeyA(hKey: *s_HKEY__, lpSubKey: *char) -> long
export import def #extern #dllimport RegUnLoadKeyW(hKey: *s_HKEY__, lpSubKey: *ushort) -> long
export import def #extern #dllimport RegDeleteKeyValueA(hKey: *s_HKEY__, lpSubKey: *char, lpValueName: *char) -> long
export import def #extern #dllimport RegDeleteKeyValueW(hKey: *s_HKEY__, lpSubKey: *ushort, lpValueName: *ushort) -> long
export import def #extern #dllimport RegSetKeyValueA(hKey: *s_HKEY__, lpSubKey: *char, lpValueName: *char, dwType: ulong, lpData: *, cbData: ulong) -> long
export import def #extern #dllimport RegSetKeyValueW(hKey: *s_HKEY__, lpSubKey: *ushort, lpValueName: *ushort, dwType: ulong, lpData: *, cbData: ulong) -> long
export import def #extern #dllimport RegDeleteTreeA(hKey: *s_HKEY__, lpSubKey: *char) -> long
export import def #extern #dllimport RegDeleteTreeW(hKey: *s_HKEY__, lpSubKey: *ushort) -> long
export import def #extern #dllimport RegCopyTreeA(hKeySrc: *s_HKEY__, lpSubKey: *char, hKeyDest: *s_HKEY__) -> long
export import def #extern #dllimport RegGetValueA(hkey: *s_HKEY__, lpSubKey: *char, lpValue: *char, dwFlags: ulong, pdwType: *ulong, pvData: *, pcbData: *ulong) -> long
export import def #extern #dllimport RegGetValueW(hkey: *s_HKEY__, lpSubKey: *ushort, lpValue: *ushort, dwFlags: ulong, pdwType: *ulong, pvData: *, pcbData: *ulong) -> long
export import def #extern #dllimport RegCopyTreeW(hKeySrc: *s_HKEY__, lpSubKey: *ushort, hKeyDest: *s_HKEY__) -> long
export import def #extern #dllimport RegLoadMUIStringA(hKey: *s_HKEY__, pszValue: *char, pszOutBuf: *char, cbOutBuf: ulong, pcbData: *ulong, Flags: ulong, pszDirectory: *char) -> long
export import def #extern #dllimport RegLoadMUIStringW(hKey: *s_HKEY__, pszValue: *ushort, pszOutBuf: *ushort, cbOutBuf: ulong, pcbData: *ulong, Flags: ulong, pszDirectory: *ushort) -> long
export import def #extern #dllimport RegLoadAppKeyA(lpFile: *char, phkResult: **s_HKEY__, samDesired: ulong, dwOptions: ulong, Reserved: ulong) -> long
export import def #extern #dllimport RegLoadAppKeyW(lpFile: *ushort, phkResult: **s_HKEY__, samDesired: ulong, dwOptions: ulong, Reserved: ulong) -> long
export import def #extern #dllimport InitiateSystemShutdownA(lpMachineName: *char, lpMessage: *char, dwTimeout: ulong, bForceAppsClosed: int, bRebootAfterShutdown: int) -> int
export import def #extern #dllimport InitiateSystemShutdownW(lpMachineName: *ushort, lpMessage: *ushort, dwTimeout: ulong, bForceAppsClosed: int, bRebootAfterShutdown: int) -> int
export import def #extern #dllimport AbortSystemShutdownA(lpMachineName: *char) -> int
export import def #extern #dllimport AbortSystemShutdownW(lpMachineName: *ushort) -> int
export import def #extern #dllimport InitiateSystemShutdownExA(lpMachineName: *char, lpMessage: *char, dwTimeout: ulong, bForceAppsClosed: int, bRebootAfterShutdown: int, dwReason: ulong) -> int
export import def #extern #dllimport InitiateSystemShutdownExW(lpMachineName: *ushort, lpMessage: *ushort, dwTimeout: ulong, bForceAppsClosed: int, bRebootAfterShutdown: int, dwReason: ulong) -> int
export import def #extern #dllimport InitiateShutdownA(lpMachineName: *char, lpMessage: *char, dwGracePeriod: ulong, dwShutdownFlags: ulong, dwReason: ulong) -> ulong
export import def #extern #dllimport InitiateShutdownW(lpMachineName: *ushort, lpMessage: *ushort, dwGracePeriod: ulong, dwShutdownFlags: ulong, dwReason: ulong) -> ulong
export import def #extern #dllimport CheckForHiberboot(pHiberboot: *char, bClearFlag: char) -> ulong
export import def #extern #dllimport RegSaveKeyExA(hKey: *s_HKEY__, lpFile: *char, lpSecurityAttributes: *SECURITY_ATTRIBUTES, Flags: ulong) -> long
export import def #extern #dllimport RegSaveKeyExW(hKey: *s_HKEY__, lpFile: *ushort, lpSecurityAttributes: *SECURITY_ATTRIBUTES, Flags: ulong) -> long
export import def #extern WNetAddConnectionA(lpRemoteName: *char, lpPassword: *char, lpLocalName: *char) -> ulong
export import def #extern WNetAddConnectionW(lpRemoteName: *ushort, lpPassword: *ushort, lpLocalName: *ushort) -> ulong
export import def #extern WNetAddConnection2A(lpNetResource: *NETRESOURCEA, lpPassword: *char, lpUserName: *char, dwFlags: ulong) -> ulong
export import def #extern WNetAddConnection2W(lpNetResource: *NETRESOURCEW, lpPassword: *ushort, lpUserName: *ushort, dwFlags: ulong) -> ulong
export import def #extern WNetAddConnection3A(hwndOwner: *s_HWND__, lpNetResource: *NETRESOURCEA, lpPassword: *char, lpUserName: *char, dwFlags: ulong) -> ulong
export import def #extern WNetAddConnection3W(hwndOwner: *s_HWND__, lpNetResource: *NETRESOURCEW, lpPassword: *ushort, lpUserName: *ushort, dwFlags: ulong) -> ulong
export import def #extern WNetAddConnection4A(hwndOwner: *s_HWND__, lpNetResource: *NETRESOURCEA, pAuthBuffer: *, cbAuthBuffer: ulong, dwFlags: ulong, lpUseOptions: *char, cbUseOptions: ulong) -> ulong
export import def #extern WNetAddConnection4W(hwndOwner: *s_HWND__, lpNetResource: *NETRESOURCEW, pAuthBuffer: *, cbAuthBuffer: ulong, dwFlags: ulong, lpUseOptions: *char, cbUseOptions: ulong) -> ulong
export import def #extern WNetCancelConnectionA(lpName: *char, fForce: int) -> ulong
export import def #extern WNetCancelConnectionW(lpName: *ushort, fForce: int) -> ulong
export import def #extern WNetCancelConnection2A(lpName: *char, dwFlags: ulong, fForce: int) -> ulong
export import def #extern WNetCancelConnection2W(lpName: *ushort, dwFlags: ulong, fForce: int) -> ulong
export import def #extern WNetGetConnectionA(lpLocalName: *char, lpRemoteName: *char, lpnLength: *ulong) -> ulong
export import def #extern WNetGetConnectionW(lpLocalName: *ushort, lpRemoteName: *ushort, lpnLength: *ulong) -> ulong
export import def #extern WNetRestoreSingleConnectionW(hwndParent: *s_HWND__, lpDevice: *ushort, fUseUI: int) -> ulong
export import def #extern WNetUseConnectionA(hwndOwner: *s_HWND__, lpNetResource: *NETRESOURCEA, lpPassword: *char, lpUserId: *char, dwFlags: ulong, lpAccessName: *char, lpBufferSize: *ulong, lpResult: *ulong) -> ulong
export import def #extern WNetUseConnectionW(hwndOwner: *s_HWND__, lpNetResource: *NETRESOURCEW, lpPassword: *ushort, lpUserId: *ushort, dwFlags: ulong, lpAccessName: *ushort, lpBufferSize: *ulong, lpResult: *ulong) -> ulong
export import def #extern WNetUseConnection4A(hwndOwner: *s_HWND__, lpNetResource: *NETRESOURCEA, pAuthBuffer: *, cbAuthBuffer: ulong, dwFlags: ulong, lpUseOptions: *char, cbUseOptions: ulong, lpAccessName: *char, lpBufferSize: *ulong, lpResult: *ulong) -> ulong
export import def #extern WNetUseConnection4W(hwndOwner: *s_HWND__, lpNetResource: *NETRESOURCEW, pAuthBuffer: *, cbAuthBuffer: ulong, dwFlags: ulong, lpUseOptions: *char, cbUseOptions: ulong, lpAccessName: *ushort, lpBufferSize: *ulong, lpResult: *ulong) -> ulong
export import def #extern WNetConnectionDialog(hwnd: *s_HWND__, dwType: ulong) -> ulong
export import def #extern WNetDisconnectDialog(hwnd: *s_HWND__, dwType: ulong) -> ulong
export import def #extern WNetConnectionDialog1A(lpConnDlgStruct: *CONNECTDLGSTRUCTA) -> ulong
export import def #extern WNetConnectionDialog1W(lpConnDlgStruct: *CONNECTDLGSTRUCTW) -> ulong
export import def #extern WNetDisconnectDialog1A(lpConnDlgStruct: *DISCDLGSTRUCTA) -> ulong
export import def #extern WNetDisconnectDialog1W(lpConnDlgStruct: *DISCDLGSTRUCTW) -> ulong
export import def #extern WNetOpenEnumA(dwScope: ulong, dwType: ulong, dwUsage: ulong, lpNetResource: *NETRESOURCEA, lphEnum: **) -> ulong
export import def #extern WNetOpenEnumW(dwScope: ulong, dwType: ulong, dwUsage: ulong, lpNetResource: *NETRESOURCEW, lphEnum: **) -> ulong
export import def #extern WNetEnumResourceA(hEnum: *, lpcCount: *ulong, lpBuffer: *, lpBufferSize: *ulong) -> ulong
export import def #extern WNetEnumResourceW(hEnum: *, lpcCount: *ulong, lpBuffer: *, lpBufferSize: *ulong) -> ulong
export import def #extern WNetCloseEnum(hEnum: *) -> ulong
export import def #extern WNetGetResourceParentA(lpNetResource: *NETRESOURCEA, lpBuffer: *, lpcbBuffer: *ulong) -> ulong
export import def #extern WNetGetResourceParentW(lpNetResource: *NETRESOURCEW, lpBuffer: *, lpcbBuffer: *ulong) -> ulong
export import def #extern WNetGetResourceInformationA(lpNetResource: *NETRESOURCEA, lpBuffer: *, lpcbBuffer: *ulong, lplpSystem: **char) -> ulong
export import def #extern WNetGetResourceInformationW(lpNetResource: *NETRESOURCEW, lpBuffer: *, lpcbBuffer: *ulong, lplpSystem: **ushort) -> ulong
export import def #extern WNetGetUniversalNameA(lpLocalPath: *char, dwInfoLevel: ulong, lpBuffer: *, lpBufferSize: *ulong) -> ulong
export import def #extern WNetGetUniversalNameW(lpLocalPath: *ushort, dwInfoLevel: ulong, lpBuffer: *, lpBufferSize: *ulong) -> ulong
export import def #extern WNetGetUserA(lpName: *char, lpUserName: *char, lpnLength: *ulong) -> ulong
export import def #extern WNetGetUserW(lpName: *ushort, lpUserName: *ushort, lpnLength: *ulong) -> ulong
export import def #extern WNetGetProviderNameA(dwNetType: ulong, lpProviderName: *char, lpBufferSize: *ulong) -> ulong
export import def #extern WNetGetProviderNameW(dwNetType: ulong, lpProviderName: *ushort, lpBufferSize: *ulong) -> ulong
export import def #extern WNetGetNetworkInformationA(lpProvider: *char, lpNetInfoStruct: *NETINFOSTRUCT) -> ulong
export import def #extern WNetGetNetworkInformationW(lpProvider: *ushort, lpNetInfoStruct: *NETINFOSTRUCT) -> ulong
export import def #extern WNetGetLastErrorA(lpError: *ulong, lpErrorBuf: *char, nErrorBufSize: ulong, lpNameBuf: *char, nNameBufSize: ulong) -> ulong
export import def #extern WNetGetLastErrorW(lpError: *ulong, lpErrorBuf: *ushort, nErrorBufSize: ulong, lpNameBuf: *ushort, nNameBufSize: ulong) -> ulong
export import def #extern MultinetGetConnectionPerformanceA(lpNetResource: *NETRESOURCEA, lpNetConnectInfoStruct: *NETCONNECTINFOSTRUCT) -> ulong
export import def #extern MultinetGetConnectionPerformanceW(lpNetResource: *NETRESOURCEW, lpNetConnectInfoStruct: *NETCONNECTINFOSTRUCT) -> ulong
export import def #extern DdeSetQualityOfService(hwndClient: *s_HWND__, pqosNew: *SECURITY_QUALITY_OF_SERVICE, pqosPrev: *SECURITY_QUALITY_OF_SERVICE) -> int
export import def #extern ImpersonateDdeClientWindow(hWndClient: *s_HWND__, hWndServer: *s_HWND__) -> int
export import def #extern PackDDElParam(msg: uint, uiLo: uint64, uiHi: uint64) -> int64
export import def #extern UnpackDDElParam(msg: uint, lParam: int64, puiLo: *uint64, puiHi: *uint64) -> int
export import def #extern FreeDDElParam(msg: uint, lParam: int64) -> int
export import def #extern ReuseDDElParam(lParam: int64, msgIn: uint, msgOut: uint, uiLo: uint64, uiHi: uint64) -> int64
export import def #extern DdeInitializeA(pidInst: *ulong, pfnCallback: def (uint, uint, *s_HCONV__, *s_HSZ__, *s_HSZ__, *s_HDDEDATA__, uint64, uint64) -> (*s_HDDEDATA__), afCmd: ulong, ulRes: ulong) -> uint
export import def #extern DdeInitializeW(pidInst: *ulong, pfnCallback: def (uint, uint, *s_HCONV__, *s_HSZ__, *s_HSZ__, *s_HDDEDATA__, uint64, uint64) -> (*s_HDDEDATA__), afCmd: ulong, ulRes: ulong) -> uint
export import def #extern DdeUninitialize(idInst: ulong) -> int
export import def #extern DdeConnectList(idInst: ulong, hszService: *s_HSZ__, hszTopic: *s_HSZ__, hConvList: *s_HCONVLIST__, pCC: *CONVCONTEXT) -> *s_HCONVLIST__
export import def #extern DdeQueryNextServer(hConvList: *s_HCONVLIST__, hConvPrev: *s_HCONV__) -> *s_HCONV__
export import def #extern DdeDisconnectList(hConvList: *s_HCONVLIST__) -> int
export import def #extern DdeConnect(idInst: ulong, hszService: *s_HSZ__, hszTopic: *s_HSZ__, pCC: *CONVCONTEXT) -> *s_HCONV__
export import def #extern DdeDisconnect(hConv: *s_HCONV__) -> int
export import def #extern DdeReconnect(hConv: *s_HCONV__) -> *s_HCONV__
export import def #extern DdeQueryConvInfo(hConv: *s_HCONV__, idTransaction: ulong, pConvInfo: *CONVINFO) -> uint
export import def #extern DdeSetUserHandle(hConv: *s_HCONV__, id: ulong, hUser: uint64) -> int
export import def #extern DdeAbandonTransaction(idInst: ulong, hConv: *s_HCONV__, idTransaction: ulong) -> int
export import def #extern DdePostAdvise(idInst: ulong, hszTopic: *s_HSZ__, hszItem: *s_HSZ__) -> int
export import def #extern DdeEnableCallback(idInst: ulong, hConv: *s_HCONV__, wCmd: uint) -> int
export import def #extern DdeImpersonateClient(hConv: *s_HCONV__) -> int
export import def #extern DdeNameService(idInst: ulong, hsz1: *s_HSZ__, hsz2: *s_HSZ__, afCmd: uint) -> *s_HDDEDATA__
export import def #extern DdeClientTransaction(pData: *char, cbData: ulong, hConv: *s_HCONV__, hszItem: *s_HSZ__, wFmt: uint, wType: uint, dwTimeout: ulong, pdwResult: *ulong) -> *s_HDDEDATA__
export import def #extern DdeCreateDataHandle(idInst: ulong, pSrc: *char, cb: ulong, cbOff: ulong, hszItem: *s_HSZ__, wFmt: uint, afCmd: uint) -> *s_HDDEDATA__
export import def #extern DdeAddData(hData: *s_HDDEDATA__, pSrc: *char, cb: ulong, cbOff: ulong) -> *s_HDDEDATA__
export import def #extern DdeGetData(hData: *s_HDDEDATA__, pDst: *char, cbMax: ulong, cbOff: ulong) -> ulong
export import def #extern DdeAccessData(hData: *s_HDDEDATA__, pcbDataSize: *ulong) -> *char
export import def #extern DdeUnaccessData(hData: *s_HDDEDATA__) -> int
export import def #extern DdeFreeDataHandle(hData: *s_HDDEDATA__) -> int
export import def #extern DdeGetLastError(idInst: ulong) -> uint
export import def #extern DdeCreateStringHandleA(idInst: ulong, psz: *char, iCodePage: int) -> *s_HSZ__
export import def #extern DdeCreateStringHandleW(idInst: ulong, psz: *ushort, iCodePage: int) -> *s_HSZ__
export import def #extern DdeQueryStringA(idInst: ulong, hsz: *s_HSZ__, psz: *char, cchMax: ulong, iCodePage: int) -> ulong
export import def #extern DdeQueryStringW(idInst: ulong, hsz: *s_HSZ__, psz: *ushort, cchMax: ulong, iCodePage: int) -> ulong
export import def #extern DdeFreeStringHandle(idInst: ulong, hsz: *s_HSZ__) -> int
export import def #extern DdeKeepStringHandle(idInst: ulong, hsz: *s_HSZ__) -> int
export import def #extern DdeCmpStringHandles(hsz1: *s_HSZ__, hsz2: *s_HSZ__) -> int
export import def #extern LZStart() -> int
export import def #extern LZDone()
export import def #extern CopyLZFile(hfSource: int, hfDest: int) -> long
export import def #extern LZCopy(hfSource: int, hfDest: int) -> long
export import def #extern LZInit(hfSource: int) -> int
export import def #extern GetExpandedNameA(lpszSource: *char, lpszBuffer: *char) -> int
export import def #extern GetExpandedNameW(lpszSource: *ushort, lpszBuffer: *ushort) -> int
export import def #extern LZOpenFileA(lpFileName: *char, lpReOpenBuf: *OFSTRUCT, wStyle: ushort) -> int
export import def #extern LZOpenFileW(lpFileName: *ushort, lpReOpenBuf: *OFSTRUCT, wStyle: ushort) -> int
export import def #extern LZSeek(hFile: int, lOffset: long, iOrigin: int) -> long
export import def #extern LZRead(hFile: int, lpBuffer: *char, cbRead: int) -> int
export import def #extern LZClose(hFile: int)
export import def #extern #dllimport mciSendCommandA(mciId: uint, uMsg: uint, dwParam1: uint64, dwParam2: uint64) -> ulong
export import def #extern #dllimport mciSendCommandW(mciId: uint, uMsg: uint, dwParam1: uint64, dwParam2: uint64) -> ulong
export import def #extern #dllimport mciSendStringA(lpstrCommand: *char, lpstrReturnString: *char, uReturnLength: uint, hwndCallback: *s_HWND__) -> ulong
export import def #extern #dllimport mciSendStringW(lpstrCommand: *ushort, lpstrReturnString: *ushort, uReturnLength: uint, hwndCallback: *s_HWND__) -> ulong
export import def #extern #dllimport mciGetDeviceIDA(pszDevice: *char) -> uint
export import def #extern #dllimport mciGetDeviceIDW(pszDevice: *ushort) -> uint
export import def #extern #dllimport mciGetDeviceIDFromElementIDA(dwElementID: ulong, lpstrType: *char) -> uint
export import def #extern #dllimport mciGetDeviceIDFromElementIDW(dwElementID: ulong, lpstrType: *ushort) -> uint
export import def #extern #dllimport mciGetErrorStringA(mcierr: ulong, pszText: *char, cchText: uint) -> int
export import def #extern #dllimport mciGetErrorStringW(mcierr: ulong, pszText: *ushort, cchText: uint) -> int
export import def #extern #dllimport mciSetYieldProc(mciId: uint, fpYieldProc: def (uint, ulong) -> (uint), dwYieldData: ulong) -> int
export import def #extern #dllimport mciGetCreatorTask(mciId: uint) -> *s_HTASK__
export import def #extern #dllimport mciGetYieldProc(mciId: uint, pdwYieldData: *ulong) -> def (uint, ulong) -> (uint)
export import def #extern mciGetDriverData(wDeviceID: uint) -> uint64
export import def #extern mciLoadCommandResource(hInstance: *, lpResName: *ushort, wType: uint) -> uint
export import def #extern mciSetDriverData(wDeviceID: uint, dwData: uint64) -> int
export import def #extern mciDriverYield(wDeviceID: uint) -> uint
export import def #extern mciDriverNotify(hwndCallback: *, wDeviceID: uint, uStatus: uint) -> int
export import def #extern mciFreeCommandResource(wTable: uint) -> int
export import def #extern #dllimport CloseDriver(hDriver: *s_HDRVR__, lParam1: int64, lParam2: int64) -> int64
export import def #extern #dllimport OpenDriver(szDriverName: *ushort, szSectionName: *ushort, lParam2: int64) -> *s_HDRVR__
export import def #extern #dllimport SendDriverMessage(hDriver: *s_HDRVR__, message: uint, lParam1: int64, lParam2: int64) -> int64
export import def #extern #dllimport DrvGetModuleHandle(hDriver: *s_HDRVR__) -> *s_HINSTANCE__
export import def #extern #dllimport GetDriverModuleHandle(hDriver: *s_HDRVR__) -> *s_HINSTANCE__
export import def #extern #dllimport DefDriverProc(dwDriverIdentifier: uint64, hdrvr: *s_HDRVR__, uMsg: uint, lParam1: int64, lParam2: int64) -> int64
export import def #extern DriverCallback(dwCallback: uint64, dwFlags: ulong, hDevice: *s_HDRVR__, dwMsg: ulong, dwUser: uint64, dwParam1: uint64, dwParam2: uint64) -> int
export import def #extern sndOpenSound(EventName: *ushort, AppName: *ushort, Flags: int, FileHandle: **) -> long
export import def #extern mmDrvInstall(hDriver: *s_HDRVR__, wszDrvEntry: *ushort, drvMessage: def (ulong, ulong, uint64, uint64, uint64) -> (ulong), wFlags: uint) -> uint
export import def #extern #dllimport mmioStringToFOURCCA(sz: *char, uFlags: uint) -> ulong
export import def #extern #dllimport mmioStringToFOURCCW(sz: *ushort, uFlags: uint) -> ulong
export import def #extern #dllimport mmioInstallIOProcA(fccIOProc: ulong, pIOProc: *int64, dwFlags: ulong) -> *int64
export import def #extern #dllimport mmioInstallIOProcW(fccIOProc: ulong, pIOProc: *int64, dwFlags: ulong) -> *int64
export import def #extern #dllimport mmioOpenA(pszFileName: *char, pmmioinfo: *MMIOINFO, fdwOpen: ulong) -> *s_HMMIO__
export import def #extern #dllimport mmioOpenW(pszFileName: *ushort, pmmioinfo: *MMIOINFO, fdwOpen: ulong) -> *s_HMMIO__
export import def #extern #dllimport mmioRenameA(pszFileName: *char, pszNewFileName: *char, pmmioinfo: *MMIOINFO, fdwRename: ulong) -> uint
export import def #extern #dllimport mmioRenameW(pszFileName: *ushort, pszNewFileName: *ushort, pmmioinfo: *MMIOINFO, fdwRename: ulong) -> uint
export import def #extern #dllimport mmioClose(hmmio: *s_HMMIO__, fuClose: uint) -> uint
export import def #extern #dllimport mmioRead(hmmio: *s_HMMIO__, pch: *char, cch: long) -> long
export import def #extern #dllimport mmioWrite(hmmio: *s_HMMIO__, pch: *char, cch: long) -> long
export import def #extern #dllimport mmioSeek(hmmio: *s_HMMIO__, lOffset: long, iOrigin: int) -> long
export import def #extern #dllimport mmioGetInfo(hmmio: *s_HMMIO__, pmmioinfo: *MMIOINFO, fuInfo: uint) -> uint
export import def #extern #dllimport mmioSetInfo(hmmio: *s_HMMIO__, pmmioinfo: *MMIOINFO, fuInfo: uint) -> uint
export import def #extern #dllimport mmioSetBuffer(hmmio: *s_HMMIO__, pchBuffer: *char, cchBuffer: long, fuBuffer: uint) -> uint
export import def #extern #dllimport mmioFlush(hmmio: *s_HMMIO__, fuFlush: uint) -> uint
export import def #extern #dllimport mmioAdvance(hmmio: *s_HMMIO__, pmmioinfo: *MMIOINFO, fuAdvance: uint) -> uint
export import def #extern #dllimport mmioSendMessage(hmmio: *s_HMMIO__, uMsg: uint, lParam1: int64, lParam2: int64) -> int64
export import def #extern #dllimport mmioDescend(hmmio: *s_HMMIO__, pmmcki: *MMCKINFO, pmmckiParent: *MMCKINFO, fuDescend: uint) -> uint
export import def #extern #dllimport mmioAscend(hmmio: *s_HMMIO__, pmmcki: *MMCKINFO, fuAscend: uint) -> uint
export import def #extern #dllimport mmioCreateChunk(hmmio: *s_HMMIO__, pmmcki: *MMCKINFO, fuCreate: uint) -> uint
export import def #extern #dllimport timeSetEvent(uDelay: uint, uResolution: uint, fptc: *, dwUser: uint64, fuEvent: uint) -> uint
export import def #extern #dllimport timeKillEvent(uTimerID: uint) -> uint
export import def #extern #dllimport sndPlaySoundA(pszSound: *char, fuSound: uint) -> int
export import def #extern #dllimport sndPlaySoundW(pszSound: *ushort, fuSound: uint) -> int
export import def #extern #dllimport PlaySoundA(pszSound: *char, hmod: *s_HINSTANCE__, fdwSound: ulong) -> int
export import def #extern #dllimport PlaySoundW(pszSound: *ushort, hmod: *s_HINSTANCE__, fdwSound: ulong) -> int
export import def #extern #dllimport waveOutGetNumDevs() -> uint
export import def #extern #dllimport waveOutGetDevCapsA(uDeviceID: uint64, pwoc: *WAVEOUTCAPSA, cbwoc: uint) -> uint
export import def #extern #dllimport waveOutGetDevCapsW(uDeviceID: uint64, pwoc: *WAVEOUTCAPSW, cbwoc: uint) -> uint
export import def #extern #dllimport waveOutGetVolume(hwo: *s_HWAVEOUT__, pdwVolume: *ulong) -> uint
export import def #extern #dllimport waveOutSetVolume(hwo: *s_HWAVEOUT__, dwVolume: ulong) -> uint
export import def #extern #dllimport waveOutGetErrorTextA(mmrError: uint, pszText: *char, cchText: uint) -> uint
export import def #extern #dllimport waveOutGetErrorTextW(mmrError: uint, pszText: *ushort, cchText: uint) -> uint
export import def #extern #dllimport waveOutOpen(phwo: **s_HWAVEOUT__, uDeviceID: uint, pwfx: *WAVEFORMATEX, dwCallback: uint64, dwInstance: uint64, fdwOpen: ulong) -> uint
export import def #extern #dllimport waveOutClose(hwo: *s_HWAVEOUT__) -> uint
export import def #extern #dllimport waveOutPrepareHeader(hwo: *s_HWAVEOUT__, pwh: *WAVEHDR, cbwh: uint) -> uint
export import def #extern #dllimport waveOutUnprepareHeader(hwo: *s_HWAVEOUT__, pwh: *WAVEHDR, cbwh: uint) -> uint
export import def #extern #dllimport waveOutWrite(hwo: *s_HWAVEOUT__, pwh: *WAVEHDR, cbwh: uint) -> uint
export import def #extern #dllimport waveOutPause(hwo: *s_HWAVEOUT__) -> uint
export import def #extern #dllimport waveOutRestart(hwo: *s_HWAVEOUT__) -> uint
export import def #extern #dllimport waveOutReset(hwo: *s_HWAVEOUT__) -> uint
export import def #extern #dllimport waveOutBreakLoop(hwo: *s_HWAVEOUT__) -> uint
export import def #extern #dllimport waveOutGetPosition(hwo: *s_HWAVEOUT__, pmmt: *MMTIME, cbmmt: uint) -> uint
export import def #extern #dllimport waveOutGetPitch(hwo: *s_HWAVEOUT__, pdwPitch: *ulong) -> uint
export import def #extern #dllimport waveOutSetPitch(hwo: *s_HWAVEOUT__, dwPitch: ulong) -> uint
export import def #extern #dllimport waveOutGetPlaybackRate(hwo: *s_HWAVEOUT__, pdwRate: *ulong) -> uint
export import def #extern #dllimport waveOutSetPlaybackRate(hwo: *s_HWAVEOUT__, dwRate: ulong) -> uint
export import def #extern #dllimport waveOutGetID(hwo: *s_HWAVEOUT__, puDeviceID: *uint) -> uint
export import def #extern #dllimport waveOutMessage(hwo: *s_HWAVEOUT__, uMsg: uint, dw1: uint64, dw2: uint64) -> uint
export import def #extern #dllimport waveInGetNumDevs() -> uint
export import def #extern #dllimport waveInGetDevCapsA(uDeviceID: uint64, pwic: *WAVEINCAPSA, cbwic: uint) -> uint
export import def #extern #dllimport waveInGetDevCapsW(uDeviceID: uint64, pwic: *WAVEINCAPSW, cbwic: uint) -> uint
export import def #extern #dllimport waveInGetErrorTextA(mmrError: uint, pszText: *char, cchText: uint) -> uint
export import def #extern #dllimport waveInGetErrorTextW(mmrError: uint, pszText: *ushort, cchText: uint) -> uint
export import def #extern #dllimport waveInOpen(phwi: **s_HWAVEIN__, uDeviceID: uint, pwfx: *WAVEFORMATEX, dwCallback: uint64, dwInstance: uint64, fdwOpen: ulong) -> uint
export import def #extern #dllimport waveInClose(hwi: *s_HWAVEIN__) -> uint
export import def #extern #dllimport waveInPrepareHeader(hwi: *s_HWAVEIN__, pwh: *WAVEHDR, cbwh: uint) -> uint
export import def #extern #dllimport waveInUnprepareHeader(hwi: *s_HWAVEIN__, pwh: *WAVEHDR, cbwh: uint) -> uint
export import def #extern #dllimport waveInAddBuffer(hwi: *s_HWAVEIN__, pwh: *WAVEHDR, cbwh: uint) -> uint
export import def #extern #dllimport waveInStart(hwi: *s_HWAVEIN__) -> uint
export import def #extern #dllimport waveInStop(hwi: *s_HWAVEIN__) -> uint
export import def #extern #dllimport waveInReset(hwi: *s_HWAVEIN__) -> uint
export import def #extern #dllimport waveInGetPosition(hwi: *s_HWAVEIN__, pmmt: *MMTIME, cbmmt: uint) -> uint
export import def #extern #dllimport waveInGetID(hwi: *s_HWAVEIN__, puDeviceID: *uint) -> uint
export import def #extern #dllimport waveInMessage(hwi: *s_HWAVEIN__, uMsg: uint, dw1: uint64, dw2: uint64) -> uint
export import def #extern #dllimport midiOutGetNumDevs() -> uint
export import def #extern #dllimport midiStreamOpen(phms: **s_HMIDISTRM__, puDeviceID: *uint, cMidi: ulong, dwCallback: uint64, dwInstance: uint64, fdwOpen: ulong) -> uint
export import def #extern #dllimport midiStreamClose(hms: *s_HMIDISTRM__) -> uint
export import def #extern #dllimport midiStreamProperty(hms: *s_HMIDISTRM__, lppropdata: *char, dwProperty: ulong) -> uint
export import def #extern #dllimport midiStreamPosition(hms: *s_HMIDISTRM__, lpmmt: *MMTIME, cbmmt: uint) -> uint
export import def #extern #dllimport midiStreamOut(hms: *s_HMIDISTRM__, pmh: *MIDIHDR, cbmh: uint) -> uint
export import def #extern #dllimport midiStreamPause(hms: *s_HMIDISTRM__) -> uint
export import def #extern #dllimport midiStreamRestart(hms: *s_HMIDISTRM__) -> uint
export import def #extern #dllimport midiStreamStop(hms: *s_HMIDISTRM__) -> uint
export import def #extern #dllimport midiConnect(hmi: *s_HMIDI__, hmo: *s_HMIDIOUT__, pReserved: *) -> uint
export import def #extern #dllimport midiDisconnect(hmi: *s_HMIDI__, hmo: *s_HMIDIOUT__, pReserved: *) -> uint
export import def #extern #dllimport midiOutGetDevCapsA(uDeviceID: uint64, pmoc: *MIDIOUTCAPSA, cbmoc: uint) -> uint
export import def #extern #dllimport midiOutGetDevCapsW(uDeviceID: uint64, pmoc: *MIDIOUTCAPSW, cbmoc: uint) -> uint
export import def #extern #dllimport midiOutGetVolume(hmo: *s_HMIDIOUT__, pdwVolume: *ulong) -> uint
export import def #extern #dllimport midiOutSetVolume(hmo: *s_HMIDIOUT__, dwVolume: ulong) -> uint
export import def #extern #dllimport midiOutGetErrorTextA(mmrError: uint, pszText: *char, cchText: uint) -> uint
export import def #extern #dllimport midiOutGetErrorTextW(mmrError: uint, pszText: *ushort, cchText: uint) -> uint
export import def #extern #dllimport midiOutOpen(phmo: **s_HMIDIOUT__, uDeviceID: uint, dwCallback: uint64, dwInstance: uint64, fdwOpen: ulong) -> uint
export import def #extern #dllimport midiOutClose(hmo: *s_HMIDIOUT__) -> uint
export import def #extern #dllimport midiOutPrepareHeader(hmo: *s_HMIDIOUT__, pmh: *MIDIHDR, cbmh: uint) -> uint
export import def #extern #dllimport midiOutUnprepareHeader(hmo: *s_HMIDIOUT__, pmh: *MIDIHDR, cbmh: uint) -> uint
export import def #extern #dllimport midiOutShortMsg(hmo: *s_HMIDIOUT__, dwMsg: ulong) -> uint
export import def #extern #dllimport midiOutLongMsg(hmo: *s_HMIDIOUT__, pmh: *MIDIHDR, cbmh: uint) -> uint
export import def #extern #dllimport midiOutReset(hmo: *s_HMIDIOUT__) -> uint
export import def #extern #dllimport midiOutCachePatches(hmo: *s_HMIDIOUT__, uBank: uint, pwpa: *ushort, fuCache: uint) -> uint
export import def #extern #dllimport midiOutCacheDrumPatches(hmo: *s_HMIDIOUT__, uPatch: uint, pwkya: *ushort, fuCache: uint) -> uint
export import def #extern #dllimport midiOutGetID(hmo: *s_HMIDIOUT__, puDeviceID: *uint) -> uint
export import def #extern #dllimport midiOutMessage(hmo: *s_HMIDIOUT__, uMsg: uint, dw1: uint64, dw2: uint64) -> uint
export import def #extern #dllimport midiInGetNumDevs() -> uint
export import def #extern #dllimport midiInGetDevCapsA(uDeviceID: uint64, pmic: *MIDIINCAPSA, cbmic: uint) -> uint
export import def #extern #dllimport midiInGetDevCapsW(uDeviceID: uint64, pmic: *MIDIINCAPSW, cbmic: uint) -> uint
export import def #extern #dllimport midiInGetErrorTextA(mmrError: uint, pszText: *char, cchText: uint) -> uint
export import def #extern #dllimport midiInGetErrorTextW(mmrError: uint, pszText: *ushort, cchText: uint) -> uint
export import def #extern #dllimport midiInOpen(phmi: **s_HMIDIIN__, uDeviceID: uint, dwCallback: uint64, dwInstance: uint64, fdwOpen: ulong) -> uint
export import def #extern #dllimport midiInClose(hmi: *s_HMIDIIN__) -> uint
export import def #extern #dllimport midiInPrepareHeader(hmi: *s_HMIDIIN__, pmh: *MIDIHDR, cbmh: uint) -> uint
export import def #extern #dllimport midiInUnprepareHeader(hmi: *s_HMIDIIN__, pmh: *MIDIHDR, cbmh: uint) -> uint
export import def #extern #dllimport midiInAddBuffer(hmi: *s_HMIDIIN__, pmh: *MIDIHDR, cbmh: uint) -> uint
export import def #extern #dllimport midiInStart(hmi: *s_HMIDIIN__) -> uint
export import def #extern #dllimport midiInStop(hmi: *s_HMIDIIN__) -> uint
export import def #extern #dllimport midiInReset(hmi: *s_HMIDIIN__) -> uint
export import def #extern #dllimport midiInGetID(hmi: *s_HMIDIIN__, puDeviceID: *uint) -> uint
export import def #extern #dllimport midiInMessage(hmi: *s_HMIDIIN__, uMsg: uint, dw1: uint64, dw2: uint64) -> uint
export import def #extern #dllimport auxGetNumDevs() -> uint
export import def #extern #dllimport auxGetDevCapsA(uDeviceID: uint64, pac: *AUXCAPSA, cbac: uint) -> uint
export import def #extern #dllimport auxGetDevCapsW(uDeviceID: uint64, pac: *AUXCAPSW, cbac: uint) -> uint
export import def #extern #dllimport auxSetVolume(uDeviceID: uint, dwVolume: ulong) -> uint
export import def #extern #dllimport auxGetVolume(uDeviceID: uint, pdwVolume: *ulong) -> uint
export import def #extern #dllimport auxOutMessage(uDeviceID: uint, uMsg: uint, dw1: uint64, dw2: uint64) -> uint
export import def #extern #dllimport mixerGetNumDevs() -> uint
export import def #extern #dllimport mixerGetDevCapsA(uMxId: uint64, pmxcaps: *MIXERCAPSA, cbmxcaps: uint) -> uint
export import def #extern #dllimport mixerGetDevCapsW(uMxId: uint64, pmxcaps: *MIXERCAPSW, cbmxcaps: uint) -> uint
export import def #extern #dllimport mixerOpen(phmx: **s_HMIXER__, uMxId: uint, dwCallback: uint64, dwInstance: uint64, fdwOpen: ulong) -> uint
export import def #extern #dllimport mixerClose(hmx: *s_HMIXER__) -> uint
export import def #extern #dllimport mixerMessage(hmx: *s_HMIXER__, uMsg: uint, dwParam1: uint64, dwParam2: uint64) -> ulong
export import def #extern #dllimport mixerGetLineInfoA(hmxobj: *s_HMIXEROBJ__, pmxl: *MIXERLINEA, fdwInfo: ulong) -> uint
export import def #extern #dllimport mixerGetLineInfoW(hmxobj: *s_HMIXEROBJ__, pmxl: *MIXERLINEW, fdwInfo: ulong) -> uint
export import def #extern #dllimport mixerGetID(hmxobj: *s_HMIXEROBJ__, puMxId: *uint, fdwId: ulong) -> uint
export import def #extern #dllimport mixerGetLineControlsA(hmxobj: *s_HMIXEROBJ__, pmxlc: *MIXERLINECONTROLSA, fdwControls: ulong) -> uint
export import def #extern #dllimport mixerGetLineControlsW(hmxobj: *s_HMIXEROBJ__, pmxlc: *MIXERLINECONTROLSW, fdwControls: ulong) -> uint
export import def #extern #dllimport mixerGetControlDetailsA(hmxobj: *s_HMIXEROBJ__, pmxcd: *MIXERCONTROLDETAILS, fdwDetails: ulong) -> uint
export import def #extern #dllimport mixerGetControlDetailsW(hmxobj: *s_HMIXEROBJ__, pmxcd: *MIXERCONTROLDETAILS, fdwDetails: ulong) -> uint
export import def #extern #dllimport mixerSetControlDetails(hmxobj: *s_HMIXEROBJ__, pmxcd: *MIXERCONTROLDETAILS, fdwDetails: ulong) -> uint
export import def #extern #dllimport timeGetSystemTime(pmmt: *MMTIME, cbmmt: uint) -> uint
export import def #extern #dllimport timeGetTime() -> ulong
export import def #extern #dllimport timeGetDevCaps(ptc: *TIMECAPS, cbtc: uint) -> uint
export import def #extern #dllimport timeBeginPeriod(uPeriod: uint) -> uint
export import def #extern #dllimport timeEndPeriod(uPeriod: uint) -> uint
export import def #extern #dllimport joyGetPosEx(uJoyID: uint, pji: *JOYINFOEX) -> uint
export import def #extern #dllimport joyGetNumDevs() -> uint
export import def #extern #dllimport joyGetDevCapsA(uJoyID: uint64, pjc: *JOYCAPSA, cbjc: uint) -> uint
export import def #extern #dllimport joyGetDevCapsW(uJoyID: uint64, pjc: *JOYCAPSW, cbjc: uint) -> uint
export import def #extern #dllimport joyGetPos(uJoyID: uint, pji: *JOYINFO) -> uint
export import def #extern #dllimport joyGetThreshold(uJoyID: uint, puThreshold: *uint) -> uint
export import def #extern #dllimport joyReleaseCapture(uJoyID: uint) -> uint
export import def #extern #dllimport joySetCapture(hwnd: *s_HWND__, uJoyID: uint, uPeriod: uint, fChanged: int) -> uint
export import def #extern #dllimport joySetThreshold(uJoyID: uint, uThreshold: uint) -> uint
export import def #extern #dllimport joyConfigChanged(dwFlags: ulong) -> uint
export import def #extern Netbios(pncb: *NCB) -> char
export import def #extern #dllimport RpcBindingCopy(SourceBinding: *, DestinationBinding: **) -> long
export import def #extern #dllimport RpcBindingFree(Binding: **) -> long
export import def #extern #dllimport RpcBindingSetOption(hBinding: *, option: ulong, optionValue: uint64) -> long
export import def #extern #dllimport RpcBindingInqOption(hBinding: *, option: ulong, pOptionValue: *uint64) -> long
export import def #extern #dllimport RpcBindingFromStringBindingA(StringBinding: *char, Binding: **) -> long
export import def #extern #dllimport RpcBindingFromStringBindingW(StringBinding: *ushort, Binding: **) -> long
export import def #extern #dllimport RpcSsGetContextBinding(ContextHandle: *, Binding: **) -> long
export import def #extern #dllimport RpcBindingInqObject(Binding: *, ObjectUuid: *GUID) -> long
export import def #extern #dllimport RpcBindingReset(Binding: *) -> long
export import def #extern #dllimport RpcBindingSetObject(Binding: *, ObjectUuid: *GUID) -> long
export import def #extern #dllimport RpcMgmtInqDefaultProtectLevel(AuthnSvc: ulong, AuthnLevel: *ulong) -> long
export import def #extern #dllimport RpcBindingToStringBindingA(Binding: *, StringBinding: **char) -> long
export import def #extern #dllimport RpcBindingToStringBindingW(Binding: *, StringBinding: **ushort) -> long
export import def #extern #dllimport RpcBindingVectorFree(BindingVector: **RPC_BINDING_VECTOR) -> long
export import def #extern #dllimport RpcStringBindingComposeA(ObjUuid: *char, ProtSeq: *char, NetworkAddr: *char, Endpoint: *char, Options: *char, StringBinding: **char) -> long
export import def #extern #dllimport RpcStringBindingComposeW(ObjUuid: *ushort, ProtSeq: *ushort, NetworkAddr: *ushort, Endpoint: *ushort, Options: *ushort, StringBinding: **ushort) -> long
export import def #extern #dllimport RpcStringBindingParseA(StringBinding: *char, ObjUuid: **char, Protseq: **char, NetworkAddr: **char, Endpoint: **char, NetworkOptions: **char) -> long
export import def #extern #dllimport RpcStringBindingParseW(StringBinding: *ushort, ObjUuid: **ushort, Protseq: **ushort, NetworkAddr: **ushort, Endpoint: **ushort, NetworkOptions: **ushort) -> long
export import def #extern #dllimport RpcStringFreeA(String: **char) -> long
export import def #extern #dllimport RpcStringFreeW(String: **ushort) -> long
export import def #extern #dllimport RpcIfInqId(RpcIfHandle: *, RpcIfId: *RPC_IF_ID) -> long
export import def #extern #dllimport RpcNetworkIsProtseqValidA(Protseq: *char) -> long
export import def #extern #dllimport RpcNetworkIsProtseqValidW(Protseq: *ushort) -> long
export import def #extern #dllimport RpcMgmtInqComTimeout(Binding: *, Timeout: *uint) -> long
export import def #extern #dllimport RpcMgmtSetComTimeout(Binding: *, Timeout: uint) -> long
export import def #extern #dllimport RpcMgmtSetCancelTimeout(Timeout: long) -> long
export import def #extern #dllimport RpcNetworkInqProtseqsA(ProtseqVector: **RPC_PROTSEQ_VECTORA) -> long
export import def #extern #dllimport RpcNetworkInqProtseqsW(ProtseqVector: **RPC_PROTSEQ_VECTORW) -> long
export import def #extern #dllimport RpcObjectInqType(ObjUuid: *GUID, TypeUuid: *GUID) -> long
export import def #extern #dllimport RpcObjectSetInqFn(InquiryFn: *) -> long
export import def #extern #dllimport RpcObjectSetType(ObjUuid: *GUID, TypeUuid: *GUID) -> long
export import def #extern #dllimport RpcProtseqVectorFreeA(ProtseqVector: **RPC_PROTSEQ_VECTORA) -> long
export import def #extern #dllimport RpcProtseqVectorFreeW(ProtseqVector: **RPC_PROTSEQ_VECTORW) -> long
export import def #extern #dllimport RpcServerInqBindings(BindingVector: **RPC_BINDING_VECTOR) -> long
export import def #extern #dllimport RpcServerInqBindingsEx(SecurityDescriptor: *, BindingVector: **RPC_BINDING_VECTOR) -> long
export import def #extern #dllimport RpcServerInqIf(IfSpec: *, MgrTypeUuid: *GUID, MgrEpv: **) -> long
export import def #extern #dllimport RpcServerListen(MinimumCallThreads: uint, MaxCalls: uint, DontWait: uint) -> long
export import def #extern #dllimport RpcServerRegisterIf(IfSpec: *, MgrTypeUuid: *GUID, MgrEpv: *) -> long
export import def #extern #dllimport RpcServerRegisterIfEx(IfSpec: *, MgrTypeUuid: *GUID, MgrEpv: *, Flags: uint, MaxCalls: uint, IfCallback: *long) -> long
export import def #extern #dllimport RpcServerRegisterIf2(IfSpec: *, MgrTypeUuid: *GUID, MgrEpv: *, Flags: uint, MaxCalls: uint, MaxRpcSize: uint, IfCallbackFn: *long) -> long
export import def #extern #dllimport RpcServerRegisterIf3(IfSpec: *, MgrTypeUuid: *GUID, MgrEpv: *, Flags: uint, MaxCalls: uint, MaxRpcSize: uint, IfCallback: *long, SecurityDescriptor: *) -> long
export import def #extern #dllimport RpcServerUnregisterIf(IfSpec: *, MgrTypeUuid: *GUID, WaitForCallsToComplete: uint) -> long
export import def #extern #dllimport RpcServerUnregisterIfEx(IfSpec: *, MgrTypeUuid: *GUID, RundownContextHandles: int) -> long
export import def #extern #dllimport RpcServerUseAllProtseqs(MaxCalls: uint, SecurityDescriptor: *) -> long
export import def #extern #dllimport RpcServerUseAllProtseqsEx(MaxCalls: uint, SecurityDescriptor: *, Policy: *RPC_POLICY) -> long
export import def #extern #dllimport RpcServerUseAllProtseqsIf(MaxCalls: uint, IfSpec: *, SecurityDescriptor: *) -> long
export import def #extern #dllimport RpcServerUseAllProtseqsIfEx(MaxCalls: uint, IfSpec: *, SecurityDescriptor: *, Policy: *RPC_POLICY) -> long
export import def #extern #dllimport RpcServerUseProtseqA(Protseq: *char, MaxCalls: uint, SecurityDescriptor: *) -> long
export import def #extern #dllimport RpcServerUseProtseqExA(Protseq: *char, MaxCalls: uint, SecurityDescriptor: *, Policy: *RPC_POLICY) -> long
export import def #extern #dllimport RpcServerUseProtseqW(Protseq: *ushort, MaxCalls: uint, SecurityDescriptor: *) -> long
export import def #extern #dllimport RpcServerUseProtseqExW(Protseq: *ushort, MaxCalls: uint, SecurityDescriptor: *, Policy: *RPC_POLICY) -> long
export import def #extern #dllimport RpcServerUseProtseqEpA(Protseq: *char, MaxCalls: uint, Endpoint: *char, SecurityDescriptor: *) -> long
export import def #extern #dllimport RpcServerUseProtseqEpExA(Protseq: *char, MaxCalls: uint, Endpoint: *char, SecurityDescriptor: *, Policy: *RPC_POLICY) -> long
export import def #extern #dllimport RpcServerUseProtseqEpW(Protseq: *ushort, MaxCalls: uint, Endpoint: *ushort, SecurityDescriptor: *) -> long
export import def #extern #dllimport RpcServerUseProtseqEpExW(Protseq: *ushort, MaxCalls: uint, Endpoint: *ushort, SecurityDescriptor: *, Policy: *RPC_POLICY) -> long
export import def #extern #dllimport RpcServerUseProtseqIfA(Protseq: *char, MaxCalls: uint, IfSpec: *, SecurityDescriptor: *) -> long
export import def #extern #dllimport RpcServerUseProtseqIfExA(Protseq: *char, MaxCalls: uint, IfSpec: *, SecurityDescriptor: *, Policy: *RPC_POLICY) -> long
export import def #extern #dllimport RpcServerUseProtseqIfW(Protseq: *ushort, MaxCalls: uint, IfSpec: *, SecurityDescriptor: *) -> long
export import def #extern #dllimport RpcServerUseProtseqIfExW(Protseq: *ushort, MaxCalls: uint, IfSpec: *, SecurityDescriptor: *, Policy: *RPC_POLICY) -> long
export import def #extern #dllimport RpcServerYield()
export import def #extern #dllimport RpcMgmtStatsVectorFree(StatsVector: **RPC_STATS_VECTOR) -> long
export import def #extern #dllimport RpcMgmtInqStats(Binding: *, Statistics: **RPC_STATS_VECTOR) -> long
export import def #extern #dllimport RpcMgmtIsServerListening(Binding: *) -> long
export import def #extern #dllimport RpcMgmtStopServerListening(Binding: *) -> long
export import def #extern #dllimport RpcMgmtWaitServerListen() -> long
export import def #extern #dllimport RpcMgmtSetServerStackSize(ThreadStackSize: ulong) -> long
export import def #extern #dllimport RpcSsDontSerializeContext()
export import def #extern #dllimport RpcMgmtEnableIdleCleanup() -> long
export import def #extern #dllimport RpcMgmtInqIfIds(Binding: *, IfIdVector: **RPC_IF_ID_VECTOR) -> long
export import def #extern #dllimport RpcIfIdVectorFree(IfIdVector: **RPC_IF_ID_VECTOR) -> long
export import def #extern #dllimport RpcMgmtInqServerPrincNameA(Binding: *, AuthnSvc: ulong, ServerPrincName: **char) -> long
export import def #extern #dllimport RpcMgmtInqServerPrincNameW(Binding: *, AuthnSvc: ulong, ServerPrincName: **ushort) -> long
export import def #extern #dllimport RpcServerInqDefaultPrincNameA(AuthnSvc: ulong, PrincName: **char) -> long
export import def #extern #dllimport RpcServerInqDefaultPrincNameW(AuthnSvc: ulong, PrincName: **ushort) -> long
export import def #extern #dllimport RpcEpResolveBinding(Binding: *, IfSpec: *) -> long
export import def #extern #dllimport RpcNsBindingInqEntryNameA(Binding: *, EntryNameSyntax: ulong, EntryName: **char) -> long
export import def #extern #dllimport RpcNsBindingInqEntryNameW(Binding: *, EntryNameSyntax: ulong, EntryName: **ushort) -> long
export import def #extern #dllimport RpcBindingCreateA(Template: *RPC_BINDING_HANDLE_TEMPLATE_V1_A, Security: *RPC_BINDING_HANDLE_SECURITY_V1_A, Options: *RPC_BINDING_HANDLE_OPTIONS_V1, Binding: **) -> long
export import def #extern #dllimport RpcBindingCreateW(Template: *RPC_BINDING_HANDLE_TEMPLATE_V1_W, Security: *RPC_BINDING_HANDLE_SECURITY_V1_W, Options: *RPC_BINDING_HANDLE_OPTIONS_V1, Binding: **) -> long
export import def #extern #dllimport RpcBindingGetTrainingContextHandle(Binding: *, ContextHandle: **) -> long
export import def #extern #dllimport RpcServerInqBindingHandle(Binding: **) -> long
export import def #extern #dllimport RpcImpersonateClient(BindingHandle: *) -> long
export import def #extern #dllimport RpcImpersonateClient2(BindingHandle: *) -> long
export import def #extern #dllimport RpcRevertToSelfEx(BindingHandle: *) -> long
export import def #extern #dllimport RpcRevertToSelf() -> long
export import def #extern #dllimport RpcImpersonateClientContainer(BindingHandle: *) -> long
export import def #extern #dllimport RpcRevertContainerImpersonation() -> long
export import def #extern #dllimport RpcBindingInqAuthClientA(ClientBinding: *, Privs: **, ServerPrincName: **char, AuthnLevel: *ulong, AuthnSvc: *ulong, AuthzSvc: *ulong) -> long
export import def #extern #dllimport RpcBindingInqAuthClientW(ClientBinding: *, Privs: **, ServerPrincName: **ushort, AuthnLevel: *ulong, AuthnSvc: *ulong, AuthzSvc: *ulong) -> long
export import def #extern #dllimport RpcBindingInqAuthClientExA(ClientBinding: *, Privs: **, ServerPrincName: **char, AuthnLevel: *ulong, AuthnSvc: *ulong, AuthzSvc: *ulong, Flags: ulong) -> long
export import def #extern #dllimport RpcBindingInqAuthClientExW(ClientBinding: *, Privs: **, ServerPrincName: **ushort, AuthnLevel: *ulong, AuthnSvc: *ulong, AuthzSvc: *ulong, Flags: ulong) -> long
export import def #extern #dllimport RpcBindingInqAuthInfoA(Binding: *, ServerPrincName: **char, AuthnLevel: *ulong, AuthnSvc: *ulong, AuthIdentity: **, AuthzSvc: *ulong) -> long
export import def #extern #dllimport RpcBindingInqAuthInfoW(Binding: *, ServerPrincName: **ushort, AuthnLevel: *ulong, AuthnSvc: *ulong, AuthIdentity: **, AuthzSvc: *ulong) -> long
export import def #extern #dllimport RpcBindingSetAuthInfoA(Binding: *, ServerPrincName: *char, AuthnLevel: ulong, AuthnSvc: ulong, AuthIdentity: *, AuthzSvc: ulong) -> long
export import def #extern #dllimport RpcBindingSetAuthInfoExA(Binding: *, ServerPrincName: *char, AuthnLevel: ulong, AuthnSvc: ulong, AuthIdentity: *, AuthzSvc: ulong, SecurityQos: *RPC_SECURITY_QOS) -> long
export import def #extern #dllimport RpcBindingSetAuthInfoW(Binding: *, ServerPrincName: *ushort, AuthnLevel: ulong, AuthnSvc: ulong, AuthIdentity: *, AuthzSvc: ulong) -> long
export import def #extern #dllimport RpcBindingSetAuthInfoExW(Binding: *, ServerPrincName: *ushort, AuthnLevel: ulong, AuthnSvc: ulong, AuthIdentity: *, AuthzSvc: ulong, SecurityQOS: *RPC_SECURITY_QOS) -> long
export import def #extern #dllimport RpcBindingInqAuthInfoExA(Binding: *, ServerPrincName: **char, AuthnLevel: *ulong, AuthnSvc: *ulong, AuthIdentity: **, AuthzSvc: *ulong, RpcQosVersion: ulong, SecurityQOS: *RPC_SECURITY_QOS) -> long
export import def #extern #dllimport RpcBindingInqAuthInfoExW(Binding: *, ServerPrincName: **ushort, AuthnLevel: *ulong, AuthnSvc: *ulong, AuthIdentity: **, AuthzSvc: *ulong, RpcQosVersion: ulong, SecurityQOS: *RPC_SECURITY_QOS) -> long
export import def #extern #dllimport RpcServerCompleteSecurityCallback(BindingHandle: *, Status: long) -> long
export import def #extern #dllimport RpcServerRegisterAuthInfoA(ServerPrincName: *char, AuthnSvc: ulong, GetKeyFn: def (*, *ushort, ulong, **, *long) -> (), Arg: *) -> long
export import def #extern #dllimport RpcServerRegisterAuthInfoW(ServerPrincName: *ushort, AuthnSvc: ulong, GetKeyFn: def (*, *ushort, ulong, **, *long) -> (), Arg: *) -> long
export import def #extern #dllimport RpcBindingServerFromClient(ClientBinding: *, ServerBinding: **) -> long
export import def #extern #dllimport RpcRaiseException(exception: long)
export import def #extern #dllimport RpcTestCancel() -> long
export import def #extern #dllimport RpcServerTestCancel(BindingHandle: *) -> long
export import def #extern #dllimport RpcCancelThread(Thread: *) -> long
export import def #extern #dllimport RpcCancelThreadEx(Thread: *, Timeout: long) -> long
export import def #extern #dllimport UuidCreate(Uuid: *GUID) -> long
export import def #extern #dllimport UuidCreateSequential(Uuid: *GUID) -> long
export import def #extern #dllimport UuidToStringA(Uuid: *GUID, StringUuid: **char) -> long
export import def #extern #dllimport UuidFromStringA(StringUuid: *char, Uuid: *GUID) -> long
export import def #extern #dllimport UuidToStringW(Uuid: *GUID, StringUuid: **ushort) -> long
export import def #extern #dllimport UuidFromStringW(StringUuid: *ushort, Uuid: *GUID) -> long
export import def #extern #dllimport UuidCompare(Uuid1: *GUID, Uuid2: *GUID, Status: *long) -> int
export import def #extern #dllimport UuidCreateNil(NilUuid: *GUID) -> long
export import def #extern #dllimport UuidEqual(Uuid1: *GUID, Uuid2: *GUID, Status: *long) -> int
export import def #extern #dllimport UuidHash(Uuid: *GUID, Status: *long) -> ushort
export import def #extern #dllimport UuidIsNil(Uuid: *GUID, Status: *long) -> int
export import def #extern #dllimport RpcEpRegisterNoReplaceA(IfSpec: *, BindingVector: *RPC_BINDING_VECTOR, UuidVector: *UUID_VECTOR, Annotation: *char) -> long
export import def #extern #dllimport RpcEpRegisterNoReplaceW(IfSpec: *, BindingVector: *RPC_BINDING_VECTOR, UuidVector: *UUID_VECTOR, Annotation: *ushort) -> long
export import def #extern #dllimport RpcEpRegisterA(IfSpec: *, BindingVector: *RPC_BINDING_VECTOR, UuidVector: *UUID_VECTOR, Annotation: *char) -> long
export import def #extern #dllimport RpcEpRegisterW(IfSpec: *, BindingVector: *RPC_BINDING_VECTOR, UuidVector: *UUID_VECTOR, Annotation: *ushort) -> long
export import def #extern #dllimport RpcEpUnregister(IfSpec: *, BindingVector: *RPC_BINDING_VECTOR, UuidVector: *UUID_VECTOR) -> long
export import def #extern #dllimport DceErrorInqTextA(RpcStatus: long, ErrorText: *char) -> long
export import def #extern #dllimport DceErrorInqTextW(RpcStatus: long, ErrorText: *ushort) -> long
export import def #extern #dllimport RpcMgmtEpEltInqBegin(EpBinding: *, InquiryType: ulong, IfId: *RPC_IF_ID, VersOption: ulong, ObjectUuid: *GUID, InquiryContext: ***) -> long
export import def #extern #dllimport RpcMgmtEpEltInqDone(InquiryContext: ***) -> long
export import def #extern #dllimport RpcMgmtEpEltInqNextA(InquiryContext: **, IfId: *RPC_IF_ID, Binding: **, ObjectUuid: *GUID, Annotation: **char) -> long
export import def #extern #dllimport RpcMgmtEpEltInqNextW(InquiryContext: **, IfId: *RPC_IF_ID, Binding: **, ObjectUuid: *GUID, Annotation: **ushort) -> long
export import def #extern #dllimport RpcMgmtEpUnregister(EpBinding: *, IfId: *RPC_IF_ID, Binding: *, ObjectUuid: *GUID) -> long
export import def #extern #dllimport RpcMgmtSetAuthorizationFn(AuthorizationFn: def (*, ulong, *long) -> (int)) -> long
export import def #extern #dllimport RpcExceptionFilter(ExceptionCode: ulong) -> int
export import def #extern #dllimport RpcServerInterfaceGroupCreateW(Interfaces: *RPC_INTERFACE_TEMPLATEW, NumIfs: ulong, Endpoints: *RPC_ENDPOINT_TEMPLATEW, NumEndpoints: ulong, IdlePeriod: ulong, IdleCallbackFn: *, IdleCallbackContext: *, IfGroup: **) -> long
export import def #extern #dllimport RpcServerInterfaceGroupCreateA(Interfaces: *RPC_INTERFACE_TEMPLATEA, NumIfs: ulong, Endpoints: *RPC_ENDPOINT_TEMPLATEA, NumEndpoints: ulong, IdlePeriod: ulong, IdleCallbackFn: *, IdleCallbackContext: *, IfGroup: **) -> long
export import def #extern #dllimport RpcServerInterfaceGroupClose(IfGroup: *) -> long
export import def #extern #dllimport RpcServerInterfaceGroupActivate(IfGroup: *) -> long
export import def #extern #dllimport RpcServerInterfaceGroupDeactivate(IfGroup: *, ForceDeactivation: ulong) -> long
export import def #extern #dllimport RpcServerInterfaceGroupInqBindings(IfGroup: *, BindingVector: **RPC_BINDING_VECTOR) -> long
export import def #extern #dllimport I_RpcNegotiateTransferSyntax(Message: *RPC_MESSAGE) -> long
export import def #extern #dllimport I_RpcGetBuffer(Message: *RPC_MESSAGE) -> long
export import def #extern #dllimport I_RpcGetBufferWithObject(Message: *RPC_MESSAGE, ObjectUuid: *GUID) -> long
export import def #extern #dllimport I_RpcSendReceive(Message: *RPC_MESSAGE) -> long
export import def #extern #dllimport I_RpcFreeBuffer(Message: *RPC_MESSAGE) -> long
export import def #extern #dllimport I_RpcSend(Message: *RPC_MESSAGE) -> long
export import def #extern #dllimport I_RpcReceive(Message: *RPC_MESSAGE, Size: uint) -> long
export import def #extern #dllimport I_RpcFreePipeBuffer(Message: *RPC_MESSAGE) -> long
export import def #extern #dllimport I_RpcReallocPipeBuffer(Message: *RPC_MESSAGE, NewSize: uint) -> long
export import def #extern #dllimport I_RpcRequestMutex(Mutex: **)
export import def #extern #dllimport I_RpcClearMutex(Mutex: *)
export import def #extern #dllimport I_RpcDeleteMutex(Mutex: *)
export import def #extern #dllimport I_RpcAllocate(Size: uint) -> *
export import def #extern #dllimport I_RpcFree(Object: *)
export import def #extern #dllimport I_RpcFreeSystemHandleCollection(CallObj: *, FreeFlags: ulong) -> ulong
export import def #extern #dllimport I_RpcSetSystemHandle(Handle: *, Type: char, AccessMask: ulong, CallObj: *, HandleIndex: *ulong) -> long
export import def #extern #dllimport I_RpcGetSystemHandle(pMemory: *char, Type: char, AccessMask: ulong, HandleIndex: ulong, CallObj: *) -> long
export import def #extern #dllimport I_RpcFreeSystemHandle(Type: char, Handle: *)
export import def #extern #dllimport I_RpcPauseExecution(Milliseconds: ulong)
export import def #extern #dllimport I_RpcGetExtendedError() -> long
export import def #extern #dllimport I_RpcSystemHandleTypeSpecificWork(Handle: *, ActualType: char, IdlType: char, MarshalDirection: LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION) -> long
export import def #extern #dllimport I_RpcMonitorAssociation(Handle: *, RundownRoutine: def (*) -> (), Context: *) -> long
export import def #extern #dllimport I_RpcStopMonitorAssociation(Handle: *) -> long
export import def #extern #dllimport I_RpcGetCurrentCallHandle() -> *
export import def #extern #dllimport I_RpcGetAssociationContext(BindingHandle: *, AssociationContext: **) -> long
export import def #extern #dllimport I_RpcGetServerContextList(BindingHandle: *) -> *
export import def #extern #dllimport I_RpcSetServerContextList(BindingHandle: *, ServerContextList: *)
export import def #extern #dllimport I_RpcNsInterfaceExported(EntryNameSyntax: ulong, EntryName: *ushort, RpcInterfaceInformation: *RPC_SERVER_INTERFACE) -> long
export import def #extern #dllimport I_RpcNsInterfaceUnexported(EntryNameSyntax: ulong, EntryName: *ushort, RpcInterfaceInformation: *RPC_SERVER_INTERFACE) -> long
export import def #extern #dllimport I_RpcBindingToStaticStringBindingW(Binding: *, StringBinding: **ushort) -> long
export import def #extern #dllimport I_RpcBindingInqSecurityContext(Binding: *, SecurityContextHandle: **) -> long
export import def #extern #dllimport I_RpcBindingInqSecurityContextKeyInfo(Binding: *, KeyInfo: *) -> long
export import def #extern #dllimport I_RpcBindingInqWireIdForSnego(Binding: *, WireId: *char) -> long
export import def #extern #dllimport I_RpcBindingInqMarshalledTargetInfo(Binding: *, MarshalledTargetInfoSize: *ulong, MarshalledTargetInfo: **char) -> long
export import def #extern #dllimport I_RpcBindingInqLocalClientPID(Binding: *, Pid: *ulong) -> long
export import def #extern #dllimport I_RpcBindingHandleToAsyncHandle(Binding: *, AsyncHandle: **) -> long
export import def #extern #dllimport I_RpcNsBindingSetEntryNameW(Binding: *, EntryNameSyntax: ulong, EntryName: *ushort) -> long
export import def #extern #dllimport I_RpcNsBindingSetEntryNameA(Binding: *, EntryNameSyntax: ulong, EntryName: *char) -> long
export import def #extern #dllimport I_RpcServerUseProtseqEp2A(NetworkAddress: *char, Protseq: *char, MaxCalls: uint, Endpoint: *char, SecurityDescriptor: *, Policy: *) -> long
export import def #extern #dllimport I_RpcServerUseProtseqEp2W(NetworkAddress: *ushort, Protseq: *ushort, MaxCalls: uint, Endpoint: *ushort, SecurityDescriptor: *, Policy: *) -> long
export import def #extern #dllimport I_RpcServerUseProtseq2W(NetworkAddress: *ushort, Protseq: *ushort, MaxCalls: uint, SecurityDescriptor: *, Policy: *) -> long
export import def #extern #dllimport I_RpcServerUseProtseq2A(NetworkAddress: *char, Protseq: *char, MaxCalls: uint, SecurityDescriptor: *, Policy: *) -> long
export import def #extern #dllimport I_RpcServerStartService(Protseq: *ushort, Endpoint: *ushort, IfSpec: *) -> long
export import def #extern #dllimport I_RpcBindingInqDynamicEndpointW(Binding: *, DynamicEndpoint: **ushort) -> long
export import def #extern #dllimport I_RpcBindingInqDynamicEndpointA(Binding: *, DynamicEndpoint: **char) -> long
export import def #extern #dllimport I_RpcServerCheckClientRestriction(Context: *) -> long
export import def #extern #dllimport I_RpcBindingInqTransportType(Binding: *, Type: *uint) -> long
export import def #extern #dllimport I_RpcIfInqTransferSyntaxes(RpcIfHandle: *, TransferSyntaxes: *RPC_TRANSFER_SYNTAX, TransferSyntaxSize: uint, TransferSyntaxCount: *uint) -> long
export import def #extern #dllimport I_UuidCreate(Uuid: *GUID) -> long
export import def #extern #dllimport I_RpcUninitializeNdrOle()
export import def #extern #dllimport I_RpcBindingCopy(SourceBinding: *, DestinationBinding: **) -> long
export import def #extern #dllimport I_RpcBindingIsClientLocal(BindingHandle: *, ClientLocalFlag: *uint) -> long
export import def #extern #dllimport I_RpcBindingInqConnId(Binding: *, ConnId: **, pfFirstCall: *int) -> long
export import def #extern #dllimport I_RpcBindingCreateNP(ServerName: *ushort, ServiceName: *ushort, NetworkOptions: *ushort, Binding: **) -> long
export import def #extern #dllimport I_RpcSsDontSerializeContext()
export import def #extern #dllimport I_RpcLaunchDatagramReceiveThread(pAddress: *) -> long
export import def #extern #dllimport I_RpcServerRegisterForwardFunction(pForwardFunction: *long) -> long
export import def #extern I_RpcServerInqAddressChangeFn() -> *
export import def #extern I_RpcServerSetAddressChangeFn(pAddressChangeFn: *) -> long
export import def #extern #dllimport I_RpcServerInqLocalConnAddress(Binding: *, Buffer: *, BufferSize: *ulong, AddressFormat: *ulong) -> long
export import def #extern #dllimport I_RpcServerInqRemoteConnAddress(Binding: *, Buffer: *, BufferSize: *ulong, AddressFormat: *ulong) -> long
export import def #extern #dllimport I_RpcSessionStrictContextHandle()
export import def #extern #dllimport I_RpcTurnOnEEInfoPropagation() -> long
export import def #extern #dllimport I_RpcConnectionInqSockBuffSize(RecvBuffSize: *ulong, SendBuffSize: *ulong) -> long
export import def #extern #dllimport I_RpcConnectionSetSockBuffSize(RecvBuffSize: ulong, SendBuffSize: ulong) -> long
export import def #extern #dllimport I_RpcServerStartListening(hWnd: *) -> long
export import def #extern #dllimport I_RpcServerStopListening() -> long
export import def #extern #dllimport I_RpcBindingSetAsync(Binding: *, BlockingFn: def (*, *, *) -> (long), ServerTid: ulong) -> long
export import def #extern #dllimport I_RpcSetThreadParams(fClientFree: int, Context: *, hWndClient: *) -> long
export import def #extern #dllimport I_RpcWindowProc(hWnd: *, Message: uint, wParam: uint, lParam: ulong) -> uint
export import def #extern #dllimport I_RpcServerUnregisterEndpointA(Protseq: *char, Endpoint: *char) -> long
export import def #extern #dllimport I_RpcServerUnregisterEndpointW(Protseq: *ushort, Endpoint: *ushort) -> long
export import def #extern #dllimport I_RpcServerInqTransportType(Type: *uint) -> long
export import def #extern #dllimport I_RpcMapWin32Status(Status: long) -> long
export import def #extern #dllimport I_RpcProxyNewConnection(ConnectionType: ulong, ServerAddress: *ushort, ServerPort: *ushort, MinConnTimeout: *ushort, ConnectionParameter: *, CallOutState: *RDR_CALLOUT_STATE, ProxyCallbackInterface: *I_RpcProxyCallbackInterface) -> long
export import def #extern #dllimport I_RpcReplyToClientWithStatus(ConnectionParameter: *, RpcStatus: long) -> long
export import def #extern #dllimport I_RpcRecordCalloutFailure(RpcStatus: long, CallOutState: *RDR_CALLOUT_STATE, DllName: *ushort)
export import def #extern #dllimport I_RpcMgmtEnableDedicatedThreadPool() -> long
export import def #extern #dllimport I_RpcGetDefaultSD(ppSecurityDescriptor: **) -> long
export import def #extern #dllimport I_RpcOpenClientProcess(Binding: *, DesiredAccess: ulong, ClientProcess: **) -> long
export import def #extern #dllimport I_RpcBindingIsServerLocal(Binding: *, ServerLocalFlag: *uint) -> long
export import def #extern I_RpcBindingSetPrivateOption(hBinding: *, option: ulong, optionValue: uint64) -> long
export import def #extern I_RpcServerSubscribeForDisconnectNotification(Binding: *, hEvent: *) -> long
export import def #extern I_RpcServerGetAssociationID(Binding: *, AssociationID: *ulong) -> long
export import def #extern #dllimport I_RpcServerDisableExceptionFilter() -> long
export import def #extern I_RpcServerSubscribeForDisconnectNotification2(Binding: *, hEvent: *, SubscriptionId: *GUID) -> long
export import def #extern I_RpcServerUnsubscribeForDisconnectNotification(Binding: *, SubscriptionId: GUID) -> long
export import def #extern #dllimport RpcNsBindingExportA(EntryNameSyntax: ulong, EntryName: *char, IfSpec: *, BindingVec: *RPC_BINDING_VECTOR, ObjectUuidVec: *UUID_VECTOR) -> long
export import def #extern #dllimport RpcNsBindingUnexportA(EntryNameSyntax: ulong, EntryName: *char, IfSpec: *, ObjectUuidVec: *UUID_VECTOR) -> long
export import def #extern #dllimport RpcNsBindingExportW(EntryNameSyntax: ulong, EntryName: *ushort, IfSpec: *, BindingVec: *RPC_BINDING_VECTOR, ObjectUuidVec: *UUID_VECTOR) -> long
export import def #extern #dllimport RpcNsBindingUnexportW(EntryNameSyntax: ulong, EntryName: *ushort, IfSpec: *, ObjectUuidVec: *UUID_VECTOR) -> long
export import def #extern RpcNsBindingExportPnPA(EntryNameSyntax: ulong, EntryName: *char, IfSpec: *, ObjectVector: *UUID_VECTOR) -> long
export import def #extern RpcNsBindingUnexportPnPA(EntryNameSyntax: ulong, EntryName: *char, IfSpec: *, ObjectVector: *UUID_VECTOR) -> long
export import def #extern RpcNsBindingExportPnPW(EntryNameSyntax: ulong, EntryName: *ushort, IfSpec: *, ObjectVector: *UUID_VECTOR) -> long
export import def #extern RpcNsBindingUnexportPnPW(EntryNameSyntax: ulong, EntryName: *ushort, IfSpec: *, ObjectVector: *UUID_VECTOR) -> long
export import def #extern #dllimport RpcNsBindingLookupBeginA(EntryNameSyntax: ulong, EntryName: *char, IfSpec: *, ObjUuid: *GUID, BindingMaxCount: ulong, LookupContext: **) -> long
export import def #extern #dllimport RpcNsBindingLookupBeginW(EntryNameSyntax: ulong, EntryName: *ushort, IfSpec: *, ObjUuid: *GUID, BindingMaxCount: ulong, LookupContext: **) -> long
export import def #extern #dllimport RpcNsBindingLookupNext(LookupContext: *, BindingVec: **RPC_BINDING_VECTOR) -> long
export import def #extern #dllimport RpcNsBindingLookupDone(LookupContext: **) -> long
export import def #extern #dllimport RpcNsGroupDeleteA(GroupNameSyntax: ulong, GroupName: *char) -> long
export import def #extern #dllimport RpcNsGroupMbrAddA(GroupNameSyntax: ulong, GroupName: *char, MemberNameSyntax: ulong, MemberName: *char) -> long
export import def #extern #dllimport RpcNsGroupMbrRemoveA(GroupNameSyntax: ulong, GroupName: *char, MemberNameSyntax: ulong, MemberName: *char) -> long
export import def #extern #dllimport RpcNsGroupMbrInqBeginA(GroupNameSyntax: ulong, GroupName: *char, MemberNameSyntax: ulong, InquiryContext: **) -> long
export import def #extern #dllimport RpcNsGroupMbrInqNextA(InquiryContext: *, MemberName: **char) -> long
export import def #extern #dllimport RpcNsGroupDeleteW(GroupNameSyntax: ulong, GroupName: *ushort) -> long
export import def #extern #dllimport RpcNsGroupMbrAddW(GroupNameSyntax: ulong, GroupName: *ushort, MemberNameSyntax: ulong, MemberName: *ushort) -> long
export import def #extern #dllimport RpcNsGroupMbrRemoveW(GroupNameSyntax: ulong, GroupName: *ushort, MemberNameSyntax: ulong, MemberName: *ushort) -> long
export import def #extern #dllimport RpcNsGroupMbrInqBeginW(GroupNameSyntax: ulong, GroupName: *ushort, MemberNameSyntax: ulong, InquiryContext: **) -> long
export import def #extern #dllimport RpcNsGroupMbrInqNextW(InquiryContext: *, MemberName: **ushort) -> long
export import def #extern #dllimport RpcNsGroupMbrInqDone(InquiryContext: **) -> long
export import def #extern #dllimport RpcNsProfileDeleteA(ProfileNameSyntax: ulong, ProfileName: *char) -> long
export import def #extern #dllimport RpcNsProfileEltAddA(ProfileNameSyntax: ulong, ProfileName: *char, IfId: *RPC_IF_ID, MemberNameSyntax: ulong, MemberName: *char, Priority: ulong, Annotation: *char) -> long
export import def #extern #dllimport RpcNsProfileEltRemoveA(ProfileNameSyntax: ulong, ProfileName: *char, IfId: *RPC_IF_ID, MemberNameSyntax: ulong, MemberName: *char) -> long
export import def #extern #dllimport RpcNsProfileEltInqBeginA(ProfileNameSyntax: ulong, ProfileName: *char, InquiryType: ulong, IfId: *RPC_IF_ID, VersOption: ulong, MemberNameSyntax: ulong, MemberName: *char, InquiryContext: **) -> long
export import def #extern #dllimport RpcNsProfileEltInqNextA(InquiryContext: *, IfId: *RPC_IF_ID, MemberName: **char, Priority: *ulong, Annotation: **char) -> long
export import def #extern #dllimport RpcNsProfileDeleteW(ProfileNameSyntax: ulong, ProfileName: *ushort) -> long
export import def #extern #dllimport RpcNsProfileEltAddW(ProfileNameSyntax: ulong, ProfileName: *ushort, IfId: *RPC_IF_ID, MemberNameSyntax: ulong, MemberName: *ushort, Priority: ulong, Annotation: *ushort) -> long
export import def #extern #dllimport RpcNsProfileEltRemoveW(ProfileNameSyntax: ulong, ProfileName: *ushort, IfId: *RPC_IF_ID, MemberNameSyntax: ulong, MemberName: *ushort) -> long
export import def #extern #dllimport RpcNsProfileEltInqBeginW(ProfileNameSyntax: ulong, ProfileName: *ushort, InquiryType: ulong, IfId: *RPC_IF_ID, VersOption: ulong, MemberNameSyntax: ulong, MemberName: *ushort, InquiryContext: **) -> long
export import def #extern #dllimport RpcNsProfileEltInqNextW(InquiryContext: *, IfId: *RPC_IF_ID, MemberName: **ushort, Priority: *ulong, Annotation: **ushort) -> long
export import def #extern #dllimport RpcNsProfileEltInqDone(InquiryContext: **) -> long
export import def #extern #dllimport RpcNsEntryObjectInqBeginA(EntryNameSyntax: ulong, EntryName: *char, InquiryContext: **) -> long
export import def #extern #dllimport RpcNsEntryObjectInqBeginW(EntryNameSyntax: ulong, EntryName: *ushort, InquiryContext: **) -> long
export import def #extern #dllimport RpcNsEntryObjectInqNext(InquiryContext: *, ObjUuid: *GUID) -> long
export import def #extern #dllimport RpcNsEntryObjectInqDone(InquiryContext: **) -> long
export import def #extern #dllimport RpcNsEntryExpandNameA(EntryNameSyntax: ulong, EntryName: *char, ExpandedName: **char) -> long
export import def #extern #dllimport RpcNsMgmtBindingUnexportA(EntryNameSyntax: ulong, EntryName: *char, IfId: *RPC_IF_ID, VersOption: ulong, ObjectUuidVec: *UUID_VECTOR) -> long
export import def #extern #dllimport RpcNsMgmtEntryCreateA(EntryNameSyntax: ulong, EntryName: *char) -> long
export import def #extern #dllimport RpcNsMgmtEntryDeleteA(EntryNameSyntax: ulong, EntryName: *char) -> long
export import def #extern #dllimport RpcNsMgmtEntryInqIfIdsA(EntryNameSyntax: ulong, EntryName: *char, IfIdVec: **RPC_IF_ID_VECTOR) -> long
export import def #extern #dllimport RpcNsMgmtHandleSetExpAge(NsHandle: *, ExpirationAge: ulong) -> long
export import def #extern #dllimport RpcNsMgmtInqExpAge(ExpirationAge: *ulong) -> long
export import def #extern #dllimport RpcNsMgmtSetExpAge(ExpirationAge: ulong) -> long
export import def #extern #dllimport RpcNsEntryExpandNameW(EntryNameSyntax: ulong, EntryName: *ushort, ExpandedName: **ushort) -> long
export import def #extern #dllimport RpcNsMgmtBindingUnexportW(EntryNameSyntax: ulong, EntryName: *ushort, IfId: *RPC_IF_ID, VersOption: ulong, ObjectUuidVec: *UUID_VECTOR) -> long
export import def #extern #dllimport RpcNsMgmtEntryCreateW(EntryNameSyntax: ulong, EntryName: *ushort) -> long
export import def #extern #dllimport RpcNsMgmtEntryDeleteW(EntryNameSyntax: ulong, EntryName: *ushort) -> long
export import def #extern #dllimport RpcNsMgmtEntryInqIfIdsW(EntryNameSyntax: ulong, EntryName: *ushort, IfIdVec: **RPC_IF_ID_VECTOR) -> long
export import def #extern #dllimport RpcNsBindingImportBeginA(EntryNameSyntax: ulong, EntryName: *char, IfSpec: *, ObjUuid: *GUID, ImportContext: **) -> long
export import def #extern #dllimport RpcNsBindingImportBeginW(EntryNameSyntax: ulong, EntryName: *ushort, IfSpec: *, ObjUuid: *GUID, ImportContext: **) -> long
export import def #extern #dllimport RpcNsBindingImportNext(ImportContext: *, Binding: **) -> long
export import def #extern #dllimport RpcNsBindingImportDone(ImportContext: **) -> long
export import def #extern #dllimport RpcNsBindingSelect(BindingVec: *RPC_BINDING_VECTOR, Binding: **) -> long
export import def #extern #dllimport RpcAsyncRegisterInfo(pAsync: *RPC_ASYNC_STATE) -> long
export import def #extern #dllimport RpcAsyncInitializeHandle(pAsync: *RPC_ASYNC_STATE, Size: uint) -> long
export import def #extern #dllimport RpcAsyncGetCallStatus(pAsync: *RPC_ASYNC_STATE) -> long
export import def #extern #dllimport RpcAsyncCompleteCall(pAsync: *RPC_ASYNC_STATE, Reply: *) -> long
export import def #extern #dllimport RpcAsyncAbortCall(pAsync: *RPC_ASYNC_STATE, ExceptionCode: ulong) -> long
export import def #extern #dllimport RpcAsyncCancelCall(pAsync: *RPC_ASYNC_STATE, fAbort: int) -> long
export import def #extern #dllimport RpcErrorStartEnumeration(EnumHandle: *RPC_ERROR_ENUM_HANDLE) -> long
export import def #extern #dllimport RpcErrorGetNextRecord(EnumHandle: *RPC_ERROR_ENUM_HANDLE, CopyStrings: int, ErrorInfo: *RPC_EXTENDED_ERROR_INFO) -> long
export import def #extern #dllimport RpcErrorEndEnumeration(EnumHandle: *RPC_ERROR_ENUM_HANDLE) -> long
export import def #extern #dllimport RpcErrorResetEnumeration(EnumHandle: *RPC_ERROR_ENUM_HANDLE) -> long
export import def #extern #dllimport RpcErrorGetNumberOfRecords(EnumHandle: *RPC_ERROR_ENUM_HANDLE, Records: *int) -> long
export import def #extern #dllimport RpcErrorSaveErrorInfo(EnumHandle: *RPC_ERROR_ENUM_HANDLE, ErrorBlob: **, BlobSize: *uint64) -> long
export import def #extern #dllimport RpcErrorLoadErrorInfo(ErrorBlob: *, BlobSize: uint64, EnumHandle: *RPC_ERROR_ENUM_HANDLE) -> long
export import def #extern #dllimport RpcErrorAddRecord(ErrorInfo: *RPC_EXTENDED_ERROR_INFO) -> long
export import def #extern #dllimport RpcErrorClearInformation()
export import def #extern #dllimport RpcAsyncCleanupThread(dwTimeout: ulong) -> long
export import def #extern #dllimport RpcGetAuthorizationContextForClient(ClientBinding: *, ImpersonateOnReturn: int, Reserved1: *, pExpirationTime: *LARGE_INTEGER, Reserved2: LUID, Reserved3: ulong, Reserved4: *, pAuthzClientContext: **) -> long
export import def #extern #dllimport RpcFreeAuthorizationContext(pAuthzClientContext: **) -> long
export import def #extern #dllimport RpcSsContextLockExclusive(ServerBindingHandle: *, UserContext: *) -> long
export import def #extern #dllimport RpcSsContextLockShared(ServerBindingHandle: *, UserContext: *) -> long
export import def #extern #dllimport RpcServerInqCallAttributesW(ClientBinding: *, RpcCallAttributes: *) -> long
export import def #extern #dllimport RpcServerInqCallAttributesA(ClientBinding: *, RpcCallAttributes: *) -> long
export import def #extern #dllimport RpcServerSubscribeForNotification(Binding: *, Notification: RPC_NOTIFICATIONS, NotificationType: RPC_NOTIFICATION_TYPES, NotificationInfo: *RPC_ASYNC_NOTIFICATION_INFO) -> long
export import def #extern #dllimport RpcServerUnsubscribeForNotification(Binding: *, Notification: RPC_NOTIFICATIONS, NotificationsQueued: *ulong) -> long
export import def #extern #dllimport RpcBindingBind(pAsync: *RPC_ASYNC_STATE, Binding: *, IfSpec: *) -> long
export import def #extern #dllimport RpcBindingUnbind(Binding: *) -> long
export import def #extern I_RpcAsyncSetHandle(Message: *RPC_MESSAGE, pAsync: *RPC_ASYNC_STATE) -> long
export import def #extern I_RpcAsyncAbortCall(pAsync: *RPC_ASYNC_STATE, ExceptionCode: ulong) -> long
export import def #extern I_RpcExceptionFilter(ExceptionCode: ulong) -> int
export import def #extern #dllimport I_RpcBindingInqClientTokenAttributes(Binding: *, TokenId: *LUID, AuthenticationId: *LUID, ModifiedId: *LUID) -> long
export import def #extern #dllimport CommandLineToArgvW(lpCmdLine: *ushort, pNumArgs: *int) -> **ushort
export import def #extern #dllimport DragQueryFileA(hDrop: *s_HDROP__, iFile: uint, lpszFile: *char, cch: uint) -> uint
export import def #extern #dllimport DragQueryFileW(hDrop: *s_HDROP__, iFile: uint, lpszFile: *ushort, cch: uint) -> uint
export import def #extern #dllimport DragQueryPoint(hDrop: *s_HDROP__, ppt: *POINT) -> int
export import def #extern #dllimport DragFinish(hDrop: *s_HDROP__)
export import def #extern #dllimport DragAcceptFiles(hWnd: *s_HWND__, fAccept: int)
export import def #extern #dllimport ShellExecuteA(hwnd: *s_HWND__, lpOperation: *char, lpFile: *char, lpParameters: *char, lpDirectory: *char, nShowCmd: int) -> *s_HINSTANCE__
export import def #extern #dllimport ShellExecuteW(hwnd: *s_HWND__, lpOperation: *ushort, lpFile: *ushort, lpParameters: *ushort, lpDirectory: *ushort, nShowCmd: int) -> *s_HINSTANCE__
export import def #extern #dllimport FindExecutableA(lpFile: *char, lpDirectory: *char, lpResult: *char) -> *s_HINSTANCE__
export import def #extern #dllimport FindExecutableW(lpFile: *ushort, lpDirectory: *ushort, lpResult: *ushort) -> *s_HINSTANCE__
export import def #extern #dllimport ShellAboutA(hWnd: *s_HWND__, szApp: *char, szOtherStuff: *char, hIcon: *s_HICON__) -> int
export import def #extern #dllimport ShellAboutW(hWnd: *s_HWND__, szApp: *ushort, szOtherStuff: *ushort, hIcon: *s_HICON__) -> int
export import def #extern #dllimport DuplicateIcon(hInst: *s_HINSTANCE__, hIcon: *s_HICON__) -> *s_HICON__
export import def #extern #dllimport ExtractAssociatedIconA(hInst: *s_HINSTANCE__, pszIconPath: *char, piIcon: *ushort) -> *s_HICON__
export import def #extern #dllimport ExtractAssociatedIconW(hInst: *s_HINSTANCE__, pszIconPath: *ushort, piIcon: *ushort) -> *s_HICON__
export import def #extern #dllimport ExtractAssociatedIconExA(hInst: *s_HINSTANCE__, pszIconPath: *char, piIconIndex: *ushort, piIconId: *ushort) -> *s_HICON__
export import def #extern #dllimport ExtractAssociatedIconExW(hInst: *s_HINSTANCE__, pszIconPath: *ushort, piIconIndex: *ushort, piIconId: *ushort) -> *s_HICON__
export import def #extern #dllimport ExtractIconA(hInst: *s_HINSTANCE__, pszExeFileName: *char, nIconIndex: uint) -> *s_HICON__
export import def #extern #dllimport ExtractIconW(hInst: *s_HINSTANCE__, pszExeFileName: *ushort, nIconIndex: uint) -> *s_HICON__
export import def #extern #dllimport SHAppBarMessage(dwMessage: ulong, pData: *APPBARDATA) -> uint64
export import def #extern #dllimport DoEnvironmentSubstA(pszSrc: *char, cchSrc: uint) -> ulong
export import def #extern #dllimport DoEnvironmentSubstW(pszSrc: *ushort, cchSrc: uint) -> ulong
export import def #extern #dllimport ExtractIconExA(lpszFile: *char, nIconIndex: int, phiconLarge: **s_HICON__, phiconSmall: **s_HICON__, nIcons: uint) -> uint
export import def #extern #dllimport ExtractIconExW(lpszFile: *ushort, nIconIndex: int, phiconLarge: **s_HICON__, phiconSmall: **s_HICON__, nIcons: uint) -> uint
export import def #extern #dllimport SHFileOperationA(lpFileOp: *SHFILEOPSTRUCTA) -> int
export import def #extern #dllimport SHFileOperationW(lpFileOp: *SHFILEOPSTRUCTW) -> int
export import def #extern #dllimport SHFreeNameMappings(hNameMappings: *)
export import def #extern #dllimport ShellExecuteExA(pExecInfo: *SHELLEXECUTEINFOA) -> int
export import def #extern #dllimport ShellExecuteExW(pExecInfo: *SHELLEXECUTEINFOW) -> int
export import def #extern #dllimport SHCreateProcessAsUserW(pscpi: *SHCREATEPROCESSINFOW) -> int
export import def #extern #dllimport SHEvaluateSystemCommandTemplate(pszCmdTemplate: *ushort, ppszApplication: **ushort, ppszCommandLine: **ushort, ppszParameters: **ushort) -> long
export import def #extern #dllimport AssocCreateForClasses(rgClasses: *ASSOCIATIONELEMENT, cClasses: ulong, riid: *GUID, ppv: **) -> long
export import def #extern #dllimport SHQueryRecycleBinA(pszRootPath: *char, pSHQueryRBInfo: *SHQUERYRBINFO) -> long
export import def #extern #dllimport SHQueryRecycleBinW(pszRootPath: *ushort, pSHQueryRBInfo: *SHQUERYRBINFO) -> long
export import def #extern #dllimport SHEmptyRecycleBinA(hwnd: *s_HWND__, pszRootPath: *char, dwFlags: ulong) -> long
export import def #extern #dllimport SHEmptyRecycleBinW(hwnd: *s_HWND__, pszRootPath: *ushort, dwFlags: ulong) -> long
export import def #extern #dllimport SHQueryUserNotificationState(pquns: *QUERY_USER_NOTIFICATION_STATE) -> long
export import def #extern #dllimport SHGetPropertyStoreForWindow(hwnd: *s_HWND__, riid: *GUID, ppv: **) -> long
export import def #extern #dllimport Shell_NotifyIconA(dwMessage: ulong, lpData: *NOTIFYICONDATAA) -> int
export import def #extern #dllimport Shell_NotifyIconW(dwMessage: ulong, lpData: *NOTIFYICONDATAW) -> int
export import def #extern #dllimport Shell_NotifyIconGetRect(identifier: *NOTIFYICONIDENTIFIER, iconLocation: *RECT) -> long
export import def #extern #dllimport SHGetFileInfoA(pszPath: *char, dwFileAttributes: ulong, psfi: *SHFILEINFOA, cbFileInfo: uint, uFlags: uint) -> uint64
export import def #extern #dllimport SHGetFileInfoW(pszPath: *ushort, dwFileAttributes: ulong, psfi: *SHFILEINFOW, cbFileInfo: uint, uFlags: uint) -> uint64
export import def #extern #dllimport SHGetStockIconInfo(siid: SHSTOCKICONID, uFlags: uint, psii: *SHSTOCKICONINFO) -> long
export import def #extern #dllimport SHGetDiskFreeSpaceExA(pszDirectoryName: *char, pulFreeBytesAvailableToCaller: *ULARGE_INTEGER, pulTotalNumberOfBytes: *ULARGE_INTEGER, pulTotalNumberOfFreeBytes: *ULARGE_INTEGER) -> int
export import def #extern #dllimport SHGetDiskFreeSpaceExW(pszDirectoryName: *ushort, pulFreeBytesAvailableToCaller: *ULARGE_INTEGER, pulTotalNumberOfBytes: *ULARGE_INTEGER, pulTotalNumberOfFreeBytes: *ULARGE_INTEGER) -> int
export import def #extern #dllimport SHGetNewLinkInfoA(pszLinkTo: *char, pszDir: *char, pszName: *char, pfMustCopy: *int, uFlags: uint) -> int
export import def #extern #dllimport SHGetNewLinkInfoW(pszLinkTo: *ushort, pszDir: *ushort, pszName: *ushort, pfMustCopy: *int, uFlags: uint) -> int
export import def #extern #dllimport SHInvokePrinterCommandA(hwnd: *s_HWND__, uAction: uint, lpBuf1: *char, lpBuf2: *char, fModal: int) -> int
export import def #extern #dllimport SHInvokePrinterCommandW(hwnd: *s_HWND__, uAction: uint, lpBuf1: *ushort, lpBuf2: *ushort, fModal: int) -> int
export import def #extern #dllimport SHLoadNonloadedIconOverlayIdentifiers() -> long
export import def #extern #dllimport SHIsFileAvailableOffline(pwszPath: *ushort, pdwStatus: *ulong) -> long
export import def #extern #dllimport SHSetLocalizedName(pszPath: *ushort, pszResModule: *ushort, idsRes: int) -> long
export import def #extern #dllimport SHRemoveLocalizedName(pszPath: *ushort) -> long
export import def #extern #dllimport SHGetLocalizedName(pszPath: *ushort, pszResModule: *ushort, cch: uint, pidsRes: *int) -> long
export import def #extern #dllimport ShellMessageBoxA(hAppInst: *s_HINSTANCE__, hWnd: *s_HWND__, lpcText: *char, lpcTitle: *char, fuStyle: uint, ...) -> int
export import def #extern #dllimport ShellMessageBoxW(hAppInst: *s_HINSTANCE__, hWnd: *s_HWND__, lpcText: *ushort, lpcTitle: *ushort, fuStyle: uint, ...) -> int
export import def #extern #dllimport IsLFNDriveA(pszPath: *char) -> int
export import def #extern #dllimport IsLFNDriveW(pszPath: *ushort) -> int
export import def #extern SHEnumerateUnreadMailAccountsA(hKeyUser: *s_HKEY__, dwIndex: ulong, pszMailAddress: *char, cchMailAddress: int) -> long
export import def #extern SHEnumerateUnreadMailAccountsW(hKeyUser: *s_HKEY__, dwIndex: ulong, pszMailAddress: *ushort, cchMailAddress: int) -> long
export import def #extern SHGetUnreadMailCountA(hKeyUser: *s_HKEY__, pszMailAddress: *char, pdwCount: *ulong, pFileTime: *FILETIME, pszShellExecuteCommand: *char, cchShellExecuteCommand: int) -> long
export import def #extern SHGetUnreadMailCountW(hKeyUser: *s_HKEY__, pszMailAddress: *ushort, pdwCount: *ulong, pFileTime: *FILETIME, pszShellExecuteCommand: *ushort, cchShellExecuteCommand: int) -> long
export import def #extern SHSetUnreadMailCountA(pszMailAddress: *char, dwCount: ulong, pszShellExecuteCommand: *char) -> long
export import def #extern SHSetUnreadMailCountW(pszMailAddress: *ushort, dwCount: ulong, pszShellExecuteCommand: *ushort) -> long
export import def #extern SHTestTokenMembership(hToken: *, ulRID: ulong) -> int
export import def #extern #dllimport SHGetImageList(iImageList: int, riid: *GUID, ppvObj: **) -> long
export import def #extern #dllimport InitNetworkAddressControl() -> int
export import def #extern SHGetDriveMedia(pszDrive: *ushort, pdwMediaContent: *ulong) -> long
export import def #extern __WSAFDIsSet(_0: uint64, _1: *fd_set) -> int
export import def #extern accept(s: uint64, addr: *s_sockaddr, addrlen: *int) -> uint64
export import def #extern bind(s: uint64, addr: *s_sockaddr, namelen: int) -> int
export import def #extern closesocket(s: uint64) -> int
export import def #extern connect(s: uint64, name: *s_sockaddr, namelen: int) -> int
export import def #extern ioctlsocket(s: uint64, cmd: long, argp: *ulong) -> int
export import def #extern getpeername(s: uint64, name: *s_sockaddr, namelen: *int) -> int
export import def #extern getsockname(s: uint64, name: *s_sockaddr, namelen: *int) -> int
export import def #extern getsockopt(s: uint64, level: int, optname: int, optval: *char, optlen: *int) -> int
export import def #extern htonl(hostlong: ulong) -> ulong
export import def #extern htons(hostshort: ushort) -> ushort
export import def #extern inet_addr(cp: *char) -> ulong
export import def #extern inet_ntoa(in_: IN_ADDR) -> *char
export import def #extern listen(s: uint64, backlog: int) -> int
export import def #extern ntohl(netlong: ulong) -> ulong
export import def #extern ntohs(netshort: ushort) -> ushort
export import def #extern recv(s: uint64, buf: *char, len: int, flags: int) -> int
export import def #extern recvfrom(s: uint64, buf: *char, len: int, flags: int, from_: *s_sockaddr, fromlen: *int) -> int
export import def #extern select(nfds: int, readfds: *fd_set, writefds: *fd_set, exceptfds: *fd_set, timeout: *s_timeval) -> int
export import def #extern send(s: uint64, buf: *char, len: int, flags: int) -> int
export import def #extern sendto(s: uint64, buf: *char, len: int, flags: int, to: *s_sockaddr, tolen: int) -> int
export import def #extern setsockopt(s: uint64, level: int, optname: int, optval: *char, optlen: int) -> int
export import def #extern shutdown(s: uint64, how: int) -> int
export import def #extern socket(af: int, type_: int, protocol: int) -> uint64
export import def #extern gethostbyaddr(addr: *char, len: int, type_: int) -> *s_hostent
export import def #extern gethostbyname(name: *char) -> *s_hostent
export import def #extern gethostname(name: *char, namelen: int) -> int
export import def #extern getservbyport(port: int, proto: *char) -> *s_servent
export import def #extern getservbyname(name: *char, proto: *char) -> *s_servent
export import def #extern getprotobynumber(proto: int) -> *s_protoent
export import def #extern getprotobyname(name: *char) -> *s_protoent
export import def #extern WSAStartup(wVersionRequired: ushort, lpWSAData: *WSADATA) -> int
export import def #extern WSACleanup() -> int
export import def #extern WSASetLastError(iError: int)
export import def #extern WSAGetLastError() -> int
export import def #extern WSAIsBlocking() -> int
export import def #extern WSAUnhookBlockingHook() -> int
export import def #extern WSASetBlockingHook(lpBlockFunc: def () -> (int64)) -> def () -> (int64)
export import def #extern WSACancelBlockingCall() -> int
export import def #extern WSAAsyncGetServByName(hWnd: *s_HWND__, wMsg: uint, name: *char, proto: *char, buf: *char, buflen: int) -> *
export import def #extern WSAAsyncGetServByPort(hWnd: *s_HWND__, wMsg: uint, port: int, proto: *char, buf: *char, buflen: int) -> *
export import def #extern WSAAsyncGetProtoByName(hWnd: *s_HWND__, wMsg: uint, name: *char, buf: *char, buflen: int) -> *
export import def #extern WSAAsyncGetProtoByNumber(hWnd: *s_HWND__, wMsg: uint, number: int, buf: *char, buflen: int) -> *
export import def #extern WSAAsyncGetHostByName(hWnd: *s_HWND__, wMsg: uint, name: *char, buf: *char, buflen: int) -> *
export import def #extern WSAAsyncGetHostByAddr(hWnd: *s_HWND__, wMsg: uint, addr: *char, len: int, type_: int, buf: *char, buflen: int) -> *
export import def #extern WSACancelAsyncRequest(hAsyncTaskHandle: *) -> int
export import def #extern WSAAsyncSelect(s: uint64, hWnd: *s_HWND__, wMsg: uint, lEvent: long) -> int
export import def #extern WSARecvEx(s: uint64, buf: *char, len: int, flags: *int) -> int
export import def #extern TransmitFile(hSocket: uint64, hFile: *, nNumberOfBytesToWrite: ulong, nNumberOfBytesPerSend: ulong, lpOverlapped: *OVERLAPPED, lpTransmitBuffers: *TRANSMIT_FILE_BUFFERS, dwReserved: ulong) -> int
export import def #extern AcceptEx(sListenSocket: uint64, sAcceptSocket: uint64, lpOutputBuffer: *, dwReceiveDataLength: ulong, dwLocalAddressLength: ulong, dwRemoteAddressLength: ulong, lpdwBytesReceived: *ulong, lpOverlapped: *OVERLAPPED) -> int
export import def #extern GetAcceptExSockaddrs(lpOutputBuffer: *, dwReceiveDataLength: ulong, dwLocalAddressLength: ulong, dwRemoteAddressLength: ulong, LocalSockaddr: **s_sockaddr, LocalSockaddrLength: *int, RemoteSockaddr: **s_sockaddr, RemoteSockaddrLength: *int)
export import def #extern #dllimport CryptAcquireContextA(phProv: *uint64, szContainer: *char, szProvider: *char, dwProvType: ulong, dwFlags: ulong) -> int
export import def #extern #dllimport CryptAcquireContextW(phProv: *uint64, szContainer: *ushort, szProvider: *ushort, dwProvType: ulong, dwFlags: ulong) -> int
export import def #extern #dllimport CryptReleaseContext(hProv: uint64, dwFlags: ulong) -> int
export import def #extern #dllimport CryptGenKey(hProv: uint64, Algid: uint, dwFlags: ulong, phKey: *uint64) -> int
export import def #extern #dllimport CryptDeriveKey(hProv: uint64, Algid: uint, hBaseData: uint64, dwFlags: ulong, phKey: *uint64) -> int
export import def #extern #dllimport CryptDestroyKey(hKey: uint64) -> int
export import def #extern #dllimport CryptSetKeyParam(hKey: uint64, dwParam: ulong, pbData: *char, dwFlags: ulong) -> int
export import def #extern #dllimport CryptGetKeyParam(hKey: uint64, dwParam: ulong, pbData: *char, pdwDataLen: *ulong, dwFlags: ulong) -> int
export import def #extern #dllimport CryptSetHashParam(hHash: uint64, dwParam: ulong, pbData: *char, dwFlags: ulong) -> int
export import def #extern #dllimport CryptGetHashParam(hHash: uint64, dwParam: ulong, pbData: *char, pdwDataLen: *ulong, dwFlags: ulong) -> int
export import def #extern #dllimport CryptSetProvParam(hProv: uint64, dwParam: ulong, pbData: *char, dwFlags: ulong) -> int
export import def #extern #dllimport CryptGetProvParam(hProv: uint64, dwParam: ulong, pbData: *char, pdwDataLen: *ulong, dwFlags: ulong) -> int
export import def #extern #dllimport CryptGenRandom(hProv: uint64, dwLen: ulong, pbBuffer: *char) -> int
export import def #extern #dllimport CryptGetUserKey(hProv: uint64, dwKeySpec: ulong, phUserKey: *uint64) -> int
export import def #extern #dllimport CryptExportKey(hKey: uint64, hExpKey: uint64, dwBlobType: ulong, dwFlags: ulong, pbData: *char, pdwDataLen: *ulong) -> int
export import def #extern #dllimport CryptImportKey(hProv: uint64, pbData: *char, dwDataLen: ulong, hPubKey: uint64, dwFlags: ulong, phKey: *uint64) -> int
export import def #extern #dllimport CryptEncrypt(hKey: uint64, hHash: uint64, Final: int, dwFlags: ulong, pbData: *char, pdwDataLen: *ulong, dwBufLen: ulong) -> int
export import def #extern #dllimport CryptDecrypt(hKey: uint64, hHash: uint64, Final: int, dwFlags: ulong, pbData: *char, pdwDataLen: *ulong) -> int
export import def #extern #dllimport CryptCreateHash(hProv: uint64, Algid: uint, hKey: uint64, dwFlags: ulong, phHash: *uint64) -> int
export import def #extern #dllimport CryptHashData(hHash: uint64, pbData: *char, dwDataLen: ulong, dwFlags: ulong) -> int
export import def #extern #dllimport CryptHashSessionKey(hHash: uint64, hKey: uint64, dwFlags: ulong) -> int
export import def #extern #dllimport CryptDestroyHash(hHash: uint64) -> int
export import def #extern #dllimport CryptSignHashA(hHash: uint64, dwKeySpec: ulong, szDescription: *char, dwFlags: ulong, pbSignature: *char, pdwSigLen: *ulong) -> int
export import def #extern #dllimport CryptSignHashW(hHash: uint64, dwKeySpec: ulong, szDescription: *ushort, dwFlags: ulong, pbSignature: *char, pdwSigLen: *ulong) -> int
export import def #extern #dllimport CryptVerifySignatureA(hHash: uint64, pbSignature: *char, dwSigLen: ulong, hPubKey: uint64, szDescription: *char, dwFlags: ulong) -> int
export import def #extern #dllimport CryptVerifySignatureW(hHash: uint64, pbSignature: *char, dwSigLen: ulong, hPubKey: uint64, szDescription: *ushort, dwFlags: ulong) -> int
export import def #extern #dllimport CryptSetProviderA(pszProvName: *char, dwProvType: ulong) -> int
export import def #extern #dllimport CryptSetProviderW(pszProvName: *ushort, dwProvType: ulong) -> int
export import def #extern #dllimport CryptSetProviderExA(pszProvName: *char, dwProvType: ulong, pdwReserved: *ulong, dwFlags: ulong) -> int
export import def #extern #dllimport CryptSetProviderExW(pszProvName: *ushort, dwProvType: ulong, pdwReserved: *ulong, dwFlags: ulong) -> int
export import def #extern #dllimport CryptGetDefaultProviderA(dwProvType: ulong, pdwReserved: *ulong, dwFlags: ulong, pszProvName: *char, pcbProvName: *ulong) -> int
export import def #extern #dllimport CryptGetDefaultProviderW(dwProvType: ulong, pdwReserved: *ulong, dwFlags: ulong, pszProvName: *ushort, pcbProvName: *ulong) -> int
export import def #extern #dllimport CryptEnumProviderTypesA(dwIndex: ulong, pdwReserved: *ulong, dwFlags: ulong, pdwProvType: *ulong, szTypeName: *char, pcbTypeName: *ulong) -> int
export import def #extern #dllimport CryptEnumProviderTypesW(dwIndex: ulong, pdwReserved: *ulong, dwFlags: ulong, pdwProvType: *ulong, szTypeName: *ushort, pcbTypeName: *ulong) -> int
export import def #extern #dllimport CryptEnumProvidersA(dwIndex: ulong, pdwReserved: *ulong, dwFlags: ulong, pdwProvType: *ulong, szProvName: *char, pcbProvName: *ulong) -> int
export import def #extern #dllimport CryptEnumProvidersW(dwIndex: ulong, pdwReserved: *ulong, dwFlags: ulong, pdwProvType: *ulong, szProvName: *ushort, pcbProvName: *ulong) -> int
export import def #extern #dllimport CryptContextAddRef(hProv: uint64, pdwReserved: *ulong, dwFlags: ulong) -> int
export import def #extern #dllimport CryptDuplicateKey(hKey: uint64, pdwReserved: *ulong, dwFlags: ulong, phKey: *uint64) -> int
export import def #extern #dllimport CryptDuplicateHash(hHash: uint64, pdwReserved: *ulong, dwFlags: ulong, phHash: *uint64) -> int
export import def #extern GetEncSChannel(pData: **char, dwDecSize: *ulong) -> int
export import def #extern BCryptOpenAlgorithmProvider(phAlgorithm: **, pszAlgId: *ushort, pszImplementation: *ushort, dwFlags: ulong) -> long
export import def #extern BCryptEnumAlgorithms(dwAlgOperations: ulong, pAlgCount: *ulong, ppAlgList: **BCRYPT_ALGORITHM_IDENTIFIER, dwFlags: ulong) -> long
export import def #extern BCryptEnumProviders(pszAlgId: *ushort, pImplCount: *ulong, ppImplList: **BCRYPT_PROVIDER_NAME, dwFlags: ulong) -> long
export import def #extern BCryptGetProperty(hObject: *, pszProperty: *ushort, pbOutput: *char, cbOutput: ulong, pcbResult: *ulong, dwFlags: ulong) -> long
export import def #extern BCryptSetProperty(hObject: *, pszProperty: *ushort, pbInput: *char, cbInput: ulong, dwFlags: ulong) -> long
export import def #extern BCryptCloseAlgorithmProvider(hAlgorithm: *, dwFlags: ulong) -> long
export import def #extern BCryptFreeBuffer(pvBuffer: *)
export import def #extern BCryptGenerateSymmetricKey(hAlgorithm: *, phKey: **, pbKeyObject: *char, cbKeyObject: ulong, pbSecret: *char, cbSecret: ulong, dwFlags: ulong) -> long
export import def #extern BCryptGenerateKeyPair(hAlgorithm: *, phKey: **, dwLength: ulong, dwFlags: ulong) -> long
export import def #extern BCryptEncrypt(hKey: *, pbInput: *char, cbInput: ulong, pPaddingInfo: *, pbIV: *char, cbIV: ulong, pbOutput: *char, cbOutput: ulong, pcbResult: *ulong, dwFlags: ulong) -> long
export import def #extern BCryptDecrypt(hKey: *, pbInput: *char, cbInput: ulong, pPaddingInfo: *, pbIV: *char, cbIV: ulong, pbOutput: *char, cbOutput: ulong, pcbResult: *ulong, dwFlags: ulong) -> long
export import def #extern BCryptExportKey(hKey: *, hExportKey: *, pszBlobType: *ushort, pbOutput: *char, cbOutput: ulong, pcbResult: *ulong, dwFlags: ulong) -> long
export import def #extern BCryptImportKey(hAlgorithm: *, hImportKey: *, pszBlobType: *ushort, phKey: **, pbKeyObject: *char, cbKeyObject: ulong, pbInput: *char, cbInput: ulong, dwFlags: ulong) -> long
export import def #extern BCryptImportKeyPair(hAlgorithm: *, hImportKey: *, pszBlobType: *ushort, phKey: **, pbInput: *char, cbInput: ulong, dwFlags: ulong) -> long
export import def #extern BCryptDuplicateKey(hKey: *, phNewKey: **, pbKeyObject: *char, cbKeyObject: ulong, dwFlags: ulong) -> long
export import def #extern BCryptFinalizeKeyPair(hKey: *, dwFlags: ulong) -> long
export import def #extern BCryptDestroyKey(hKey: *) -> long
export import def #extern BCryptDestroySecret(hSecret: *) -> long
export import def #extern BCryptSignHash(hKey: *, pPaddingInfo: *, pbInput: *char, cbInput: ulong, pbOutput: *char, cbOutput: ulong, pcbResult: *ulong, dwFlags: ulong) -> long
export import def #extern BCryptVerifySignature(hKey: *, pPaddingInfo: *, pbHash: *char, cbHash: ulong, pbSignature: *char, cbSignature: ulong, dwFlags: ulong) -> long
export import def #extern BCryptSecretAgreement(hPrivKey: *, hPubKey: *, phAgreedSecret: **, dwFlags: ulong) -> long
export import def #extern BCryptDeriveKey(hSharedSecret: *, pwszKDF: *ushort, pParameterList: *BCryptBufferDesc, pbDerivedKey: *char, cbDerivedKey: ulong, pcbResult: *ulong, dwFlags: ulong) -> long
export import def #extern BCryptKeyDerivation(hKey: *, pParameterList: *BCryptBufferDesc, pbDerivedKey: *char, cbDerivedKey: ulong, pcbResult: *ulong, dwFlags: ulong) -> long
export import def #extern BCryptCreateHash(hAlgorithm: *, phHash: **, pbHashObject: *char, cbHashObject: ulong, pbSecret: *char, cbSecret: ulong, dwFlags: ulong) -> long
export import def #extern BCryptHashData(hHash: *, pbInput: *char, cbInput: ulong, dwFlags: ulong) -> long
export import def #extern BCryptFinishHash(hHash: *, pbOutput: *char, cbOutput: ulong, dwFlags: ulong) -> long
export import def #extern BCryptCreateMultiHash(hAlgorithm: *, phHash: **, nHashes: ulong, pbHashObject: *char, cbHashObject: ulong, pbSecret: *char, cbSecret: ulong, dwFlags: ulong) -> long
export import def #extern BCryptProcessMultiOperations(hObject: *, operationType: BCRYPT_MULTI_OPERATION_TYPE, pOperations: *, cbOperations: ulong, dwFlags: ulong) -> long
export import def #extern BCryptDuplicateHash(hHash: *, phNewHash: **, pbHashObject: *char, cbHashObject: ulong, dwFlags: ulong) -> long
export import def #extern BCryptDestroyHash(hHash: *) -> long
export import def #extern BCryptHash(hAlgorithm: *, pbSecret: *char, cbSecret: ulong, pbInput: *char, cbInput: ulong, pbOutput: *char, cbOutput: ulong) -> long
export import def #extern BCryptGenRandom(hAlgorithm: *, pbBuffer: *char, cbBuffer: ulong, dwFlags: ulong) -> long
export import def #extern BCryptDeriveKeyCapi(hHash: *, hTargetAlg: *, pbDerivedKey: *char, cbDerivedKey: ulong, dwFlags: ulong) -> long
export import def #extern BCryptDeriveKeyPBKDF2(hPrf: *, pbPassword: *char, cbPassword: ulong, pbSalt: *char, cbSalt: ulong, cIterations: uint64, pbDerivedKey: *char, cbDerivedKey: ulong, dwFlags: ulong) -> long
export import def #extern BCryptQueryProviderRegistration(pszProvider: *ushort, dwMode: ulong, dwInterface: ulong, pcbBuffer: *ulong, ppBuffer: **CRYPT_PROVIDER_REG) -> long
export import def #extern BCryptEnumRegisteredProviders(pcbBuffer: *ulong, ppBuffer: **CRYPT_PROVIDERS) -> long
export import def #extern BCryptCreateContext(dwTable: ulong, pszContext: *ushort, pConfig: *CRYPT_CONTEXT_CONFIG) -> long
export import def #extern BCryptDeleteContext(dwTable: ulong, pszContext: *ushort) -> long
export import def #extern BCryptEnumContexts(dwTable: ulong, pcbBuffer: *ulong, ppBuffer: **CRYPT_CONTEXTS) -> long
export import def #extern BCryptConfigureContext(dwTable: ulong, pszContext: *ushort, pConfig: *CRYPT_CONTEXT_CONFIG) -> long
export import def #extern BCryptQueryContextConfiguration(dwTable: ulong, pszContext: *ushort, pcbBuffer: *ulong, ppBuffer: **CRYPT_CONTEXT_CONFIG) -> long
export import def #extern BCryptAddContextFunction(dwTable: ulong, pszContext: *ushort, dwInterface: ulong, pszFunction: *ushort, dwPosition: ulong) -> long
export import def #extern BCryptRemoveContextFunction(dwTable: ulong, pszContext: *ushort, dwInterface: ulong, pszFunction: *ushort) -> long
export import def #extern BCryptEnumContextFunctions(dwTable: ulong, pszContext: *ushort, dwInterface: ulong, pcbBuffer: *ulong, ppBuffer: **CRYPT_CONTEXT_FUNCTIONS) -> long
export import def #extern BCryptConfigureContextFunction(dwTable: ulong, pszContext: *ushort, dwInterface: ulong, pszFunction: *ushort, pConfig: *CRYPT_CONTEXT_FUNCTION_CONFIG) -> long
export import def #extern BCryptQueryContextFunctionConfiguration(dwTable: ulong, pszContext: *ushort, dwInterface: ulong, pszFunction: *ushort, pcbBuffer: *ulong, ppBuffer: **CRYPT_CONTEXT_FUNCTION_CONFIG) -> long
export import def #extern BCryptEnumContextFunctionProviders(dwTable: ulong, pszContext: *ushort, dwInterface: ulong, pszFunction: *ushort, pcbBuffer: *ulong, ppBuffer: **CRYPT_CONTEXT_FUNCTION_PROVIDERS) -> long
export import def #extern BCryptSetContextFunctionProperty(dwTable: ulong, pszContext: *ushort, dwInterface: ulong, pszFunction: *ushort, pszProperty: *ushort, cbValue: ulong, pbValue: *char) -> long
export import def #extern BCryptQueryContextFunctionProperty(dwTable: ulong, pszContext: *ushort, dwInterface: ulong, pszFunction: *ushort, pszProperty: *ushort, pcbValue: *ulong, ppbValue: **char) -> long
export import def #extern BCryptRegisterConfigChangeNotify(phEvent: **) -> long
export import def #extern BCryptUnregisterConfigChangeNotify(hEvent: *) -> long
export import def #extern BCryptResolveProviders(pszContext: *ushort, dwInterface: ulong, pszFunction: *ushort, pszProvider: *ushort, dwMode: ulong, dwFlags: ulong, pcbBuffer: *ulong, ppBuffer: **CRYPT_PROVIDER_REFS) -> long
export import def #extern BCryptGetFipsAlgorithmMode(pfEnabled: *char) -> long
export import def #extern CngGetFipsAlgorithmMode() -> char
export import def #extern NCryptOpenStorageProvider(phProvider: *uint64, pszProviderName: *ushort, dwFlags: ulong) -> long
export import def #extern NCryptEnumAlgorithms(hProvider: uint64, dwAlgOperations: ulong, pdwAlgCount: *ulong, ppAlgList: **NCryptAlgorithmName, dwFlags: ulong) -> long
export import def #extern NCryptIsAlgSupported(hProvider: uint64, pszAlgId: *ushort, dwFlags: ulong) -> long
export import def #extern NCryptEnumKeys(hProvider: uint64, pszScope: *ushort, ppKeyName: **NCryptKeyName, ppEnumState: **, dwFlags: ulong) -> long
export import def #extern NCryptEnumStorageProviders(pdwProviderCount: *ulong, ppProviderList: **NCryptProviderName, dwFlags: ulong) -> long
export import def #extern NCryptFreeBuffer(pvInput: *) -> long
export import def #extern NCryptOpenKey(hProvider: uint64, phKey: *uint64, pszKeyName: *ushort, dwLegacyKeySpec: ulong, dwFlags: ulong) -> long
export import def #extern NCryptCreatePersistedKey(hProvider: uint64, phKey: *uint64, pszAlgId: *ushort, pszKeyName: *ushort, dwLegacyKeySpec: ulong, dwFlags: ulong) -> long
export import def #extern NCryptGetProperty(hObject: uint64, pszProperty: *ushort, pbOutput: *char, cbOutput: ulong, pcbResult: *ulong, dwFlags: ulong) -> long
export import def #extern NCryptSetProperty(hObject: uint64, pszProperty: *ushort, pbInput: *char, cbInput: ulong, dwFlags: ulong) -> long
export import def #extern NCryptFinalizeKey(hKey: uint64, dwFlags: ulong) -> long
export import def #extern NCryptEncrypt(hKey: uint64, pbInput: *char, cbInput: ulong, pPaddingInfo: *, pbOutput: *char, cbOutput: ulong, pcbResult: *ulong, dwFlags: ulong) -> long
export import def #extern NCryptDecrypt(hKey: uint64, pbInput: *char, cbInput: ulong, pPaddingInfo: *, pbOutput: *char, cbOutput: ulong, pcbResult: *ulong, dwFlags: ulong) -> long
export import def #extern NCryptImportKey(hProvider: uint64, hImportKey: uint64, pszBlobType: *ushort, pParameterList: *BCryptBufferDesc, phKey: *uint64, pbData: *char, cbData: ulong, dwFlags: ulong) -> long
export import def #extern NCryptExportKey(hKey: uint64, hExportKey: uint64, pszBlobType: *ushort, pParameterList: *BCryptBufferDesc, pbOutput: *char, cbOutput: ulong, pcbResult: *ulong, dwFlags: ulong) -> long
export import def #extern NCryptSignHash(hKey: uint64, pPaddingInfo: *, pbHashValue: *char, cbHashValue: ulong, pbSignature: *char, cbSignature: ulong, pcbResult: *ulong, dwFlags: ulong) -> long
export import def #extern NCryptVerifySignature(hKey: uint64, pPaddingInfo: *, pbHashValue: *char, cbHashValue: ulong, pbSignature: *char, cbSignature: ulong, dwFlags: ulong) -> long
export import def #extern NCryptDeleteKey(hKey: uint64, dwFlags: ulong) -> long
export import def #extern NCryptFreeObject(hObject: uint64) -> long
export import def #extern NCryptIsKeyHandle(hKey: uint64) -> int
export import def #extern NCryptTranslateHandle(phProvider: *uint64, phKey: *uint64, hLegacyProv: uint64, hLegacyKey: uint64, dwLegacyKeySpec: ulong, dwFlags: ulong) -> long
export import def #extern NCryptNotifyChangeKey(hProvider: uint64, phEvent: **, dwFlags: ulong) -> long
export import def #extern NCryptSecretAgreement(hPrivKey: uint64, hPubKey: uint64, phAgreedSecret: *uint64, dwFlags: ulong) -> long
export import def #extern NCryptDeriveKey(hSharedSecret: uint64, pwszKDF: *ushort, pParameterList: *BCryptBufferDesc, pbDerivedKey: *char, cbDerivedKey: ulong, pcbResult: *ulong, dwFlags: ulong) -> long
export import def #extern NCryptKeyDerivation(hKey: uint64, pParameterList: *BCryptBufferDesc, pbDerivedKey: *char, cbDerivedKey: ulong, pcbResult: *ulong, dwFlags: ulong) -> long
export import def #extern NCryptCreateClaim(hSubjectKey: uint64, hAuthorityKey: uint64, dwClaimType: ulong, pParameterList: *BCryptBufferDesc, pbClaimBlob: *char, cbClaimBlob: ulong, pcbResult: *ulong, dwFlags: ulong) -> long
export import def #extern NCryptVerifyClaim(hSubjectKey: uint64, hAuthorityKey: uint64, dwClaimType: ulong, pParameterList: *BCryptBufferDesc, pbClaimBlob: *char, cbClaimBlob: ulong, pOutput: *BCryptBufferDesc, dwFlags: ulong) -> long
export import def #extern #dllimport CryptFormatObject(dwCertEncodingType: ulong, dwFormatType: ulong, dwFormatStrType: ulong, pFormatStruct: *, lpszStructType: *char, pbEncoded: *char, cbEncoded: ulong, pbFormat: *, pcbFormat: *ulong) -> int
export import def #extern #dllimport CryptEncodeObjectEx(dwCertEncodingType: ulong, lpszStructType: *char, pvStructInfo: *, dwFlags: ulong, pEncodePara: *CRYPT_ENCODE_PARA, pvEncoded: *, pcbEncoded: *ulong) -> int
export import def #extern #dllimport CryptEncodeObject(dwCertEncodingType: ulong, lpszStructType: *char, pvStructInfo: *, pbEncoded: *char, pcbEncoded: *ulong) -> int
export import def #extern #dllimport CryptDecodeObjectEx(dwCertEncodingType: ulong, lpszStructType: *char, pbEncoded: *char, cbEncoded: ulong, dwFlags: ulong, pDecodePara: *CRYPT_DECODE_PARA, pvStructInfo: *, pcbStructInfo: *ulong) -> int
export import def #extern #dllimport CryptDecodeObject(dwCertEncodingType: ulong, lpszStructType: *char, pbEncoded: *char, cbEncoded: ulong, dwFlags: ulong, pvStructInfo: *, pcbStructInfo: *ulong) -> int
export import def #extern #dllimport CryptInstallOIDFunctionAddress(hModule: *s_HINSTANCE__, dwEncodingType: ulong, pszFuncName: *char, cFuncEntry: ulong, rgFuncEntry: *CRYPT_OID_FUNC_ENTRY, dwFlags: ulong) -> int
export import def #extern #dllimport CryptInitOIDFunctionSet(pszFuncName: *char, dwFlags: ulong) -> *
export import def #extern #dllimport CryptGetOIDFunctionAddress(hFuncSet: *, dwEncodingType: ulong, pszOID: *char, dwFlags: ulong, ppvFuncAddr: **, phFuncAddr: **) -> int
export import def #extern #dllimport CryptGetDefaultOIDDllList(hFuncSet: *, dwEncodingType: ulong, pwszDllList: *ushort, pcchDllList: *ulong) -> int
export import def #extern #dllimport CryptGetDefaultOIDFunctionAddress(hFuncSet: *, dwEncodingType: ulong, pwszDll: *ushort, dwFlags: ulong, ppvFuncAddr: **, phFuncAddr: **) -> int
export import def #extern #dllimport CryptFreeOIDFunctionAddress(hFuncAddr: *, dwFlags: ulong) -> int
export import def #extern #dllimport CryptRegisterOIDFunction(dwEncodingType: ulong, pszFuncName: *char, pszOID: *char, pwszDll: *ushort, pszOverrideFuncName: *char) -> int
export import def #extern #dllimport CryptUnregisterOIDFunction(dwEncodingType: ulong, pszFuncName: *char, pszOID: *char) -> int
export import def #extern #dllimport CryptRegisterDefaultOIDFunction(dwEncodingType: ulong, pszFuncName: *char, dwIndex: ulong, pwszDll: *ushort) -> int
export import def #extern #dllimport CryptUnregisterDefaultOIDFunction(dwEncodingType: ulong, pszFuncName: *char, pwszDll: *ushort) -> int
export import def #extern #dllimport CryptSetOIDFunctionValue(dwEncodingType: ulong, pszFuncName: *char, pszOID: *char, pwszValueName: *ushort, dwValueType: ulong, pbValueData: *char, cbValueData: ulong) -> int
export import def #extern #dllimport CryptGetOIDFunctionValue(dwEncodingType: ulong, pszFuncName: *char, pszOID: *char, pwszValueName: *ushort, pdwValueType: *ulong, pbValueData: *char, pcbValueData: *ulong) -> int
export import def #extern #dllimport CryptEnumOIDFunction(dwEncodingType: ulong, pszFuncName: *char, pszOID: *char, dwFlags: ulong, pvArg: *, pfnEnumOIDFunc: def (ulong, *char, *char, ulong, *ulong, **ushort, **char, *ulong, *) -> (int)) -> int
export import def #extern #dllimport CryptFindOIDInfo(dwKeyType: ulong, pvKey: *, dwGroupId: ulong) -> *CRYPT_OID_INFO
export import def #extern #dllimport CryptRegisterOIDInfo(pInfo: *CRYPT_OID_INFO, dwFlags: ulong) -> int
export import def #extern #dllimport CryptUnregisterOIDInfo(pInfo: *CRYPT_OID_INFO) -> int
export import def #extern #dllimport CryptEnumOIDInfo(dwGroupId: ulong, dwFlags: ulong, pvArg: *, pfnEnumOIDInfo: def (*CRYPT_OID_INFO, *) -> (int)) -> int
export import def #extern #dllimport CryptFindLocalizedName(pwszCryptName: *ushort) -> *ushort
export import def #extern #dllimport CryptMsgOpenToEncode(dwMsgEncodingType: ulong, dwFlags: ulong, dwMsgType: ulong, pvMsgEncodeInfo: *, pszInnerContentObjID: *char, pStreamInfo: *CMSG_STREAM_INFO) -> *
export import def #extern #dllimport CryptMsgCalculateEncodedLength(dwMsgEncodingType: ulong, dwFlags: ulong, dwMsgType: ulong, pvMsgEncodeInfo: *, pszInnerContentObjID: *char, cbData: ulong) -> ulong
export import def #extern #dllimport CryptMsgOpenToDecode(dwMsgEncodingType: ulong, dwFlags: ulong, dwMsgType: ulong, hCryptProv: uint64, pRecipientInfo: *CERT_INFO, pStreamInfo: *CMSG_STREAM_INFO) -> *
export import def #extern #dllimport CryptMsgDuplicate(hCryptMsg: *) -> *
export import def #extern #dllimport CryptMsgClose(hCryptMsg: *) -> int
export import def #extern #dllimport CryptMsgUpdate(hCryptMsg: *, pbData: *char, cbData: ulong, fFinal: int) -> int
export import def #extern #dllimport CryptMsgGetParam(hCryptMsg: *, dwParamType: ulong, dwIndex: ulong, pvData: *, pcbData: *ulong) -> int
export import def #extern #dllimport CryptMsgControl(hCryptMsg: *, dwFlags: ulong, dwCtrlType: ulong, pvCtrlPara: *) -> int
export import def #extern CryptMsgVerifyCountersignatureEncoded(hCryptProv: uint64, dwEncodingType: ulong, pbSignerInfo: *char, cbSignerInfo: ulong, pbSignerInfoCountersignature: *char, cbSignerInfoCountersignature: ulong, pciCountersigner: *CERT_INFO) -> int
export import def #extern CryptMsgVerifyCountersignatureEncodedEx(hCryptProv: uint64, dwEncodingType: ulong, pbSignerInfo: *char, cbSignerInfo: ulong, pbSignerInfoCountersignature: *char, cbSignerInfoCountersignature: ulong, dwSignerType: ulong, pvSigner: *, dwFlags: ulong, pvExtra: *) -> int
export import def #extern CryptMsgCountersign(hCryptMsg: *, dwIndex: ulong, cCountersigners: ulong, rgCountersigners: *CMSG_SIGNER_ENCODE_INFO) -> int
export import def #extern CryptMsgCountersignEncoded(dwEncodingType: ulong, pbSignerInfo: *char, cbSignerInfo: ulong, cCountersigners: ulong, rgCountersigners: *CMSG_SIGNER_ENCODE_INFO, pbCountersignature: *char, pcbCountersignature: *ulong) -> int
export import def #extern #dllimport CertOpenStore(lpszStoreProvider: *char, dwEncodingType: ulong, hCryptProv: uint64, dwFlags: ulong, pvPara: *) -> *
export import def #extern #dllimport CertDuplicateStore(hCertStore: *) -> *
export import def #extern #dllimport CertSaveStore(hCertStore: *, dwEncodingType: ulong, dwSaveAs: ulong, dwSaveTo: ulong, pvSaveToPara: *, dwFlags: ulong) -> int
export import def #extern #dllimport CertCloseStore(hCertStore: *, dwFlags: ulong) -> int
export import def #extern #dllimport CertGetSubjectCertificateFromStore(hCertStore: *, dwCertEncodingType: ulong, pCertId: *CERT_INFO) -> *CERT_CONTEXT
export import def #extern #dllimport CertEnumCertificatesInStore(hCertStore: *, pPrevCertContext: *CERT_CONTEXT) -> *CERT_CONTEXT
export import def #extern #dllimport CertFindCertificateInStore(hCertStore: *, dwCertEncodingType: ulong, dwFindFlags: ulong, dwFindType: ulong, pvFindPara: *, pPrevCertContext: *CERT_CONTEXT) -> *CERT_CONTEXT
export import def #extern #dllimport CertGetIssuerCertificateFromStore(hCertStore: *, pSubjectContext: *CERT_CONTEXT, pPrevIssuerContext: *CERT_CONTEXT, pdwFlags: *ulong) -> *CERT_CONTEXT
export import def #extern #dllimport CertVerifySubjectCertificateContext(pSubject: *CERT_CONTEXT, pIssuer: *CERT_CONTEXT, pdwFlags: *ulong) -> int
export import def #extern #dllimport CertDuplicateCertificateContext(pCertContext: *CERT_CONTEXT) -> *CERT_CONTEXT
export import def #extern #dllimport CertCreateCertificateContext(dwCertEncodingType: ulong, pbCertEncoded: *char, cbCertEncoded: ulong) -> *CERT_CONTEXT
export import def #extern #dllimport CertFreeCertificateContext(pCertContext: *CERT_CONTEXT) -> int
export import def #extern #dllimport CertSetCertificateContextProperty(pCertContext: *CERT_CONTEXT, dwPropId: ulong, dwFlags: ulong, pvData: *) -> int
export import def #extern #dllimport CertGetCertificateContextProperty(pCertContext: *CERT_CONTEXT, dwPropId: ulong, pvData: *, pcbData: *ulong) -> int
export import def #extern #dllimport CertEnumCertificateContextProperties(pCertContext: *CERT_CONTEXT, dwPropId: ulong) -> ulong
export import def #extern #dllimport CertCreateCTLEntryFromCertificateContextProperties(pCertContext: *CERT_CONTEXT, cOptAttr: ulong, rgOptAttr: *CRYPT_ATTRIBUTE, dwFlags: ulong, pvReserved: *, pCtlEntry: *CTL_ENTRY, pcbCtlEntry: *ulong) -> int
export import def #extern #dllimport CertSetCertificateContextPropertiesFromCTLEntry(pCertContext: *CERT_CONTEXT, pCtlEntry: *CTL_ENTRY, dwFlags: ulong) -> int
export import def #extern #dllimport CertGetCRLFromStore(hCertStore: *, pIssuerContext: *CERT_CONTEXT, pPrevCrlContext: *CRL_CONTEXT, pdwFlags: *ulong) -> *CRL_CONTEXT
export import def #extern #dllimport CertEnumCRLsInStore(hCertStore: *, pPrevCrlContext: *CRL_CONTEXT) -> *CRL_CONTEXT
export import def #extern #dllimport CertFindCRLInStore(hCertStore: *, dwCertEncodingType: ulong, dwFindFlags: ulong, dwFindType: ulong, pvFindPara: *, pPrevCrlContext: *CRL_CONTEXT) -> *CRL_CONTEXT
export import def #extern #dllimport CertDuplicateCRLContext(pCrlContext: *CRL_CONTEXT) -> *CRL_CONTEXT
export import def #extern #dllimport CertCreateCRLContext(dwCertEncodingType: ulong, pbCrlEncoded: *char, cbCrlEncoded: ulong) -> *CRL_CONTEXT
export import def #extern #dllimport CertFreeCRLContext(pCrlContext: *CRL_CONTEXT) -> int
export import def #extern #dllimport CertSetCRLContextProperty(pCrlContext: *CRL_CONTEXT, dwPropId: ulong, dwFlags: ulong, pvData: *) -> int
export import def #extern #dllimport CertGetCRLContextProperty(pCrlContext: *CRL_CONTEXT, dwPropId: ulong, pvData: *, pcbData: *ulong) -> int
export import def #extern #dllimport CertEnumCRLContextProperties(pCrlContext: *CRL_CONTEXT, dwPropId: ulong) -> ulong
export import def #extern #dllimport CertFindCertificateInCRL(pCert: *CERT_CONTEXT, pCrlContext: *CRL_CONTEXT, dwFlags: ulong, pvReserved: *, ppCrlEntry: **CRL_ENTRY) -> int
export import def #extern #dllimport CertIsValidCRLForCertificate(pCert: *CERT_CONTEXT, pCrl: *CRL_CONTEXT, dwFlags: ulong, pvReserved: *) -> int
export import def #extern #dllimport CertAddEncodedCertificateToStore(hCertStore: *, dwCertEncodingType: ulong, pbCertEncoded: *char, cbCertEncoded: ulong, dwAddDisposition: ulong, ppCertContext: **CERT_CONTEXT) -> int
export import def #extern #dllimport CertAddCertificateContextToStore(hCertStore: *, pCertContext: *CERT_CONTEXT, dwAddDisposition: ulong, ppStoreContext: **CERT_CONTEXT) -> int
export import def #extern #dllimport CertAddSerializedElementToStore(hCertStore: *, pbElement: *char, cbElement: ulong, dwAddDisposition: ulong, dwFlags: ulong, dwContextTypeFlags: ulong, pdwContextType: *ulong, ppvContext: **) -> int
export import def #extern #dllimport CertDeleteCertificateFromStore(pCertContext: *CERT_CONTEXT) -> int
export import def #extern #dllimport CertAddEncodedCRLToStore(hCertStore: *, dwCertEncodingType: ulong, pbCrlEncoded: *char, cbCrlEncoded: ulong, dwAddDisposition: ulong, ppCrlContext: **CRL_CONTEXT) -> int
export import def #extern #dllimport CertAddCRLContextToStore(hCertStore: *, pCrlContext: *CRL_CONTEXT, dwAddDisposition: ulong, ppStoreContext: **CRL_CONTEXT) -> int
export import def #extern #dllimport CertDeleteCRLFromStore(pCrlContext: *CRL_CONTEXT) -> int
export import def #extern #dllimport CertSerializeCertificateStoreElement(pCertContext: *CERT_CONTEXT, dwFlags: ulong, pbElement: *char, pcbElement: *ulong) -> int
export import def #extern #dllimport CertSerializeCRLStoreElement(pCrlContext: *CRL_CONTEXT, dwFlags: ulong, pbElement: *char, pcbElement: *ulong) -> int
export import def #extern #dllimport CertDuplicateCTLContext(pCtlContext: *CTL_CONTEXT) -> *CTL_CONTEXT
export import def #extern #dllimport CertCreateCTLContext(dwMsgAndCertEncodingType: ulong, pbCtlEncoded: *char, cbCtlEncoded: ulong) -> *CTL_CONTEXT
export import def #extern #dllimport CertFreeCTLContext(pCtlContext: *CTL_CONTEXT) -> int
export import def #extern #dllimport CertSetCTLContextProperty(pCtlContext: *CTL_CONTEXT, dwPropId: ulong, dwFlags: ulong, pvData: *) -> int
export import def #extern #dllimport CertGetCTLContextProperty(pCtlContext: *CTL_CONTEXT, dwPropId: ulong, pvData: *, pcbData: *ulong) -> int
export import def #extern #dllimport CertEnumCTLContextProperties(pCtlContext: *CTL_CONTEXT, dwPropId: ulong) -> ulong
export import def #extern #dllimport CertEnumCTLsInStore(hCertStore: *, pPrevCtlContext: *CTL_CONTEXT) -> *CTL_CONTEXT
export import def #extern #dllimport CertFindSubjectInCTL(dwEncodingType: ulong, dwSubjectType: ulong, pvSubject: *, pCtlContext: *CTL_CONTEXT, dwFlags: ulong) -> *CTL_ENTRY
export import def #extern #dllimport CertFindCTLInStore(hCertStore: *, dwMsgAndCertEncodingType: ulong, dwFindFlags: ulong, dwFindType: ulong, pvFindPara: *, pPrevCtlContext: *CTL_CONTEXT) -> *CTL_CONTEXT
export import def #extern #dllimport CertAddEncodedCTLToStore(hCertStore: *, dwMsgAndCertEncodingType: ulong, pbCtlEncoded: *char, cbCtlEncoded: ulong, dwAddDisposition: ulong, ppCtlContext: **CTL_CONTEXT) -> int
export import def #extern #dllimport CertAddCTLContextToStore(hCertStore: *, pCtlContext: *CTL_CONTEXT, dwAddDisposition: ulong, ppStoreContext: **CTL_CONTEXT) -> int
export import def #extern #dllimport CertSerializeCTLStoreElement(pCtlContext: *CTL_CONTEXT, dwFlags: ulong, pbElement: *char, pcbElement: *ulong) -> int
export import def #extern #dllimport CertDeleteCTLFromStore(pCtlContext: *CTL_CONTEXT) -> int
export import def #extern #dllimport CertAddCertificateLinkToStore(hCertStore: *, pCertContext: *CERT_CONTEXT, dwAddDisposition: ulong, ppStoreContext: **CERT_CONTEXT) -> int
export import def #extern #dllimport CertAddCRLLinkToStore(hCertStore: *, pCrlContext: *CRL_CONTEXT, dwAddDisposition: ulong, ppStoreContext: **CRL_CONTEXT) -> int
export import def #extern #dllimport CertAddCTLLinkToStore(hCertStore: *, pCtlContext: *CTL_CONTEXT, dwAddDisposition: ulong, ppStoreContext: **CTL_CONTEXT) -> int
export import def #extern #dllimport CertAddStoreToCollection(hCollectionStore: *, hSiblingStore: *, dwUpdateFlags: ulong, dwPriority: ulong) -> int
export import def #extern #dllimport CertRemoveStoreFromCollection(hCollectionStore: *, hSiblingStore: *)
export import def #extern #dllimport CertControlStore(hCertStore: *, dwFlags: ulong, dwCtrlType: ulong, pvCtrlPara: *) -> int
export import def #extern #dllimport CertSetStoreProperty(hCertStore: *, dwPropId: ulong, dwFlags: ulong, pvData: *) -> int
export import def #extern #dllimport CertGetStoreProperty(hCertStore: *, dwPropId: ulong, pvData: *, pcbData: *ulong) -> int
export import def #extern #dllimport CertCreateContext(dwContextType: ulong, dwEncodingType: ulong, pbEncoded: *char, cbEncoded: ulong, dwFlags: ulong, pCreatePara: *CERT_CREATE_CONTEXT_PARA) -> *
export import def #extern #dllimport CertRegisterSystemStore(pvSystemStore: *, dwFlags: ulong, pStoreInfo: *CERT_SYSTEM_STORE_INFO, pvReserved: *) -> int
export import def #extern #dllimport CertRegisterPhysicalStore(pvSystemStore: *, dwFlags: ulong, pwszStoreName: *ushort, pStoreInfo: *CERT_PHYSICAL_STORE_INFO, pvReserved: *) -> int
export import def #extern #dllimport CertUnregisterSystemStore(pvSystemStore: *, dwFlags: ulong) -> int
export import def #extern #dllimport CertUnregisterPhysicalStore(pvSystemStore: *, dwFlags: ulong, pwszStoreName: *ushort) -> int
export import def #extern #dllimport CertEnumSystemStoreLocation(dwFlags: ulong, pvArg: *, pfnEnum: def (*ushort, ulong, *, *) -> (int)) -> int
export import def #extern #dllimport CertEnumSystemStore(dwFlags: ulong, pvSystemStoreLocationPara: *, pvArg: *, pfnEnum: def (*, ulong, *CERT_SYSTEM_STORE_INFO, *, *) -> (int)) -> int
export import def #extern #dllimport CertEnumPhysicalStore(pvSystemStore: *, dwFlags: ulong, pvArg: *, pfnEnum: def (*, ulong, *ushort, *CERT_PHYSICAL_STORE_INFO, *, *) -> (int)) -> int
export import def #extern #dllimport CertGetEnhancedKeyUsage(pCertContext: *CERT_CONTEXT, dwFlags: ulong, pUsage: *CERT_ENHKEY_USAGE, pcbUsage: *ulong) -> int
export import def #extern #dllimport CertSetEnhancedKeyUsage(pCertContext: *CERT_CONTEXT, pUsage: *CERT_ENHKEY_USAGE) -> int
export import def #extern #dllimport CertAddEnhancedKeyUsageIdentifier(pCertContext: *CERT_CONTEXT, pszUsageIdentifier: *char) -> int
export import def #extern #dllimport CertRemoveEnhancedKeyUsageIdentifier(pCertContext: *CERT_CONTEXT, pszUsageIdentifier: *char) -> int
export import def #extern #dllimport CertGetValidUsages(cCerts: ulong, rghCerts: **CERT_CONTEXT, cNumOIDs: *int, rghOIDs: **char, pcbOIDs: *ulong) -> int
export import def #extern #dllimport CryptMsgGetAndVerifySigner(hCryptMsg: *, cSignerStore: ulong, rghSignerStore: **, dwFlags: ulong, ppSigner: **CERT_CONTEXT, pdwSignerIndex: *ulong) -> int
export import def #extern #dllimport CryptMsgSignCTL(dwMsgEncodingType: ulong, pbCtlContent: *char, cbCtlContent: ulong, pSignInfo: *CMSG_SIGNED_ENCODE_INFO, dwFlags: ulong, pbEncoded: *char, pcbEncoded: *ulong) -> int
export import def #extern #dllimport CryptMsgEncodeAndSignCTL(dwMsgEncodingType: ulong, pCtlInfo: *CTL_INFO, pSignInfo: *CMSG_SIGNED_ENCODE_INFO, dwFlags: ulong, pbEncoded: *char, pcbEncoded: *ulong) -> int
export import def #extern #dllimport CertFindSubjectInSortedCTL(pSubjectIdentifier: *CRYPT_ATTR_BLOB, pCtlContext: *CTL_CONTEXT, dwFlags: ulong, pvReserved: *, pEncodedAttributes: *CRYPT_ATTR_BLOB) -> int
export import def #extern #dllimport CertEnumSubjectInSortedCTL(pCtlContext: *CTL_CONTEXT, ppvNextSubject: **, pSubjectIdentifier: *CRYPT_ATTR_BLOB, pEncodedAttributes: *CRYPT_ATTR_BLOB) -> int
export import def #extern #dllimport CertVerifyCTLUsage(dwEncodingType: ulong, dwSubjectType: ulong, pvSubject: *, pSubjectUsage: *CERT_ENHKEY_USAGE, dwFlags: ulong, pVerifyUsagePara: *CTL_VERIFY_USAGE_PARA, pVerifyUsageStatus: *CTL_VERIFY_USAGE_STATUS) -> int
export import def #extern #dllimport CertVerifyRevocation(dwEncodingType: ulong, dwRevType: ulong, cContext: ulong, rgpvContext: **, dwFlags: ulong, pRevPara: *CERT_REVOCATION_PARA, pRevStatus: *CERT_REVOCATION_STATUS) -> int
export import def #extern CertCompareIntegerBlob(pInt1: *CRYPT_ATTR_BLOB, pInt2: *CRYPT_ATTR_BLOB) -> int
export import def #extern #dllimport CertCompareCertificate(dwCertEncodingType: ulong, pCertId1: *CERT_INFO, pCertId2: *CERT_INFO) -> int
export import def #extern #dllimport CertCompareCertificateName(dwCertEncodingType: ulong, pCertName1: *CRYPT_ATTR_BLOB, pCertName2: *CRYPT_ATTR_BLOB) -> int
export import def #extern #dllimport CertIsRDNAttrsInCertificateName(dwCertEncodingType: ulong, dwFlags: ulong, pCertName: *CRYPT_ATTR_BLOB, pRDN: *CERT_RDN) -> int
export import def #extern #dllimport CertComparePublicKeyInfo(dwCertEncodingType: ulong, pPublicKey1: *CERT_PUBLIC_KEY_INFO, pPublicKey2: *CERT_PUBLIC_KEY_INFO) -> int
export import def #extern #dllimport CertGetPublicKeyLength(dwCertEncodingType: ulong, pPublicKey: *CERT_PUBLIC_KEY_INFO) -> ulong
export import def #extern #dllimport CryptVerifyCertificateSignature(hCryptProv: uint64, dwCertEncodingType: ulong, pbEncoded: *char, cbEncoded: ulong, pPublicKey: *CERT_PUBLIC_KEY_INFO) -> int
export import def #extern #dllimport CryptVerifyCertificateSignatureEx(hCryptProv: uint64, dwCertEncodingType: ulong, dwSubjectType: ulong, pvSubject: *, dwIssuerType: ulong, pvIssuer: *, dwFlags: ulong, pvExtra: *) -> int
export import def #extern #dllimport CertIsStrongHashToSign(pStrongSignPara: *CERT_STRONG_SIGN_PARA, pwszCNGHashAlgid: *ushort, pSigningCert: *CERT_CONTEXT) -> int
export import def #extern #dllimport CryptHashToBeSigned(hCryptProv: uint64, dwCertEncodingType: ulong, pbEncoded: *char, cbEncoded: ulong, pbComputedHash: *char, pcbComputedHash: *ulong) -> int
export import def #extern #dllimport CryptHashCertificate(hCryptProv: uint64, Algid: uint, dwFlags: ulong, pbEncoded: *char, cbEncoded: ulong, pbComputedHash: *char, pcbComputedHash: *ulong) -> int
export import def #extern #dllimport CryptHashCertificate2(pwszCNGHashAlgid: *ushort, dwFlags: ulong, pvReserved: *, pbEncoded: *char, cbEncoded: ulong, pbComputedHash: *char, pcbComputedHash: *ulong) -> int
export import def #extern #dllimport CryptSignCertificate(hCryptProvOrNCryptKey: uint64, dwKeySpec: ulong, dwCertEncodingType: ulong, pbEncodedToBeSigned: *char, cbEncodedToBeSigned: ulong, pSignatureAlgorithm: *CRYPT_ALGORITHM_IDENTIFIER, pvHashAuxInfo: *, pbSignature: *char, pcbSignature: *ulong) -> int
export import def #extern #dllimport CryptSignAndEncodeCertificate(hCryptProvOrNCryptKey: uint64, dwKeySpec: ulong, dwCertEncodingType: ulong, lpszStructType: *char, pvStructInfo: *, pSignatureAlgorithm: *CRYPT_ALGORITHM_IDENTIFIER, pvHashAuxInfo: *, pbEncoded: *char, pcbEncoded: *ulong) -> int
export import def #extern #dllimport CertVerifyTimeValidity(pTimeToVerify: *FILETIME, pCertInfo: *CERT_INFO) -> long
export import def #extern #dllimport CertVerifyCRLTimeValidity(pTimeToVerify: *FILETIME, pCrlInfo: *CRL_INFO) -> long
export import def #extern #dllimport CertVerifyValidityNesting(pSubjectInfo: *CERT_INFO, pIssuerInfo: *CERT_INFO) -> int
export import def #extern #dllimport CertVerifyCRLRevocation(dwCertEncodingType: ulong, pCertId: *CERT_INFO, cCrlInfo: ulong, rgpCrlInfo: **CRL_INFO) -> int
export import def #extern #dllimport CertAlgIdToOID(dwAlgId: ulong) -> *char
export import def #extern #dllimport CertOIDToAlgId(pszObjId: *char) -> ulong
export import def #extern #dllimport CertFindExtension(pszObjId: *char, cExtensions: ulong, rgExtensions: *CERT_EXTENSION) -> *CERT_EXTENSION
export import def #extern #dllimport CertFindAttribute(pszObjId: *char, cAttr: ulong, rgAttr: *CRYPT_ATTRIBUTE) -> *CRYPT_ATTRIBUTE
export import def #extern #dllimport CertFindRDNAttr(pszObjId: *char, pName: *CERT_NAME_INFO) -> *CERT_RDN_ATTR
export import def #extern #dllimport CertGetIntendedKeyUsage(dwCertEncodingType: ulong, pCertInfo: *CERT_INFO, pbKeyUsage: *char, cbKeyUsage: ulong) -> int
export import def #extern #dllimport CryptInstallDefaultContext(hCryptProv: uint64, dwDefaultType: ulong, pvDefaultPara: *, dwFlags: ulong, pvReserved: *, phDefaultContext: **) -> int
export import def #extern #dllimport CryptUninstallDefaultContext(hDefaultContext: *, dwFlags: ulong, pvReserved: *) -> int
export import def #extern #dllimport CryptExportPublicKeyInfo(hCryptProvOrNCryptKey: uint64, dwKeySpec: ulong, dwCertEncodingType: ulong, pInfo: *CERT_PUBLIC_KEY_INFO, pcbInfo: *ulong) -> int
export import def #extern #dllimport CryptExportPublicKeyInfoEx(hCryptProvOrNCryptKey: uint64, dwKeySpec: ulong, dwCertEncodingType: ulong, pszPublicKeyObjId: *char, dwFlags: ulong, pvAuxInfo: *, pInfo: *CERT_PUBLIC_KEY_INFO, pcbInfo: *ulong) -> int
export import def #extern #dllimport CryptExportPublicKeyInfoFromBCryptKeyHandle(hBCryptKey: *, dwCertEncodingType: ulong, pszPublicKeyObjId: *char, dwFlags: ulong, pvAuxInfo: *, pInfo: *CERT_PUBLIC_KEY_INFO, pcbInfo: *ulong) -> int
export import def #extern #dllimport CryptImportPublicKeyInfo(hCryptProv: uint64, dwCertEncodingType: ulong, pInfo: *CERT_PUBLIC_KEY_INFO, phKey: *uint64) -> int
export import def #extern #dllimport CryptImportPublicKeyInfoEx(hCryptProv: uint64, dwCertEncodingType: ulong, pInfo: *CERT_PUBLIC_KEY_INFO, aiKeyAlg: uint, dwFlags: ulong, pvAuxInfo: *, phKey: *uint64) -> int
export import def #extern #dllimport CryptImportPublicKeyInfoEx2(dwCertEncodingType: ulong, pInfo: *CERT_PUBLIC_KEY_INFO, dwFlags: ulong, pvAuxInfo: *, phKey: **) -> int
export import def #extern #dllimport CryptAcquireCertificatePrivateKey(pCert: *CERT_CONTEXT, dwFlags: ulong, pvParameters: *, phCryptProvOrNCryptKey: *uint64, pdwKeySpec: *ulong, pfCallerFreeProvOrNCryptKey: *int) -> int
export import def #extern #dllimport CryptFindCertificateKeyProvInfo(pCert: *CERT_CONTEXT, dwFlags: ulong, pvReserved: *) -> int
export import def #extern #dllimport CryptImportPKCS8(sPrivateKeyAndParams: CRYPT_PRIVATE_KEY_BLOB_AND_PARAMS, dwFlags: ulong, phCryptProv: *uint64, pvAuxInfo: *) -> int
export import def #extern #dllimport CryptExportPKCS8(hCryptProv: uint64, dwKeySpec: ulong, pszPrivateKeyObjId: *char, dwFlags: ulong, pvAuxInfo: *, pbPrivateKeyBlob: *char, pcbPrivateKeyBlob: *ulong) -> int
export import def #extern #dllimport CryptExportPKCS8Ex(psExportParams: *CRYPT_PKCS8_EXPORT_PARAMS, dwFlags: ulong, pvAuxInfo: *, pbPrivateKeyBlob: *char, pcbPrivateKeyBlob: *ulong) -> int
export import def #extern #dllimport CryptHashPublicKeyInfo(hCryptProv: uint64, Algid: uint, dwFlags: ulong, dwCertEncodingType: ulong, pInfo: *CERT_PUBLIC_KEY_INFO, pbComputedHash: *char, pcbComputedHash: *ulong) -> int
export import def #extern #dllimport CertRDNValueToStrA(dwValueType: ulong, pValue: *CRYPT_ATTR_BLOB, psz: *char, csz: ulong) -> ulong
export import def #extern #dllimport CertRDNValueToStrW(dwValueType: ulong, pValue: *CRYPT_ATTR_BLOB, psz: *ushort, csz: ulong) -> ulong
export import def #extern #dllimport CertNameToStrA(dwCertEncodingType: ulong, pName: *CRYPT_ATTR_BLOB, dwStrType: ulong, psz: *char, csz: ulong) -> ulong
export import def #extern #dllimport CertNameToStrW(dwCertEncodingType: ulong, pName: *CRYPT_ATTR_BLOB, dwStrType: ulong, psz: *ushort, csz: ulong) -> ulong
export import def #extern #dllimport CertStrToNameA(dwCertEncodingType: ulong, pszX500: *char, dwStrType: ulong, pvReserved: *, pbEncoded: *char, pcbEncoded: *ulong, ppszError: **char) -> int
export import def #extern #dllimport CertStrToNameW(dwCertEncodingType: ulong, pszX500: *ushort, dwStrType: ulong, pvReserved: *, pbEncoded: *char, pcbEncoded: *ulong, ppszError: **ushort) -> int
export import def #extern #dllimport CertGetNameStringA(pCertContext: *CERT_CONTEXT, dwType: ulong, dwFlags: ulong, pvTypePara: *, pszNameString: *char, cchNameString: ulong) -> ulong
export import def #extern #dllimport CertGetNameStringW(pCertContext: *CERT_CONTEXT, dwType: ulong, dwFlags: ulong, pvTypePara: *, pszNameString: *ushort, cchNameString: ulong) -> ulong
export import def #extern #dllimport CryptSignMessage(pSignPara: *CRYPT_SIGN_MESSAGE_PARA, fDetachedSignature: int, cToBeSigned: ulong, rgpbToBeSigned: **char, rgcbToBeSigned: *ulong, pbSignedBlob: *char, pcbSignedBlob: *ulong) -> int
export import def #extern #dllimport CryptVerifyMessageSignature(pVerifyPara: *CRYPT_VERIFY_MESSAGE_PARA, dwSignerIndex: ulong, pbSignedBlob: *char, cbSignedBlob: ulong, pbDecoded: *char, pcbDecoded: *ulong, ppSignerCert: **CERT_CONTEXT) -> int
export import def #extern #dllimport CryptGetMessageSignerCount(dwMsgEncodingType: ulong, pbSignedBlob: *char, cbSignedBlob: ulong) -> long
export import def #extern #dllimport CryptGetMessageCertificates(dwMsgAndCertEncodingType: ulong, hCryptProv: uint64, dwFlags: ulong, pbSignedBlob: *char, cbSignedBlob: ulong) -> *
export import def #extern #dllimport CryptVerifyDetachedMessageSignature(pVerifyPara: *CRYPT_VERIFY_MESSAGE_PARA, dwSignerIndex: ulong, pbDetachedSignBlob: *char, cbDetachedSignBlob: ulong, cToBeSigned: ulong, rgpbToBeSigned: **char, rgcbToBeSigned: *ulong, ppSignerCert: **CERT_CONTEXT) -> int
export import def #extern #dllimport CryptEncryptMessage(pEncryptPara: *CRYPT_ENCRYPT_MESSAGE_PARA, cRecipientCert: ulong, rgpRecipientCert: **CERT_CONTEXT, pbToBeEncrypted: *char, cbToBeEncrypted: ulong, pbEncryptedBlob: *char, pcbEncryptedBlob: *ulong) -> int
export import def #extern #dllimport CryptDecryptMessage(pDecryptPara: *CRYPT_DECRYPT_MESSAGE_PARA, pbEncryptedBlob: *char, cbEncryptedBlob: ulong, pbDecrypted: *char, pcbDecrypted: *ulong, ppXchgCert: **CERT_CONTEXT) -> int
export import def #extern #dllimport CryptSignAndEncryptMessage(pSignPara: *CRYPT_SIGN_MESSAGE_PARA, pEncryptPara: *CRYPT_ENCRYPT_MESSAGE_PARA, cRecipientCert: ulong, rgpRecipientCert: **CERT_CONTEXT, pbToBeSignedAndEncrypted: *char, cbToBeSignedAndEncrypted: ulong, pbSignedAndEncryptedBlob: *char, pcbSignedAndEncryptedBlob: *ulong) -> int
export import def #extern #dllimport CryptDecryptAndVerifyMessageSignature(pDecryptPara: *CRYPT_DECRYPT_MESSAGE_PARA, pVerifyPara: *CRYPT_VERIFY_MESSAGE_PARA, dwSignerIndex: ulong, pbEncryptedBlob: *char, cbEncryptedBlob: ulong, pbDecrypted: *char, pcbDecrypted: *ulong, ppXchgCert: **CERT_CONTEXT, ppSignerCert: **CERT_CONTEXT) -> int
export import def #extern #dllimport CryptDecodeMessage(dwMsgTypeFlags: ulong, pDecryptPara: *CRYPT_DECRYPT_MESSAGE_PARA, pVerifyPara: *CRYPT_VERIFY_MESSAGE_PARA, dwSignerIndex: ulong, pbEncodedBlob: *char, cbEncodedBlob: ulong, dwPrevInnerContentType: ulong, pdwMsgType: *ulong, pdwInnerContentType: *ulong, pbDecoded: *char, pcbDecoded: *ulong, ppXchgCert: **CERT_CONTEXT, ppSignerCert: **CERT_CONTEXT) -> int
export import def #extern #dllimport CryptHashMessage(pHashPara: *CRYPT_HASH_MESSAGE_PARA, fDetachedHash: int, cToBeHashed: ulong, rgpbToBeHashed: **char, rgcbToBeHashed: *ulong, pbHashedBlob: *char, pcbHashedBlob: *ulong, pbComputedHash: *char, pcbComputedHash: *ulong) -> int
export import def #extern #dllimport CryptVerifyMessageHash(pHashPara: *CRYPT_HASH_MESSAGE_PARA, pbHashedBlob: *char, cbHashedBlob: ulong, pbToBeHashed: *char, pcbToBeHashed: *ulong, pbComputedHash: *char, pcbComputedHash: *ulong) -> int
export import def #extern #dllimport CryptVerifyDetachedMessageHash(pHashPara: *CRYPT_HASH_MESSAGE_PARA, pbDetachedHashBlob: *char, cbDetachedHashBlob: ulong, cToBeHashed: ulong, rgpbToBeHashed: **char, rgcbToBeHashed: *ulong, pbComputedHash: *char, pcbComputedHash: *ulong) -> int
export import def #extern #dllimport CryptSignMessageWithKey(pSignPara: *CRYPT_KEY_SIGN_MESSAGE_PARA, pbToBeSigned: *char, cbToBeSigned: ulong, pbSignedBlob: *char, pcbSignedBlob: *ulong) -> int
export import def #extern #dllimport CryptVerifyMessageSignatureWithKey(pVerifyPara: *CRYPT_KEY_VERIFY_MESSAGE_PARA, pPublicKeyInfo: *CERT_PUBLIC_KEY_INFO, pbSignedBlob: *char, cbSignedBlob: ulong, pbDecoded: *char, pcbDecoded: *ulong) -> int
export import def #extern #dllimport CertOpenSystemStoreA(hProv: uint64, szSubsystemProtocol: *char) -> *
export import def #extern #dllimport CertOpenSystemStoreW(hProv: uint64, szSubsystemProtocol: *ushort) -> *
export import def #extern #dllimport CertAddEncodedCertificateToSystemStoreA(szCertStoreName: *char, pbCertEncoded: *char, cbCertEncoded: ulong) -> int
export import def #extern #dllimport CertAddEncodedCertificateToSystemStoreW(szCertStoreName: *ushort, pbCertEncoded: *char, cbCertEncoded: ulong) -> int
export import def #extern FindCertsByIssuer(pCertChains: *CERT_CHAIN, pcbCertChains: *ulong, pcCertChains: *ulong, pbEncodedIssuerName: *char, cbEncodedIssuerName: ulong, pwszPurpose: *ushort, dwKeySpec: ulong) -> long
export import def #extern #dllimport CryptQueryObject(dwObjectType: ulong, pvObject: *, dwExpectedContentTypeFlags: ulong, dwExpectedFormatTypeFlags: ulong, dwFlags: ulong, pdwMsgAndCertEncodingType: *ulong, pdwContentType: *ulong, pdwFormatType: *ulong, phCertStore: **, phMsg: **, ppvContext: **) -> int
export import def #extern #dllimport CryptMemAlloc(cbSize: ulong) -> *
export import def #extern #dllimport CryptMemRealloc(pv: *, cbSize: ulong) -> *
export import def #extern #dllimport CryptMemFree(pv: *)
export import def #extern #dllimport CryptCreateAsyncHandle(dwFlags: ulong, phAsync: **) -> int
export import def #extern #dllimport CryptSetAsyncParam(hAsync: *, pszParamOid: *char, pvParam: *, pfnFree: def (*char, *) -> ()) -> int
export import def #extern #dllimport CryptGetAsyncParam(hAsync: *, pszParamOid: *char, ppvParam: **, ppfnFree: *def (*char, *) -> ()) -> int
export import def #extern #dllimport CryptCloseAsyncHandle(hAsync: *) -> int
export import def #extern #dllimport CryptRetrieveObjectByUrlA(pszUrl: *char, pszObjectOid: *char, dwRetrievalFlags: ulong, dwTimeout: ulong, ppvObject: **, hAsyncRetrieve: *, pCredentials: *CRYPT_CREDENTIALS, pvVerify: *, pAuxInfo: *CRYPT_RETRIEVE_AUX_INFO) -> int
export import def #extern #dllimport CryptRetrieveObjectByUrlW(pszUrl: *ushort, pszObjectOid: *char, dwRetrievalFlags: ulong, dwTimeout: ulong, ppvObject: **, hAsyncRetrieve: *, pCredentials: *CRYPT_CREDENTIALS, pvVerify: *, pAuxInfo: *CRYPT_RETRIEVE_AUX_INFO) -> int
export import def #extern #dllimport CryptInstallCancelRetrieval(pfnCancel: def (ulong, *) -> (int), pvArg: *, dwFlags: ulong, pvReserved: *) -> int
export import def #extern #dllimport CryptUninstallCancelRetrieval(dwFlags: ulong, pvReserved: *) -> int
export import def #extern #dllimport CryptCancelAsyncRetrieval(hAsyncRetrieval: *) -> int
export import def #extern #dllimport CryptGetObjectUrl(pszUrlOid: *char, pvPara: *, dwFlags: ulong, pUrlArray: *CRYPT_URL_ARRAY, pcbUrlArray: *ulong, pUrlInfo: *CRYPT_URL_INFO, pcbUrlInfo: *ulong, pvReserved: *) -> int
export import def #extern #dllimport CryptGetTimeValidObject(pszTimeValidOid: *char, pvPara: *, pIssuer: *CERT_CONTEXT, pftValidFor: *FILETIME, dwFlags: ulong, dwTimeout: ulong, ppvObject: **, pCredentials: *CRYPT_CREDENTIALS, pExtraInfo: *CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO) -> int
export import def #extern #dllimport CryptFlushTimeValidObject(pszFlushTimeValidOid: *char, pvPara: *, pIssuer: *CERT_CONTEXT, dwFlags: ulong, pvReserved: *) -> int
export import def #extern #dllimport CertCreateSelfSignCertificate(hCryptProvOrNCryptKey: uint64, pSubjectIssuerBlob: *CRYPT_ATTR_BLOB, dwFlags: ulong, pKeyProvInfo: *CRYPT_KEY_PROV_INFO, pSignatureAlgorithm: *CRYPT_ALGORITHM_IDENTIFIER, pStartTime: *SYSTEMTIME, pEndTime: *SYSTEMTIME, pExtensions: *CERT_EXTENSIONS) -> *CERT_CONTEXT
export import def #extern #dllimport CryptGetKeyIdentifierProperty(pKeyIdentifier: *CRYPT_ATTR_BLOB, dwPropId: ulong, dwFlags: ulong, pwszComputerName: *ushort, pvReserved: *, pvData: *, pcbData: *ulong) -> int
export import def #extern #dllimport CryptSetKeyIdentifierProperty(pKeyIdentifier: *CRYPT_ATTR_BLOB, dwPropId: ulong, dwFlags: ulong, pwszComputerName: *ushort, pvReserved: *, pvData: *) -> int
export import def #extern #dllimport CryptEnumKeyIdentifierProperties(pKeyIdentifier: *CRYPT_ATTR_BLOB, dwPropId: ulong, dwFlags: ulong, pwszComputerName: *ushort, pvReserved: *, pvArg: *, pfnEnum: def (*CRYPT_ATTR_BLOB, ulong, *, *, ulong, *ulong, **, *ulong) -> (int)) -> int
export import def #extern #dllimport CryptCreateKeyIdentifierFromCSP(dwCertEncodingType: ulong, pszPubKeyOID: *char, pPubKeyStruc: *PUBLICKEYSTRUC, cbPubKeyStruc: ulong, dwFlags: ulong, pvReserved: *, pbHash: *char, pcbHash: *ulong) -> int
export import def #extern #dllimport CertCreateCertificateChainEngine(pConfig: *CERT_CHAIN_ENGINE_CONFIG, phChainEngine: **) -> int
export import def #extern #dllimport CertFreeCertificateChainEngine(hChainEngine: *)
export import def #extern #dllimport CertResyncCertificateChainEngine(hChainEngine: *) -> int
export import def #extern #dllimport CertGetCertificateChain(hChainEngine: *, pCertContext: *CERT_CONTEXT, pTime: *FILETIME, hAdditionalStore: *, pChainPara: *CERT_CHAIN_PARA, dwFlags: ulong, pvReserved: *, ppChainContext: **s__CERT_CHAIN_CONTEXT) -> int
export import def #extern #dllimport CertFreeCertificateChain(pChainContext: *s__CERT_CHAIN_CONTEXT)
export import def #extern #dllimport CertDuplicateCertificateChain(pChainContext: *s__CERT_CHAIN_CONTEXT) -> *s__CERT_CHAIN_CONTEXT
export import def #extern #dllimport CertFindChainInStore(hCertStore: *, dwCertEncodingType: ulong, dwFindFlags: ulong, dwFindType: ulong, pvFindPara: *, pPrevChainContext: *s__CERT_CHAIN_CONTEXT) -> *s__CERT_CHAIN_CONTEXT
export import def #extern #dllimport CertVerifyCertificateChainPolicy(pszPolicyOID: *char, pChainContext: *s__CERT_CHAIN_CONTEXT, pPolicyPara: *CERT_CHAIN_POLICY_PARA, pPolicyStatus: *CERT_CHAIN_POLICY_STATUS) -> int
export import def #extern #dllimport CryptStringToBinaryA(pszString: *char, cchString: ulong, dwFlags: ulong, pbBinary: *char, pcbBinary: *ulong, pdwSkip: *ulong, pdwFlags: *ulong) -> int
export import def #extern #dllimport CryptStringToBinaryW(pszString: *ushort, cchString: ulong, dwFlags: ulong, pbBinary: *char, pcbBinary: *ulong, pdwSkip: *ulong, pdwFlags: *ulong) -> int
export import def #extern #dllimport CryptBinaryToStringA(pbBinary: *char, cbBinary: ulong, dwFlags: ulong, pszString: *char, pcchString: *ulong) -> int
export import def #extern #dllimport CryptBinaryToStringW(pbBinary: *char, cbBinary: ulong, dwFlags: ulong, pszString: *ushort, pcchString: *ulong) -> int
export import def #extern #dllimport PFXImportCertStore(pPFX: *CRYPT_ATTR_BLOB, szPassword: *ushort, dwFlags: ulong) -> *
export import def #extern #dllimport PFXIsPFXBlob(pPFX: *CRYPT_ATTR_BLOB) -> int
export import def #extern #dllimport PFXVerifyPassword(pPFX: *CRYPT_ATTR_BLOB, szPassword: *ushort, dwFlags: ulong) -> int
export import def #extern #dllimport PFXExportCertStoreEx(hStore: *, pPFX: *CRYPT_ATTR_BLOB, szPassword: *ushort, pvPara: *, dwFlags: ulong) -> int
export import def #extern #dllimport PFXExportCertStore(hStore: *, pPFX: *CRYPT_ATTR_BLOB, szPassword: *ushort, dwFlags: ulong) -> int
export import def #extern #dllimport CertOpenServerOcspResponse(pChainContext: *s__CERT_CHAIN_CONTEXT, dwFlags: ulong, pOpenPara: *CERT_SERVER_OCSP_RESPONSE_OPEN_PARA) -> *
export import def #extern #dllimport CertAddRefServerOcspResponse(hServerOcspResponse: *)
export import def #extern #dllimport CertCloseServerOcspResponse(hServerOcspResponse: *, dwFlags: ulong)
export import def #extern #dllimport CertGetServerOcspResponseContext(hServerOcspResponse: *, dwFlags: ulong, pvReserved: *) -> *s__CERT_SERVER_OCSP_RESPONSE_CONTEXT
export import def #extern #dllimport CertAddRefServerOcspResponseContext(pServerOcspResponseContext: *s__CERT_SERVER_OCSP_RESPONSE_CONTEXT)
export import def #extern #dllimport CertFreeServerOcspResponseContext(pServerOcspResponseContext: *s__CERT_SERVER_OCSP_RESPONSE_CONTEXT)
export import def #extern #dllimport CertRetrieveLogoOrBiometricInfo(pCertContext: *CERT_CONTEXT, lpszLogoOrBiometricType: *char, dwRetrievalFlags: ulong, dwTimeout: ulong, dwFlags: ulong, pvReserved: *, ppbData: **char, pcbData: *ulong, ppwszMimeType: **ushort) -> int
export import def #extern #dllimport CertSelectCertificateChains(pSelectionContext: *GUID, dwFlags: ulong, pChainParameters: *CERT_SELECT_CHAIN_PARA, cCriteria: ulong, rgpCriteria: *CERT_SELECT_CRITERIA, hStore: *, pcSelection: *ulong, pprgpSelection: ***s__CERT_CHAIN_CONTEXT) -> int
export import def #extern #dllimport CertFreeCertificateChainList(prgpSelection: **s__CERT_CHAIN_CONTEXT)
export import def #extern CryptRetrieveTimeStamp(wszUrl: *ushort, dwRetrievalFlags: ulong, dwTimeout: ulong, pszHashId: *char, pPara: *CRYPT_TIMESTAMP_PARA, pbData: *char, cbData: ulong, ppTsContext: **CRYPT_TIMESTAMP_CONTEXT, ppTsSigner: **CERT_CONTEXT, phStore: **) -> int
export import def #extern CryptVerifyTimeStampSignature(pbTSContentInfo: *char, cbTSContentInfo: ulong, pbData: *char, cbData: ulong, hAdditionalStore: *, ppTsContext: **CRYPT_TIMESTAMP_CONTEXT, ppTsSigner: **CERT_CONTEXT, phStore: **) -> int
export import def #extern #dllimport CertIsWeakHash(dwHashUseType: ulong, pwszCNGHashAlgid: *ushort, dwChainFlags: ulong, pSignerChainContext: *s__CERT_CHAIN_CONTEXT, pTimeStamp: *FILETIME, pwszFileName: *ushort) -> int
export import def #extern CryptProtectData(pDataIn: *CRYPT_ATTR_BLOB, szDataDescr: *ushort, pOptionalEntropy: *CRYPT_ATTR_BLOB, pvReserved: *, pPromptStruct: *CRYPTPROTECT_PROMPTSTRUCT, dwFlags: ulong, pDataOut: *CRYPT_ATTR_BLOB) -> int
export import def #extern CryptUnprotectData(pDataIn: *CRYPT_ATTR_BLOB, ppszDataDescr: **ushort, pOptionalEntropy: *CRYPT_ATTR_BLOB, pvReserved: *, pPromptStruct: *CRYPTPROTECT_PROMPTSTRUCT, dwFlags: ulong, pDataOut: *CRYPT_ATTR_BLOB) -> int
export import def #extern CryptProtectDataNoUI(pDataIn: *CRYPT_ATTR_BLOB, szDataDescr: *ushort, pOptionalEntropy: *CRYPT_ATTR_BLOB, pvReserved: *, pPromptStruct: *CRYPTPROTECT_PROMPTSTRUCT, dwFlags: ulong, pbOptionalPassword: *char, cbOptionalPassword: ulong, pDataOut: *CRYPT_ATTR_BLOB) -> int
export import def #extern CryptUnprotectDataNoUI(pDataIn: *CRYPT_ATTR_BLOB, ppszDataDescr: **ushort, pOptionalEntropy: *CRYPT_ATTR_BLOB, pvReserved: *, pPromptStruct: *CRYPTPROTECT_PROMPTSTRUCT, dwFlags: ulong, pbOptionalPassword: *char, cbOptionalPassword: ulong, pDataOut: *CRYPT_ATTR_BLOB) -> int
export import def #extern CryptUpdateProtectedState(pOldSid: *, pwszOldPassword: *ushort, dwFlags: ulong, pdwSuccessCount: *ulong, pdwFailureCount: *ulong) -> int
export import def #extern CryptProtectMemory(pDataIn: *, cbDataIn: ulong, dwFlags: ulong) -> int
export import def #extern CryptUnprotectMemory(pDataIn: *, cbDataIn: ulong, dwFlags: ulong) -> int
export import def #extern #dllimport QueryUsersOnEncryptedFile(lpFileName: *ushort, pUsers: **ENCRYPTION_CERTIFICATE_HASH_LIST) -> ulong
export import def #extern #dllimport QueryRecoveryAgentsOnEncryptedFile(lpFileName: *ushort, pRecoveryAgents: **ENCRYPTION_CERTIFICATE_HASH_LIST) -> ulong
export import def #extern #dllimport RemoveUsersFromEncryptedFile(lpFileName: *ushort, pHashes: *ENCRYPTION_CERTIFICATE_HASH_LIST) -> ulong
export import def #extern #dllimport AddUsersToEncryptedFile(lpFileName: *ushort, pEncryptionCertificates: *ENCRYPTION_CERTIFICATE_LIST) -> ulong
export import def #extern #dllimport SetUserFileEncryptionKey(pEncryptionCertificate: *ENCRYPTION_CERTIFICATE) -> ulong
export import def #extern #dllimport SetUserFileEncryptionKeyEx(pEncryptionCertificate: *ENCRYPTION_CERTIFICATE, dwCapabilities: ulong, dwFlags: ulong, pvReserved: *) -> ulong
export import def #extern #dllimport FreeEncryptionCertificateHashList(pUsers: *ENCRYPTION_CERTIFICATE_HASH_LIST)
export import def #extern #dllimport EncryptionDisable(DirPath: *ushort, Disable: int) -> int
export import def #extern #dllimport DuplicateEncryptionInfoFile(SrcFileName: *ushort, DstFileName: *ushort, dwCreationDistribution: ulong, dwAttributes: ulong, lpSecurityAttributes: *SECURITY_ATTRIBUTES) -> ulong
export import def #extern #dllimport GetEncryptedFileMetadata(lpFileName: *ushort, pcbMetadata: *ulong, ppbMetadata: **char) -> ulong
export import def #extern #dllimport SetEncryptedFileMetadata(lpFileName: *ushort, pbOldMetadata: *char, pbNewMetadata: *char, pOwnerHash: *ENCRYPTION_CERTIFICATE_HASH, dwOperation: ulong, pCertificatesAdded: *ENCRYPTION_CERTIFICATE_HASH_LIST) -> ulong
export import def #extern #dllimport FreeEncryptedFileMetadata(pbMetadata: *char)
export import def #extern #dllimport I_RpcNsGetBuffer(Message: *RPC_MESSAGE) -> long
export import def #extern #dllimport I_RpcNsSendReceive(Message: *RPC_MESSAGE, Handle: **) -> long
export import def #extern #dllimport I_RpcNsRaiseException(Message: *RPC_MESSAGE, Status: long)
export import def #extern #dllimport I_RpcReBindBuffer(Message: *RPC_MESSAGE) -> long
export import def #extern #dllimport I_NsServerBindSearch() -> long
export import def #extern #dllimport I_NsClientBindSearch() -> long
export import def #extern #dllimport I_NsClientBindDone()
export import def #extern MIDL_user_allocate(size: uint64) -> *
export import def #extern MIDL_user_free(_0: *)
export import def #extern I_RpcDefaultAllocate(bh: *, size: uint64, RealAlloc: *) -> *
export import def #extern I_RpcDefaultFree(bh: *, _1: *, RealFree: def (*) -> ())
export import def #extern #dllimport NDRCContextBinding(CContext: *) -> *
export import def #extern #dllimport NDRCContextMarshall(CContext: *, pBuff: *)
export import def #extern #dllimport NDRCContextUnmarshall(pCContext: **, hBinding: *, pBuff: *, DataRepresentation: ulong)
export import def #extern #dllimport NDRCContextUnmarshall2(pCContext: **, hBinding: *, pBuff: *, DataRepresentation: ulong)
export import def #extern #dllimport NDRSContextMarshall(CContext: struct { pad: [2; *]; userContext: *; }, pBuff: *, userRunDownIn: def (*) -> ())
export import def #extern #dllimport NDRSContextUnmarshall(pBuff: *, DataRepresentation: ulong) -> struct { pad: [2; *]; userContext: *; }
export import def #extern #dllimport NDRSContextMarshallEx(BindingHandle: *, CContext: struct { pad: [2; *]; userContext: *; }, pBuff: *, userRunDownIn: def (*) -> ())
export import def #extern #dllimport NDRSContextMarshall2(BindingHandle: *, CContext: struct { pad: [2; *]; userContext: *; }, pBuff: *, userRunDownIn: def (*) -> (), CtxGuard: *, Flags: ulong)
export import def #extern #dllimport NDRSContextUnmarshallEx(BindingHandle: *, pBuff: *, DataRepresentation: ulong) -> struct { pad: [2; *]; userContext: *; }
export import def #extern #dllimport NDRSContextUnmarshall2(BindingHandle: *, pBuff: *, DataRepresentation: ulong, CtxGuard: *, Flags: ulong) -> struct { pad: [2; *]; userContext: *; }
export import def #extern #dllimport RpcSsDestroyClientContext(ContextHandle: **)
export import def #extern RpcCsGetTags(hBinding: *, fServerSide: int, pulSendingTag: *ulong, pulDesiredReceivingTag: *ulong, pulReceivingTag: *ulong, pStatus: *ulong)
export import def #extern NdrClientGetSupportedSyntaxes(pInf: *RPC_CLIENT_INTERFACE, pCount: *ulong, pArr: **MIDL_SYNTAX_INFO) -> long
export import def #extern NdrServerGetSupportedSyntaxes(pInf: *RPC_SERVER_INTERFACE, pCount: *ulong, pArr: **MIDL_SYNTAX_INFO, pPreferSyntaxIndex: *ulong) -> long
export import def #extern #dllimport NdrSimpleTypeMarshall(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, FormatChar: char)
export import def #extern #dllimport NdrPointerMarshall(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char) -> *char
export import def #extern #dllimport NdrCsArrayMarshall(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char) -> *char
export import def #extern #dllimport NdrCsTagMarshall(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char) -> *char
export import def #extern #dllimport NdrSimpleStructMarshall(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char) -> *char
export import def #extern #dllimport NdrConformantStructMarshall(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char) -> *char
export import def #extern #dllimport NdrConformantVaryingStructMarshall(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char) -> *char
export import def #extern #dllimport NdrComplexStructMarshall(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char) -> *char
export import def #extern #dllimport NdrFixedArrayMarshall(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char) -> *char
export import def #extern #dllimport NdrConformantArrayMarshall(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char) -> *char
export import def #extern #dllimport NdrConformantVaryingArrayMarshall(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char) -> *char
export import def #extern #dllimport NdrVaryingArrayMarshall(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char) -> *char
export import def #extern #dllimport NdrComplexArrayMarshall(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char) -> *char
export import def #extern #dllimport NdrNonConformantStringMarshall(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char) -> *char
export import def #extern #dllimport NdrConformantStringMarshall(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char) -> *char
export import def #extern #dllimport NdrEncapsulatedUnionMarshall(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char) -> *char
export import def #extern #dllimport NdrNonEncapsulatedUnionMarshall(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char) -> *char
export import def #extern #dllimport NdrByteCountPointerMarshall(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char) -> *char
export import def #extern #dllimport NdrXmitOrRepAsMarshall(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char) -> *char
export import def #extern #dllimport NdrUserMarshalMarshall(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char) -> *char
export import def #extern #dllimport NdrInterfacePointerMarshall(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char) -> *char
export import def #extern #dllimport NdrClientContextMarshall(pStubMsg: *MIDL_STUB_MESSAGE, ContextHandle: *, fCheck: int)
export import def #extern #dllimport NdrServerContextMarshall(pStubMsg: *MIDL_STUB_MESSAGE, ContextHandle: struct { pad: [2; *]; userContext: *; }, RundownRoutine: def (*) -> ())
export import def #extern #dllimport NdrServerContextNewMarshall(pStubMsg: *MIDL_STUB_MESSAGE, ContextHandle: struct { pad: [2; *]; userContext: *; }, RundownRoutine: def (*) -> (), pFormat: *char)
export import def #extern #dllimport NdrSimpleTypeUnmarshall(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, FormatChar: char)
export import def #extern #dllimport NdrCsArrayUnmarshall(pStubMsg: *MIDL_STUB_MESSAGE, ppMemory: **char, pFormat: *char, fMustAlloc: char) -> *char
export import def #extern #dllimport NdrCsTagUnmarshall(pStubMsg: *MIDL_STUB_MESSAGE, ppMemory: **char, pFormat: *char, fMustAlloc: char) -> *char
export import def #extern #dllimport NdrRangeUnmarshall(pStubMsg: *MIDL_STUB_MESSAGE, ppMemory: **char, pFormat: *char, fMustAlloc: char) -> *char
export import def #extern #dllimport NdrCorrelationInitialize(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *, CacheSize: ulong, flags: ulong)
export import def #extern #dllimport NdrCorrelationPass(pStubMsg: *MIDL_STUB_MESSAGE)
export import def #extern #dllimport NdrCorrelationFree(pStubMsg: *MIDL_STUB_MESSAGE)
export import def #extern #dllimport NdrPointerUnmarshall(pStubMsg: *MIDL_STUB_MESSAGE, ppMemory: **char, pFormat: *char, fMustAlloc: char) -> *char
export import def #extern #dllimport NdrSimpleStructUnmarshall(pStubMsg: *MIDL_STUB_MESSAGE, ppMemory: **char, pFormat: *char, fMustAlloc: char) -> *char
export import def #extern #dllimport NdrConformantStructUnmarshall(pStubMsg: *MIDL_STUB_MESSAGE, ppMemory: **char, pFormat: *char, fMustAlloc: char) -> *char
export import def #extern #dllimport NdrConformantVaryingStructUnmarshall(pStubMsg: *MIDL_STUB_MESSAGE, ppMemory: **char, pFormat: *char, fMustAlloc: char) -> *char
export import def #extern #dllimport NdrComplexStructUnmarshall(pStubMsg: *MIDL_STUB_MESSAGE, ppMemory: **char, pFormat: *char, fMustAlloc: char) -> *char
export import def #extern #dllimport NdrFixedArrayUnmarshall(pStubMsg: *MIDL_STUB_MESSAGE, ppMemory: **char, pFormat: *char, fMustAlloc: char) -> *char
export import def #extern #dllimport NdrConformantArrayUnmarshall(pStubMsg: *MIDL_STUB_MESSAGE, ppMemory: **char, pFormat: *char, fMustAlloc: char) -> *char
export import def #extern #dllimport NdrConformantVaryingArrayUnmarshall(pStubMsg: *MIDL_STUB_MESSAGE, ppMemory: **char, pFormat: *char, fMustAlloc: char) -> *char
export import def #extern #dllimport NdrVaryingArrayUnmarshall(pStubMsg: *MIDL_STUB_MESSAGE, ppMemory: **char, pFormat: *char, fMustAlloc: char) -> *char
export import def #extern #dllimport NdrComplexArrayUnmarshall(pStubMsg: *MIDL_STUB_MESSAGE, ppMemory: **char, pFormat: *char, fMustAlloc: char) -> *char
export import def #extern #dllimport NdrNonConformantStringUnmarshall(pStubMsg: *MIDL_STUB_MESSAGE, ppMemory: **char, pFormat: *char, fMustAlloc: char) -> *char
export import def #extern #dllimport NdrConformantStringUnmarshall(pStubMsg: *MIDL_STUB_MESSAGE, ppMemory: **char, pFormat: *char, fMustAlloc: char) -> *char
export import def #extern #dllimport NdrEncapsulatedUnionUnmarshall(pStubMsg: *MIDL_STUB_MESSAGE, ppMemory: **char, pFormat: *char, fMustAlloc: char) -> *char
export import def #extern #dllimport NdrNonEncapsulatedUnionUnmarshall(pStubMsg: *MIDL_STUB_MESSAGE, ppMemory: **char, pFormat: *char, fMustAlloc: char) -> *char
export import def #extern #dllimport NdrByteCountPointerUnmarshall(pStubMsg: *MIDL_STUB_MESSAGE, ppMemory: **char, pFormat: *char, fMustAlloc: char) -> *char
export import def #extern #dllimport NdrXmitOrRepAsUnmarshall(pStubMsg: *MIDL_STUB_MESSAGE, ppMemory: **char, pFormat: *char, fMustAlloc: char) -> *char
export import def #extern #dllimport NdrUserMarshalUnmarshall(pStubMsg: *MIDL_STUB_MESSAGE, ppMemory: **char, pFormat: *char, fMustAlloc: char) -> *char
export import def #extern #dllimport NdrInterfacePointerUnmarshall(pStubMsg: *MIDL_STUB_MESSAGE, ppMemory: **char, pFormat: *char, fMustAlloc: char) -> *char
export import def #extern #dllimport NdrClientContextUnmarshall(pStubMsg: *MIDL_STUB_MESSAGE, pContextHandle: **, BindHandle: *)
export import def #extern #dllimport NdrServerContextUnmarshall(pStubMsg: *MIDL_STUB_MESSAGE) -> struct { pad: [2; *]; userContext: *; }
export import def #extern #dllimport NdrContextHandleInitialize(pStubMsg: *MIDL_STUB_MESSAGE, pFormat: *char) -> struct { pad: [2; *]; userContext: *; }
export import def #extern #dllimport NdrServerContextNewUnmarshall(pStubMsg: *MIDL_STUB_MESSAGE, pFormat: *char) -> struct { pad: [2; *]; userContext: *; }
export import def #extern #dllimport NdrPointerBufferSize(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrCsArrayBufferSize(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrCsTagBufferSize(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrSimpleStructBufferSize(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrConformantStructBufferSize(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrConformantVaryingStructBufferSize(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrComplexStructBufferSize(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrFixedArrayBufferSize(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrConformantArrayBufferSize(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrConformantVaryingArrayBufferSize(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrVaryingArrayBufferSize(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrComplexArrayBufferSize(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrConformantStringBufferSize(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrNonConformantStringBufferSize(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrEncapsulatedUnionBufferSize(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrNonEncapsulatedUnionBufferSize(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrByteCountPointerBufferSize(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrXmitOrRepAsBufferSize(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrUserMarshalBufferSize(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrInterfacePointerBufferSize(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrContextHandleSize(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrPointerMemorySize(pStubMsg: *MIDL_STUB_MESSAGE, pFormat: *char) -> ulong
export import def #extern #dllimport NdrContextHandleMemorySize(pStubMsg: *MIDL_STUB_MESSAGE, pFormat: *char) -> ulong
export import def #extern #dllimport NdrCsArrayMemorySize(pStubMsg: *MIDL_STUB_MESSAGE, pFormat: *char) -> ulong
export import def #extern #dllimport NdrCsTagMemorySize(pStubMsg: *MIDL_STUB_MESSAGE, pFormat: *char) -> ulong
export import def #extern #dllimport NdrSimpleStructMemorySize(pStubMsg: *MIDL_STUB_MESSAGE, pFormat: *char) -> ulong
export import def #extern #dllimport NdrConformantStructMemorySize(pStubMsg: *MIDL_STUB_MESSAGE, pFormat: *char) -> ulong
export import def #extern #dllimport NdrConformantVaryingStructMemorySize(pStubMsg: *MIDL_STUB_MESSAGE, pFormat: *char) -> ulong
export import def #extern #dllimport NdrComplexStructMemorySize(pStubMsg: *MIDL_STUB_MESSAGE, pFormat: *char) -> ulong
export import def #extern #dllimport NdrFixedArrayMemorySize(pStubMsg: *MIDL_STUB_MESSAGE, pFormat: *char) -> ulong
export import def #extern #dllimport NdrConformantArrayMemorySize(pStubMsg: *MIDL_STUB_MESSAGE, pFormat: *char) -> ulong
export import def #extern #dllimport NdrConformantVaryingArrayMemorySize(pStubMsg: *MIDL_STUB_MESSAGE, pFormat: *char) -> ulong
export import def #extern #dllimport NdrVaryingArrayMemorySize(pStubMsg: *MIDL_STUB_MESSAGE, pFormat: *char) -> ulong
export import def #extern #dllimport NdrComplexArrayMemorySize(pStubMsg: *MIDL_STUB_MESSAGE, pFormat: *char) -> ulong
export import def #extern #dllimport NdrConformantStringMemorySize(pStubMsg: *MIDL_STUB_MESSAGE, pFormat: *char) -> ulong
export import def #extern #dllimport NdrNonConformantStringMemorySize(pStubMsg: *MIDL_STUB_MESSAGE, pFormat: *char) -> ulong
export import def #extern #dllimport NdrEncapsulatedUnionMemorySize(pStubMsg: *MIDL_STUB_MESSAGE, pFormat: *char) -> ulong
export import def #extern #dllimport NdrNonEncapsulatedUnionMemorySize(pStubMsg: *MIDL_STUB_MESSAGE, pFormat: *char) -> ulong
export import def #extern #dllimport NdrXmitOrRepAsMemorySize(pStubMsg: *MIDL_STUB_MESSAGE, pFormat: *char) -> ulong
export import def #extern #dllimport NdrUserMarshalMemorySize(pStubMsg: *MIDL_STUB_MESSAGE, pFormat: *char) -> ulong
export import def #extern #dllimport NdrInterfacePointerMemorySize(pStubMsg: *MIDL_STUB_MESSAGE, pFormat: *char) -> ulong
export import def #extern #dllimport NdrPointerFree(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrCsArrayFree(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrSimpleStructFree(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrConformantStructFree(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrConformantVaryingStructFree(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrComplexStructFree(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrFixedArrayFree(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrConformantArrayFree(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrConformantVaryingArrayFree(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrVaryingArrayFree(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrComplexArrayFree(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrEncapsulatedUnionFree(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrNonEncapsulatedUnionFree(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrByteCountPointerFree(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrXmitOrRepAsFree(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrUserMarshalFree(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrInterfacePointerFree(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *char, pFormat: *char)
export import def #extern #dllimport NdrConvert2(pStubMsg: *MIDL_STUB_MESSAGE, pFormat: *char, NumberParams: long)
export import def #extern #dllimport NdrConvert(pStubMsg: *MIDL_STUB_MESSAGE, pFormat: *char)
export import def #extern #dllimport NdrUserMarshalSimpleTypeConvert(pFlags: *ulong, pBuffer: *char, FormatChar: char) -> *char
export import def #extern #dllimport NdrClientInitializeNew(pRpcMsg: *RPC_MESSAGE, pStubMsg: *MIDL_STUB_MESSAGE, pStubDescriptor: *MIDL_STUB_DESC, ProcNum: uint)
export import def #extern #dllimport NdrServerInitializeNew(pRpcMsg: *RPC_MESSAGE, pStubMsg: *MIDL_STUB_MESSAGE, pStubDescriptor: *MIDL_STUB_DESC) -> *char
export import def #extern #dllimport NdrServerInitializePartial(pRpcMsg: *RPC_MESSAGE, pStubMsg: *MIDL_STUB_MESSAGE, pStubDescriptor: *MIDL_STUB_DESC, RequestedBufferSize: ulong)
export import def #extern #dllimport NdrClientInitialize(pRpcMsg: *RPC_MESSAGE, pStubMsg: *MIDL_STUB_MESSAGE, pStubDescriptor: *MIDL_STUB_DESC, ProcNum: uint)
export import def #extern #dllimport NdrServerInitialize(pRpcMsg: *RPC_MESSAGE, pStubMsg: *MIDL_STUB_MESSAGE, pStubDescriptor: *MIDL_STUB_DESC) -> *char
export import def #extern #dllimport NdrServerInitializeUnmarshall(pStubMsg: *MIDL_STUB_MESSAGE, pStubDescriptor: *MIDL_STUB_DESC, pRpcMsg: *RPC_MESSAGE) -> *char
export import def #extern #dllimport NdrServerInitializeMarshall(pRpcMsg: *RPC_MESSAGE, pStubMsg: *MIDL_STUB_MESSAGE)
export import def #extern #dllimport NdrGetBuffer(pStubMsg: *MIDL_STUB_MESSAGE, BufferLength: ulong, Handle: *) -> *char
export import def #extern #dllimport NdrNsGetBuffer(pStubMsg: *MIDL_STUB_MESSAGE, BufferLength: ulong, Handle: *) -> *char
export import def #extern #dllimport NdrSendReceive(pStubMsg: *MIDL_STUB_MESSAGE, pBufferEnd: *char) -> *char
export import def #extern #dllimport NdrNsSendReceive(pStubMsg: *MIDL_STUB_MESSAGE, pBufferEnd: *char, pAutoHandle: **) -> *char
export import def #extern #dllimport NdrFreeBuffer(pStubMsg: *MIDL_STUB_MESSAGE)
export import def #extern #dllimport NdrGetDcomProtocolVersion(pStubMsg: *MIDL_STUB_MESSAGE, pVersion: *RPC_VERSION) -> long
export import def #extern NdrClientCall2(pStubDescriptor: *MIDL_STUB_DESC, pFormat: *char, ...) -> CLIENT_CALL_RETURN
export import def #extern NdrClientCall(pStubDescriptor: *MIDL_STUB_DESC, pFormat: *char, ...) -> CLIENT_CALL_RETURN
export import def #extern NdrAsyncClientCall(pStubDescriptor: *MIDL_STUB_DESC, pFormat: *char, ...) -> CLIENT_CALL_RETURN
export import def #extern NdrDcomAsyncClientCall(pStubDescriptor: *MIDL_STUB_DESC, pFormat: *char, ...) -> CLIENT_CALL_RETURN
export import def #extern #dllimport NdrAsyncServerCall(pRpcMsg: *RPC_MESSAGE)
export import def #extern #dllimport NdrAsyncStubCall(pThis: *s_IRpcStubBuffer, pChannel: *s_IRpcChannelBuffer, pRpcMsg: *RPC_MESSAGE, pdwStubPhase: *ulong) -> long
export import def #extern #dllimport NdrDcomAsyncStubCall(pThis: *s_IRpcStubBuffer, pChannel: *s_IRpcChannelBuffer, pRpcMsg: *RPC_MESSAGE, pdwStubPhase: *ulong) -> long
export import def #extern #dllimport NdrStubCall2(pThis: *, pChannel: *, pRpcMsg: *RPC_MESSAGE, pdwStubPhase: *ulong) -> long
export import def #extern #dllimport NdrServerCall2(pRpcMsg: *RPC_MESSAGE)
export import def #extern #dllimport NdrStubCall(pThis: *, pChannel: *, pRpcMsg: *RPC_MESSAGE, pdwStubPhase: *ulong) -> long
export import def #extern #dllimport NdrServerCall(pRpcMsg: *RPC_MESSAGE)
export import def #extern #dllimport NdrServerUnmarshall(pChannel: *, pRpcMsg: *RPC_MESSAGE, pStubMsg: *MIDL_STUB_MESSAGE, pStubDescriptor: *MIDL_STUB_DESC, pFormat: *char, pParamList: *) -> int
export import def #extern #dllimport NdrServerMarshall(pThis: *, pChannel: *, pStubMsg: *MIDL_STUB_MESSAGE, pFormat: *char)
export import def #extern #dllimport NdrMapCommAndFaultStatus(pStubMsg: *MIDL_STUB_MESSAGE, pCommStatus: *ulong, pFaultStatus: *ulong, Status: long) -> long
export import def #extern #dllimport RpcSsAllocate(Size: uint64) -> *
export import def #extern #dllimport RpcSsDisableAllocate()
export import def #extern #dllimport RpcSsEnableAllocate()
export import def #extern #dllimport RpcSsFree(NodeToFree: *)
export import def #extern #dllimport RpcSsGetThreadHandle() -> *
export import def #extern #dllimport RpcSsSetClientAllocFree(ClientAlloc: **, ClientFree: *)
export import def #extern #dllimport RpcSsSetThreadHandle(Id: *)
export import def #extern #dllimport RpcSsSwapClientAllocFree(ClientAlloc: **, ClientFree: *, OldClientAlloc: ***, OldClientFree: **)
export import def #extern #dllimport RpcSmAllocate(Size: uint64, pStatus: *long) -> *
export import def #extern #dllimport RpcSmClientFree(pNodeToFree: *) -> long
export import def #extern #dllimport RpcSmDestroyClientContext(ContextHandle: **) -> long
export import def #extern #dllimport RpcSmDisableAllocate() -> long
export import def #extern #dllimport RpcSmEnableAllocate() -> long
export import def #extern #dllimport RpcSmFree(NodeToFree: *) -> long
export import def #extern #dllimport RpcSmGetThreadHandle(pStatus: *long) -> *
export import def #extern #dllimport RpcSmSetClientAllocFree(ClientAlloc: **, ClientFree: *) -> long
export import def #extern #dllimport RpcSmSetThreadHandle(Id: *) -> long
export import def #extern #dllimport RpcSmSwapClientAllocFree(ClientAlloc: **, ClientFree: *, OldClientAlloc: ***, OldClientFree: **) -> long
export import def #extern #dllimport NdrRpcSsEnableAllocate(pMessage: *MIDL_STUB_MESSAGE)
export import def #extern #dllimport NdrRpcSsDisableAllocate(pMessage: *MIDL_STUB_MESSAGE)
export import def #extern #dllimport NdrRpcSmSetClientToOsf(pMessage: *MIDL_STUB_MESSAGE)
export import def #extern #dllimport NdrRpcSmClientAllocate(Size: uint64) -> *
export import def #extern #dllimport NdrRpcSmClientFree(NodeToFree: *)
export import def #extern #dllimport NdrRpcSsDefaultAllocate(Size: uint64) -> *
export import def #extern #dllimport NdrRpcSsDefaultFree(NodeToFree: *)
export import def #extern #dllimport NdrFullPointerXlatInit(NumberOfPointers: ulong, XlatSide: XLAT_SIDE) -> *FULL_PTR_XLAT_TABLES
export import def #extern #dllimport NdrFullPointerXlatFree(pXlatTables: *FULL_PTR_XLAT_TABLES)
export import def #extern #dllimport NdrAllocate(pStubMsg: *MIDL_STUB_MESSAGE, Len: uint64) -> *
export import def #extern #dllimport NdrClearOutParameters(pStubMsg: *MIDL_STUB_MESSAGE, pFormat: *char, ArgAddr: *)
export import def #extern #dllimport NdrOleAllocate(Size: uint64) -> *
export import def #extern #dllimport NdrOleFree(NodeToFree: *)
export import def #extern NdrGetUserMarshalInfo(pFlags: *ulong, InformationLevel: ulong, pMarshalInfo: *NDR_USER_MARSHAL_INFO) -> long
export import def #extern NdrCreateServerInterfaceFromStub(pStub: *s_IRpcStubBuffer, pServerIf: *RPC_SERVER_INTERFACE) -> long
export import def #extern NdrClientCall3(pProxyInfo: *MIDL_STUBLESS_PROXY_INFO, nProcNum: ulong, pReturnValue: *, ...) -> CLIENT_CALL_RETURN
export import def #extern Ndr64AsyncClientCall(pProxyInfo: *MIDL_STUBLESS_PROXY_INFO, nProcNum: ulong, pReturnValue: *, ...) -> CLIENT_CALL_RETURN
export import def #extern Ndr64DcomAsyncClientCall(pProxyInfo: *MIDL_STUBLESS_PROXY_INFO, nProcNum: ulong, pReturnValue: *, ...) -> CLIENT_CALL_RETURN
export import def #extern #dllimport Ndr64AsyncServerCall(pRpcMsg: *RPC_MESSAGE)
export import def #extern #dllimport Ndr64AsyncServerCall64(pRpcMsg: *RPC_MESSAGE)
export import def #extern #dllimport Ndr64AsyncServerCallAll(pRpcMsg: *RPC_MESSAGE)
export import def #extern #dllimport Ndr64AsyncStubCall(pThis: *s_IRpcStubBuffer, pChannel: *s_IRpcChannelBuffer, pRpcMsg: *RPC_MESSAGE, pdwStubPhase: *ulong) -> long
export import def #extern #dllimport Ndr64DcomAsyncStubCall(pThis: *s_IRpcStubBuffer, pChannel: *s_IRpcChannelBuffer, pRpcMsg: *RPC_MESSAGE, pdwStubPhase: *ulong) -> long
export import def #extern #dllimport NdrStubCall3(pThis: *, pChannel: *, pRpcMsg: *RPC_MESSAGE, pdwStubPhase: *ulong) -> long
export import def #extern #dllimport NdrServerCallAll(pRpcMsg: *RPC_MESSAGE)
export import def #extern #dllimport NdrServerCallNdr64(pRpcMsg: *RPC_MESSAGE)
export import def #extern #dllimport NdrServerCall3(pRpcMsg: *RPC_MESSAGE)
export import def #extern #dllimport NdrPartialIgnoreClientMarshall(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *)
export import def #extern #dllimport NdrPartialIgnoreServerUnmarshall(pStubMsg: *MIDL_STUB_MESSAGE, ppMemory: **)
export import def #extern #dllimport NdrPartialIgnoreClientBufferSize(pStubMsg: *MIDL_STUB_MESSAGE, pMemory: *)
export import def #extern #dllimport NdrPartialIgnoreServerInitialize(pStubMsg: *MIDL_STUB_MESSAGE, ppMemory: **, pFormat: *char)
export import def #extern RpcUserFree(AsyncHandle: *, pBuffer: *)
export import def #extern SCardEstablishContext(dwScope: ulong, pvReserved1: *, pvReserved2: *, phContext: *uint64) -> long
export import def #extern SCardReleaseContext(hContext: uint64) -> long
export import def #extern SCardIsValidContext(hContext: uint64) -> long
export import def #extern SCardListReaderGroupsA(hContext: uint64, mszGroups: *char, pcchGroups: *ulong) -> long
export import def #extern SCardListReaderGroupsW(hContext: uint64, mszGroups: *ushort, pcchGroups: *ulong) -> long
export import def #extern SCardListReadersA(hContext: uint64, mszGroups: *char, mszReaders: *char, pcchReaders: *ulong) -> long
export import def #extern SCardListReadersW(hContext: uint64, mszGroups: *ushort, mszReaders: *ushort, pcchReaders: *ulong) -> long
export import def #extern SCardListCardsA(hContext: uint64, pbAtr: *char, rgquidInterfaces: *GUID, cguidInterfaceCount: ulong, mszCards: *char, pcchCards: *ulong) -> long
export import def #extern SCardListCardsW(hContext: uint64, pbAtr: *char, rgquidInterfaces: *GUID, cguidInterfaceCount: ulong, mszCards: *ushort, pcchCards: *ulong) -> long
export import def #extern SCardListInterfacesA(hContext: uint64, szCard: *char, pguidInterfaces: *GUID, pcguidInterfaces: *ulong) -> long
export import def #extern SCardListInterfacesW(hContext: uint64, szCard: *ushort, pguidInterfaces: *GUID, pcguidInterfaces: *ulong) -> long
export import def #extern SCardGetProviderIdA(hContext: uint64, szCard: *char, pguidProviderId: *GUID) -> long
export import def #extern SCardGetProviderIdW(hContext: uint64, szCard: *ushort, pguidProviderId: *GUID) -> long
export import def #extern SCardGetCardTypeProviderNameA(hContext: uint64, szCardName: *char, dwProviderId: ulong, szProvider: *char, pcchProvider: *ulong) -> long
export import def #extern SCardGetCardTypeProviderNameW(hContext: uint64, szCardName: *ushort, dwProviderId: ulong, szProvider: *ushort, pcchProvider: *ulong) -> long
export import def #extern SCardIntroduceReaderGroupA(hContext: uint64, szGroupName: *char) -> long
export import def #extern SCardIntroduceReaderGroupW(hContext: uint64, szGroupName: *ushort) -> long
export import def #extern SCardForgetReaderGroupA(hContext: uint64, szGroupName: *char) -> long
export import def #extern SCardForgetReaderGroupW(hContext: uint64, szGroupName: *ushort) -> long
export import def #extern SCardIntroduceReaderA(hContext: uint64, szReaderName: *char, szDeviceName: *char) -> long
export import def #extern SCardIntroduceReaderW(hContext: uint64, szReaderName: *ushort, szDeviceName: *ushort) -> long
export import def #extern SCardForgetReaderA(hContext: uint64, szReaderName: *char) -> long
export import def #extern SCardForgetReaderW(hContext: uint64, szReaderName: *ushort) -> long
export import def #extern SCardAddReaderToGroupA(hContext: uint64, szReaderName: *char, szGroupName: *char) -> long
export import def #extern SCardAddReaderToGroupW(hContext: uint64, szReaderName: *ushort, szGroupName: *ushort) -> long
export import def #extern SCardRemoveReaderFromGroupA(hContext: uint64, szReaderName: *char, szGroupName: *char) -> long
export import def #extern SCardRemoveReaderFromGroupW(hContext: uint64, szReaderName: *ushort, szGroupName: *ushort) -> long
export import def #extern SCardIntroduceCardTypeA(hContext: uint64, szCardName: *char, pguidPrimaryProvider: *GUID, rgguidInterfaces: *GUID, dwInterfaceCount: ulong, pbAtr: *char, pbAtrMask: *char, cbAtrLen: ulong) -> long
export import def #extern SCardIntroduceCardTypeW(hContext: uint64, szCardName: *ushort, pguidPrimaryProvider: *GUID, rgguidInterfaces: *GUID, dwInterfaceCount: ulong, pbAtr: *char, pbAtrMask: *char, cbAtrLen: ulong) -> long
export import def #extern SCardSetCardTypeProviderNameA(hContext: uint64, szCardName: *char, dwProviderId: ulong, szProvider: *char) -> long
export import def #extern SCardSetCardTypeProviderNameW(hContext: uint64, szCardName: *ushort, dwProviderId: ulong, szProvider: *ushort) -> long
export import def #extern SCardForgetCardTypeA(hContext: uint64, szCardName: *char) -> long
export import def #extern SCardForgetCardTypeW(hContext: uint64, szCardName: *ushort) -> long
export import def #extern SCardFreeMemory(hContext: uint64, pvMem: *) -> long
export import def #extern SCardAccessStartedEvent() -> *
export import def #extern SCardReleaseStartedEvent()
export import def #extern SCardLocateCardsA(hContext: uint64, mszCards: *char, rgReaderStates: *SCARD_READERSTATEA, cReaders: ulong) -> long
export import def #extern SCardLocateCardsW(hContext: uint64, mszCards: *ushort, rgReaderStates: *SCARD_READERSTATEW, cReaders: ulong) -> long
export import def #extern SCardLocateCardsByATRA(hContext: uint64, rgAtrMasks: *SCARD_ATRMASK, cAtrs: ulong, rgReaderStates: *SCARD_READERSTATEA, cReaders: ulong) -> long
export import def #extern SCardLocateCardsByATRW(hContext: uint64, rgAtrMasks: *SCARD_ATRMASK, cAtrs: ulong, rgReaderStates: *SCARD_READERSTATEW, cReaders: ulong) -> long
export import def #extern SCardGetStatusChangeA(hContext: uint64, dwTimeout: ulong, rgReaderStates: *SCARD_READERSTATEA, cReaders: ulong) -> long
export import def #extern SCardGetStatusChangeW(hContext: uint64, dwTimeout: ulong, rgReaderStates: *SCARD_READERSTATEW, cReaders: ulong) -> long
export import def #extern SCardCancel(hContext: uint64) -> long
export import def #extern SCardConnectA(hContext: uint64, szReader: *char, dwShareMode: ulong, dwPreferredProtocols: ulong, phCard: *uint64, pdwActiveProtocol: *ulong) -> long
export import def #extern SCardConnectW(hContext: uint64, szReader: *ushort, dwShareMode: ulong, dwPreferredProtocols: ulong, phCard: *uint64, pdwActiveProtocol: *ulong) -> long
export import def #extern SCardReconnect(hCard: uint64, dwShareMode: ulong, dwPreferredProtocols: ulong, dwInitialization: ulong, pdwActiveProtocol: *ulong) -> long
export import def #extern SCardDisconnect(hCard: uint64, dwDisposition: ulong) -> long
export import def #extern SCardBeginTransaction(hCard: uint64) -> long
export import def #extern SCardEndTransaction(hCard: uint64, dwDisposition: ulong) -> long
export import def #extern SCardCancelTransaction(hCard: uint64) -> long
export import def #extern SCardState(hCard: uint64, pdwState: *ulong, pdwProtocol: *ulong, pbAtr: *char, pcbAtrLen: *ulong) -> long
export import def #extern SCardStatusA(hCard: uint64, mszReaderNames: *char, pcchReaderLen: *ulong, pdwState: *ulong, pdwProtocol: *ulong, pbAtr: *char, pcbAtrLen: *ulong) -> long
export import def #extern SCardStatusW(hCard: uint64, mszReaderNames: *ushort, pcchReaderLen: *ulong, pdwState: *ulong, pdwProtocol: *ulong, pbAtr: *char, pcbAtrLen: *ulong) -> long
export import def #extern SCardTransmit(hCard: uint64, pioSendPci: *SCARD_IO_REQUEST, pbSendBuffer: *char, cbSendLength: ulong, pioRecvPci: *SCARD_IO_REQUEST, pbRecvBuffer: *char, pcbRecvLength: *ulong) -> long
export import def #extern SCardGetTransmitCount(hCard: uint64, pcTransmitCount: *ulong) -> long
export import def #extern SCardControl(hCard: uint64, dwControlCode: ulong, lpInBuffer: *, cbInBufferSize: ulong, lpOutBuffer: *, cbOutBufferSize: ulong, lpBytesReturned: *ulong) -> long
export import def #extern SCardGetAttrib(hCard: uint64, dwAttrId: ulong, pbAttr: *char, pcbAttrLen: *ulong) -> long
export import def #extern SCardSetAttrib(hCard: uint64, dwAttrId: ulong, pbAttr: *char, cbAttrLen: ulong) -> long
export import def #extern SCardUIDlgSelectCardA(_0: *OPENCARDNAME_EXA) -> long
export import def #extern SCardUIDlgSelectCardW(_0: *OPENCARDNAME_EXW) -> long
export import def #extern GetOpenCardNameA(_0: *OPENCARDNAMEA) -> long
export import def #extern GetOpenCardNameW(_0: *OPENCARDNAMEW) -> long
export import def #extern SCardDlgExtendedError() -> long
export import def #extern SCardReadCacheA(hContext: uint64, CardIdentifier: *GUID, FreshnessCounter: ulong, LookupName: *char, Data: *char, DataLen: *ulong) -> long
export import def #extern SCardReadCacheW(hContext: uint64, CardIdentifier: *GUID, FreshnessCounter: ulong, LookupName: *ushort, Data: *char, DataLen: *ulong) -> long
export import def #extern SCardWriteCacheA(hContext: uint64, CardIdentifier: *GUID, FreshnessCounter: ulong, LookupName: *char, Data: *char, DataLen: ulong) -> long
export import def #extern SCardWriteCacheW(hContext: uint64, CardIdentifier: *GUID, FreshnessCounter: ulong, LookupName: *ushort, Data: *char, DataLen: ulong) -> long
export import def #extern SCardGetReaderIconA(hContext: uint64, szReaderName: *char, pbIcon: *char, pcbIcon: *ulong) -> long
export import def #extern SCardGetReaderIconW(hContext: uint64, szReaderName: *ushort, pbIcon: *char, pcbIcon: *ulong) -> long
export import def #extern SCardGetDeviceTypeIdA(hContext: uint64, szReaderName: *char, pdwDeviceTypeId: *ulong) -> long
export import def #extern SCardGetDeviceTypeIdW(hContext: uint64, szReaderName: *ushort, pdwDeviceTypeId: *ulong) -> long
export import def #extern SCardGetReaderDeviceInstanceIdA(hContext: uint64, szReaderName: *char, szDeviceInstanceId: *char, pcchDeviceInstanceId: *ulong) -> long
export import def #extern SCardGetReaderDeviceInstanceIdW(hContext: uint64, szReaderName: *ushort, szDeviceInstanceId: *ushort, pcchDeviceInstanceId: *ulong) -> long
export import def #extern SCardListReadersWithDeviceInstanceIdA(hContext: uint64, szDeviceInstanceId: *char, mszReaders: *char, pcchReaders: *ulong) -> long
export import def #extern SCardListReadersWithDeviceInstanceIdW(hContext: uint64, szDeviceInstanceId: *ushort, mszReaders: *ushort, pcchReaders: *ulong) -> long
export import def #extern SCardAudit(hContext: uint64, dwEvent: ulong) -> long
export import def #extern #dllimport CreatePropertySheetPageA(constPropSheetPagePointer: *PROPSHEETPAGEA_V4) -> *s__PSP
export import def #extern #dllimport CreatePropertySheetPageW(constPropSheetPagePointer: *PROPSHEETPAGEW_V4) -> *s__PSP
export import def #extern #dllimport DestroyPropertySheetPage(_0: *s__PSP) -> int
export import def #extern #dllimport PropertySheetA(_0: *PROPSHEETHEADERA_V2) -> int64
export import def #extern #dllimport PropertySheetW(_0: *PROPSHEETHEADERW_V2) -> int64
export import def #extern EnumPrintersA(Flags: ulong, Name: *char, Level: ulong, pPrinterEnum: *char, cbBuf: ulong, pcbNeeded: *ulong, pcReturned: *ulong) -> int
export import def #extern EnumPrintersW(Flags: ulong, Name: *ushort, Level: ulong, pPrinterEnum: *char, cbBuf: ulong, pcbNeeded: *ulong, pcReturned: *ulong) -> int
export import def #extern GetSpoolFileHandle(hPrinter: *) -> *
export import def #extern CommitSpoolData(hPrinter: *, hSpoolFile: *, cbCommit: ulong) -> *
export import def #extern CloseSpoolFileHandle(hPrinter: *, hSpoolFile: *) -> int
export import def #extern OpenPrinterA(pPrinterName: *char, phPrinter: **, pDefault: *PRINTER_DEFAULTSA) -> int
export import def #extern OpenPrinterW(pPrinterName: *ushort, phPrinter: **, pDefault: *PRINTER_DEFAULTSW) -> int
export import def #extern ResetPrinterA(hPrinter: *, pDefault: *PRINTER_DEFAULTSA) -> int
export import def #extern ResetPrinterW(hPrinter: *, pDefault: *PRINTER_DEFAULTSW) -> int
export import def #extern SetJobA(hPrinter: *, JobId: ulong, Level: ulong, pJob: *char, Command: ulong) -> int
export import def #extern SetJobW(hPrinter: *, JobId: ulong, Level: ulong, pJob: *char, Command: ulong) -> int
export import def #extern GetJobA(hPrinter: *, JobId: ulong, Level: ulong, pJob: *char, cbBuf: ulong, pcbNeeded: *ulong) -> int
export import def #extern GetJobW(hPrinter: *, JobId: ulong, Level: ulong, pJob: *char, cbBuf: ulong, pcbNeeded: *ulong) -> int
export import def #extern EnumJobsA(hPrinter: *, FirstJob: ulong, NoJobs: ulong, Level: ulong, pJob: *char, cbBuf: ulong, pcbNeeded: *ulong, pcReturned: *ulong) -> int
export import def #extern EnumJobsW(hPrinter: *, FirstJob: ulong, NoJobs: ulong, Level: ulong, pJob: *char, cbBuf: ulong, pcbNeeded: *ulong, pcReturned: *ulong) -> int
export import def #extern AddPrinterA(pName: *char, Level: ulong, pPrinter: *char) -> *
export import def #extern AddPrinterW(pName: *ushort, Level: ulong, pPrinter: *char) -> *
export import def #extern DeletePrinter(hPrinter: *) -> int
export import def #extern SetPrinterA(hPrinter: *, Level: ulong, pPrinter: *char, Command: ulong) -> int
export import def #extern SetPrinterW(hPrinter: *, Level: ulong, pPrinter: *char, Command: ulong) -> int
export import def #extern GetPrinterA(hPrinter: *, Level: ulong, pPrinter: *char, cbBuf: ulong, pcbNeeded: *ulong) -> int
export import def #extern GetPrinterW(hPrinter: *, Level: ulong, pPrinter: *char, cbBuf: ulong, pcbNeeded: *ulong) -> int
export import def #extern AddPrinterDriverA(pName: *char, Level: ulong, pDriverInfo: *char) -> int
export import def #extern AddPrinterDriverW(pName: *ushort, Level: ulong, pDriverInfo: *char) -> int
export import def #extern AddPrinterDriverExA(pName: *char, Level: ulong, lpbDriverInfo: *char, dwFileCopyFlags: ulong) -> int
export import def #extern AddPrinterDriverExW(pName: *ushort, Level: ulong, lpbDriverInfo: *char, dwFileCopyFlags: ulong) -> int
export import def #extern EnumPrinterDriversA(pName: *char, pEnvironment: *char, Level: ulong, pDriverInfo: *char, cbBuf: ulong, pcbNeeded: *ulong, pcReturned: *ulong) -> int
export import def #extern EnumPrinterDriversW(pName: *ushort, pEnvironment: *ushort, Level: ulong, pDriverInfo: *char, cbBuf: ulong, pcbNeeded: *ulong, pcReturned: *ulong) -> int
export import def #extern GetPrinterDriverA(hPrinter: *, pEnvironment: *char, Level: ulong, pDriverInfo: *char, cbBuf: ulong, pcbNeeded: *ulong) -> int
export import def #extern GetPrinterDriverW(hPrinter: *, pEnvironment: *ushort, Level: ulong, pDriverInfo: *char, cbBuf: ulong, pcbNeeded: *ulong) -> int
export import def #extern GetPrinterDriverDirectoryA(pName: *char, pEnvironment: *char, Level: ulong, pDriverDirectory: *char, cbBuf: ulong, pcbNeeded: *ulong) -> int
export import def #extern GetPrinterDriverDirectoryW(pName: *ushort, pEnvironment: *ushort, Level: ulong, pDriverDirectory: *char, cbBuf: ulong, pcbNeeded: *ulong) -> int
export import def #extern DeletePrinterDriverA(pName: *char, pEnvironment: *char, pDriverName: *char) -> int
export import def #extern DeletePrinterDriverW(pName: *ushort, pEnvironment: *ushort, pDriverName: *ushort) -> int
export import def #extern DeletePrinterDriverExA(pName: *char, pEnvironment: *char, pDriverName: *char, dwDeleteFlag: ulong, dwVersionFlag: ulong) -> int
export import def #extern DeletePrinterDriverExW(pName: *ushort, pEnvironment: *ushort, pDriverName: *ushort, dwDeleteFlag: ulong, dwVersionFlag: ulong) -> int
export import def #extern AddPrintProcessorA(pName: *char, pEnvironment: *char, pPathName: *char, pPrintProcessorName: *char) -> int
export import def #extern AddPrintProcessorW(pName: *ushort, pEnvironment: *ushort, pPathName: *ushort, pPrintProcessorName: *ushort) -> int
export import def #extern EnumPrintProcessorsA(pName: *char, pEnvironment: *char, Level: ulong, pPrintProcessorInfo: *char, cbBuf: ulong, pcbNeeded: *ulong, pcReturned: *ulong) -> int
export import def #extern EnumPrintProcessorsW(pName: *ushort, pEnvironment: *ushort, Level: ulong, pPrintProcessorInfo: *char, cbBuf: ulong, pcbNeeded: *ulong, pcReturned: *ulong) -> int
export import def #extern GetPrintProcessorDirectoryA(pName: *char, pEnvironment: *char, Level: ulong, pPrintProcessorInfo: *char, cbBuf: ulong, pcbNeeded: *ulong) -> int
export import def #extern GetPrintProcessorDirectoryW(pName: *ushort, pEnvironment: *ushort, Level: ulong, pPrintProcessorInfo: *char, cbBuf: ulong, pcbNeeded: *ulong) -> int
export import def #extern EnumPrintProcessorDatatypesA(pName: *char, pPrintProcessorName: *char, Level: ulong, pDatatypes: *char, cbBuf: ulong, pcbNeeded: *ulong, pcReturned: *ulong) -> int
export import def #extern EnumPrintProcessorDatatypesW(pName: *ushort, pPrintProcessorName: *ushort, Level: ulong, pDatatypes: *char, cbBuf: ulong, pcbNeeded: *ulong, pcReturned: *ulong) -> int
export import def #extern DeletePrintProcessorA(pName: *char, pEnvironment: *char, pPrintProcessorName: *char) -> int
export import def #extern DeletePrintProcessorW(pName: *ushort, pEnvironment: *ushort, pPrintProcessorName: *ushort) -> int
export import def #extern StartDocPrinterA(hPrinter: *, Level: ulong, pDocInfo: *char) -> ulong
export import def #extern StartDocPrinterW(hPrinter: *, Level: ulong, pDocInfo: *char) -> ulong
export import def #extern StartPagePrinter(hPrinter: *) -> int
export import def #extern WritePrinter(hPrinter: *, pBuf: *, cbBuf: ulong, pcWritten: *ulong) -> int
export import def #extern FlushPrinter(hPrinter: *, pBuf: *, cbBuf: ulong, pcWritten: *ulong, cSleep: ulong) -> int
export import def #extern EndPagePrinter(hPrinter: *) -> int
export import def #extern AbortPrinter(hPrinter: *) -> int
export import def #extern ReadPrinter(hPrinter: *, pBuf: *, cbBuf: ulong, pNoBytesRead: *ulong) -> int
export import def #extern EndDocPrinter(hPrinter: *) -> int
export import def #extern AddJobA(hPrinter: *, Level: ulong, pData: *char, cbBuf: ulong, pcbNeeded: *ulong) -> int
export import def #extern AddJobW(hPrinter: *, Level: ulong, pData: *char, cbBuf: ulong, pcbNeeded: *ulong) -> int
export import def #extern ScheduleJob(hPrinter: *, JobId: ulong) -> int
export import def #extern PrinterProperties(hWnd: *s_HWND__, hPrinter: *) -> int
export import def #extern DocumentPropertiesA(hWnd: *s_HWND__, hPrinter: *, pDeviceName: *char, pDevModeOutput: *DEVMODEA, pDevModeInput: *DEVMODEA, fMode: ulong) -> long
export import def #extern DocumentPropertiesW(hWnd: *s_HWND__, hPrinter: *, pDeviceName: *ushort, pDevModeOutput: *DEVMODEW, pDevModeInput: *DEVMODEW, fMode: ulong) -> long
export import def #extern AdvancedDocumentPropertiesA(hWnd: *s_HWND__, hPrinter: *, pDeviceName: *char, pDevModeOutput: *DEVMODEA, pDevModeInput: *DEVMODEA) -> long
export import def #extern AdvancedDocumentPropertiesW(hWnd: *s_HWND__, hPrinter: *, pDeviceName: *ushort, pDevModeOutput: *DEVMODEW, pDevModeInput: *DEVMODEW) -> long
export import def #extern ExtDeviceMode(hWnd: *s_HWND__, hInst: *, pDevModeOutput: *DEVMODEA, pDeviceName: *char, pPort: *char, pDevModeInput: *DEVMODEA, pProfile: *char, fMode: ulong) -> long
export import def #extern GetPrinterDataA(hPrinter: *, pValueName: *char, pType: *ulong, pData: *char, nSize: ulong, pcbNeeded: *ulong) -> ulong
export import def #extern GetPrinterDataW(hPrinter: *, pValueName: *ushort, pType: *ulong, pData: *char, nSize: ulong, pcbNeeded: *ulong) -> ulong
export import def #extern GetPrinterDataExA(hPrinter: *, pKeyName: *char, pValueName: *char, pType: *ulong, pData: *char, nSize: ulong, pcbNeeded: *ulong) -> ulong
export import def #extern GetPrinterDataExW(hPrinter: *, pKeyName: *ushort, pValueName: *ushort, pType: *ulong, pData: *char, nSize: ulong, pcbNeeded: *ulong) -> ulong
export import def #extern EnumPrinterDataA(hPrinter: *, dwIndex: ulong, pValueName: *char, cbValueName: ulong, pcbValueName: *ulong, pType: *ulong, pData: *char, cbData: ulong, pcbData: *ulong) -> ulong
export import def #extern EnumPrinterDataW(hPrinter: *, dwIndex: ulong, pValueName: *ushort, cbValueName: ulong, pcbValueName: *ulong, pType: *ulong, pData: *char, cbData: ulong, pcbData: *ulong) -> ulong
export import def #extern EnumPrinterDataExA(hPrinter: *, pKeyName: *char, pEnumValues: *char, cbEnumValues: ulong, pcbEnumValues: *ulong, pnEnumValues: *ulong) -> ulong
export import def #extern EnumPrinterDataExW(hPrinter: *, pKeyName: *ushort, pEnumValues: *char, cbEnumValues: ulong, pcbEnumValues: *ulong, pnEnumValues: *ulong) -> ulong
export import def #extern EnumPrinterKeyA(hPrinter: *, pKeyName: *char, pSubkey: *char, cbSubkey: ulong, pcbSubkey: *ulong) -> ulong
export import def #extern EnumPrinterKeyW(hPrinter: *, pKeyName: *ushort, pSubkey: *ushort, cbSubkey: ulong, pcbSubkey: *ulong) -> ulong
export import def #extern SetPrinterDataA(hPrinter: *, pValueName: *char, Type: ulong, pData: *char, cbData: ulong) -> ulong
export import def #extern SetPrinterDataW(hPrinter: *, pValueName: *ushort, Type: ulong, pData: *char, cbData: ulong) -> ulong
export import def #extern SetPrinterDataExA(hPrinter: *, pKeyName: *char, pValueName: *char, Type: ulong, pData: *char, cbData: ulong) -> ulong
export import def #extern SetPrinterDataExW(hPrinter: *, pKeyName: *ushort, pValueName: *ushort, Type: ulong, pData: *char, cbData: ulong) -> ulong
export import def #extern DeletePrinterDataA(hPrinter: *, pValueName: *char) -> ulong
export import def #extern DeletePrinterDataW(hPrinter: *, pValueName: *ushort) -> ulong
export import def #extern DeletePrinterDataExA(hPrinter: *, pKeyName: *char, pValueName: *char) -> ulong
export import def #extern DeletePrinterDataExW(hPrinter: *, pKeyName: *ushort, pValueName: *ushort) -> ulong
export import def #extern DeletePrinterKeyA(hPrinter: *, pKeyName: *char) -> ulong
export import def #extern DeletePrinterKeyW(hPrinter: *, pKeyName: *ushort) -> ulong
export import def #extern WaitForPrinterChange(hPrinter: *, Flags: ulong) -> ulong
export import def #extern FindFirstPrinterChangeNotification(hPrinter: *, fdwFilter: ulong, fdwOptions: ulong, pPrinterNotifyOptions: *) -> *
export import def #extern FindNextPrinterChangeNotification(hChange: *, pdwChange: *ulong, pvReserved: *, ppPrinterNotifyInfo: **) -> int
export import def #extern FreePrinterNotifyInfo(pPrinterNotifyInfo: *PRINTER_NOTIFY_INFO) -> int
export import def #extern FindClosePrinterChangeNotification(hChange: *) -> int
export import def #extern PrinterMessageBoxA(hPrinter: *, Error: ulong, hWnd: *s_HWND__, pText: *char, pCaption: *char, dwType: ulong) -> ulong
export import def #extern PrinterMessageBoxW(hPrinter: *, Error: ulong, hWnd: *s_HWND__, pText: *ushort, pCaption: *ushort, dwType: ulong) -> ulong
export import def #extern ClosePrinter(hPrinter: *) -> int
export import def #extern AddFormA(hPrinter: *, Level: ulong, pForm: *char) -> int
export import def #extern AddFormW(hPrinter: *, Level: ulong, pForm: *char) -> int
export import def #extern DeleteFormA(hPrinter: *, pFormName: *char) -> int
export import def #extern DeleteFormW(hPrinter: *, pFormName: *ushort) -> int
export import def #extern GetFormA(hPrinter: *, pFormName: *char, Level: ulong, pForm: *char, cbBuf: ulong, pcbNeeded: *ulong) -> int
export import def #extern GetFormW(hPrinter: *, pFormName: *ushort, Level: ulong, pForm: *char, cbBuf: ulong, pcbNeeded: *ulong) -> int
export import def #extern SetFormA(hPrinter: *, pFormName: *char, Level: ulong, pForm: *char) -> int
export import def #extern SetFormW(hPrinter: *, pFormName: *ushort, Level: ulong, pForm: *char) -> int
export import def #extern EnumFormsA(hPrinter: *, Level: ulong, pForm: *char, cbBuf: ulong, pcbNeeded: *ulong, pcReturned: *ulong) -> int
export import def #extern EnumFormsW(hPrinter: *, Level: ulong, pForm: *char, cbBuf: ulong, pcbNeeded: *ulong, pcReturned: *ulong) -> int
export import def #extern EnumMonitorsA(pName: *char, Level: ulong, pMonitor: *char, cbBuf: ulong, pcbNeeded: *ulong, pcReturned: *ulong) -> int
export import def #extern EnumMonitorsW(pName: *ushort, Level: ulong, pMonitor: *char, cbBuf: ulong, pcbNeeded: *ulong, pcReturned: *ulong) -> int
export import def #extern AddMonitorA(pName: *char, Level: ulong, pMonitors: *char) -> int
export import def #extern AddMonitorW(pName: *ushort, Level: ulong, pMonitors: *char) -> int
export import def #extern DeleteMonitorA(pName: *char, pEnvironment: *char, pMonitorName: *char) -> int
export import def #extern DeleteMonitorW(pName: *ushort, pEnvironment: *ushort, pMonitorName: *ushort) -> int
export import def #extern EnumPortsA(pName: *char, Level: ulong, pPort: *char, cbBuf: ulong, pcbNeeded: *ulong, pcReturned: *ulong) -> int
export import def #extern EnumPortsW(pName: *ushort, Level: ulong, pPort: *char, cbBuf: ulong, pcbNeeded: *ulong, pcReturned: *ulong) -> int
export import def #extern AddPortA(pName: *char, hWnd: *s_HWND__, pMonitorName: *char) -> int
export import def #extern AddPortW(pName: *ushort, hWnd: *s_HWND__, pMonitorName: *ushort) -> int
export import def #extern ConfigurePortA(pName: *char, hWnd: *s_HWND__, pPortName: *char) -> int
export import def #extern ConfigurePortW(pName: *ushort, hWnd: *s_HWND__, pPortName: *ushort) -> int
export import def #extern DeletePortA(pName: *char, hWnd: *s_HWND__, pPortName: *char) -> int
export import def #extern DeletePortW(pName: *ushort, hWnd: *s_HWND__, pPortName: *ushort) -> int
export import def #extern XcvDataW(hXcv: *, pszDataName: *ushort, pInputData: *char, cbInputData: ulong, pOutputData: *char, cbOutputData: ulong, pcbOutputNeeded: *ulong, pdwStatus: *ulong) -> int
export import def #extern GetDefaultPrinterA(pszBuffer: *char, pcchBuffer: *ulong) -> int
export import def #extern GetDefaultPrinterW(pszBuffer: *ushort, pcchBuffer: *ulong) -> int
export import def #extern SetDefaultPrinterA(pszPrinter: *char) -> int
export import def #extern SetDefaultPrinterW(pszPrinter: *ushort) -> int
export import def #extern SetPortA(pName: *char, pPortName: *char, dwLevel: ulong, pPortInfo: *char) -> int
export import def #extern SetPortW(pName: *ushort, pPortName: *ushort, dwLevel: ulong, pPortInfo: *char) -> int
export import def #extern AddPrinterConnectionA(pName: *char) -> int
export import def #extern AddPrinterConnectionW(pName: *ushort) -> int
export import def #extern DeletePrinterConnectionA(pName: *char) -> int
export import def #extern DeletePrinterConnectionW(pName: *ushort) -> int
export import def #extern ConnectToPrinterDlg(hwnd: *s_HWND__, Flags: ulong) -> *
export import def #extern AddPrintProvidorA(pName: *char, Level: ulong, pProvidorInfo: *char) -> int
export import def #extern AddPrintProvidorW(pName: *ushort, Level: ulong, pProvidorInfo: *char) -> int
export import def #extern DeletePrintProvidorA(pName: *char, pEnvironment: *char, pPrintProvidorName: *char) -> int
export import def #extern DeletePrintProvidorW(pName: *ushort, pEnvironment: *ushort, pPrintProvidorName: *ushort) -> int
export import def #extern IsValidDevmodeA(pDevmode: *DEVMODEA, DevmodeSize: uint64) -> int
export import def #extern IsValidDevmodeW(pDevmode: *DEVMODEW, DevmodeSize: uint64) -> int
export import def #extern OpenPrinter2A(pPrinterName: *char, phPrinter: **, pDefault: *PRINTER_DEFAULTSA, pOptions: *PRINTER_OPTIONSA) -> int
export import def #extern OpenPrinter2W(pPrinterName: *ushort, phPrinter: **, pDefault: *PRINTER_DEFAULTSW, pOptions: *PRINTER_OPTIONSW) -> int
export import def #extern AddPrinterConnection2A(hWnd: *s_HWND__, pszName: *char, dwLevel: ulong, pConnectionInfo: *) -> int
export import def #extern AddPrinterConnection2W(hWnd: *s_HWND__, pszName: *ushort, dwLevel: ulong, pConnectionInfo: *) -> int
export import def #extern InstallPrinterDriverFromPackageA(pszServer: *char, pszInfPath: *char, pszDriverName: *char, pszEnvironment: *char, dwFlags: ulong) -> long
export import def #extern InstallPrinterDriverFromPackageW(pszServer: *ushort, pszInfPath: *ushort, pszDriverName: *ushort, pszEnvironment: *ushort, dwFlags: ulong) -> long
export import def #extern UploadPrinterDriverPackageA(pszServer: *char, pszInfPath: *char, pszEnvironment: *char, dwFlags: ulong, hwnd: *s_HWND__, pszDestInfPath: *char, pcchDestInfPath: *ulong) -> long
export import def #extern UploadPrinterDriverPackageW(pszServer: *ushort, pszInfPath: *ushort, pszEnvironment: *ushort, dwFlags: ulong, hwnd: *s_HWND__, pszDestInfPath: *ushort, pcchDestInfPath: *ulong) -> long
export import def #extern GetCorePrinterDriversA(pszServer: *char, pszEnvironment: *char, pszzCoreDriverDependencies: *char, cCorePrinterDrivers: ulong, pCorePrinterDrivers: *CORE_PRINTER_DRIVERA) -> long
export import def #extern GetCorePrinterDriversW(pszServer: *ushort, pszEnvironment: *ushort, pszzCoreDriverDependencies: *ushort, cCorePrinterDrivers: ulong, pCorePrinterDrivers: *CORE_PRINTER_DRIVERW) -> long
export import def #extern CorePrinterDriverInstalledA(pszServer: *char, pszEnvironment: *char, CoreDriverGUID: GUID, ftDriverDate: FILETIME, dwlDriverVersion: uint64, pbDriverInstalled: *int) -> long
export import def #extern CorePrinterDriverInstalledW(pszServer: *ushort, pszEnvironment: *ushort, CoreDriverGUID: GUID, ftDriverDate: FILETIME, dwlDriverVersion: uint64, pbDriverInstalled: *int) -> long
export import def #extern GetPrinterDriverPackagePathA(pszServer: *char, pszEnvironment: *char, pszLanguage: *char, pszPackageID: *char, pszDriverPackageCab: *char, cchDriverPackageCab: ulong, pcchRequiredSize: *ulong) -> long
export import def #extern GetPrinterDriverPackagePathW(pszServer: *ushort, pszEnvironment: *ushort, pszLanguage: *ushort, pszPackageID: *ushort, pszDriverPackageCab: *ushort, cchDriverPackageCab: ulong, pcchRequiredSize: *ulong) -> long
export import def #extern DeletePrinterDriverPackageA(pszServer: *char, pszInfPath: *char, pszEnvironment: *char) -> long
export import def #extern DeletePrinterDriverPackageW(pszServer: *ushort, pszInfPath: *ushort, pszEnvironment: *ushort) -> long
export import def #extern ReportJobProcessingProgress(printerHandle: *, jobId: ulong, jobOperation: EPrintXPSJobOperation, jobProgress: EPrintXPSJobProgress) -> long
export import def #extern GetPrinterDriver2A(hWnd: *s_HWND__, hPrinter: *, pEnvironment: *char, Level: ulong, pDriverInfo: *char, cbBuf: ulong, pcbNeeded: *ulong) -> int
export import def #extern GetPrinterDriver2W(hWnd: *s_HWND__, hPrinter: *, pEnvironment: *ushort, Level: ulong, pDriverInfo: *char, cbBuf: ulong, pcbNeeded: *ulong) -> int
export import def #extern GetPrintExecutionData(pData: *PRINT_EXECUTION_DATA) -> int
export import def #extern GetJobNamedPropertyValue(hPrinter: *, JobId: ulong, pszName: *ushort, pValue: *PrintPropertyValue) -> ulong
export import def #extern FreePrintPropertyValue(pValue: *PrintPropertyValue)
export import def #extern FreePrintNamedPropertyArray(cProperties: ulong, ppProperties: **PrintNamedProperty)
export import def #extern SetJobNamedProperty(hPrinter: *, JobId: ulong, pProperty: *PrintNamedProperty) -> ulong
export import def #extern DeleteJobNamedProperty(hPrinter: *, JobId: ulong, pszName: *ushort) -> ulong
export import def #extern EnumJobNamedProperties(hPrinter: *, JobId: ulong, pcProperties: *ulong, ppProperties: **PrintNamedProperty) -> ulong
export import def #extern GetPrintOutputInfo(hWnd: *s_HWND__, pszPrinter: *ushort, phFile: **, ppszOutputFile: **ushort) -> long
export import def #extern IUnknown_QueryInterface_Proxy(This: *s_IUnknown, riid: *GUID, ppvObject: **) -> long
export import def #extern IUnknown_QueryInterface_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IUnknown_AddRef_Proxy(This: *s_IUnknown) -> ulong
export import def #extern IUnknown_AddRef_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IUnknown_Release_Proxy(This: *s_IUnknown) -> ulong
export import def #extern IUnknown_Release_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IClassFactory_RemoteCreateInstance_Proxy(This: *s_IClassFactory, riid: *GUID, ppvObject: **s_IUnknown) -> long
export import def #extern IClassFactory_RemoteCreateInstance_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IClassFactory_RemoteLockServer_Proxy(This: *s_IClassFactory, fLock: int) -> long
export import def #extern IClassFactory_RemoteLockServer_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IClassFactory_CreateInstance_Proxy(This: *s_IClassFactory, pUnkOuter: *s_IUnknown, riid: *GUID, ppvObject: **) -> long
export import def #extern IClassFactory_CreateInstance_Stub(This: *s_IClassFactory, riid: *GUID, ppvObject: **s_IUnknown) -> long
export import def #extern IClassFactory_LockServer_Proxy(This: *s_IClassFactory, fLock: int) -> long
export import def #extern IClassFactory_LockServer_Stub(This: *s_IClassFactory, fLock: int) -> long
export import def #extern IEnumUnknown_RemoteNext_Proxy(This: *s_IEnumUnknown, celt: ulong, rgelt: **s_IUnknown, pceltFetched: *ulong) -> long
export import def #extern IEnumUnknown_RemoteNext_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IEnumString_RemoteNext_Proxy(This: *s_IEnumString, celt: ulong, rgelt: **ushort, pceltFetched: *ulong) -> long
export import def #extern IEnumString_RemoteNext_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ISequentialStream_RemoteRead_Proxy(This: *s_ISequentialStream, pv: *char, cb: ulong, pcbRead: *ulong) -> long
export import def #extern ISequentialStream_RemoteRead_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ISequentialStream_RemoteWrite_Proxy(This: *s_ISequentialStream, pv: *char, cb: ulong, pcbWritten: *ulong) -> long
export import def #extern ISequentialStream_RemoteWrite_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IStream_RemoteSeek_Proxy(This: *s_IStream, dlibMove: LARGE_INTEGER, dwOrigin: ulong, plibNewPosition: *ULARGE_INTEGER) -> long
export import def #extern IStream_RemoteSeek_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IStream_RemoteCopyTo_Proxy(This: *s_IStream, pstm: *s_IStream, cb: ULARGE_INTEGER, pcbRead: *ULARGE_INTEGER, pcbWritten: *ULARGE_INTEGER) -> long
export import def #extern IStream_RemoteCopyTo_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IEnumUnknown_Next_Proxy(This: *s_IEnumUnknown, celt: ulong, rgelt: **s_IUnknown, pceltFetched: *ulong) -> long
export import def #extern IEnumUnknown_Next_Stub(This: *s_IEnumUnknown, celt: ulong, rgelt: **s_IUnknown, pceltFetched: *ulong) -> long
export import def #extern IEnumString_Next_Proxy(This: *s_IEnumString, celt: ulong, rgelt: **ushort, pceltFetched: *ulong) -> long
export import def #extern IEnumString_Next_Stub(This: *s_IEnumString, celt: ulong, rgelt: **ushort, pceltFetched: *ulong) -> long
export import def #extern ISequentialStream_Read_Proxy(This: *s_ISequentialStream, pv: *, cb: ulong, pcbRead: *ulong) -> long
export import def #extern ISequentialStream_Read_Stub(This: *s_ISequentialStream, pv: *char, cb: ulong, pcbRead: *ulong) -> long
export import def #extern ISequentialStream_Write_Proxy(This: *s_ISequentialStream, pv: *, cb: ulong, pcbWritten: *ulong) -> long
export import def #extern ISequentialStream_Write_Stub(This: *s_ISequentialStream, pv: *char, cb: ulong, pcbWritten: *ulong) -> long
export import def #extern IStream_Seek_Proxy(This: *s_IStream, dlibMove: LARGE_INTEGER, dwOrigin: ulong, plibNewPosition: *ULARGE_INTEGER) -> long
export import def #extern IStream_Seek_Stub(This: *s_IStream, dlibMove: LARGE_INTEGER, dwOrigin: ulong, plibNewPosition: *ULARGE_INTEGER) -> long
export import def #extern IStream_CopyTo_Proxy(This: *s_IStream, pstm: *s_IStream, cb: ULARGE_INTEGER, pcbRead: *ULARGE_INTEGER, pcbWritten: *ULARGE_INTEGER) -> long
export import def #extern IStream_CopyTo_Stub(This: *s_IStream, pstm: *s_IStream, cb: ULARGE_INTEGER, pcbRead: *ULARGE_INTEGER, pcbWritten: *ULARGE_INTEGER) -> long
export import def #extern #dllimport CoGetMalloc(dwMemContext: ulong, ppMalloc: **s_IMalloc) -> long
export import def #extern #dllimport CreateStreamOnHGlobal(hGlobal: *, fDeleteOnRelease: int, ppstm: **s_IStream) -> long
export import def #extern #dllimport GetHGlobalFromStream(pstm: *s_IStream, phglobal: **) -> long
export import def #extern #dllimport CoUninitialize()
export import def #extern #dllimport CoGetCurrentProcess() -> ulong
export import def #extern #dllimport CoInitializeEx(pvReserved: *, dwCoInit: ulong) -> long
export import def #extern #dllimport CoGetCallerTID(lpdwTID: *ulong) -> long
export import def #extern #dllimport CoGetCurrentLogicalThreadId(pguid: *GUID) -> long
export import def #extern #dllimport CoGetContextToken(pToken: *uint64) -> long
export import def #extern #dllimport CoGetDefaultContext(aptType: APTTYPE, riid: *GUID, ppv: **) -> long
export import def #extern #dllimport CoGetApartmentType(pAptType: *APTTYPE, pAptQualifier: *APTTYPEQUALIFIER) -> long
export import def #extern #dllimport CoDecodeProxy(dwClientPid: ulong, ui64ProxyAddress: uint64, pServerInformation: *ServerInformation) -> long
export import def #extern #dllimport CoIncrementMTAUsage(pCookie: **s_CO_MTA_USAGE_COOKIE__) -> long
export import def #extern #dllimport CoDecrementMTAUsage(Cookie: *s_CO_MTA_USAGE_COOKIE__) -> long
export import def #extern #dllimport CoAllowUnmarshalerCLSID(clsid: *GUID) -> long
export import def #extern #dllimport CoGetObjectContext(riid: *GUID, ppv: **) -> long
export import def #extern #dllimport CoGetClassObject(rclsid: *GUID, dwClsContext: ulong, pvReserved: *, riid: *GUID, ppv: **) -> long
export import def #extern #dllimport CoRegisterClassObject(rclsid: *GUID, pUnk: *s_IUnknown, dwClsContext: ulong, flags: ulong, lpdwRegister: *ulong) -> long
export import def #extern #dllimport CoRevokeClassObject(dwRegister: ulong) -> long
export import def #extern #dllimport CoResumeClassObjects() -> long
export import def #extern #dllimport CoSuspendClassObjects() -> long
export import def #extern #dllimport CoAddRefServerProcess() -> ulong
export import def #extern #dllimport CoReleaseServerProcess() -> ulong
export import def #extern #dllimport CoGetPSClsid(riid: *GUID, pClsid: *GUID) -> long
export import def #extern #dllimport CoRegisterPSClsid(riid: *GUID, rclsid: *GUID) -> long
export import def #extern #dllimport CoRegisterSurrogate(pSurrogate: *s_ISurrogate) -> long
export import def #extern #dllimport CoGetMarshalSizeMax(pulSize: *ulong, riid: *GUID, pUnk: *s_IUnknown, dwDestContext: ulong, pvDestContext: *, mshlflags: ulong) -> long
export import def #extern #dllimport CoMarshalInterface(pStm: *s_IStream, riid: *GUID, pUnk: *s_IUnknown, dwDestContext: ulong, pvDestContext: *, mshlflags: ulong) -> long
export import def #extern #dllimport CoUnmarshalInterface(pStm: *s_IStream, riid: *GUID, ppv: **) -> long
export import def #extern #dllimport CoMarshalHresult(pstm: *s_IStream, hresult: long) -> long
export import def #extern #dllimport CoUnmarshalHresult(pstm: *s_IStream, phresult: *long) -> long
export import def #extern #dllimport CoReleaseMarshalData(pStm: *s_IStream) -> long
export import def #extern #dllimport CoDisconnectObject(pUnk: *s_IUnknown, dwReserved: ulong) -> long
export import def #extern #dllimport CoLockObjectExternal(pUnk: *s_IUnknown, fLock: int, fLastUnlockReleases: int) -> long
export import def #extern #dllimport CoGetStandardMarshal(riid: *GUID, pUnk: *s_IUnknown, dwDestContext: ulong, pvDestContext: *, mshlflags: ulong, ppMarshal: **s_IMarshal) -> long
export import def #extern #dllimport CoGetStdMarshalEx(pUnkOuter: *s_IUnknown, smexflags: ulong, ppUnkInner: **s_IUnknown) -> long
export import def #extern #dllimport CoIsHandlerConnected(pUnk: *s_IUnknown) -> int
export import def #extern #dllimport CoMarshalInterThreadInterfaceInStream(riid: *GUID, pUnk: *s_IUnknown, ppStm: **s_IStream) -> long
export import def #extern #dllimport CoGetInterfaceAndReleaseStream(pStm: *s_IStream, iid: *GUID, ppv: **) -> long
export import def #extern #dllimport CoCreateFreeThreadedMarshaler(punkOuter: *s_IUnknown, ppunkMarshal: **s_IUnknown) -> long
export import def #extern #dllimport CoFreeUnusedLibraries()
export import def #extern #dllimport CoFreeUnusedLibrariesEx(dwUnloadDelay: ulong, dwReserved: ulong)
export import def #extern #dllimport CoDisconnectContext(dwTimeout: ulong) -> long
export import def #extern #dllimport CoInitializeSecurity(pSecDesc: *, cAuthSvc: long, asAuthSvc: *SOLE_AUTHENTICATION_SERVICE, pReserved1: *, dwAuthnLevel: ulong, dwImpLevel: ulong, pAuthList: *, dwCapabilities: ulong, pReserved3: *) -> long
export import def #extern #dllimport CoGetCallContext(riid: *GUID, ppInterface: **) -> long
export import def #extern #dllimport CoQueryProxyBlanket(pProxy: *s_IUnknown, pwAuthnSvc: *ulong, pAuthzSvc: *ulong, pServerPrincName: **ushort, pAuthnLevel: *ulong, pImpLevel: *ulong, pAuthInfo: **, pCapabilites: *ulong) -> long
export import def #extern #dllimport CoSetProxyBlanket(pProxy: *s_IUnknown, dwAuthnSvc: ulong, dwAuthzSvc: ulong, pServerPrincName: *ushort, dwAuthnLevel: ulong, dwImpLevel: ulong, pAuthInfo: *, dwCapabilities: ulong) -> long
export import def #extern #dllimport CoCopyProxy(pProxy: *s_IUnknown, ppCopy: **s_IUnknown) -> long
export import def #extern #dllimport CoQueryClientBlanket(pAuthnSvc: *ulong, pAuthzSvc: *ulong, pServerPrincName: **ushort, pAuthnLevel: *ulong, pImpLevel: *ulong, pPrivs: **, pCapabilities: *ulong) -> long
export import def #extern #dllimport CoImpersonateClient() -> long
export import def #extern #dllimport CoRevertToSelf() -> long
export import def #extern #dllimport CoQueryAuthenticationServices(pcAuthSvc: *ulong, asAuthSvc: **SOLE_AUTHENTICATION_SERVICE) -> long
export import def #extern #dllimport CoSwitchCallContext(pNewObject: *s_IUnknown, ppOldObject: **s_IUnknown) -> long
export import def #extern #dllimport CoCreateInstance(rclsid: *GUID, pUnkOuter: *s_IUnknown, dwClsContext: ulong, riid: *GUID, ppv: **) -> long
export import def #extern #dllimport CoCreateInstanceEx(Clsid: *GUID, punkOuter: *s_IUnknown, dwClsCtx: ulong, pServerInfo: *COSERVERINFO, dwCount: ulong, pResults: *MULTI_QI) -> long
export import def #extern #dllimport CoCreateInstanceFromApp(Clsid: *GUID, punkOuter: *s_IUnknown, dwClsCtx: ulong, reserved: *, dwCount: ulong, pResults: *MULTI_QI) -> long
export import def #extern #dllimport CoRegisterActivationFilter(pActivationFilter: *s_IActivationFilter) -> long
export import def #extern #dllimport CoGetCancelObject(dwThreadId: ulong, iid: *GUID, ppUnk: **) -> long
export import def #extern #dllimport CoSetCancelObject(pUnk: *s_IUnknown) -> long
export import def #extern #dllimport CoCancelCall(dwThreadId: ulong, ulTimeout: ulong) -> long
export import def #extern #dllimport CoTestCancel() -> long
export import def #extern #dllimport CoEnableCallCancellation(pReserved: *) -> long
export import def #extern #dllimport CoDisableCallCancellation(pReserved: *) -> long
export import def #extern #dllimport StringFromCLSID(rclsid: *GUID, lplpsz: **ushort) -> long
export import def #extern #dllimport CLSIDFromString(lpsz: *ushort, pclsid: *GUID) -> long
export import def #extern #dllimport StringFromIID(rclsid: *GUID, lplpsz: **ushort) -> long
export import def #extern #dllimport IIDFromString(lpsz: *ushort, lpiid: *GUID) -> long
export import def #extern #dllimport ProgIDFromCLSID(clsid: *GUID, lplpszProgID: **ushort) -> long
export import def #extern #dllimport CLSIDFromProgID(lpszProgID: *ushort, lpclsid: *GUID) -> long
export import def #extern #dllimport StringFromGUID2(rguid: *GUID, lpsz: *ushort, cchMax: int) -> int
export import def #extern #dllimport CoCreateGuid(pguid: *GUID) -> long
export import def #extern #dllimport PropVariantCopy(pvarDest: *s_tagPROPVARIANT, pvarSrc: *s_tagPROPVARIANT) -> long
export import def #extern #dllimport PropVariantClear(pvar: *s_tagPROPVARIANT) -> long
export import def #extern #dllimport FreePropVariantArray(cVariants: ulong, rgvars: *s_tagPROPVARIANT) -> long
export import def #extern #dllimport CoWaitForMultipleHandles(dwFlags: ulong, dwTimeout: ulong, cHandles: ulong, pHandles: **, lpdwindex: *ulong) -> long
export import def #extern #dllimport CoWaitForMultipleObjects(dwFlags: ulong, dwTimeout: ulong, cHandles: ulong, pHandles: **, lpdwindex: *ulong) -> long
export import def #extern #dllimport CoGetTreatAsClass(clsidOld: *GUID, pClsidNew: *GUID) -> long
export import def #extern #dllimport CoInvalidateRemoteMachineBindings(pszMachineName: *ushort) -> long
export import def #extern #dllimport RoGetAgileReference(options: e_AgileReferenceOptions, riid: *GUID, pUnk: *s_IUnknown, ppAgileReference: **s_IAgileReference) -> long
export import def #extern DllGetClassObject(rclsid: *GUID, riid: *GUID, ppv: **) -> long
export import def #extern DllCanUnloadNow() -> long
export import def #extern #dllimport CoTaskMemAlloc(cb: uint64) -> *
export import def #extern #dllimport CoTaskMemRealloc(pv: *, cb: uint64) -> *
export import def #extern #dllimport CoTaskMemFree(pv: *)
export import def #extern #dllimport CoFileTimeNow(lpFileTime: *FILETIME) -> long
export import def #extern #dllimport CLSIDFromProgIDEx(lpszProgID: *ushort, lpclsid: *GUID) -> long
export import def #extern #dllimport CoRegisterDeviceCatalog(deviceInstanceId: *ushort, cookie: **s_CO_DEVICE_CATALOG_COOKIE__) -> long
export import def #extern #dllimport CoRevokeDeviceCatalog(cookie: *s_CO_DEVICE_CATALOG_COOKIE__) -> long
export import def #extern IBindCtx_RemoteSetBindOptions_Proxy(This: *s_IBindCtx, pbindopts: *BIND_OPTS2) -> long
export import def #extern IBindCtx_RemoteSetBindOptions_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IBindCtx_RemoteGetBindOptions_Proxy(This: *s_IBindCtx, pbindopts: *BIND_OPTS2) -> long
export import def #extern IBindCtx_RemoteGetBindOptions_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IEnumMoniker_RemoteNext_Proxy(This: *s_IEnumMoniker, celt: ulong, rgelt: **s_IMoniker, pceltFetched: *ulong) -> long
export import def #extern IEnumMoniker_RemoteNext_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IRunnableObject_RemoteIsRunning_Proxy(This: *s_IRunnableObject) -> long
export import def #extern IRunnableObject_RemoteIsRunning_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IMoniker_RemoteBindToObject_Proxy(This: *s_IMoniker, pbc: *s_IBindCtx, pmkToLeft: *s_IMoniker, riidResult: *GUID, ppvResult: **s_IUnknown) -> long
export import def #extern IMoniker_RemoteBindToObject_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IMoniker_RemoteBindToStorage_Proxy(This: *s_IMoniker, pbc: *s_IBindCtx, pmkToLeft: *s_IMoniker, riid: *GUID, ppvObj: **s_IUnknown) -> long
export import def #extern IMoniker_RemoteBindToStorage_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IEnumSTATSTG_RemoteNext_Proxy(This: *s_IEnumSTATSTG, celt: ulong, rgelt: *STATSTG, pceltFetched: *ulong) -> long
export import def #extern IEnumSTATSTG_RemoteNext_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IStorage_RemoteOpenStream_Proxy(This: *s_IStorage, pwcsName: *ushort, cbReserved1: ulong, reserved1: *char, grfMode: ulong, reserved2: ulong, ppstm: **s_IStream) -> long
export import def #extern IStorage_RemoteOpenStream_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IStorage_RemoteCopyTo_Proxy(This: *s_IStorage, ciidExclude: ulong, rgiidExclude: *GUID, snbExclude: **ushort, pstgDest: *s_IStorage) -> long
export import def #extern IStorage_RemoteCopyTo_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IStorage_RemoteEnumElements_Proxy(This: *s_IStorage, reserved1: ulong, cbReserved2: ulong, reserved2: *char, reserved3: ulong, ppenum: **s_IEnumSTATSTG) -> long
export import def #extern IStorage_RemoteEnumElements_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ILockBytes_RemoteReadAt_Proxy(This: *s_ILockBytes, ulOffset: ULARGE_INTEGER, pv: *char, cb: ulong, pcbRead: *ulong) -> long
export import def #extern ILockBytes_RemoteReadAt_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ILockBytes_RemoteWriteAt_Proxy(This: *s_ILockBytes, ulOffset: ULARGE_INTEGER, pv: *char, cb: ulong, pcbWritten: *ulong) -> long
export import def #extern ILockBytes_RemoteWriteAt_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IEnumFORMATETC_RemoteNext_Proxy(This: *s_IEnumFORMATETC, celt: ulong, rgelt: *FORMATETC, pceltFetched: *ulong) -> long
export import def #extern IEnumFORMATETC_RemoteNext_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IEnumSTATDATA_RemoteNext_Proxy(This: *s_IEnumSTATDATA, celt: ulong, rgelt: *STATDATA, pceltFetched: *ulong) -> long
export import def #extern IEnumSTATDATA_RemoteNext_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IAdviseSink_RemoteOnDataChange_Proxy(This: *s_IAdviseSink, pFormatetc: *FORMATETC, pStgmed: *uSTGMEDIUM) -> long
export import def #extern IAdviseSink_RemoteOnDataChange_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IAdviseSink_RemoteOnViewChange_Proxy(This: *s_IAdviseSink, dwAspect: ulong, lindex: long) -> long
export import def #extern IAdviseSink_RemoteOnViewChange_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IAdviseSink_RemoteOnRename_Proxy(This: *s_IAdviseSink, pmk: *s_IMoniker) -> long
export import def #extern IAdviseSink_RemoteOnRename_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IAdviseSink_RemoteOnSave_Proxy(This: *s_IAdviseSink) -> long
export import def #extern IAdviseSink_RemoteOnSave_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IAdviseSink_RemoteOnClose_Proxy(This: *s_IAdviseSink) -> long
export import def #extern IAdviseSink_RemoteOnClose_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy(This: *s_AsyncIAdviseSink, pFormatetc: *FORMATETC, pStgmed: *uSTGMEDIUM) -> long
export import def #extern AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy(This: *s_AsyncIAdviseSink) -> long
export import def #extern AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy(This: *s_AsyncIAdviseSink, dwAspect: ulong, lindex: long) -> long
export import def #extern AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy(This: *s_AsyncIAdviseSink) -> long
export import def #extern AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern AsyncIAdviseSink_Begin_RemoteOnRename_Proxy(This: *s_AsyncIAdviseSink, pmk: *s_IMoniker) -> long
export import def #extern AsyncIAdviseSink_Begin_RemoteOnRename_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern AsyncIAdviseSink_Finish_RemoteOnRename_Proxy(This: *s_AsyncIAdviseSink) -> long
export import def #extern AsyncIAdviseSink_Finish_RemoteOnRename_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern AsyncIAdviseSink_Begin_RemoteOnSave_Proxy(This: *s_AsyncIAdviseSink) -> long
export import def #extern AsyncIAdviseSink_Begin_RemoteOnSave_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern AsyncIAdviseSink_Finish_RemoteOnSave_Proxy(This: *s_AsyncIAdviseSink) -> long
export import def #extern AsyncIAdviseSink_Finish_RemoteOnSave_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern AsyncIAdviseSink_Begin_RemoteOnClose_Proxy(This: *s_AsyncIAdviseSink) -> long
export import def #extern AsyncIAdviseSink_Begin_RemoteOnClose_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern AsyncIAdviseSink_Finish_RemoteOnClose_Proxy(This: *s_AsyncIAdviseSink) -> long
export import def #extern AsyncIAdviseSink_Finish_RemoteOnClose_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IAdviseSink2_RemoteOnLinkSrcChange_Proxy(This: *s_IAdviseSink2, pmk: *s_IMoniker) -> long
export import def #extern IAdviseSink2_RemoteOnLinkSrcChange_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy(This: *s_AsyncIAdviseSink2, pmk: *s_IMoniker) -> long
export import def #extern AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy(This: *s_AsyncIAdviseSink2) -> long
export import def #extern AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IDataObject_RemoteGetData_Proxy(This: *s_IDataObject, pformatetcIn: *FORMATETC, pRemoteMedium: *uSTGMEDIUM) -> long
export import def #extern IDataObject_RemoteGetData_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IDataObject_RemoteGetDataHere_Proxy(This: *s_IDataObject, pformatetc: *FORMATETC, pRemoteMedium: *uSTGMEDIUM) -> long
export import def #extern IDataObject_RemoteGetDataHere_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IDataObject_RemoteSetData_Proxy(This: *s_IDataObject, pformatetc: *FORMATETC, pmedium: *FLAG_STGMEDIUM, fRelease: int) -> long
export import def #extern IDataObject_RemoteSetData_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IFillLockBytes_RemoteFillAppend_Proxy(This: *s_IFillLockBytes, pv: *char, cb: ulong, pcbWritten: *ulong) -> long
export import def #extern IFillLockBytes_RemoteFillAppend_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IFillLockBytes_RemoteFillAt_Proxy(This: *s_IFillLockBytes, ulOffset: ULARGE_INTEGER, pv: *char, cb: ulong, pcbWritten: *ulong) -> long
export import def #extern IFillLockBytes_RemoteFillAt_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ASYNC_STGMEDIUM_UserSize(_0: *ulong, _1: ulong, _2: *uSTGMEDIUM) -> ulong
export import def #extern ASYNC_STGMEDIUM_UserMarshal(_0: *ulong, _1: *char, _2: *uSTGMEDIUM) -> *char
export import def #extern ASYNC_STGMEDIUM_UserUnmarshal(_0: *ulong, _1: *char, _2: *uSTGMEDIUM) -> *char
export import def #extern ASYNC_STGMEDIUM_UserFree(_0: *ulong, _1: *uSTGMEDIUM)
export import def #extern CLIPFORMAT_UserSize(_0: *ulong, _1: ulong, _2: *ushort) -> ulong
export import def #extern CLIPFORMAT_UserMarshal(_0: *ulong, _1: *char, _2: *ushort) -> *char
export import def #extern CLIPFORMAT_UserUnmarshal(_0: *ulong, _1: *char, _2: *ushort) -> *char
export import def #extern CLIPFORMAT_UserFree(_0: *ulong, _1: *ushort)
export import def #extern FLAG_STGMEDIUM_UserSize(_0: *ulong, _1: ulong, _2: *FLAG_STGMEDIUM) -> ulong
export import def #extern FLAG_STGMEDIUM_UserMarshal(_0: *ulong, _1: *char, _2: *FLAG_STGMEDIUM) -> *char
export import def #extern FLAG_STGMEDIUM_UserUnmarshal(_0: *ulong, _1: *char, _2: *FLAG_STGMEDIUM) -> *char
export import def #extern FLAG_STGMEDIUM_UserFree(_0: *ulong, _1: *FLAG_STGMEDIUM)
export import def #extern HBITMAP_UserSize(_0: *ulong, _1: ulong, _2: **s_HBITMAP__) -> ulong
export import def #extern HBITMAP_UserMarshal(_0: *ulong, _1: *char, _2: **s_HBITMAP__) -> *char
export import def #extern HBITMAP_UserUnmarshal(_0: *ulong, _1: *char, _2: **s_HBITMAP__) -> *char
export import def #extern HBITMAP_UserFree(_0: *ulong, _1: **s_HBITMAP__)
export import def #extern HDC_UserSize(_0: *ulong, _1: ulong, _2: **s_HDC__) -> ulong
export import def #extern HDC_UserMarshal(_0: *ulong, _1: *char, _2: **s_HDC__) -> *char
export import def #extern HDC_UserUnmarshal(_0: *ulong, _1: *char, _2: **s_HDC__) -> *char
export import def #extern HDC_UserFree(_0: *ulong, _1: **s_HDC__)
export import def #extern HICON_UserSize(_0: *ulong, _1: ulong, _2: **s_HICON__) -> ulong
export import def #extern HICON_UserMarshal(_0: *ulong, _1: *char, _2: **s_HICON__) -> *char
export import def #extern HICON_UserUnmarshal(_0: *ulong, _1: *char, _2: **s_HICON__) -> *char
export import def #extern HICON_UserFree(_0: *ulong, _1: **s_HICON__)
export import def #extern SNB_UserSize(_0: *ulong, _1: ulong, _2: ***ushort) -> ulong
export import def #extern SNB_UserMarshal(_0: *ulong, _1: *char, _2: ***ushort) -> *char
export import def #extern SNB_UserUnmarshal(_0: *ulong, _1: *char, _2: ***ushort) -> *char
export import def #extern SNB_UserFree(_0: *ulong, _1: ***ushort)
export import def #extern STGMEDIUM_UserSize(_0: *ulong, _1: ulong, _2: *uSTGMEDIUM) -> ulong
export import def #extern STGMEDIUM_UserMarshal(_0: *ulong, _1: *char, _2: *uSTGMEDIUM) -> *char
export import def #extern STGMEDIUM_UserUnmarshal(_0: *ulong, _1: *char, _2: *uSTGMEDIUM) -> *char
export import def #extern STGMEDIUM_UserFree(_0: *ulong, _1: *uSTGMEDIUM)
export import def #extern ASYNC_STGMEDIUM_UserSize64(_0: *ulong, _1: ulong, _2: *uSTGMEDIUM) -> ulong
export import def #extern ASYNC_STGMEDIUM_UserMarshal64(_0: *ulong, _1: *char, _2: *uSTGMEDIUM) -> *char
export import def #extern ASYNC_STGMEDIUM_UserUnmarshal64(_0: *ulong, _1: *char, _2: *uSTGMEDIUM) -> *char
export import def #extern ASYNC_STGMEDIUM_UserFree64(_0: *ulong, _1: *uSTGMEDIUM)
export import def #extern CLIPFORMAT_UserSize64(_0: *ulong, _1: ulong, _2: *ushort) -> ulong
export import def #extern CLIPFORMAT_UserMarshal64(_0: *ulong, _1: *char, _2: *ushort) -> *char
export import def #extern CLIPFORMAT_UserUnmarshal64(_0: *ulong, _1: *char, _2: *ushort) -> *char
export import def #extern CLIPFORMAT_UserFree64(_0: *ulong, _1: *ushort)
export import def #extern FLAG_STGMEDIUM_UserSize64(_0: *ulong, _1: ulong, _2: *FLAG_STGMEDIUM) -> ulong
export import def #extern FLAG_STGMEDIUM_UserMarshal64(_0: *ulong, _1: *char, _2: *FLAG_STGMEDIUM) -> *char
export import def #extern FLAG_STGMEDIUM_UserUnmarshal64(_0: *ulong, _1: *char, _2: *FLAG_STGMEDIUM) -> *char
export import def #extern FLAG_STGMEDIUM_UserFree64(_0: *ulong, _1: *FLAG_STGMEDIUM)
export import def #extern HBITMAP_UserSize64(_0: *ulong, _1: ulong, _2: **s_HBITMAP__) -> ulong
export import def #extern HBITMAP_UserMarshal64(_0: *ulong, _1: *char, _2: **s_HBITMAP__) -> *char
export import def #extern HBITMAP_UserUnmarshal64(_0: *ulong, _1: *char, _2: **s_HBITMAP__) -> *char
export import def #extern HBITMAP_UserFree64(_0: *ulong, _1: **s_HBITMAP__)
export import def #extern HDC_UserSize64(_0: *ulong, _1: ulong, _2: **s_HDC__) -> ulong
export import def #extern HDC_UserMarshal64(_0: *ulong, _1: *char, _2: **s_HDC__) -> *char
export import def #extern HDC_UserUnmarshal64(_0: *ulong, _1: *char, _2: **s_HDC__) -> *char
export import def #extern HDC_UserFree64(_0: *ulong, _1: **s_HDC__)
export import def #extern HICON_UserSize64(_0: *ulong, _1: ulong, _2: **s_HICON__) -> ulong
export import def #extern HICON_UserMarshal64(_0: *ulong, _1: *char, _2: **s_HICON__) -> *char
export import def #extern HICON_UserUnmarshal64(_0: *ulong, _1: *char, _2: **s_HICON__) -> *char
export import def #extern HICON_UserFree64(_0: *ulong, _1: **s_HICON__)
export import def #extern SNB_UserSize64(_0: *ulong, _1: ulong, _2: ***ushort) -> ulong
export import def #extern SNB_UserMarshal64(_0: *ulong, _1: *char, _2: ***ushort) -> *char
export import def #extern SNB_UserUnmarshal64(_0: *ulong, _1: *char, _2: ***ushort) -> *char
export import def #extern SNB_UserFree64(_0: *ulong, _1: ***ushort)
export import def #extern STGMEDIUM_UserSize64(_0: *ulong, _1: ulong, _2: *uSTGMEDIUM) -> ulong
export import def #extern STGMEDIUM_UserMarshal64(_0: *ulong, _1: *char, _2: *uSTGMEDIUM) -> *char
export import def #extern STGMEDIUM_UserUnmarshal64(_0: *ulong, _1: *char, _2: *uSTGMEDIUM) -> *char
export import def #extern STGMEDIUM_UserFree64(_0: *ulong, _1: *uSTGMEDIUM)
export import def #extern IBindCtx_SetBindOptions_Proxy(This: *s_IBindCtx, pbindopts: *BIND_OPTS) -> long
export import def #extern IBindCtx_SetBindOptions_Stub(This: *s_IBindCtx, pbindopts: *BIND_OPTS2) -> long
export import def #extern IBindCtx_GetBindOptions_Proxy(This: *s_IBindCtx, pbindopts: *BIND_OPTS) -> long
export import def #extern IBindCtx_GetBindOptions_Stub(This: *s_IBindCtx, pbindopts: *BIND_OPTS2) -> long
export import def #extern IEnumMoniker_Next_Proxy(This: *s_IEnumMoniker, celt: ulong, rgelt: **s_IMoniker, pceltFetched: *ulong) -> long
export import def #extern IEnumMoniker_Next_Stub(This: *s_IEnumMoniker, celt: ulong, rgelt: **s_IMoniker, pceltFetched: *ulong) -> long
export import def #extern IRunnableObject_IsRunning_Proxy(This: *s_IRunnableObject) -> int
export import def #extern IRunnableObject_IsRunning_Stub(This: *s_IRunnableObject) -> long
export import def #extern IMoniker_BindToObject_Proxy(This: *s_IMoniker, pbc: *s_IBindCtx, pmkToLeft: *s_IMoniker, riidResult: *GUID, ppvResult: **) -> long
export import def #extern IMoniker_BindToObject_Stub(This: *s_IMoniker, pbc: *s_IBindCtx, pmkToLeft: *s_IMoniker, riidResult: *GUID, ppvResult: **s_IUnknown) -> long
export import def #extern IMoniker_BindToStorage_Proxy(This: *s_IMoniker, pbc: *s_IBindCtx, pmkToLeft: *s_IMoniker, riid: *GUID, ppvObj: **) -> long
export import def #extern IMoniker_BindToStorage_Stub(This: *s_IMoniker, pbc: *s_IBindCtx, pmkToLeft: *s_IMoniker, riid: *GUID, ppvObj: **s_IUnknown) -> long
export import def #extern IEnumSTATSTG_Next_Proxy(This: *s_IEnumSTATSTG, celt: ulong, rgelt: *STATSTG, pceltFetched: *ulong) -> long
export import def #extern IEnumSTATSTG_Next_Stub(This: *s_IEnumSTATSTG, celt: ulong, rgelt: *STATSTG, pceltFetched: *ulong) -> long
export import def #extern IStorage_OpenStream_Proxy(This: *s_IStorage, pwcsName: *ushort, reserved1: *, grfMode: ulong, reserved2: ulong, ppstm: **s_IStream) -> long
export import def #extern IStorage_OpenStream_Stub(This: *s_IStorage, pwcsName: *ushort, cbReserved1: ulong, reserved1: *char, grfMode: ulong, reserved2: ulong, ppstm: **s_IStream) -> long
export import def #extern IStorage_CopyTo_Proxy(This: *s_IStorage, ciidExclude: ulong, rgiidExclude: *GUID, snbExclude: **ushort, pstgDest: *s_IStorage) -> long
export import def #extern IStorage_CopyTo_Stub(This: *s_IStorage, ciidExclude: ulong, rgiidExclude: *GUID, snbExclude: **ushort, pstgDest: *s_IStorage) -> long
export import def #extern IStorage_EnumElements_Proxy(This: *s_IStorage, reserved1: ulong, reserved2: *, reserved3: ulong, ppenum: **s_IEnumSTATSTG) -> long
export import def #extern IStorage_EnumElements_Stub(This: *s_IStorage, reserved1: ulong, cbReserved2: ulong, reserved2: *char, reserved3: ulong, ppenum: **s_IEnumSTATSTG) -> long
export import def #extern ILockBytes_ReadAt_Proxy(This: *s_ILockBytes, ulOffset: ULARGE_INTEGER, pv: *, cb: ulong, pcbRead: *ulong) -> long
export import def #extern ILockBytes_ReadAt_Stub(This: *s_ILockBytes, ulOffset: ULARGE_INTEGER, pv: *char, cb: ulong, pcbRead: *ulong) -> long
export import def #extern ILockBytes_WriteAt_Proxy(This: *s_ILockBytes, ulOffset: ULARGE_INTEGER, pv: *, cb: ulong, pcbWritten: *ulong) -> long
export import def #extern ILockBytes_WriteAt_Stub(This: *s_ILockBytes, ulOffset: ULARGE_INTEGER, pv: *char, cb: ulong, pcbWritten: *ulong) -> long
export import def #extern IEnumFORMATETC_Next_Proxy(This: *s_IEnumFORMATETC, celt: ulong, rgelt: *FORMATETC, pceltFetched: *ulong) -> long
export import def #extern IEnumFORMATETC_Next_Stub(This: *s_IEnumFORMATETC, celt: ulong, rgelt: *FORMATETC, pceltFetched: *ulong) -> long
export import def #extern IEnumSTATDATA_Next_Proxy(This: *s_IEnumSTATDATA, celt: ulong, rgelt: *STATDATA, pceltFetched: *ulong) -> long
export import def #extern IEnumSTATDATA_Next_Stub(This: *s_IEnumSTATDATA, celt: ulong, rgelt: *STATDATA, pceltFetched: *ulong) -> long
export import def #extern IAdviseSink_OnDataChange_Proxy(This: *s_IAdviseSink, pFormatetc: *FORMATETC, pStgmed: *uSTGMEDIUM)
export import def #extern IAdviseSink_OnDataChange_Stub(This: *s_IAdviseSink, pFormatetc: *FORMATETC, pStgmed: *uSTGMEDIUM) -> long
export import def #extern IAdviseSink_OnViewChange_Proxy(This: *s_IAdviseSink, dwAspect: ulong, lindex: long)
export import def #extern IAdviseSink_OnViewChange_Stub(This: *s_IAdviseSink, dwAspect: ulong, lindex: long) -> long
export import def #extern IAdviseSink_OnRename_Proxy(This: *s_IAdviseSink, pmk: *s_IMoniker)
export import def #extern IAdviseSink_OnRename_Stub(This: *s_IAdviseSink, pmk: *s_IMoniker) -> long
export import def #extern IAdviseSink_OnSave_Proxy(This: *s_IAdviseSink)
export import def #extern IAdviseSink_OnSave_Stub(This: *s_IAdviseSink) -> long
export import def #extern IAdviseSink_OnClose_Proxy(This: *s_IAdviseSink)
export import def #extern IAdviseSink_OnClose_Stub(This: *s_IAdviseSink) -> long
export import def #extern AsyncIAdviseSink_Begin_OnDataChange_Proxy(This: *s_AsyncIAdviseSink, pFormatetc: *FORMATETC, pStgmed: *uSTGMEDIUM)
export import def #extern AsyncIAdviseSink_Begin_OnDataChange_Stub(This: *s_AsyncIAdviseSink, pFormatetc: *FORMATETC, pStgmed: *uSTGMEDIUM) -> long
export import def #extern AsyncIAdviseSink_Finish_OnDataChange_Proxy(This: *s_AsyncIAdviseSink)
export import def #extern AsyncIAdviseSink_Finish_OnDataChange_Stub(This: *s_AsyncIAdviseSink) -> long
export import def #extern AsyncIAdviseSink_Begin_OnViewChange_Proxy(This: *s_AsyncIAdviseSink, dwAspect: ulong, lindex: long)
export import def #extern AsyncIAdviseSink_Begin_OnViewChange_Stub(This: *s_AsyncIAdviseSink, dwAspect: ulong, lindex: long) -> long
export import def #extern AsyncIAdviseSink_Finish_OnViewChange_Proxy(This: *s_AsyncIAdviseSink)
export import def #extern AsyncIAdviseSink_Finish_OnViewChange_Stub(This: *s_AsyncIAdviseSink) -> long
export import def #extern AsyncIAdviseSink_Begin_OnRename_Proxy(This: *s_AsyncIAdviseSink, pmk: *s_IMoniker)
export import def #extern AsyncIAdviseSink_Begin_OnRename_Stub(This: *s_AsyncIAdviseSink, pmk: *s_IMoniker) -> long
export import def #extern AsyncIAdviseSink_Finish_OnRename_Proxy(This: *s_AsyncIAdviseSink)
export import def #extern AsyncIAdviseSink_Finish_OnRename_Stub(This: *s_AsyncIAdviseSink) -> long
export import def #extern AsyncIAdviseSink_Begin_OnSave_Proxy(This: *s_AsyncIAdviseSink)
export import def #extern AsyncIAdviseSink_Begin_OnSave_Stub(This: *s_AsyncIAdviseSink) -> long
export import def #extern AsyncIAdviseSink_Finish_OnSave_Proxy(This: *s_AsyncIAdviseSink)
export import def #extern AsyncIAdviseSink_Finish_OnSave_Stub(This: *s_AsyncIAdviseSink) -> long
export import def #extern AsyncIAdviseSink_Begin_OnClose_Proxy(This: *s_AsyncIAdviseSink)
export import def #extern AsyncIAdviseSink_Begin_OnClose_Stub(This: *s_AsyncIAdviseSink) -> long
export import def #extern AsyncIAdviseSink_Finish_OnClose_Proxy(This: *s_AsyncIAdviseSink)
export import def #extern AsyncIAdviseSink_Finish_OnClose_Stub(This: *s_AsyncIAdviseSink) -> long
export import def #extern IAdviseSink2_OnLinkSrcChange_Proxy(This: *s_IAdviseSink2, pmk: *s_IMoniker)
export import def #extern IAdviseSink2_OnLinkSrcChange_Stub(This: *s_IAdviseSink2, pmk: *s_IMoniker) -> long
export import def #extern AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy(This: *s_AsyncIAdviseSink2, pmk: *s_IMoniker)
export import def #extern AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub(This: *s_AsyncIAdviseSink2, pmk: *s_IMoniker) -> long
export import def #extern AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy(This: *s_AsyncIAdviseSink2)
export import def #extern AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub(This: *s_AsyncIAdviseSink2) -> long
export import def #extern IDataObject_GetData_Proxy(This: *s_IDataObject, pformatetcIn: *FORMATETC, pmedium: *uSTGMEDIUM) -> long
export import def #extern IDataObject_GetData_Stub(This: *s_IDataObject, pformatetcIn: *FORMATETC, pRemoteMedium: *uSTGMEDIUM) -> long
export import def #extern IDataObject_GetDataHere_Proxy(This: *s_IDataObject, pformatetc: *FORMATETC, pmedium: *uSTGMEDIUM) -> long
export import def #extern IDataObject_GetDataHere_Stub(This: *s_IDataObject, pformatetc: *FORMATETC, pRemoteMedium: *uSTGMEDIUM) -> long
export import def #extern IDataObject_SetData_Proxy(This: *s_IDataObject, pformatetc: *FORMATETC, pmedium: *uSTGMEDIUM, fRelease: int) -> long
export import def #extern IDataObject_SetData_Stub(This: *s_IDataObject, pformatetc: *FORMATETC, pmedium: *FLAG_STGMEDIUM, fRelease: int) -> long
export import def #extern IFillLockBytes_FillAppend_Proxy(This: *s_IFillLockBytes, pv: *, cb: ulong, pcbWritten: *ulong) -> long
export import def #extern IFillLockBytes_FillAppend_Stub(This: *s_IFillLockBytes, pv: *char, cb: ulong, pcbWritten: *ulong) -> long
export import def #extern IFillLockBytes_FillAt_Proxy(This: *s_IFillLockBytes, ulOffset: ULARGE_INTEGER, pv: *, cb: ulong, pcbWritten: *ulong) -> long
export import def #extern IFillLockBytes_FillAt_Stub(This: *s_IFillLockBytes, ulOffset: ULARGE_INTEGER, pv: *char, cb: ulong, pcbWritten: *ulong) -> long
export import def #extern IDispatch_RemoteInvoke_Proxy(This: *s_IDispatch, dispIdMember: long, riid: *GUID, lcid: ulong, dwFlags: ulong, pDispParams: *DISPPARAMS, pVarResult: *s_tagVARIANT, pExcepInfo: *EXCEPINFO, pArgErr: *uint, cVarRef: uint, rgVarRefIdx: *uint, rgVarRef: *s_tagVARIANT) -> long
export import def #extern IDispatch_RemoteInvoke_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IEnumVARIANT_RemoteNext_Proxy(This: *s_IEnumVARIANT, celt: ulong, rgVar: *s_tagVARIANT, pCeltFetched: *ulong) -> long
export import def #extern IEnumVARIANT_RemoteNext_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeComp_RemoteBind_Proxy(This: *s_ITypeComp, szName: *ushort, lHashVal: ulong, wFlags: ushort, ppTInfo: **s_ITypeInfo, pDescKind: *DESCKIND, ppFuncDesc: **FUNCDESC, ppVarDesc: **VARDESC, ppTypeComp: **s_ITypeComp, pDummy: *CLEANLOCALSTORAGE) -> long
export import def #extern ITypeComp_RemoteBind_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeComp_RemoteBindType_Proxy(This: *s_ITypeComp, szName: *ushort, lHashVal: ulong, ppTInfo: **s_ITypeInfo) -> long
export import def #extern ITypeComp_RemoteBindType_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeInfo_RemoteGetTypeAttr_Proxy(This: *s_ITypeInfo, ppTypeAttr: **TYPEATTR, pDummy: *CLEANLOCALSTORAGE) -> long
export import def #extern ITypeInfo_RemoteGetTypeAttr_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeInfo_RemoteGetFuncDesc_Proxy(This: *s_ITypeInfo, index: uint, ppFuncDesc: **FUNCDESC, pDummy: *CLEANLOCALSTORAGE) -> long
export import def #extern ITypeInfo_RemoteGetFuncDesc_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeInfo_RemoteGetVarDesc_Proxy(This: *s_ITypeInfo, index: uint, ppVarDesc: **VARDESC, pDummy: *CLEANLOCALSTORAGE) -> long
export import def #extern ITypeInfo_RemoteGetVarDesc_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeInfo_RemoteGetNames_Proxy(This: *s_ITypeInfo, memid: long, rgBstrNames: **ushort, cMaxNames: uint, pcNames: *uint) -> long
export import def #extern ITypeInfo_RemoteGetNames_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeInfo_LocalGetIDsOfNames_Proxy(This: *s_ITypeInfo) -> long
export import def #extern ITypeInfo_LocalGetIDsOfNames_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeInfo_LocalInvoke_Proxy(This: *s_ITypeInfo) -> long
export import def #extern ITypeInfo_LocalInvoke_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeInfo_RemoteGetDocumentation_Proxy(This: *s_ITypeInfo, memid: long, refPtrFlags: ulong, pBstrName: **ushort, pBstrDocString: **ushort, pdwHelpContext: *ulong, pBstrHelpFile: **ushort) -> long
export import def #extern ITypeInfo_RemoteGetDocumentation_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeInfo_RemoteGetDllEntry_Proxy(This: *s_ITypeInfo, memid: long, invKind: INVOKEKIND, refPtrFlags: ulong, pBstrDllName: **ushort, pBstrName: **ushort, pwOrdinal: *ushort) -> long
export import def #extern ITypeInfo_RemoteGetDllEntry_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeInfo_LocalAddressOfMember_Proxy(This: *s_ITypeInfo) -> long
export import def #extern ITypeInfo_LocalAddressOfMember_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeInfo_RemoteCreateInstance_Proxy(This: *s_ITypeInfo, riid: *GUID, ppvObj: **s_IUnknown) -> long
export import def #extern ITypeInfo_RemoteCreateInstance_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeInfo_RemoteGetContainingTypeLib_Proxy(This: *s_ITypeInfo, ppTLib: **s_ITypeLib, pIndex: *uint) -> long
export import def #extern ITypeInfo_RemoteGetContainingTypeLib_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeInfo_LocalReleaseTypeAttr_Proxy(This: *s_ITypeInfo) -> long
export import def #extern ITypeInfo_LocalReleaseTypeAttr_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeInfo_LocalReleaseFuncDesc_Proxy(This: *s_ITypeInfo) -> long
export import def #extern ITypeInfo_LocalReleaseFuncDesc_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeInfo_LocalReleaseVarDesc_Proxy(This: *s_ITypeInfo) -> long
export import def #extern ITypeInfo_LocalReleaseVarDesc_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeInfo2_RemoteGetDocumentation2_Proxy(This: *s_ITypeInfo2, memid: long, lcid: ulong, refPtrFlags: ulong, pbstrHelpString: **ushort, pdwHelpStringContext: *ulong, pbstrHelpStringDll: **ushort) -> long
export import def #extern ITypeInfo2_RemoteGetDocumentation2_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeLib_RemoteGetTypeInfoCount_Proxy(This: *s_ITypeLib, pcTInfo: *uint) -> long
export import def #extern ITypeLib_RemoteGetTypeInfoCount_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeLib_RemoteGetLibAttr_Proxy(This: *s_ITypeLib, ppTLibAttr: **TLIBATTR, pDummy: *CLEANLOCALSTORAGE) -> long
export import def #extern ITypeLib_RemoteGetLibAttr_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeLib_RemoteGetDocumentation_Proxy(This: *s_ITypeLib, index: int, refPtrFlags: ulong, pBstrName: **ushort, pBstrDocString: **ushort, pdwHelpContext: *ulong, pBstrHelpFile: **ushort) -> long
export import def #extern ITypeLib_RemoteGetDocumentation_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeLib_RemoteIsName_Proxy(This: *s_ITypeLib, szNameBuf: *ushort, lHashVal: ulong, pfName: *int, pBstrLibName: **ushort) -> long
export import def #extern ITypeLib_RemoteIsName_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeLib_RemoteFindName_Proxy(This: *s_ITypeLib, szNameBuf: *ushort, lHashVal: ulong, ppTInfo: **s_ITypeInfo, rgMemId: *long, pcFound: *ushort, pBstrLibName: **ushort) -> long
export import def #extern ITypeLib_RemoteFindName_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeLib_LocalReleaseTLibAttr_Proxy(This: *s_ITypeLib) -> long
export import def #extern ITypeLib_LocalReleaseTLibAttr_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeLib2_RemoteGetLibStatistics_Proxy(This: *s_ITypeLib2, pcUniqueNames: *ulong, pcchUniqueNames: *ulong) -> long
export import def #extern ITypeLib2_RemoteGetLibStatistics_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern ITypeLib2_RemoteGetDocumentation2_Proxy(This: *s_ITypeLib2, index: int, lcid: ulong, refPtrFlags: ulong, pbstrHelpString: **ushort, pdwHelpStringContext: *ulong, pbstrHelpStringDll: **ushort) -> long
export import def #extern ITypeLib2_RemoteGetDocumentation2_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IPropertyBag_RemoteRead_Proxy(This: *s_IPropertyBag, pszPropName: *ushort, pVar: *s_tagVARIANT, pErrorLog: *s_IErrorLog, varType: ulong, pUnkObj: *s_IUnknown) -> long
export import def #extern IPropertyBag_RemoteRead_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern BSTR_UserSize(_0: *ulong, _1: ulong, _2: **ushort) -> ulong
export import def #extern BSTR_UserMarshal(_0: *ulong, _1: *char, _2: **ushort) -> *char
export import def #extern BSTR_UserUnmarshal(_0: *ulong, _1: *char, _2: **ushort) -> *char
export import def #extern BSTR_UserFree(_0: *ulong, _1: **ushort)
export import def #extern CLEANLOCALSTORAGE_UserSize(_0: *ulong, _1: ulong, _2: *CLEANLOCALSTORAGE) -> ulong
export import def #extern CLEANLOCALSTORAGE_UserMarshal(_0: *ulong, _1: *char, _2: *CLEANLOCALSTORAGE) -> *char
export import def #extern CLEANLOCALSTORAGE_UserUnmarshal(_0: *ulong, _1: *char, _2: *CLEANLOCALSTORAGE) -> *char
export import def #extern CLEANLOCALSTORAGE_UserFree(_0: *ulong, _1: *CLEANLOCALSTORAGE)
export import def #extern VARIANT_UserSize(_0: *ulong, _1: ulong, _2: *s_tagVARIANT) -> ulong
export import def #extern VARIANT_UserMarshal(_0: *ulong, _1: *char, _2: *s_tagVARIANT) -> *char
export import def #extern VARIANT_UserUnmarshal(_0: *ulong, _1: *char, _2: *s_tagVARIANT) -> *char
export import def #extern VARIANT_UserFree(_0: *ulong, _1: *s_tagVARIANT)
export import def #extern BSTR_UserSize64(_0: *ulong, _1: ulong, _2: **ushort) -> ulong
export import def #extern BSTR_UserMarshal64(_0: *ulong, _1: *char, _2: **ushort) -> *char
export import def #extern BSTR_UserUnmarshal64(_0: *ulong, _1: *char, _2: **ushort) -> *char
export import def #extern BSTR_UserFree64(_0: *ulong, _1: **ushort)
export import def #extern CLEANLOCALSTORAGE_UserSize64(_0: *ulong, _1: ulong, _2: *CLEANLOCALSTORAGE) -> ulong
export import def #extern CLEANLOCALSTORAGE_UserMarshal64(_0: *ulong, _1: *char, _2: *CLEANLOCALSTORAGE) -> *char
export import def #extern CLEANLOCALSTORAGE_UserUnmarshal64(_0: *ulong, _1: *char, _2: *CLEANLOCALSTORAGE) -> *char
export import def #extern CLEANLOCALSTORAGE_UserFree64(_0: *ulong, _1: *CLEANLOCALSTORAGE)
export import def #extern VARIANT_UserSize64(_0: *ulong, _1: ulong, _2: *s_tagVARIANT) -> ulong
export import def #extern VARIANT_UserMarshal64(_0: *ulong, _1: *char, _2: *s_tagVARIANT) -> *char
export import def #extern VARIANT_UserUnmarshal64(_0: *ulong, _1: *char, _2: *s_tagVARIANT) -> *char
export import def #extern VARIANT_UserFree64(_0: *ulong, _1: *s_tagVARIANT)
export import def #extern IDispatch_Invoke_Proxy(This: *s_IDispatch, dispIdMember: long, riid: *GUID, lcid: ulong, wFlags: ushort, pDispParams: *DISPPARAMS, pVarResult: *s_tagVARIANT, pExcepInfo: *EXCEPINFO, puArgErr: *uint) -> long
export import def #extern IDispatch_Invoke_Stub(This: *s_IDispatch, dispIdMember: long, riid: *GUID, lcid: ulong, dwFlags: ulong, pDispParams: *DISPPARAMS, pVarResult: *s_tagVARIANT, pExcepInfo: *EXCEPINFO, pArgErr: *uint, cVarRef: uint, rgVarRefIdx: *uint, rgVarRef: *s_tagVARIANT) -> long
export import def #extern IEnumVARIANT_Next_Proxy(This: *s_IEnumVARIANT, celt: ulong, rgVar: *s_tagVARIANT, pCeltFetched: *ulong) -> long
export import def #extern IEnumVARIANT_Next_Stub(This: *s_IEnumVARIANT, celt: ulong, rgVar: *s_tagVARIANT, pCeltFetched: *ulong) -> long
export import def #extern ITypeComp_Bind_Proxy(This: *s_ITypeComp, szName: *ushort, lHashVal: ulong, wFlags: ushort, ppTInfo: **s_ITypeInfo, pDescKind: *DESCKIND, pBindPtr: *BINDPTR) -> long
export import def #extern ITypeComp_Bind_Stub(This: *s_ITypeComp, szName: *ushort, lHashVal: ulong, wFlags: ushort, ppTInfo: **s_ITypeInfo, pDescKind: *DESCKIND, ppFuncDesc: **FUNCDESC, ppVarDesc: **VARDESC, ppTypeComp: **s_ITypeComp, pDummy: *CLEANLOCALSTORAGE) -> long
export import def #extern ITypeComp_BindType_Proxy(This: *s_ITypeComp, szName: *ushort, lHashVal: ulong, ppTInfo: **s_ITypeInfo, ppTComp: **s_ITypeComp) -> long
export import def #extern ITypeComp_BindType_Stub(This: *s_ITypeComp, szName: *ushort, lHashVal: ulong, ppTInfo: **s_ITypeInfo) -> long
export import def #extern ITypeInfo_GetTypeAttr_Proxy(This: *s_ITypeInfo, ppTypeAttr: **TYPEATTR) -> long
export import def #extern ITypeInfo_GetTypeAttr_Stub(This: *s_ITypeInfo, ppTypeAttr: **TYPEATTR, pDummy: *CLEANLOCALSTORAGE) -> long
export import def #extern ITypeInfo_GetFuncDesc_Proxy(This: *s_ITypeInfo, index: uint, ppFuncDesc: **FUNCDESC) -> long
export import def #extern ITypeInfo_GetFuncDesc_Stub(This: *s_ITypeInfo, index: uint, ppFuncDesc: **FUNCDESC, pDummy: *CLEANLOCALSTORAGE) -> long
export import def #extern ITypeInfo_GetVarDesc_Proxy(This: *s_ITypeInfo, index: uint, ppVarDesc: **VARDESC) -> long
export import def #extern ITypeInfo_GetVarDesc_Stub(This: *s_ITypeInfo, index: uint, ppVarDesc: **VARDESC, pDummy: *CLEANLOCALSTORAGE) -> long
export import def #extern ITypeInfo_GetNames_Proxy(This: *s_ITypeInfo, memid: long, rgBstrNames: **ushort, cMaxNames: uint, pcNames: *uint) -> long
export import def #extern ITypeInfo_GetNames_Stub(This: *s_ITypeInfo, memid: long, rgBstrNames: **ushort, cMaxNames: uint, pcNames: *uint) -> long
export import def #extern ITypeInfo_GetIDsOfNames_Proxy(This: *s_ITypeInfo, rgszNames: **ushort, cNames: uint, pMemId: *long) -> long
export import def #extern ITypeInfo_GetIDsOfNames_Stub(This: *s_ITypeInfo) -> long
export import def #extern ITypeInfo_Invoke_Proxy(This: *s_ITypeInfo, pvInstance: *, memid: long, wFlags: ushort, pDispParams: *DISPPARAMS, pVarResult: *s_tagVARIANT, pExcepInfo: *EXCEPINFO, puArgErr: *uint) -> long
export import def #extern ITypeInfo_Invoke_Stub(This: *s_ITypeInfo) -> long
export import def #extern ITypeInfo_GetDocumentation_Proxy(This: *s_ITypeInfo, memid: long, pBstrName: **ushort, pBstrDocString: **ushort, pdwHelpContext: *ulong, pBstrHelpFile: **ushort) -> long
export import def #extern ITypeInfo_GetDocumentation_Stub(This: *s_ITypeInfo, memid: long, refPtrFlags: ulong, pBstrName: **ushort, pBstrDocString: **ushort, pdwHelpContext: *ulong, pBstrHelpFile: **ushort) -> long
export import def #extern ITypeInfo_GetDllEntry_Proxy(This: *s_ITypeInfo, memid: long, invKind: INVOKEKIND, pBstrDllName: **ushort, pBstrName: **ushort, pwOrdinal: *ushort) -> long
export import def #extern ITypeInfo_GetDllEntry_Stub(This: *s_ITypeInfo, memid: long, invKind: INVOKEKIND, refPtrFlags: ulong, pBstrDllName: **ushort, pBstrName: **ushort, pwOrdinal: *ushort) -> long
export import def #extern ITypeInfo_AddressOfMember_Proxy(This: *s_ITypeInfo, memid: long, invKind: INVOKEKIND, ppv: **) -> long
export import def #extern ITypeInfo_AddressOfMember_Stub(This: *s_ITypeInfo) -> long
export import def #extern ITypeInfo_CreateInstance_Proxy(This: *s_ITypeInfo, pUnkOuter: *s_IUnknown, riid: *GUID, ppvObj: **) -> long
export import def #extern ITypeInfo_CreateInstance_Stub(This: *s_ITypeInfo, riid: *GUID, ppvObj: **s_IUnknown) -> long
export import def #extern ITypeInfo_GetContainingTypeLib_Proxy(This: *s_ITypeInfo, ppTLib: **s_ITypeLib, pIndex: *uint) -> long
export import def #extern ITypeInfo_GetContainingTypeLib_Stub(This: *s_ITypeInfo, ppTLib: **s_ITypeLib, pIndex: *uint) -> long
export import def #extern ITypeInfo_ReleaseTypeAttr_Proxy(This: *s_ITypeInfo, pTypeAttr: *TYPEATTR)
export import def #extern ITypeInfo_ReleaseTypeAttr_Stub(This: *s_ITypeInfo) -> long
export import def #extern ITypeInfo_ReleaseFuncDesc_Proxy(This: *s_ITypeInfo, pFuncDesc: *FUNCDESC)
export import def #extern ITypeInfo_ReleaseFuncDesc_Stub(This: *s_ITypeInfo) -> long
export import def #extern ITypeInfo_ReleaseVarDesc_Proxy(This: *s_ITypeInfo, pVarDesc: *VARDESC)
export import def #extern ITypeInfo_ReleaseVarDesc_Stub(This: *s_ITypeInfo) -> long
export import def #extern ITypeInfo2_GetDocumentation2_Proxy(This: *s_ITypeInfo2, memid: long, lcid: ulong, pbstrHelpString: **ushort, pdwHelpStringContext: *ulong, pbstrHelpStringDll: **ushort) -> long
export import def #extern ITypeInfo2_GetDocumentation2_Stub(This: *s_ITypeInfo2, memid: long, lcid: ulong, refPtrFlags: ulong, pbstrHelpString: **ushort, pdwHelpStringContext: *ulong, pbstrHelpStringDll: **ushort) -> long
export import def #extern ITypeLib_GetTypeInfoCount_Proxy(This: *s_ITypeLib) -> uint
export import def #extern ITypeLib_GetTypeInfoCount_Stub(This: *s_ITypeLib, pcTInfo: *uint) -> long
export import def #extern ITypeLib_GetLibAttr_Proxy(This: *s_ITypeLib, ppTLibAttr: **TLIBATTR) -> long
export import def #extern ITypeLib_GetLibAttr_Stub(This: *s_ITypeLib, ppTLibAttr: **TLIBATTR, pDummy: *CLEANLOCALSTORAGE) -> long
export import def #extern ITypeLib_GetDocumentation_Proxy(This: *s_ITypeLib, index: int, pBstrName: **ushort, pBstrDocString: **ushort, pdwHelpContext: *ulong, pBstrHelpFile: **ushort) -> long
export import def #extern ITypeLib_GetDocumentation_Stub(This: *s_ITypeLib, index: int, refPtrFlags: ulong, pBstrName: **ushort, pBstrDocString: **ushort, pdwHelpContext: *ulong, pBstrHelpFile: **ushort) -> long
export import def #extern ITypeLib_IsName_Proxy(This: *s_ITypeLib, szNameBuf: *ushort, lHashVal: ulong, pfName: *int) -> long
export import def #extern ITypeLib_IsName_Stub(This: *s_ITypeLib, szNameBuf: *ushort, lHashVal: ulong, pfName: *int, pBstrLibName: **ushort) -> long
export import def #extern ITypeLib_FindName_Proxy(This: *s_ITypeLib, szNameBuf: *ushort, lHashVal: ulong, ppTInfo: **s_ITypeInfo, rgMemId: *long, pcFound: *ushort) -> long
export import def #extern ITypeLib_FindName_Stub(This: *s_ITypeLib, szNameBuf: *ushort, lHashVal: ulong, ppTInfo: **s_ITypeInfo, rgMemId: *long, pcFound: *ushort, pBstrLibName: **ushort) -> long
export import def #extern ITypeLib_ReleaseTLibAttr_Proxy(This: *s_ITypeLib, pTLibAttr: *TLIBATTR)
export import def #extern ITypeLib_ReleaseTLibAttr_Stub(This: *s_ITypeLib) -> long
export import def #extern ITypeLib2_GetLibStatistics_Proxy(This: *s_ITypeLib2, pcUniqueNames: *ulong, pcchUniqueNames: *ulong) -> long
export import def #extern ITypeLib2_GetLibStatistics_Stub(This: *s_ITypeLib2, pcUniqueNames: *ulong, pcchUniqueNames: *ulong) -> long
export import def #extern ITypeLib2_GetDocumentation2_Proxy(This: *s_ITypeLib2, index: int, lcid: ulong, pbstrHelpString: **ushort, pdwHelpStringContext: *ulong, pbstrHelpStringDll: **ushort) -> long
export import def #extern ITypeLib2_GetDocumentation2_Stub(This: *s_ITypeLib2, index: int, lcid: ulong, refPtrFlags: ulong, pbstrHelpString: **ushort, pdwHelpStringContext: *ulong, pbstrHelpStringDll: **ushort) -> long
export import def #extern IPropertyBag_Read_Proxy(This: *s_IPropertyBag, pszPropName: *ushort, pVar: *s_tagVARIANT, pErrorLog: *s_IErrorLog) -> long
export import def #extern IPropertyBag_Read_Stub(This: *s_IPropertyBag, pszPropName: *ushort, pVar: *s_tagVARIANT, pErrorLog: *s_IErrorLog, varType: ulong, pUnkObj: *s_IUnknown) -> long
export import def #extern IEnumSTATPROPSTG_RemoteNext_Proxy(This: *s_IEnumSTATPROPSTG, celt: ulong, rgelt: *STATPROPSTG, pceltFetched: *ulong) -> long
export import def #extern IEnumSTATPROPSTG_RemoteNext_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IEnumSTATPROPSETSTG_RemoteNext_Proxy(This: *s_IEnumSTATPROPSETSTG, celt: ulong, rgelt: *STATPROPSETSTG, pceltFetched: *ulong) -> long
export import def #extern IEnumSTATPROPSETSTG_RemoteNext_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern LPSAFEARRAY_UserSize(_0: *ulong, _1: ulong, _2: **SAFEARRAY) -> ulong
export import def #extern LPSAFEARRAY_UserMarshal(_0: *ulong, _1: *char, _2: **SAFEARRAY) -> *char
export import def #extern LPSAFEARRAY_UserUnmarshal(_0: *ulong, _1: *char, _2: **SAFEARRAY) -> *char
export import def #extern LPSAFEARRAY_UserFree(_0: *ulong, _1: **SAFEARRAY)
export import def #extern LPSAFEARRAY_UserSize64(_0: *ulong, _1: ulong, _2: **SAFEARRAY) -> ulong
export import def #extern LPSAFEARRAY_UserMarshal64(_0: *ulong, _1: *char, _2: **SAFEARRAY) -> *char
export import def #extern LPSAFEARRAY_UserUnmarshal64(_0: *ulong, _1: *char, _2: **SAFEARRAY) -> *char
export import def #extern LPSAFEARRAY_UserFree64(_0: *ulong, _1: **SAFEARRAY)
export import def #extern IEnumSTATPROPSTG_Next_Proxy(This: *s_IEnumSTATPROPSTG, celt: ulong, rgelt: *STATPROPSTG, pceltFetched: *ulong) -> long
export import def #extern IEnumSTATPROPSTG_Next_Stub(This: *s_IEnumSTATPROPSTG, celt: ulong, rgelt: *STATPROPSTG, pceltFetched: *ulong) -> long
export import def #extern IEnumSTATPROPSETSTG_Next_Proxy(This: *s_IEnumSTATPROPSETSTG, celt: ulong, rgelt: *STATPROPSETSTG, pceltFetched: *ulong) -> long
export import def #extern IEnumSTATPROPSETSTG_Next_Stub(This: *s_IEnumSTATPROPSETSTG, celt: ulong, rgelt: *STATPROPSETSTG, pceltFetched: *ulong) -> long
export import def #extern #dllimport StgCreateDocfile(pwcsName: *ushort, grfMode: ulong, reserved: ulong, ppstgOpen: **s_IStorage) -> long
export import def #extern #dllimport StgCreateDocfileOnILockBytes(plkbyt: *s_ILockBytes, grfMode: ulong, reserved: ulong, ppstgOpen: **s_IStorage) -> long
export import def #extern #dllimport StgOpenStorage(pwcsName: *ushort, pstgPriority: *s_IStorage, grfMode: ulong, snbExclude: **ushort, reserved: ulong, ppstgOpen: **s_IStorage) -> long
export import def #extern #dllimport StgOpenStorageOnILockBytes(plkbyt: *s_ILockBytes, pstgPriority: *s_IStorage, grfMode: ulong, snbExclude: **ushort, reserved: ulong, ppstgOpen: **s_IStorage) -> long
export import def #extern #dllimport StgIsStorageFile(pwcsName: *ushort) -> long
export import def #extern #dllimport StgIsStorageILockBytes(plkbyt: *s_ILockBytes) -> long
export import def #extern #dllimport StgSetTimes(lpszName: *ushort, pctime: *FILETIME, patime: *FILETIME, pmtime: *FILETIME) -> long
export import def #extern #dllimport StgCreateStorageEx(pwcsName: *ushort, grfMode: ulong, stgfmt: ulong, grfAttrs: ulong, pStgOptions: *STGOPTIONS, pSecurityDescriptor: *, riid: *GUID, ppObjectOpen: **) -> long
export import def #extern #dllimport StgOpenStorageEx(pwcsName: *ushort, grfMode: ulong, stgfmt: ulong, grfAttrs: ulong, pStgOptions: *STGOPTIONS, pSecurityDescriptor: *, riid: *GUID, ppObjectOpen: **) -> long
export import def #extern #dllimport StgCreatePropStg(pUnk: *s_IUnknown, fmtid: *GUID, pclsid: *GUID, grfFlags: ulong, dwReserved: ulong, ppPropStg: **s_IPropertyStorage) -> long
export import def #extern #dllimport StgOpenPropStg(pUnk: *s_IUnknown, fmtid: *GUID, grfFlags: ulong, dwReserved: ulong, ppPropStg: **s_IPropertyStorage) -> long
export import def #extern #dllimport StgCreatePropSetStg(pStorage: *s_IStorage, dwReserved: ulong, ppPropSetStg: **s_IPropertySetStorage) -> long
export import def #extern #dllimport FmtIdToPropStgName(pfmtid: *GUID, oszName: *ushort) -> long
export import def #extern #dllimport PropStgNameToFmtId(oszName: *ushort, pfmtid: *GUID) -> long
export import def #extern #dllimport ReadClassStg(pStg: *s_IStorage, pclsid: *GUID) -> long
export import def #extern #dllimport WriteClassStg(pStg: *s_IStorage, rclsid: *GUID) -> long
export import def #extern #dllimport ReadClassStm(pStm: *s_IStream, pclsid: *GUID) -> long
export import def #extern #dllimport WriteClassStm(pStm: *s_IStream, rclsid: *GUID) -> long
export import def #extern #dllimport GetHGlobalFromILockBytes(plkbyt: *s_ILockBytes, phglobal: **) -> long
export import def #extern #dllimport CreateILockBytesOnHGlobal(hGlobal: *, fDeleteOnRelease: int, pplkbyt: **s_ILockBytes) -> long
export import def #extern #dllimport GetConvertStg(pStg: *s_IStorage) -> long
export import def #extern #dllimport CoBuildVersion() -> ulong
export import def #extern #dllimport CoInitialize(pvReserved: *) -> long
export import def #extern #dllimport CoRegisterMallocSpy(pMallocSpy: *s_IMallocSpy) -> long
export import def #extern #dllimport CoRevokeMallocSpy() -> long
export import def #extern #dllimport CoCreateStandardMalloc(memctx: ulong, ppMalloc: **s_IMalloc) -> long
export import def #extern #dllimport CoRegisterInitializeSpy(pSpy: *s_IInitializeSpy, puliCookie: *ULARGE_INTEGER) -> long
export import def #extern #dllimport CoRevokeInitializeSpy(uliCookie: ULARGE_INTEGER) -> long
export import def #extern #dllimport CoGetSystemSecurityPermissions(comSDType: COMSD, ppSD: **) -> long
export import def #extern #dllimport CoLoadLibrary(lpszLibName: *ushort, bAutoFree: int) -> *s_HINSTANCE__
export import def #extern #dllimport CoFreeLibrary(hInst: *s_HINSTANCE__)
export import def #extern #dllimport CoFreeAllLibraries()
export import def #extern #dllimport CoGetInstanceFromFile(pServerInfo: *COSERVERINFO, pClsid: *GUID, punkOuter: *s_IUnknown, dwClsCtx: ulong, grfMode: ulong, pwszName: *ushort, dwCount: ulong, pResults: *MULTI_QI) -> long
export import def #extern #dllimport CoGetInstanceFromIStorage(pServerInfo: *COSERVERINFO, pClsid: *GUID, punkOuter: *s_IUnknown, dwClsCtx: ulong, pstg: *s_IStorage, dwCount: ulong, pResults: *MULTI_QI) -> long
export import def #extern #dllimport CoAllowSetForegroundWindow(pUnk: *s_IUnknown, lpvReserved: *) -> long
export import def #extern #dllimport DcomChannelSetHResult(pvReserved: *, pulReserved: *ulong, appsHR: long) -> long
export import def #extern #dllimport CoIsOle1Class(rclsid: *GUID) -> int
export import def #extern #dllimport CoFileTimeToDosDateTime(lpFileTime: *FILETIME, lpDosDate: *ushort, lpDosTime: *ushort) -> int
export import def #extern #dllimport CoDosDateTimeToFileTime(nDosDate: ushort, nDosTime: ushort, lpFileTime: *FILETIME) -> int
export import def #extern #dllimport CoRegisterMessageFilter(lpMessageFilter: *s_IMessageFilter, lplpMessageFilter: **s_IMessageFilter) -> long
export import def #extern #dllimport CoRegisterChannelHook(ExtensionUuid: *GUID, pChannelHook: *s_IChannelHook) -> long
export import def #extern #dllimport CoTreatAsClass(clsidOld: *GUID, clsidNew: *GUID) -> long
export import def #extern #dllimport CreateDataAdviseHolder(ppDAHolder: **s_IDataAdviseHolder) -> long
export import def #extern #dllimport CreateDataCache(pUnkOuter: *s_IUnknown, rclsid: *GUID, iid: *GUID, ppv: **) -> long
export import def #extern #dllimport StgOpenAsyncDocfileOnIFillLockBytes(pflb: *s_IFillLockBytes, grfMode: ulong, asyncFlags: ulong, ppstgOpen: **s_IStorage) -> long
export import def #extern #dllimport StgGetIFillLockBytesOnILockBytes(pilb: *s_ILockBytes, ppflb: **s_IFillLockBytes) -> long
export import def #extern #dllimport StgGetIFillLockBytesOnFile(pwcsName: *ushort, ppflb: **s_IFillLockBytes) -> long
export import def #extern #dllimport StgOpenLayoutDocfile(pwcsDfName: *ushort, grfMode: ulong, reserved: ulong, ppstgOpen: **s_IStorage) -> long
export import def #extern #dllimport CoInstall(pbc: *s_IBindCtx, dwFlags: ulong, pClassSpec: *uCLSSPEC, pQuery: *QUERYCONTEXT, pszCodeBase: *ushort) -> long
export import def #extern #dllimport BindMoniker(pmk: *s_IMoniker, grfOpt: ulong, iidResult: *GUID, ppvResult: **) -> long
export import def #extern #dllimport CoGetObject(pszName: *ushort, pBindOptions: *BIND_OPTS, riid: *GUID, ppv: **) -> long
export import def #extern #dllimport MkParseDisplayName(pbc: *s_IBindCtx, szUserName: *ushort, pchEaten: *ulong, ppmk: **s_IMoniker) -> long
export import def #extern #dllimport MonikerRelativePathTo(pmkSrc: *s_IMoniker, pmkDest: *s_IMoniker, ppmkRelPath: **s_IMoniker, dwReserved: int) -> long
export import def #extern #dllimport MonikerCommonPrefixWith(pmkThis: *s_IMoniker, pmkOther: *s_IMoniker, ppmkCommon: **s_IMoniker) -> long
export import def #extern #dllimport CreateBindCtx(reserved: ulong, ppbc: **s_IBindCtx) -> long
export import def #extern #dllimport CreateGenericComposite(pmkFirst: *s_IMoniker, pmkRest: *s_IMoniker, ppmkComposite: **s_IMoniker) -> long
export import def #extern #dllimport GetClassFile(szFilename: *ushort, pclsid: *GUID) -> long
export import def #extern #dllimport CreateClassMoniker(rclsid: *GUID, ppmk: **s_IMoniker) -> long
export import def #extern #dllimport CreateFileMoniker(lpszPathName: *ushort, ppmk: **s_IMoniker) -> long
export import def #extern #dllimport CreateItemMoniker(lpszDelim: *ushort, lpszItem: *ushort, ppmk: **s_IMoniker) -> long
export import def #extern #dllimport CreateAntiMoniker(ppmk: **s_IMoniker) -> long
export import def #extern #dllimport CreatePointerMoniker(punk: *s_IUnknown, ppmk: **s_IMoniker) -> long
export import def #extern #dllimport CreateObjrefMoniker(punk: *s_IUnknown, ppmk: **s_IMoniker) -> long
export import def #extern #dllimport GetRunningObjectTable(reserved: ulong, pprot: **s_IRunningObjectTable) -> long
export import def #extern IOleCache2_RemoteUpdateCache_Proxy(This: *s_IOleCache2, pDataObject: *s_IDataObject, grfUpdf: ulong, pReserved: int64) -> long
export import def #extern IOleCache2_RemoteUpdateCache_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy(This: *s_IOleInPlaceActiveObject) -> long
export import def #extern IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IOleInPlaceActiveObject_RemoteResizeBorder_Proxy(This: *s_IOleInPlaceActiveObject, prcBorder: *RECT, riid: *GUID, pUIWindow: *s_IOleInPlaceUIWindow, fFrameWindow: int) -> long
export import def #extern IOleInPlaceActiveObject_RemoteResizeBorder_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IViewObject_RemoteDraw_Proxy(This: *s_IViewObject, dwDrawAspect: ulong, lindex: long, pvAspect: uint64, ptd: *DVTARGETDEVICE, hdcTargetDev: *s_HDC__, hdcDraw: *s_HDC__, lprcBounds: *RECTL, lprcWBounds: *RECTL, pContinue: *s_IContinue) -> long
export import def #extern IViewObject_RemoteDraw_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IViewObject_RemoteGetColorSet_Proxy(This: *s_IViewObject, dwDrawAspect: ulong, lindex: long, pvAspect: uint64, ptd: *DVTARGETDEVICE, hicTargetDev: uint64, ppColorSet: **LOGPALETTE) -> long
export import def #extern IViewObject_RemoteGetColorSet_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IViewObject_RemoteFreeze_Proxy(This: *s_IViewObject, dwDrawAspect: ulong, lindex: long, pvAspect: uint64, pdwFreeze: *ulong) -> long
export import def #extern IViewObject_RemoteFreeze_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IViewObject_RemoteGetAdvise_Proxy(This: *s_IViewObject, pAspects: *ulong, pAdvf: *ulong, ppAdvSink: **s_IAdviseSink) -> long
export import def #extern IViewObject_RemoteGetAdvise_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IEnumOLEVERB_RemoteNext_Proxy(This: *s_IEnumOLEVERB, celt: ulong, rgelt: *OLEVERB, pceltFetched: *ulong) -> long
export import def #extern IEnumOLEVERB_RemoteNext_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern HACCEL_UserSize(_0: *ulong, _1: ulong, _2: **s_HACCEL__) -> ulong
export import def #extern HACCEL_UserMarshal(_0: *ulong, _1: *char, _2: **s_HACCEL__) -> *char
export import def #extern HACCEL_UserUnmarshal(_0: *ulong, _1: *char, _2: **s_HACCEL__) -> *char
export import def #extern HACCEL_UserFree(_0: *ulong, _1: **s_HACCEL__)
export import def #extern HGLOBAL_UserSize(_0: *ulong, _1: ulong, _2: **) -> ulong
export import def #extern HGLOBAL_UserMarshal(_0: *ulong, _1: *char, _2: **) -> *char
export import def #extern HGLOBAL_UserUnmarshal(_0: *ulong, _1: *char, _2: **) -> *char
export import def #extern HGLOBAL_UserFree(_0: *ulong, _1: **)
export import def #extern HMENU_UserSize(_0: *ulong, _1: ulong, _2: **s_HMENU__) -> ulong
export import def #extern HMENU_UserMarshal(_0: *ulong, _1: *char, _2: **s_HMENU__) -> *char
export import def #extern HMENU_UserUnmarshal(_0: *ulong, _1: *char, _2: **s_HMENU__) -> *char
export import def #extern HMENU_UserFree(_0: *ulong, _1: **s_HMENU__)
export import def #extern HWND_UserSize(_0: *ulong, _1: ulong, _2: **s_HWND__) -> ulong
export import def #extern HWND_UserMarshal(_0: *ulong, _1: *char, _2: **s_HWND__) -> *char
export import def #extern HWND_UserUnmarshal(_0: *ulong, _1: *char, _2: **s_HWND__) -> *char
export import def #extern HWND_UserFree(_0: *ulong, _1: **s_HWND__)
export import def #extern HACCEL_UserSize64(_0: *ulong, _1: ulong, _2: **s_HACCEL__) -> ulong
export import def #extern HACCEL_UserMarshal64(_0: *ulong, _1: *char, _2: **s_HACCEL__) -> *char
export import def #extern HACCEL_UserUnmarshal64(_0: *ulong, _1: *char, _2: **s_HACCEL__) -> *char
export import def #extern HACCEL_UserFree64(_0: *ulong, _1: **s_HACCEL__)
export import def #extern HGLOBAL_UserSize64(_0: *ulong, _1: ulong, _2: **) -> ulong
export import def #extern HGLOBAL_UserMarshal64(_0: *ulong, _1: *char, _2: **) -> *char
export import def #extern HGLOBAL_UserUnmarshal64(_0: *ulong, _1: *char, _2: **) -> *char
export import def #extern HGLOBAL_UserFree64(_0: *ulong, _1: **)
export import def #extern HMENU_UserSize64(_0: *ulong, _1: ulong, _2: **s_HMENU__) -> ulong
export import def #extern HMENU_UserMarshal64(_0: *ulong, _1: *char, _2: **s_HMENU__) -> *char
export import def #extern HMENU_UserUnmarshal64(_0: *ulong, _1: *char, _2: **s_HMENU__) -> *char
export import def #extern HMENU_UserFree64(_0: *ulong, _1: **s_HMENU__)
export import def #extern HWND_UserSize64(_0: *ulong, _1: ulong, _2: **s_HWND__) -> ulong
export import def #extern HWND_UserMarshal64(_0: *ulong, _1: *char, _2: **s_HWND__) -> *char
export import def #extern HWND_UserUnmarshal64(_0: *ulong, _1: *char, _2: **s_HWND__) -> *char
export import def #extern HWND_UserFree64(_0: *ulong, _1: **s_HWND__)
export import def #extern IOleCache2_UpdateCache_Proxy(This: *s_IOleCache2, pDataObject: *s_IDataObject, grfUpdf: ulong, pReserved: *) -> long
export import def #extern IOleCache2_UpdateCache_Stub(This: *s_IOleCache2, pDataObject: *s_IDataObject, grfUpdf: ulong, pReserved: int64) -> long
export import def #extern IOleInPlaceActiveObject_TranslateAccelerator_Proxy(This: *s_IOleInPlaceActiveObject, lpmsg: *MSG) -> long
export import def #extern IOleInPlaceActiveObject_TranslateAccelerator_Stub(This: *s_IOleInPlaceActiveObject) -> long
export import def #extern IOleInPlaceActiveObject_ResizeBorder_Proxy(This: *s_IOleInPlaceActiveObject, prcBorder: *RECT, pUIWindow: *s_IOleInPlaceUIWindow, fFrameWindow: int) -> long
export import def #extern IOleInPlaceActiveObject_ResizeBorder_Stub(This: *s_IOleInPlaceActiveObject, prcBorder: *RECT, riid: *GUID, pUIWindow: *s_IOleInPlaceUIWindow, fFrameWindow: int) -> long
export import def #extern IViewObject_Draw_Proxy(This: *s_IViewObject, dwDrawAspect: ulong, lindex: long, pvAspect: *, ptd: *DVTARGETDEVICE, hdcTargetDev: *s_HDC__, hdcDraw: *s_HDC__, lprcBounds: *RECTL, lprcWBounds: *RECTL, pfnContinue: def (uint64) -> (int), dwContinue: uint64) -> long
export import def #extern IViewObject_Draw_Stub(This: *s_IViewObject, dwDrawAspect: ulong, lindex: long, pvAspect: uint64, ptd: *DVTARGETDEVICE, hdcTargetDev: *s_HDC__, hdcDraw: *s_HDC__, lprcBounds: *RECTL, lprcWBounds: *RECTL, pContinue: *s_IContinue) -> long
export import def #extern IViewObject_GetColorSet_Proxy(This: *s_IViewObject, dwDrawAspect: ulong, lindex: long, pvAspect: *, ptd: *DVTARGETDEVICE, hicTargetDev: *s_HDC__, ppColorSet: **LOGPALETTE) -> long
export import def #extern IViewObject_GetColorSet_Stub(This: *s_IViewObject, dwDrawAspect: ulong, lindex: long, pvAspect: uint64, ptd: *DVTARGETDEVICE, hicTargetDev: uint64, ppColorSet: **LOGPALETTE) -> long
export import def #extern IViewObject_Freeze_Proxy(This: *s_IViewObject, dwDrawAspect: ulong, lindex: long, pvAspect: *, pdwFreeze: *ulong) -> long
export import def #extern IViewObject_Freeze_Stub(This: *s_IViewObject, dwDrawAspect: ulong, lindex: long, pvAspect: uint64, pdwFreeze: *ulong) -> long
export import def #extern IViewObject_GetAdvise_Proxy(This: *s_IViewObject, pAspects: *ulong, pAdvf: *ulong, ppAdvSink: **s_IAdviseSink) -> long
export import def #extern IViewObject_GetAdvise_Stub(This: *s_IViewObject, pAspects: *ulong, pAdvf: *ulong, ppAdvSink: **s_IAdviseSink) -> long
export import def #extern IEnumOLEVERB_Next_Proxy(This: *s_IEnumOLEVERB, celt: ulong, rgelt: *OLEVERB, pceltFetched: *ulong) -> long
export import def #extern IEnumOLEVERB_Next_Stub(This: *s_IEnumOLEVERB, celt: ulong, rgelt: *OLEVERB, pceltFetched: *ulong) -> long
export import def #extern IServiceProvider_RemoteQueryService_Proxy(This: *s_IServiceProvider, guidService: *GUID, riid: *GUID, ppvObject: **s_IUnknown) -> long
export import def #extern IServiceProvider_RemoteQueryService_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IServiceProvider_QueryService_Proxy(This: *s_IServiceProvider, guidService: *GUID, riid: *GUID, ppvObject: **) -> long
export import def #extern IServiceProvider_QueryService_Stub(This: *s_IServiceProvider, guidService: *GUID, riid: *GUID, ppvObject: **s_IUnknown) -> long
export import def #extern CreateURLMoniker(pMkCtx: *s_IMoniker, szURL: *ushort, ppmk: **s_IMoniker) -> long
export import def #extern CreateURLMonikerEx(pMkCtx: *s_IMoniker, szURL: *ushort, ppmk: **s_IMoniker, dwFlags: ulong) -> long
export import def #extern GetClassURL(szURL: *ushort, pClsID: *GUID) -> long
export import def #extern CreateAsyncBindCtx(reserved: ulong, pBSCb: *s_IBindStatusCallback, pEFetc: *s_IEnumFORMATETC, ppBC: **s_IBindCtx) -> long
export import def #extern CreateURLMonikerEx2(pMkCtx: *s_IMoniker, pUri: *s_IUri, ppmk: **s_IMoniker, dwFlags: ulong) -> long
export import def #extern CreateAsyncBindCtxEx(pbc: *s_IBindCtx, dwOptions: ulong, pBSCb: *s_IBindStatusCallback, pEnum: *s_IEnumFORMATETC, ppBC: **s_IBindCtx, reserved: ulong) -> long
export import def #extern MkParseDisplayNameEx(pbc: *s_IBindCtx, szDisplayName: *ushort, pchEaten: *ulong, ppmk: **s_IMoniker) -> long
export import def #extern RegisterBindStatusCallback(pBC: *s_IBindCtx, pBSCb: *s_IBindStatusCallback, ppBSCBPrev: **s_IBindStatusCallback, dwReserved: ulong) -> long
export import def #extern RevokeBindStatusCallback(pBC: *s_IBindCtx, pBSCb: *s_IBindStatusCallback) -> long
export import def #extern GetClassFileOrMime(pBC: *s_IBindCtx, szFilename: *ushort, pBuffer: *, cbSize: ulong, szMime: *ushort, dwReserved: ulong, pclsid: *GUID) -> long
export import def #extern IsValidURL(pBC: *s_IBindCtx, szURL: *ushort, dwReserved: ulong) -> long
export import def #extern CoGetClassObjectFromURL(rCLASSID: *GUID, szCODE: *ushort, dwFileVersionMS: ulong, dwFileVersionLS: ulong, szTYPE: *ushort, pBindCtx: *s_IBindCtx, dwClsContext: ulong, pvReserved: *, riid: *GUID, ppv: **) -> long
export import def #extern IEInstallScope(pdwScope: *ulong) -> long
export import def #extern FaultInIEFeature(hWnd: *s_HWND__, pClassSpec: *uCLSSPEC, pQuery: *QUERYCONTEXT, dwFlags: ulong) -> long
export import def #extern GetComponentIDFromCLSSPEC(pClassspec: *uCLSSPEC, ppszComponentID: **char) -> long
export import def #extern IsAsyncMoniker(pmk: *s_IMoniker) -> long
export import def #extern CreateURLBinding(lpszUrl: *ushort, pbc: *s_IBindCtx, ppBdg: **s_IBinding) -> long
export import def #extern RegisterMediaTypes(ctypes: uint, rgszTypes: **char, rgcfTypes: *ushort) -> long
export import def #extern FindMediaType(rgszTypes: *char, rgcfTypes: *ushort) -> long
export import def #extern CreateFormatEnumerator(cfmtetc: uint, rgfmtetc: *FORMATETC, ppenumfmtetc: **s_IEnumFORMATETC) -> long
export import def #extern RegisterFormatEnumerator(pBC: *s_IBindCtx, pEFetc: *s_IEnumFORMATETC, reserved: ulong) -> long
export import def #extern RevokeFormatEnumerator(pBC: *s_IBindCtx, pEFetc: *s_IEnumFORMATETC) -> long
export import def #extern RegisterMediaTypeClass(pBC: *s_IBindCtx, ctypes: uint, rgszTypes: **char, rgclsID: *GUID, reserved: ulong) -> long
export import def #extern FindMediaTypeClass(pBC: *s_IBindCtx, szType: *char, pclsID: *GUID, reserved: ulong) -> long
export import def #extern UrlMkSetSessionOption(dwOption: ulong, pBuffer: *, dwBufferLength: ulong, dwReserved: ulong) -> long
export import def #extern UrlMkGetSessionOption(dwOption: ulong, pBuffer: *, dwBufferLength: ulong, pdwBufferLengthOut: *ulong, dwReserved: ulong) -> long
export import def #extern FindMimeFromData(pBC: *s_IBindCtx, pwzUrl: *ushort, pBuffer: *, cbSize: ulong, pwzMimeProposed: *ushort, dwMimeFlags: ulong, ppwzMimeOut: **ushort, dwReserved: ulong) -> long
export import def #extern ObtainUserAgentString(dwOption: ulong, pszUAOut: *char, cbSize: *ulong) -> long
export import def #extern CompareSecurityIds(pbSecurityId1: *char, dwLen1: ulong, pbSecurityId2: *char, dwLen2: ulong, dwReserved: ulong) -> long
export import def #extern CompatFlagsFromClsid(pclsid: *GUID, pdwCompatFlags: *ulong, pdwMiscStatusFlags: *ulong) -> long
export import def #extern SetAccessForIEAppContainer(hObject: *, ieObjectType: IEObjectType, dwAccessMask: ulong) -> long
export import def #extern IBinding_RemoteGetBindResult_Proxy(This: *s_IBinding, pclsidProtocol: *GUID, pdwResult: *ulong, pszResult: **ushort, dwReserved: ulong) -> long
export import def #extern IBinding_RemoteGetBindResult_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IBindStatusCallback_RemoteGetBindInfo_Proxy(This: *s_IBindStatusCallback, grfBINDF: *ulong, pbindinfo: *RemBINDINFO, pstgmed: *RemSTGMEDIUM) -> long
export import def #extern IBindStatusCallback_RemoteGetBindInfo_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IBindStatusCallback_RemoteOnDataAvailable_Proxy(This: *s_IBindStatusCallback, grfBSCF: ulong, dwSize: ulong, pformatetc: *RemFORMATETC, pstgmed: *RemSTGMEDIUM) -> long
export import def #extern IBindStatusCallback_RemoteOnDataAvailable_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy(This: *s_IBindStatusCallbackEx, grfBINDF: *ulong, pbindinfo: *RemBINDINFO, pstgmed: *RemSTGMEDIUM, grfBINDF2: *ulong, pdwReserved: *ulong) -> long
export import def #extern IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern CreateUri(pwzURI: *ushort, dwFlags: ulong, dwReserved: uint64, ppURI: **s_IUri) -> long
export import def #extern CreateUriWithFragment(pwzURI: *ushort, pwzFragment: *ushort, dwFlags: ulong, dwReserved: uint64, ppURI: **s_IUri) -> long
export import def #extern CreateUriFromMultiByteString(pszANSIInputUri: *char, dwEncodingFlags: ulong, dwCodePage: ulong, dwCreateFlags: ulong, dwReserved: uint64, ppUri: **s_IUri) -> long
export import def #extern CreateIUriBuilder(pIUri: *s_IUri, dwFlags: ulong, dwReserved: uint64, ppIUriBuilder: **s_IUriBuilder) -> long
export import def #extern IWinInetInfo_RemoteQueryOption_Proxy(This: *s_IWinInetInfo, dwOption: ulong, pBuffer: *char, pcbBuf: *ulong) -> long
export import def #extern IWinInetInfo_RemoteQueryOption_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IWinInetHttpInfo_RemoteQueryInfo_Proxy(This: *s_IWinInetHttpInfo, dwOption: ulong, pBuffer: *char, pcbBuf: *ulong, pdwFlags: *ulong, pdwReserved: *ulong) -> long
export import def #extern IWinInetHttpInfo_RemoteQueryInfo_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IBindHost_RemoteMonikerBindToStorage_Proxy(This: *s_IBindHost, pMk: *s_IMoniker, pBC: *s_IBindCtx, pBSC: *s_IBindStatusCallback, riid: *GUID, ppvObj: **s_IUnknown) -> long
export import def #extern IBindHost_RemoteMonikerBindToStorage_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern IBindHost_RemoteMonikerBindToObject_Proxy(This: *s_IBindHost, pMk: *s_IMoniker, pBC: *s_IBindCtx, pBSC: *s_IBindStatusCallback, riid: *GUID, ppvObj: **s_IUnknown) -> long
export import def #extern IBindHost_RemoteMonikerBindToObject_Stub(This: *s_IRpcStubBuffer, _pRpcChannelBuffer: *s_IRpcChannelBuffer, _pRpcMessage: *RPC_MESSAGE, _pdwStubPhase: *ulong)
export import def #extern HlinkSimpleNavigateToString(szTarget: *ushort, szLocation: *ushort, szTargetFrameName: *ushort, pUnk: *s_IUnknown, pbc: *s_IBindCtx, _5: *s_IBindStatusCallback, grfHLNF: ulong, dwReserved: ulong) -> long
export import def #extern HlinkSimpleNavigateToMoniker(pmkTarget: *s_IMoniker, szLocation: *ushort, szTargetFrameName: *ushort, pUnk: *s_IUnknown, pbc: *s_IBindCtx, _5: *s_IBindStatusCallback, grfHLNF: ulong, dwReserved: ulong) -> long
export import def #extern URLOpenStreamA(_0: *s_IUnknown, _1: *char, _2: ulong, _3: *s_IBindStatusCallback) -> long
export import def #extern URLOpenStreamW(_0: *s_IUnknown, _1: *ushort, _2: ulong, _3: *s_IBindStatusCallback) -> long
export import def #extern URLOpenPullStreamA(_0: *s_IUnknown, _1: *char, _2: ulong, _3: *s_IBindStatusCallback) -> long
export import def #extern URLOpenPullStreamW(_0: *s_IUnknown, _1: *ushort, _2: ulong, _3: *s_IBindStatusCallback) -> long
export import def #extern URLDownloadToFileA(_0: *s_IUnknown, _1: *char, _2: *char, _3: ulong, _4: *s_IBindStatusCallback) -> long
export import def #extern URLDownloadToFileW(_0: *s_IUnknown, _1: *ushort, _2: *ushort, _3: ulong, _4: *s_IBindStatusCallback) -> long
export import def #extern URLDownloadToCacheFileA(_0: *s_IUnknown, _1: *char, _2: *char, cchFileName: ulong, _4: ulong, _5: *s_IBindStatusCallback) -> long
export import def #extern URLDownloadToCacheFileW(_0: *s_IUnknown, _1: *ushort, _2: *ushort, cchFileName: ulong, _4: ulong, _5: *s_IBindStatusCallback) -> long
export import def #extern URLOpenBlockingStreamA(_0: *s_IUnknown, _1: *char, _2: **s_IStream, _3: ulong, _4: *s_IBindStatusCallback) -> long
export import def #extern URLOpenBlockingStreamW(_0: *s_IUnknown, _1: *ushort, _2: **s_IStream, _3: ulong, _4: *s_IBindStatusCallback) -> long
export import def #extern HlinkGoBack(pUnk: *s_IUnknown) -> long
export import def #extern HlinkGoForward(pUnk: *s_IUnknown) -> long
export import def #extern HlinkNavigateString(pUnk: *s_IUnknown, szTarget: *ushort) -> long
export import def #extern HlinkNavigateMoniker(pUnk: *s_IUnknown, pmkTarget: *s_IMoniker) -> long
export import def #extern CoInternetParseUrl(pwzUrl: *ushort, ParseAction: PARSEACTION, dwFlags: ulong, pszResult: *ushort, cchResult: ulong, pcchResult: *ulong, dwReserved: ulong) -> long
export import def #extern CoInternetParseIUri(pIUri: *s_IUri, ParseAction: PARSEACTION, dwFlags: ulong, pwzResult: *ushort, cchResult: ulong, pcchResult: *ulong, dwReserved: uint64) -> long
export import def #extern CoInternetCombineUrl(pwzBaseUrl: *ushort, pwzRelativeUrl: *ushort, dwCombineFlags: ulong, pszResult: *ushort, cchResult: ulong, pcchResult: *ulong, dwReserved: ulong) -> long
export import def #extern CoInternetCombineUrlEx(pBaseUri: *s_IUri, pwzRelativeUrl: *ushort, dwCombineFlags: ulong, ppCombinedUri: **s_IUri, dwReserved: uint64) -> long
export import def #extern CoInternetCombineIUri(pBaseUri: *s_IUri, pRelativeUri: *s_IUri, dwCombineFlags: ulong, ppCombinedUri: **s_IUri, dwReserved: uint64) -> long
export import def #extern CoInternetCompareUrl(pwzUrl1: *ushort, pwzUrl2: *ushort, dwFlags: ulong) -> long
export import def #extern CoInternetGetProtocolFlags(pwzUrl: *ushort, pdwFlags: *ulong, dwReserved: ulong) -> long
export import def #extern CoInternetQueryInfo(pwzUrl: *ushort, QueryOptions: QUERYOPTION, dwQueryFlags: ulong, pvBuffer: *, cbBuffer: ulong, pcbBuffer: *ulong, dwReserved: ulong) -> long
export import def #extern CoInternetGetSession(dwSessionMode: ulong, ppIInternetSession: **s_IInternetSession, dwReserved: ulong) -> long
export import def #extern CoInternetGetSecurityUrl(pwszUrl: *ushort, ppwszSecUrl: **ushort, psuAction: PSUACTION, dwReserved: ulong) -> long
export import def #extern AsyncInstallDistributionUnit(szDistUnit: *ushort, szTYPE: *ushort, szExt: *ushort, dwFileVersionMS: ulong, dwFileVersionLS: ulong, szURL: *ushort, pbc: *s_IBindCtx, pvReserved: *, flags: ulong) -> long
export import def #extern CoInternetGetSecurityUrlEx(pUri: *s_IUri, ppSecUri: **s_IUri, psuAction: PSUACTION, dwReserved: uint64) -> long
export import def #extern CoInternetSetFeatureEnabled(FeatureEntry: INTERNETFEATURELIST, dwFlags: ulong, fEnable: int) -> long
export import def #extern CoInternetIsFeatureEnabled(FeatureEntry: INTERNETFEATURELIST, dwFlags: ulong) -> long
export import def #extern CoInternetIsFeatureEnabledForUrl(FeatureEntry: INTERNETFEATURELIST, dwFlags: ulong, szURL: *ushort, pSecMgr: *s_IInternetSecurityManager) -> long
export import def #extern CoInternetIsFeatureEnabledForIUri(FeatureEntry: INTERNETFEATURELIST, dwFlags: ulong, pIUri: *s_IUri, pSecMgr: *s_IInternetSecurityManagerEx2) -> long
export import def #extern CoInternetIsFeatureZoneElevationEnabled(szFromURL: *ushort, szToURL: *ushort, pSecMgr: *s_IInternetSecurityManager, dwFlags: ulong) -> long
export import def #extern CopyStgMedium(pcstgmedSrc: *uSTGMEDIUM, pstgmedDest: *uSTGMEDIUM) -> long
export import def #extern CopyBindInfo(pcbiSrc: *BINDINFO, pbiDest: *BINDINFO) -> long
export import def #extern ReleaseBindInfo(pbindinfo: *BINDINFO)
export import def #extern IEGetUserPrivateNamespaceName() -> *ushort
export import def #extern CoInternetCreateSecurityManager(pSP: *s_IServiceProvider, ppSM: **s_IInternetSecurityManager, dwReserved: ulong) -> long
export import def #extern CoInternetCreateZoneManager(pSP: *s_IServiceProvider, ppZM: **s_IInternetZoneManager, dwReserved: ulong) -> long
export import def #extern GetSoftwareUpdateInfo(szDistUnit: *ushort, psdi: *SOFTDISTINFO) -> long
export import def #extern SetSoftwareUpdateAdvertisementState(szDistUnit: *ushort, dwAdState: ulong, dwAdvertisedVersionMS: ulong, dwAdvertisedVersionLS: ulong) -> long
export import def #extern IsLoggingEnabledA(pszUrl: *char) -> int
export import def #extern IsLoggingEnabledW(pwszUrl: *ushort) -> int
export import def #extern WriteHitLogging(lpLogginginfo: *HIT_LOGGING_INFO) -> int
export import def #extern IBinding_GetBindResult_Proxy(This: *s_IBinding, pclsidProtocol: *GUID, pdwResult: *ulong, pszResult: **ushort, pdwReserved: *ulong) -> long
export import def #extern IBinding_GetBindResult_Stub(This: *s_IBinding, pclsidProtocol: *GUID, pdwResult: *ulong, pszResult: **ushort, dwReserved: ulong) -> long
export import def #extern IBindStatusCallback_GetBindInfo_Proxy(This: *s_IBindStatusCallback, grfBINDF: *ulong, pbindinfo: *BINDINFO) -> long
export import def #extern IBindStatusCallback_GetBindInfo_Stub(This: *s_IBindStatusCallback, grfBINDF: *ulong, pbindinfo: *RemBINDINFO, pstgmed: *RemSTGMEDIUM) -> long
export import def #extern IBindStatusCallback_OnDataAvailable_Proxy(This: *s_IBindStatusCallback, grfBSCF: ulong, dwSize: ulong, pformatetc: *FORMATETC, pstgmed: *uSTGMEDIUM) -> long
export import def #extern IBindStatusCallback_OnDataAvailable_Stub(This: *s_IBindStatusCallback, grfBSCF: ulong, dwSize: ulong, pformatetc: *RemFORMATETC, pstgmed: *RemSTGMEDIUM) -> long
export import def #extern IBindStatusCallbackEx_GetBindInfoEx_Proxy(This: *s_IBindStatusCallbackEx, grfBINDF: *ulong, pbindinfo: *BINDINFO, grfBINDF2: *ulong, pdwReserved: *ulong) -> long
export import def #extern IBindStatusCallbackEx_GetBindInfoEx_Stub(This: *s_IBindStatusCallbackEx, grfBINDF: *ulong, pbindinfo: *RemBINDINFO, pstgmed: *RemSTGMEDIUM, grfBINDF2: *ulong, pdwReserved: *ulong) -> long
export import def #extern IWinInetInfo_QueryOption_Proxy(This: *s_IWinInetInfo, dwOption: ulong, pBuffer: *, pcbBuf: *ulong) -> long
export import def #extern IWinInetInfo_QueryOption_Stub(This: *s_IWinInetInfo, dwOption: ulong, pBuffer: *char, pcbBuf: *ulong) -> long
export import def #extern IWinInetHttpInfo_QueryInfo_Proxy(This: *s_IWinInetHttpInfo, dwOption: ulong, pBuffer: *, pcbBuf: *ulong, pdwFlags: *ulong, pdwReserved: *ulong) -> long
export import def #extern IWinInetHttpInfo_QueryInfo_Stub(This: *s_IWinInetHttpInfo, dwOption: ulong, pBuffer: *char, pcbBuf: *ulong, pdwFlags: *ulong, pdwReserved: *ulong) -> long
export import def #extern IBindHost_MonikerBindToStorage_Proxy(This: *s_IBindHost, pMk: *s_IMoniker, pBC: *s_IBindCtx, pBSC: *s_IBindStatusCallback, riid: *GUID, ppvObj: **) -> long
export import def #extern IBindHost_MonikerBindToStorage_Stub(This: *s_IBindHost, pMk: *s_IMoniker, pBC: *s_IBindCtx, pBSC: *s_IBindStatusCallback, riid: *GUID, ppvObj: **s_IUnknown) -> long
export import def #extern IBindHost_MonikerBindToObject_Proxy(This: *s_IBindHost, pMk: *s_IMoniker, pBC: *s_IBindCtx, pBSC: *s_IBindStatusCallback, riid: *GUID, ppvObj: **) -> long
export import def #extern IBindHost_MonikerBindToObject_Stub(This: *s_IBindHost, pMk: *s_IMoniker, pBC: *s_IBindCtx, pBSC: *s_IBindStatusCallback, riid: *GUID, ppvObj: **s_IUnknown) -> long
export import def #extern StgConvertVariantToProperty(pvar: *s_tagPROPVARIANT, CodePage: ushort, pprop: *SERIALIZEDPROPERTYVALUE, pcb: *ulong, pid: ulong, fReserved: char, pcIndirect: *ulong) -> *SERIALIZEDPROPERTYVALUE
export import def #extern #dllimport CreateStdProgressIndicator(hwndParent: *s_HWND__, pszTitle: *ushort, pIbscCaller: *s_IBindStatusCallback, ppIbsc: **s_IBindStatusCallback) -> long
export import def #extern #dllimport SysAllocString(psz: *ushort) -> *ushort
export import def #extern #dllimport SysReAllocString(pbstr: **ushort, psz: *ushort) -> int
export import def #extern #dllimport SysAllocStringLen(strIn: *ushort, ui: uint) -> *ushort
export import def #extern #dllimport SysReAllocStringLen(pbstr: **ushort, psz: *ushort, len: uint) -> int
export import def #extern #dllimport SysAddRefString(bstrString: *ushort) -> long
export import def #extern #dllimport SysReleaseString(bstrString: *ushort)
export import def #extern #dllimport SysFreeString(bstrString: *ushort)
export import def #extern #dllimport SysStringLen(pbstr: *ushort) -> uint
export import def #extern #dllimport SysStringByteLen(bstr: *ushort) -> uint
export import def #extern #dllimport SysAllocStringByteLen(psz: *char, len: uint) -> *ushort
export import def #extern #dllimport DosDateTimeToVariantTime(wDosDate: ushort, wDosTime: ushort, pvtime: *double) -> int
export import def #extern #dllimport VariantTimeToDosDateTime(vtime: double, pwDosDate: *ushort, pwDosTime: *ushort) -> int
export import def #extern #dllimport SystemTimeToVariantTime(lpSystemTime: *SYSTEMTIME, pvtime: *double) -> int
export import def #extern #dllimport VariantTimeToSystemTime(vtime: double, lpSystemTime: *SYSTEMTIME) -> int
export import def #extern #dllimport SafeArrayAllocDescriptor(cDims: uint, ppsaOut: **SAFEARRAY) -> long
export import def #extern #dllimport SafeArrayAllocDescriptorEx(vt: ushort, cDims: uint, ppsaOut: **SAFEARRAY) -> long
export import def #extern #dllimport SafeArrayAllocData(psa: *SAFEARRAY) -> long
export import def #extern #dllimport SafeArrayCreate(vt: ushort, cDims: uint, rgsabound: *SAFEARRAYBOUND) -> *SAFEARRAY
export import def #extern #dllimport SafeArrayCreateEx(vt: ushort, cDims: uint, rgsabound: *SAFEARRAYBOUND, pvExtra: *) -> *SAFEARRAY
export import def #extern #dllimport SafeArrayCopyData(psaSource: *SAFEARRAY, psaTarget: *SAFEARRAY) -> long
export import def #extern #dllimport SafeArrayReleaseDescriptor(psa: *SAFEARRAY)
export import def #extern #dllimport SafeArrayDestroyDescriptor(psa: *SAFEARRAY) -> long
export import def #extern #dllimport SafeArrayReleaseData(pData: *)
export import def #extern #dllimport SafeArrayDestroyData(psa: *SAFEARRAY) -> long
export import def #extern #dllimport SafeArrayAddRef(psa: *SAFEARRAY, ppDataToRelease: **) -> long
export import def #extern #dllimport SafeArrayDestroy(psa: *SAFEARRAY) -> long
export import def #extern #dllimport SafeArrayRedim(psa: *SAFEARRAY, psaboundNew: *SAFEARRAYBOUND) -> long
export import def #extern #dllimport SafeArrayGetDim(psa: *SAFEARRAY) -> uint
export import def #extern #dllimport SafeArrayGetElemsize(psa: *SAFEARRAY) -> uint
export import def #extern #dllimport SafeArrayGetUBound(psa: *SAFEARRAY, nDim: uint, plUbound: *long) -> long
export import def #extern #dllimport SafeArrayGetLBound(psa: *SAFEARRAY, nDim: uint, plLbound: *long) -> long
export import def #extern #dllimport SafeArrayLock(psa: *SAFEARRAY) -> long
export import def #extern #dllimport SafeArrayUnlock(psa: *SAFEARRAY) -> long
export import def #extern #dllimport SafeArrayAccessData(psa: *SAFEARRAY, ppvData: **) -> long
export import def #extern #dllimport SafeArrayUnaccessData(psa: *SAFEARRAY) -> long
export import def #extern #dllimport SafeArrayGetElement(psa: *SAFEARRAY, rgIndices: *long, pv: *) -> long
export import def #extern #dllimport SafeArrayPutElement(psa: *SAFEARRAY, rgIndices: *long, pv: *) -> long
export import def #extern #dllimport SafeArrayCopy(psa: *SAFEARRAY, ppsaOut: **SAFEARRAY) -> long
export import def #extern #dllimport SafeArrayPtrOfIndex(psa: *SAFEARRAY, rgIndices: *long, ppvData: **) -> long
export import def #extern #dllimport SafeArraySetRecordInfo(psa: *SAFEARRAY, prinfo: *s_IRecordInfo) -> long
export import def #extern #dllimport SafeArrayGetRecordInfo(psa: *SAFEARRAY, prinfo: **s_IRecordInfo) -> long
export import def #extern #dllimport SafeArraySetIID(psa: *SAFEARRAY, guid: *GUID) -> long
export import def #extern #dllimport SafeArrayGetIID(psa: *SAFEARRAY, pguid: *GUID) -> long
export import def #extern #dllimport SafeArrayGetVartype(psa: *SAFEARRAY, pvt: *ushort) -> long
export import def #extern #dllimport SafeArrayCreateVector(vt: ushort, lLbound: long, cElements: ulong) -> *SAFEARRAY
export import def #extern #dllimport SafeArrayCreateVectorEx(vt: ushort, lLbound: long, cElements: ulong, pvExtra: *) -> *SAFEARRAY
export import def #extern #dllimport VariantInit(pvarg: *s_tagVARIANT)
export import def #extern #dllimport VariantClear(pvarg: *s_tagVARIANT) -> long
export import def #extern #dllimport VariantCopy(pvargDest: *s_tagVARIANT, pvargSrc: *s_tagVARIANT) -> long
export import def #extern #dllimport VariantCopyInd(pvarDest: *s_tagVARIANT, pvargSrc: *s_tagVARIANT) -> long
export import def #extern #dllimport VariantChangeType(pvargDest: *s_tagVARIANT, pvarSrc: *s_tagVARIANT, wFlags: ushort, vt: ushort) -> long
export import def #extern #dllimport VariantChangeTypeEx(pvargDest: *s_tagVARIANT, pvarSrc: *s_tagVARIANT, lcid: ulong, wFlags: ushort, vt: ushort) -> long
export import def #extern #dllimport VectorFromBstr(bstr: *ushort, ppsa: **SAFEARRAY) -> long
export import def #extern #dllimport BstrFromVector(psa: *SAFEARRAY, pbstr: **ushort) -> long
export import def #extern #dllimport VarUI1FromI2(sIn: short, pbOut: *char) -> long
export import def #extern #dllimport VarUI1FromI4(lIn: long, pbOut: *char) -> long
export import def #extern #dllimport VarUI1FromI8(i64In: int64, pbOut: *char) -> long
export import def #extern #dllimport VarUI1FromR4(fltIn: float, pbOut: *char) -> long
export import def #extern #dllimport VarUI1FromR8(dblIn: double, pbOut: *char) -> long
export import def #extern #dllimport VarUI1FromCy(cyIn: CY, pbOut: *char) -> long
export import def #extern #dllimport VarUI1FromDate(dateIn: double, pbOut: *char) -> long
export import def #extern #dllimport VarUI1FromStr(strIn: *ushort, lcid: ulong, dwFlags: ulong, pbOut: *char) -> long
export import def #extern #dllimport VarUI1FromDisp(pdispIn: *s_IDispatch, lcid: ulong, pbOut: *char) -> long
export import def #extern #dllimport VarUI1FromBool(boolIn: short, pbOut: *char) -> long
export import def #extern #dllimport VarUI1FromI1(cIn: char, pbOut: *char) -> long
export import def #extern #dllimport VarUI1FromUI2(uiIn: ushort, pbOut: *char) -> long
export import def #extern #dllimport VarUI1FromUI4(ulIn: ulong, pbOut: *char) -> long
export import def #extern #dllimport VarUI1FromUI8(ui64In: uint64, pbOut: *char) -> long
export import def #extern #dllimport VarUI1FromDec(pdecIn: *DECIMAL, pbOut: *char) -> long
export import def #extern #dllimport VarI2FromUI1(bIn: char, psOut: *short) -> long
export import def #extern #dllimport VarI2FromI4(lIn: long, psOut: *short) -> long
export import def #extern #dllimport VarI2FromI8(i64In: int64, psOut: *short) -> long
export import def #extern #dllimport VarI2FromR4(fltIn: float, psOut: *short) -> long
export import def #extern #dllimport VarI2FromR8(dblIn: double, psOut: *short) -> long
export import def #extern #dllimport VarI2FromCy(cyIn: CY, psOut: *short) -> long
export import def #extern #dllimport VarI2FromDate(dateIn: double, psOut: *short) -> long
export import def #extern #dllimport VarI2FromStr(strIn: *ushort, lcid: ulong, dwFlags: ulong, psOut: *short) -> long
export import def #extern #dllimport VarI2FromDisp(pdispIn: *s_IDispatch, lcid: ulong, psOut: *short) -> long
export import def #extern #dllimport VarI2FromBool(boolIn: short, psOut: *short) -> long
export import def #extern #dllimport VarI2FromI1(cIn: char, psOut: *short) -> long
export import def #extern #dllimport VarI2FromUI2(uiIn: ushort, psOut: *short) -> long
export import def #extern #dllimport VarI2FromUI4(ulIn: ulong, psOut: *short) -> long
export import def #extern #dllimport VarI2FromUI8(ui64In: uint64, psOut: *short) -> long
export import def #extern #dllimport VarI2FromDec(pdecIn: *DECIMAL, psOut: *short) -> long
export import def #extern #dllimport VarI4FromUI1(bIn: char, plOut: *long) -> long
export import def #extern #dllimport VarI4FromI2(sIn: short, plOut: *long) -> long
export import def #extern #dllimport VarI4FromI8(i64In: int64, plOut: *long) -> long
export import def #extern #dllimport VarI4FromR4(fltIn: float, plOut: *long) -> long
export import def #extern #dllimport VarI4FromR8(dblIn: double, plOut: *long) -> long
export import def #extern #dllimport VarI4FromCy(cyIn: CY, plOut: *long) -> long
export import def #extern #dllimport VarI4FromDate(dateIn: double, plOut: *long) -> long
export import def #extern #dllimport VarI4FromStr(strIn: *ushort, lcid: ulong, dwFlags: ulong, plOut: *long) -> long
export import def #extern #dllimport VarI4FromDisp(pdispIn: *s_IDispatch, lcid: ulong, plOut: *long) -> long
export import def #extern #dllimport VarI4FromBool(boolIn: short, plOut: *long) -> long
export import def #extern #dllimport VarI4FromI1(cIn: char, plOut: *long) -> long
export import def #extern #dllimport VarI4FromUI2(uiIn: ushort, plOut: *long) -> long
export import def #extern #dllimport VarI4FromUI4(ulIn: ulong, plOut: *long) -> long
export import def #extern #dllimport VarI4FromUI8(ui64In: uint64, plOut: *long) -> long
export import def #extern #dllimport VarI4FromDec(pdecIn: *DECIMAL, plOut: *long) -> long
export import def #extern #dllimport VarI8FromUI1(bIn: char, pi64Out: *int64) -> long
export import def #extern #dllimport VarI8FromI2(sIn: short, pi64Out: *int64) -> long
export import def #extern #dllimport VarI8FromR4(fltIn: float, pi64Out: *int64) -> long
export import def #extern #dllimport VarI8FromR8(dblIn: double, pi64Out: *int64) -> long
export import def #extern #dllimport VarI8FromCy(cyIn: CY, pi64Out: *int64) -> long
export import def #extern #dllimport VarI8FromDate(dateIn: double, pi64Out: *int64) -> long
export import def #extern #dllimport VarI8FromStr(strIn: *ushort, lcid: ulong, dwFlags: ulong, pi64Out: *int64) -> long
export import def #extern #dllimport VarI8FromDisp(pdispIn: *s_IDispatch, lcid: ulong, pi64Out: *int64) -> long
export import def #extern #dllimport VarI8FromBool(boolIn: short, pi64Out: *int64) -> long
export import def #extern #dllimport VarI8FromI1(cIn: char, pi64Out: *int64) -> long
export import def #extern #dllimport VarI8FromUI2(uiIn: ushort, pi64Out: *int64) -> long
export import def #extern #dllimport VarI8FromUI4(ulIn: ulong, pi64Out: *int64) -> long
export import def #extern #dllimport VarI8FromUI8(ui64In: uint64, pi64Out: *int64) -> long
export import def #extern #dllimport VarI8FromDec(pdecIn: *DECIMAL, pi64Out: *int64) -> long
export import def #extern #dllimport VarR4FromUI1(bIn: char, pfltOut: *float) -> long
export import def #extern #dllimport VarR4FromI2(sIn: short, pfltOut: *float) -> long
export import def #extern #dllimport VarR4FromI4(lIn: long, pfltOut: *float) -> long
export import def #extern #dllimport VarR4FromI8(i64In: int64, pfltOut: *float) -> long
export import def #extern #dllimport VarR4FromR8(dblIn: double, pfltOut: *float) -> long
export import def #extern #dllimport VarR4FromCy(cyIn: CY, pfltOut: *float) -> long
export import def #extern #dllimport VarR4FromDate(dateIn: double, pfltOut: *float) -> long
export import def #extern #dllimport VarR4FromStr(strIn: *ushort, lcid: ulong, dwFlags: ulong, pfltOut: *float) -> long
export import def #extern #dllimport VarR4FromDisp(pdispIn: *s_IDispatch, lcid: ulong, pfltOut: *float) -> long
export import def #extern #dllimport VarR4FromBool(boolIn: short, pfltOut: *float) -> long
export import def #extern #dllimport VarR4FromI1(cIn: char, pfltOut: *float) -> long
export import def #extern #dllimport VarR4FromUI2(uiIn: ushort, pfltOut: *float) -> long
export import def #extern #dllimport VarR4FromUI4(ulIn: ulong, pfltOut: *float) -> long
export import def #extern #dllimport VarR4FromUI8(ui64In: uint64, pfltOut: *float) -> long
export import def #extern #dllimport VarR4FromDec(pdecIn: *DECIMAL, pfltOut: *float) -> long
export import def #extern #dllimport VarR8FromUI1(bIn: char, pdblOut: *double) -> long
export import def #extern #dllimport VarR8FromI2(sIn: short, pdblOut: *double) -> long
export import def #extern #dllimport VarR8FromI4(lIn: long, pdblOut: *double) -> long
export import def #extern #dllimport VarR8FromI8(i64In: int64, pdblOut: *double) -> long
export import def #extern #dllimport VarR8FromR4(fltIn: float, pdblOut: *double) -> long
export import def #extern #dllimport VarR8FromCy(cyIn: CY, pdblOut: *double) -> long
export import def #extern #dllimport VarR8FromDate(dateIn: double, pdblOut: *double) -> long
export import def #extern #dllimport VarR8FromStr(strIn: *ushort, lcid: ulong, dwFlags: ulong, pdblOut: *double) -> long
export import def #extern #dllimport VarR8FromDisp(pdispIn: *s_IDispatch, lcid: ulong, pdblOut: *double) -> long
export import def #extern #dllimport VarR8FromBool(boolIn: short, pdblOut: *double) -> long
export import def #extern #dllimport VarR8FromI1(cIn: char, pdblOut: *double) -> long
export import def #extern #dllimport VarR8FromUI2(uiIn: ushort, pdblOut: *double) -> long
export import def #extern #dllimport VarR8FromUI4(ulIn: ulong, pdblOut: *double) -> long
export import def #extern #dllimport VarR8FromUI8(ui64In: uint64, pdblOut: *double) -> long
export import def #extern #dllimport VarR8FromDec(pdecIn: *DECIMAL, pdblOut: *double) -> long
export import def #extern #dllimport VarDateFromUI1(bIn: char, pdateOut: *double) -> long
export import def #extern #dllimport VarDateFromI2(sIn: short, pdateOut: *double) -> long
export import def #extern #dllimport VarDateFromI4(lIn: long, pdateOut: *double) -> long
export import def #extern #dllimport VarDateFromI8(i64In: int64, pdateOut: *double) -> long
export import def #extern #dllimport VarDateFromR4(fltIn: float, pdateOut: *double) -> long
export import def #extern #dllimport VarDateFromR8(dblIn: double, pdateOut: *double) -> long
export import def #extern #dllimport VarDateFromCy(cyIn: CY, pdateOut: *double) -> long
export import def #extern #dllimport VarDateFromStr(strIn: *ushort, lcid: ulong, dwFlags: ulong, pdateOut: *double) -> long
export import def #extern #dllimport VarDateFromDisp(pdispIn: *s_IDispatch, lcid: ulong, pdateOut: *double) -> long
export import def #extern #dllimport VarDateFromBool(boolIn: short, pdateOut: *double) -> long
export import def #extern #dllimport VarDateFromI1(cIn: char, pdateOut: *double) -> long
export import def #extern #dllimport VarDateFromUI2(uiIn: ushort, pdateOut: *double) -> long
export import def #extern #dllimport VarDateFromUI4(ulIn: ulong, pdateOut: *double) -> long
export import def #extern #dllimport VarDateFromUI8(ui64In: uint64, pdateOut: *double) -> long
export import def #extern #dllimport VarDateFromDec(pdecIn: *DECIMAL, pdateOut: *double) -> long
export import def #extern #dllimport VarCyFromUI1(bIn: char, pcyOut: *CY) -> long
export import def #extern #dllimport VarCyFromI2(sIn: short, pcyOut: *CY) -> long
export import def #extern #dllimport VarCyFromI4(lIn: long, pcyOut: *CY) -> long
export import def #extern #dllimport VarCyFromI8(i64In: int64, pcyOut: *CY) -> long
export import def #extern #dllimport VarCyFromR4(fltIn: float, pcyOut: *CY) -> long
export import def #extern #dllimport VarCyFromR8(dblIn: double, pcyOut: *CY) -> long
export import def #extern #dllimport VarCyFromDate(dateIn: double, pcyOut: *CY) -> long
export import def #extern #dllimport VarCyFromStr(strIn: *ushort, lcid: ulong, dwFlags: ulong, pcyOut: *CY) -> long
export import def #extern #dllimport VarCyFromDisp(pdispIn: *s_IDispatch, lcid: ulong, pcyOut: *CY) -> long
export import def #extern #dllimport VarCyFromBool(boolIn: short, pcyOut: *CY) -> long
export import def #extern #dllimport VarCyFromI1(cIn: char, pcyOut: *CY) -> long
export import def #extern #dllimport VarCyFromUI2(uiIn: ushort, pcyOut: *CY) -> long
export import def #extern #dllimport VarCyFromUI4(ulIn: ulong, pcyOut: *CY) -> long
export import def #extern #dllimport VarCyFromUI8(ui64In: uint64, pcyOut: *CY) -> long
export import def #extern #dllimport VarCyFromDec(pdecIn: *DECIMAL, pcyOut: *CY) -> long
export import def #extern #dllimport VarBstrFromUI1(bVal: char, lcid: ulong, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarBstrFromI2(iVal: short, lcid: ulong, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarBstrFromI4(lIn: long, lcid: ulong, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarBstrFromI8(i64In: int64, lcid: ulong, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarBstrFromR4(fltIn: float, lcid: ulong, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarBstrFromR8(dblIn: double, lcid: ulong, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarBstrFromCy(cyIn: CY, lcid: ulong, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarBstrFromDate(dateIn: double, lcid: ulong, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarBstrFromDisp(pdispIn: *s_IDispatch, lcid: ulong, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarBstrFromBool(boolIn: short, lcid: ulong, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarBstrFromI1(cIn: char, lcid: ulong, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarBstrFromUI2(uiIn: ushort, lcid: ulong, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarBstrFromUI4(ulIn: ulong, lcid: ulong, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarBstrFromUI8(ui64In: uint64, lcid: ulong, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarBstrFromDec(pdecIn: *DECIMAL, lcid: ulong, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarBoolFromUI1(bIn: char, pboolOut: *short) -> long
export import def #extern #dllimport VarBoolFromI2(sIn: short, pboolOut: *short) -> long
export import def #extern #dllimport VarBoolFromI4(lIn: long, pboolOut: *short) -> long
export import def #extern #dllimport VarBoolFromI8(i64In: int64, pboolOut: *short) -> long
export import def #extern #dllimport VarBoolFromR4(fltIn: float, pboolOut: *short) -> long
export import def #extern #dllimport VarBoolFromR8(dblIn: double, pboolOut: *short) -> long
export import def #extern #dllimport VarBoolFromDate(dateIn: double, pboolOut: *short) -> long
export import def #extern #dllimport VarBoolFromCy(cyIn: CY, pboolOut: *short) -> long
export import def #extern #dllimport VarBoolFromStr(strIn: *ushort, lcid: ulong, dwFlags: ulong, pboolOut: *short) -> long
export import def #extern #dllimport VarBoolFromDisp(pdispIn: *s_IDispatch, lcid: ulong, pboolOut: *short) -> long
export import def #extern #dllimport VarBoolFromI1(cIn: char, pboolOut: *short) -> long
export import def #extern #dllimport VarBoolFromUI2(uiIn: ushort, pboolOut: *short) -> long
export import def #extern #dllimport VarBoolFromUI4(ulIn: ulong, pboolOut: *short) -> long
export import def #extern #dllimport VarBoolFromUI8(i64In: uint64, pboolOut: *short) -> long
export import def #extern #dllimport VarBoolFromDec(pdecIn: *DECIMAL, pboolOut: *short) -> long
export import def #extern #dllimport VarI1FromUI1(bIn: char, pcOut: *char) -> long
export import def #extern #dllimport VarI1FromI2(uiIn: short, pcOut: *char) -> long
export import def #extern #dllimport VarI1FromI4(lIn: long, pcOut: *char) -> long
export import def #extern #dllimport VarI1FromI8(i64In: int64, pcOut: *char) -> long
export import def #extern #dllimport VarI1FromR4(fltIn: float, pcOut: *char) -> long
export import def #extern #dllimport VarI1FromR8(dblIn: double, pcOut: *char) -> long
export import def #extern #dllimport VarI1FromDate(dateIn: double, pcOut: *char) -> long
export import def #extern #dllimport VarI1FromCy(cyIn: CY, pcOut: *char) -> long
export import def #extern #dllimport VarI1FromStr(strIn: *ushort, lcid: ulong, dwFlags: ulong, pcOut: *char) -> long
export import def #extern #dllimport VarI1FromDisp(pdispIn: *s_IDispatch, lcid: ulong, pcOut: *char) -> long
export import def #extern #dllimport VarI1FromBool(boolIn: short, pcOut: *char) -> long
export import def #extern #dllimport VarI1FromUI2(uiIn: ushort, pcOut: *char) -> long
export import def #extern #dllimport VarI1FromUI4(ulIn: ulong, pcOut: *char) -> long
export import def #extern #dllimport VarI1FromUI8(i64In: uint64, pcOut: *char) -> long
export import def #extern #dllimport VarI1FromDec(pdecIn: *DECIMAL, pcOut: *char) -> long
export import def #extern #dllimport VarUI2FromUI1(bIn: char, puiOut: *ushort) -> long
export import def #extern #dllimport VarUI2FromI2(uiIn: short, puiOut: *ushort) -> long
export import def #extern #dllimport VarUI2FromI4(lIn: long, puiOut: *ushort) -> long
export import def #extern #dllimport VarUI2FromI8(i64In: int64, puiOut: *ushort) -> long
export import def #extern #dllimport VarUI2FromR4(fltIn: float, puiOut: *ushort) -> long
export import def #extern #dllimport VarUI2FromR8(dblIn: double, puiOut: *ushort) -> long
export import def #extern #dllimport VarUI2FromDate(dateIn: double, puiOut: *ushort) -> long
export import def #extern #dllimport VarUI2FromCy(cyIn: CY, puiOut: *ushort) -> long
export import def #extern #dllimport VarUI2FromStr(strIn: *ushort, lcid: ulong, dwFlags: ulong, puiOut: *ushort) -> long
export import def #extern #dllimport VarUI2FromDisp(pdispIn: *s_IDispatch, lcid: ulong, puiOut: *ushort) -> long
export import def #extern #dllimport VarUI2FromBool(boolIn: short, puiOut: *ushort) -> long
export import def #extern #dllimport VarUI2FromI1(cIn: char, puiOut: *ushort) -> long
export import def #extern #dllimport VarUI2FromUI4(ulIn: ulong, puiOut: *ushort) -> long
export import def #extern #dllimport VarUI2FromUI8(i64In: uint64, puiOut: *ushort) -> long
export import def #extern #dllimport VarUI2FromDec(pdecIn: *DECIMAL, puiOut: *ushort) -> long
export import def #extern #dllimport VarUI4FromUI1(bIn: char, pulOut: *ulong) -> long
export import def #extern #dllimport VarUI4FromI2(uiIn: short, pulOut: *ulong) -> long
export import def #extern #dllimport VarUI4FromI4(lIn: long, pulOut: *ulong) -> long
export import def #extern #dllimport VarUI4FromI8(i64In: int64, plOut: *ulong) -> long
export import def #extern #dllimport VarUI4FromR4(fltIn: float, pulOut: *ulong) -> long
export import def #extern #dllimport VarUI4FromR8(dblIn: double, pulOut: *ulong) -> long
export import def #extern #dllimport VarUI4FromDate(dateIn: double, pulOut: *ulong) -> long
export import def #extern #dllimport VarUI4FromCy(cyIn: CY, pulOut: *ulong) -> long
export import def #extern #dllimport VarUI4FromStr(strIn: *ushort, lcid: ulong, dwFlags: ulong, pulOut: *ulong) -> long
export import def #extern #dllimport VarUI4FromDisp(pdispIn: *s_IDispatch, lcid: ulong, pulOut: *ulong) -> long
export import def #extern #dllimport VarUI4FromBool(boolIn: short, pulOut: *ulong) -> long
export import def #extern #dllimport VarUI4FromI1(cIn: char, pulOut: *ulong) -> long
export import def #extern #dllimport VarUI4FromUI2(uiIn: ushort, pulOut: *ulong) -> long
export import def #extern #dllimport VarUI4FromUI8(ui64In: uint64, plOut: *ulong) -> long
export import def #extern #dllimport VarUI4FromDec(pdecIn: *DECIMAL, pulOut: *ulong) -> long
export import def #extern #dllimport VarUI8FromUI1(bIn: char, pi64Out: *uint64) -> long
export import def #extern #dllimport VarUI8FromI2(sIn: short, pi64Out: *uint64) -> long
export import def #extern #dllimport VarUI8FromI4(lIn: long, pi64Out: *uint64) -> long
export import def #extern #dllimport VarUI8FromI8(ui64In: int64, pi64Out: *uint64) -> long
export import def #extern #dllimport VarUI8FromR4(fltIn: float, pi64Out: *uint64) -> long
export import def #extern #dllimport VarUI8FromR8(dblIn: double, pi64Out: *uint64) -> long
export import def #extern #dllimport VarUI8FromCy(cyIn: CY, pi64Out: *uint64) -> long
export import def #extern #dllimport VarUI8FromDate(dateIn: double, pi64Out: *uint64) -> long
export import def #extern #dllimport VarUI8FromStr(strIn: *ushort, lcid: ulong, dwFlags: ulong, pi64Out: *uint64) -> long
export import def #extern #dllimport VarUI8FromDisp(pdispIn: *s_IDispatch, lcid: ulong, pi64Out: *uint64) -> long
export import def #extern #dllimport VarUI8FromBool(boolIn: short, pi64Out: *uint64) -> long
export import def #extern #dllimport VarUI8FromI1(cIn: char, pi64Out: *uint64) -> long
export import def #extern #dllimport VarUI8FromUI2(uiIn: ushort, pi64Out: *uint64) -> long
export import def #extern #dllimport VarUI8FromUI4(ulIn: ulong, pi64Out: *uint64) -> long
export import def #extern #dllimport VarUI8FromDec(pdecIn: *DECIMAL, pi64Out: *uint64) -> long
export import def #extern #dllimport VarDecFromUI1(bIn: char, pdecOut: *DECIMAL) -> long
export import def #extern #dllimport VarDecFromI2(uiIn: short, pdecOut: *DECIMAL) -> long
export import def #extern #dllimport VarDecFromI4(lIn: long, pdecOut: *DECIMAL) -> long
export import def #extern #dllimport VarDecFromI8(i64In: int64, pdecOut: *DECIMAL) -> long
export import def #extern #dllimport VarDecFromR4(fltIn: float, pdecOut: *DECIMAL) -> long
export import def #extern #dllimport VarDecFromR8(dblIn: double, pdecOut: *DECIMAL) -> long
export import def #extern #dllimport VarDecFromDate(dateIn: double, pdecOut: *DECIMAL) -> long
export import def #extern #dllimport VarDecFromCy(cyIn: CY, pdecOut: *DECIMAL) -> long
export import def #extern #dllimport VarDecFromStr(strIn: *ushort, lcid: ulong, dwFlags: ulong, pdecOut: *DECIMAL) -> long
export import def #extern #dllimport VarDecFromDisp(pdispIn: *s_IDispatch, lcid: ulong, pdecOut: *DECIMAL) -> long
export import def #extern #dllimport VarDecFromBool(boolIn: short, pdecOut: *DECIMAL) -> long
export import def #extern #dllimport VarDecFromI1(cIn: char, pdecOut: *DECIMAL) -> long
export import def #extern #dllimport VarDecFromUI2(uiIn: ushort, pdecOut: *DECIMAL) -> long
export import def #extern #dllimport VarDecFromUI4(ulIn: ulong, pdecOut: *DECIMAL) -> long
export import def #extern #dllimport VarDecFromUI8(ui64In: uint64, pdecOut: *DECIMAL) -> long
export import def #extern #dllimport VarParseNumFromStr(strIn: *ushort, lcid: ulong, dwFlags: ulong, pnumprs: *NUMPARSE, rgbDig: *char) -> long
export import def #extern #dllimport VarNumFromParseNum(pnumprs: *NUMPARSE, rgbDig: *char, dwVtBits: ulong, pvar: *s_tagVARIANT) -> long
export import def #extern VarAdd(pvarLeft: *s_tagVARIANT, pvarRight: *s_tagVARIANT, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarAnd(pvarLeft: *s_tagVARIANT, pvarRight: *s_tagVARIANT, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarCat(pvarLeft: *s_tagVARIANT, pvarRight: *s_tagVARIANT, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarDiv(pvarLeft: *s_tagVARIANT, pvarRight: *s_tagVARIANT, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarEqv(pvarLeft: *s_tagVARIANT, pvarRight: *s_tagVARIANT, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarIdiv(pvarLeft: *s_tagVARIANT, pvarRight: *s_tagVARIANT, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarImp(pvarLeft: *s_tagVARIANT, pvarRight: *s_tagVARIANT, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarMod(pvarLeft: *s_tagVARIANT, pvarRight: *s_tagVARIANT, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarMul(pvarLeft: *s_tagVARIANT, pvarRight: *s_tagVARIANT, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarOr(pvarLeft: *s_tagVARIANT, pvarRight: *s_tagVARIANT, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarPow(pvarLeft: *s_tagVARIANT, pvarRight: *s_tagVARIANT, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarSub(pvarLeft: *s_tagVARIANT, pvarRight: *s_tagVARIANT, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarXor(pvarLeft: *s_tagVARIANT, pvarRight: *s_tagVARIANT, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarAbs(pvarIn: *s_tagVARIANT, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarFix(pvarIn: *s_tagVARIANT, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarInt(pvarIn: *s_tagVARIANT, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarNeg(pvarIn: *s_tagVARIANT, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarNot(pvarIn: *s_tagVARIANT, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarRound(pvarIn: *s_tagVARIANT, cDecimals: int, pvarResult: *s_tagVARIANT) -> long
export import def #extern VarCmp(pvarLeft: *s_tagVARIANT, pvarRight: *s_tagVARIANT, lcid: ulong, dwFlags: ulong) -> long
export import def #extern VarDecAdd(pdecLeft: *DECIMAL, pdecRight: *DECIMAL, pdecResult: *DECIMAL) -> long
export import def #extern VarDecDiv(pdecLeft: *DECIMAL, pdecRight: *DECIMAL, pdecResult: *DECIMAL) -> long
export import def #extern VarDecMul(pdecLeft: *DECIMAL, pdecRight: *DECIMAL, pdecResult: *DECIMAL) -> long
export import def #extern VarDecSub(pdecLeft: *DECIMAL, pdecRight: *DECIMAL, pdecResult: *DECIMAL) -> long
export import def #extern VarDecAbs(pdecIn: *DECIMAL, pdecResult: *DECIMAL) -> long
export import def #extern VarDecFix(pdecIn: *DECIMAL, pdecResult: *DECIMAL) -> long
export import def #extern VarDecInt(pdecIn: *DECIMAL, pdecResult: *DECIMAL) -> long
export import def #extern VarDecNeg(pdecIn: *DECIMAL, pdecResult: *DECIMAL) -> long
export import def #extern VarDecRound(pdecIn: *DECIMAL, cDecimals: int, pdecResult: *DECIMAL) -> long
export import def #extern VarDecCmp(pdecLeft: *DECIMAL, pdecRight: *DECIMAL) -> long
export import def #extern VarDecCmpR8(pdecLeft: *DECIMAL, dblRight: double) -> long
export import def #extern VarCyAdd(cyLeft: CY, cyRight: CY, pcyResult: *CY) -> long
export import def #extern VarCyMul(cyLeft: CY, cyRight: CY, pcyResult: *CY) -> long
export import def #extern VarCyMulI4(cyLeft: CY, lRight: long, pcyResult: *CY) -> long
export import def #extern VarCyMulI8(cyLeft: CY, lRight: int64, pcyResult: *CY) -> long
export import def #extern VarCySub(cyLeft: CY, cyRight: CY, pcyResult: *CY) -> long
export import def #extern VarCyAbs(cyIn: CY, pcyResult: *CY) -> long
export import def #extern VarCyFix(cyIn: CY, pcyResult: *CY) -> long
export import def #extern VarCyInt(cyIn: CY, pcyResult: *CY) -> long
export import def #extern VarCyNeg(cyIn: CY, pcyResult: *CY) -> long
export import def #extern VarCyRound(cyIn: CY, cDecimals: int, pcyResult: *CY) -> long
export import def #extern VarCyCmp(cyLeft: CY, cyRight: CY) -> long
export import def #extern VarCyCmpR8(cyLeft: CY, dblRight: double) -> long
export import def #extern VarBstrCat(bstrLeft: *ushort, bstrRight: *ushort, pbstrResult: **ushort) -> long
export import def #extern VarBstrCmp(bstrLeft: *ushort, bstrRight: *ushort, lcid: ulong, dwFlags: ulong) -> long
export import def #extern VarR8Pow(dblLeft: double, dblRight: double, pdblResult: *double) -> long
export import def #extern VarR4CmpR8(fltLeft: float, dblRight: double) -> long
export import def #extern VarR8Round(dblIn: double, cDecimals: int, pdblResult: *double) -> long
export import def #extern #dllimport VarDateFromUdate(pudateIn: *UDATE, dwFlags: ulong, pdateOut: *double) -> long
export import def #extern #dllimport VarDateFromUdateEx(pudateIn: *UDATE, lcid: ulong, dwFlags: ulong, pdateOut: *double) -> long
export import def #extern #dllimport VarUdateFromDate(dateIn: double, dwFlags: ulong, pudateOut: *UDATE) -> long
export import def #extern #dllimport GetAltMonthNames(lcid: ulong, prgp: ***ushort) -> long
export import def #extern #dllimport VarFormat(pvarIn: *s_tagVARIANT, pstrFormat: *ushort, iFirstDay: int, iFirstWeek: int, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarFormatDateTime(pvarIn: *s_tagVARIANT, iNamedFormat: int, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarFormatNumber(pvarIn: *s_tagVARIANT, iNumDig: int, iIncLead: int, iUseParens: int, iGroup: int, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarFormatPercent(pvarIn: *s_tagVARIANT, iNumDig: int, iIncLead: int, iUseParens: int, iGroup: int, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarFormatCurrency(pvarIn: *s_tagVARIANT, iNumDig: int, iIncLead: int, iUseParens: int, iGroup: int, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarWeekdayName(iWeekday: int, fAbbrev: int, iFirstDay: int, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarMonthName(iMonth: int, fAbbrev: int, dwFlags: ulong, pbstrOut: **ushort) -> long
export import def #extern #dllimport VarFormatFromTokens(pvarIn: *s_tagVARIANT, pstrFormat: *ushort, pbTokCur: *char, dwFlags: ulong, pbstrOut: **ushort, lcid: ulong) -> long
export import def #extern #dllimport VarTokenizeFormatString(pstrFormat: *ushort, rgbTok: *char, cbTok: int, iFirstDay: int, iFirstWeek: int, lcid: ulong, pcbActual: *int) -> long
export import def #extern #dllimport LHashValOfNameSysA(syskind: SYSKIND, lcid: ulong, szName: *char) -> ulong
export import def #extern #dllimport LHashValOfNameSys(syskind: SYSKIND, lcid: ulong, szName: *ushort) -> ulong
export import def #extern #dllimport LoadTypeLib(szFile: *ushort, pptlib: **s_ITypeLib) -> long
export import def #extern #dllimport LoadTypeLibEx(szFile: *ushort, regkind: REGKIND, pptlib: **s_ITypeLib) -> long
export import def #extern #dllimport LoadRegTypeLib(rguid: *GUID, wVerMajor: ushort, wVerMinor: ushort, lcid: ulong, pptlib: **s_ITypeLib) -> long
export import def #extern #dllimport QueryPathOfRegTypeLib(guid: *GUID, wMaj: ushort, wMin: ushort, lcid: ulong, lpbstrPathName: **ushort) -> long
export import def #extern #dllimport RegisterTypeLib(ptlib: *s_ITypeLib, szFullPath: *ushort, szHelpDir: *ushort) -> long
export import def #extern #dllimport UnRegisterTypeLib(libID: *GUID, wVerMajor: ushort, wVerMinor: ushort, lcid: ulong, syskind: SYSKIND) -> long
export import def #extern #dllimport RegisterTypeLibForUser(ptlib: *s_ITypeLib, szFullPath: *ushort, szHelpDir: *ushort) -> long
export import def #extern #dllimport UnRegisterTypeLibForUser(libID: *GUID, wMajorVerNum: ushort, wMinorVerNum: ushort, lcid: ulong, syskind: SYSKIND) -> long
export import def #extern #dllimport CreateTypeLib(syskind: SYSKIND, szFile: *ushort, ppctlib: **s_ICreateTypeLib) -> long
export import def #extern #dllimport CreateTypeLib2(syskind: SYSKIND, szFile: *ushort, ppctlib: **s_ICreateTypeLib2) -> long
export import def #extern #dllimport DispGetParam(pdispparams: *DISPPARAMS, position: uint, vtTarg: ushort, pvarResult: *s_tagVARIANT, puArgErr: *uint) -> long
export import def #extern #dllimport DispGetIDsOfNames(ptinfo: *s_ITypeInfo, rgszNames: **ushort, cNames: uint, rgdispid: *long) -> long
export import def #extern #dllimport DispInvoke(_this: *, ptinfo: *s_ITypeInfo, dispidMember: long, wFlags: ushort, pparams: *DISPPARAMS, pvarResult: *s_tagVARIANT, pexcepinfo: *EXCEPINFO, puArgErr: *uint) -> long
export import def #extern #dllimport CreateDispTypeInfo(pidata: *INTERFACEDATA, lcid: ulong, pptinfo: **s_ITypeInfo) -> long
export import def #extern #dllimport CreateStdDispatch(punkOuter: *s_IUnknown, pvThis: *, ptinfo: *s_ITypeInfo, ppunkStdDisp: **s_IUnknown) -> long
export import def #extern #dllimport DispCallFunc(pvInstance: *, oVft: uint64, cc: CALLCONV, vtReturn: ushort, cActuals: uint, prgvt: *ushort, prgpvarg: **s_tagVARIANT, pvargResult: *s_tagVARIANT) -> long
export import def #extern #dllimport RegisterActiveObject(punk: *s_IUnknown, rclsid: *GUID, dwFlags: ulong, pdwRegister: *ulong) -> long
export import def #extern #dllimport RevokeActiveObject(dwRegister: ulong, pvReserved: *) -> long
export import def #extern #dllimport GetActiveObject(rclsid: *GUID, pvReserved: *, ppunk: **s_IUnknown) -> long
export import def #extern #dllimport SetErrorInfo(dwReserved: ulong, perrinfo: *s_IErrorInfo) -> long
export import def #extern #dllimport GetErrorInfo(dwReserved: ulong, pperrinfo: **s_IErrorInfo) -> long
export import def #extern #dllimport CreateErrorInfo(pperrinfo: **s_ICreateErrorInfo) -> long
export import def #extern #dllimport GetRecordInfoFromTypeInfo(pTypeInfo: *s_ITypeInfo, ppRecInfo: **s_IRecordInfo) -> long
export import def #extern #dllimport GetRecordInfoFromGuids(rGuidTypeLib: *GUID, uVerMajor: ulong, uVerMinor: ulong, lcid: ulong, rGuidTypeInfo: *GUID, ppRecInfo: **s_IRecordInfo) -> long
export import def #extern #dllimport OaBuildVersion() -> ulong
export import def #extern #dllimport ClearCustData(pCustData: *CUSTDATA)
export import def #extern #dllimport OaEnablePerUserTLibRegistration()
export import def #extern #dllimport OleBuildVersion() -> ulong
export import def #extern #dllimport WriteFmtUserTypeStg(pstg: *s_IStorage, cf: ushort, lpszUserType: *ushort) -> long
export import def #extern #dllimport ReadFmtUserTypeStg(pstg: *s_IStorage, pcf: *ushort, lplpszUserType: **ushort) -> long
export import def #extern #dllimport OleInitialize(pvReserved: *) -> long
export import def #extern #dllimport OleUninitialize()
export import def #extern #dllimport OleQueryLinkFromData(pSrcDataObject: *s_IDataObject) -> long
export import def #extern #dllimport OleQueryCreateFromData(pSrcDataObject: *s_IDataObject) -> long
export import def #extern #dllimport OleCreate(rclsid: *GUID, riid: *GUID, renderopt: ulong, pFormatEtc: *FORMATETC, pClientSite: *s_IOleClientSite, pStg: *s_IStorage, ppvObj: **) -> long
export import def #extern #dllimport OleCreateEx(rclsid: *GUID, riid: *GUID, dwFlags: ulong, renderopt: ulong, cFormats: ulong, rgAdvf: *ulong, rgFormatEtc: *FORMATETC, lpAdviseSink: *s_IAdviseSink, rgdwConnection: *ulong, pClientSite: *s_IOleClientSite, pStg: *s_IStorage, ppvObj: **) -> long
export import def #extern #dllimport OleCreateFromData(pSrcDataObj: *s_IDataObject, riid: *GUID, renderopt: ulong, pFormatEtc: *FORMATETC, pClientSite: *s_IOleClientSite, pStg: *s_IStorage, ppvObj: **) -> long
export import def #extern #dllimport OleCreateFromDataEx(pSrcDataObj: *s_IDataObject, riid: *GUID, dwFlags: ulong, renderopt: ulong, cFormats: ulong, rgAdvf: *ulong, rgFormatEtc: *FORMATETC, lpAdviseSink: *s_IAdviseSink, rgdwConnection: *ulong, pClientSite: *s_IOleClientSite, pStg: *s_IStorage, ppvObj: **) -> long
export import def #extern #dllimport OleCreateLinkFromData(pSrcDataObj: *s_IDataObject, riid: *GUID, renderopt: ulong, pFormatEtc: *FORMATETC, pClientSite: *s_IOleClientSite, pStg: *s_IStorage, ppvObj: **) -> long
export import def #extern #dllimport OleCreateLinkFromDataEx(pSrcDataObj: *s_IDataObject, riid: *GUID, dwFlags: ulong, renderopt: ulong, cFormats: ulong, rgAdvf: *ulong, rgFormatEtc: *FORMATETC, lpAdviseSink: *s_IAdviseSink, rgdwConnection: *ulong, pClientSite: *s_IOleClientSite, pStg: *s_IStorage, ppvObj: **) -> long
export import def #extern #dllimport OleCreateStaticFromData(pSrcDataObj: *s_IDataObject, iid: *GUID, renderopt: ulong, pFormatEtc: *FORMATETC, pClientSite: *s_IOleClientSite, pStg: *s_IStorage, ppvObj: **) -> long
export import def #extern #dllimport OleCreateLink(pmkLinkSrc: *s_IMoniker, riid: *GUID, renderopt: ulong, lpFormatEtc: *FORMATETC, pClientSite: *s_IOleClientSite, pStg: *s_IStorage, ppvObj: **) -> long
export import def #extern #dllimport OleCreateLinkEx(pmkLinkSrc: *s_IMoniker, riid: *GUID, dwFlags: ulong, renderopt: ulong, cFormats: ulong, rgAdvf: *ulong, rgFormatEtc: *FORMATETC, lpAdviseSink: *s_IAdviseSink, rgdwConnection: *ulong, pClientSite: *s_IOleClientSite, pStg: *s_IStorage, ppvObj: **) -> long
export import def #extern #dllimport OleCreateLinkToFile(lpszFileName: *ushort, riid: *GUID, renderopt: ulong, lpFormatEtc: *FORMATETC, pClientSite: *s_IOleClientSite, pStg: *s_IStorage, ppvObj: **) -> long
export import def #extern #dllimport OleCreateLinkToFileEx(lpszFileName: *ushort, riid: *GUID, dwFlags: ulong, renderopt: ulong, cFormats: ulong, rgAdvf: *ulong, rgFormatEtc: *FORMATETC, lpAdviseSink: *s_IAdviseSink, rgdwConnection: *ulong, pClientSite: *s_IOleClientSite, pStg: *s_IStorage, ppvObj: **) -> long
export import def #extern #dllimport OleCreateFromFile(rclsid: *GUID, lpszFileName: *ushort, riid: *GUID, renderopt: ulong, lpFormatEtc: *FORMATETC, pClientSite: *s_IOleClientSite, pStg: *s_IStorage, ppvObj: **) -> long
export import def #extern #dllimport OleCreateFromFileEx(rclsid: *GUID, lpszFileName: *ushort, riid: *GUID, dwFlags: ulong, renderopt: ulong, cFormats: ulong, rgAdvf: *ulong, rgFormatEtc: *FORMATETC, lpAdviseSink: *s_IAdviseSink, rgdwConnection: *ulong, pClientSite: *s_IOleClientSite, pStg: *s_IStorage, ppvObj: **) -> long
export import def #extern #dllimport OleLoad(pStg: *s_IStorage, riid: *GUID, pClientSite: *s_IOleClientSite, ppvObj: **) -> long
export import def #extern #dllimport OleSave(pPS: *s_IPersistStorage, pStg: *s_IStorage, fSameAsLoad: int) -> long
export import def #extern #dllimport OleLoadFromStream(pStm: *s_IStream, iidInterface: *GUID, ppvObj: **) -> long
export import def #extern #dllimport OleSaveToStream(pPStm: *s_IPersistStream, pStm: *s_IStream) -> long
export import def #extern #dllimport OleSetContainedObject(pUnknown: *s_IUnknown, fContained: int) -> long
export import def #extern #dllimport OleNoteObjectVisible(pUnknown: *s_IUnknown, fVisible: int) -> long
export import def #extern #dllimport RegisterDragDrop(hwnd: *s_HWND__, pDropTarget: *s_IDropTarget) -> long
export import def #extern #dllimport RevokeDragDrop(hwnd: *s_HWND__) -> long
export import def #extern #dllimport DoDragDrop(pDataObj: *s_IDataObject, pDropSource: *s_IDropSource, dwOKEffects: ulong, pdwEffect: *ulong) -> long
export import def #extern #dllimport OleSetClipboard(pDataObj: *s_IDataObject) -> long
export import def #extern #dllimport OleGetClipboard(ppDataObj: **s_IDataObject) -> long
export import def #extern #dllimport OleGetClipboardWithEnterpriseInfo(dataObject: **s_IDataObject, dataEnterpriseId: **ushort, sourceDescription: **ushort, targetDescription: **ushort, dataDescription: **ushort) -> long
export import def #extern #dllimport OleFlushClipboard() -> long
export import def #extern #dllimport OleIsCurrentClipboard(pDataObj: *s_IDataObject) -> long
export import def #extern #dllimport OleCreateMenuDescriptor(hmenuCombined: *s_HMENU__, lpMenuWidths: *OLEMENUGROUPWIDTHS) -> *
export import def #extern #dllimport OleSetMenuDescriptor(holemenu: *, hwndFrame: *s_HWND__, hwndActiveObject: *s_HWND__, lpFrame: *s_IOleInPlaceFrame, lpActiveObj: *s_IOleInPlaceActiveObject) -> long
export import def #extern #dllimport OleDestroyMenuDescriptor(holemenu: *) -> long
export import def #extern #dllimport OleTranslateAccelerator(lpFrame: *s_IOleInPlaceFrame, lpFrameInfo: *OLEINPLACEFRAMEINFO, lpmsg: *MSG) -> long
export import def #extern #dllimport OleDuplicateData(hSrc: *, cfFormat: ushort, uiFlags: uint) -> *
export import def #extern #dllimport OleDraw(pUnknown: *s_IUnknown, dwAspect: ulong, hdcDraw: *s_HDC__, lprcBounds: *RECT) -> long
export import def #extern #dllimport OleRun(pUnknown: *s_IUnknown) -> long
export import def #extern #dllimport OleIsRunning(pObject: *s_IOleObject) -> int
export import def #extern #dllimport OleLockRunning(pUnknown: *s_IUnknown, fLock: int, fLastUnlockCloses: int) -> long
export import def #extern #dllimport ReleaseStgMedium(_0: *uSTGMEDIUM)
export import def #extern #dllimport CreateOleAdviseHolder(ppOAHolder: **s_IOleAdviseHolder) -> long
export import def #extern #dllimport OleCreateDefaultHandler(clsid: *GUID, pUnkOuter: *s_IUnknown, riid: *GUID, lplpObj: **) -> long
export import def #extern #dllimport OleCreateEmbeddingHelper(clsid: *GUID, pUnkOuter: *s_IUnknown, flags: ulong, pCF: *s_IClassFactory, riid: *GUID, lplpObj: **) -> long
export import def #extern #dllimport IsAccelerator(hAccel: *s_HACCEL__, cAccelEntries: int, lpMsg: *MSG, lpwCmd: *ushort) -> int
export import def #extern #dllimport OleGetIconOfFile(lpszPath: *ushort, fUseFileAsLabel: int) -> *
export import def #extern #dllimport OleGetIconOfClass(rclsid: *GUID, lpszLabel: *ushort, fUseTypeAsLabel: int) -> *
export import def #extern #dllimport OleMetafilePictFromIconAndLabel(hIcon: *s_HICON__, lpszLabel: *ushort, lpszSourceFile: *ushort, iIconIndex: uint) -> *
export import def #extern #dllimport OleRegGetUserType(clsid: *GUID, dwFormOfType: ulong, pszUserType: **ushort) -> long
export import def #extern #dllimport OleRegGetMiscStatus(clsid: *GUID, dwAspect: ulong, pdwStatus: *ulong) -> long
export import def #extern #dllimport OleRegEnumFormatEtc(clsid: *GUID, dwDirection: ulong, ppenum: **s_IEnumFORMATETC) -> long
export import def #extern #dllimport OleRegEnumVerbs(clsid: *GUID, ppenum: **s_IEnumOLEVERB) -> long
export import def #extern #dllimport OleConvertOLESTREAMToIStorage(lpolestream: *OLESTREAM, pstg: *s_IStorage, ptd: *DVTARGETDEVICE) -> long
export import def #extern #dllimport OleConvertIStorageToOLESTREAM(pstg: *s_IStorage, lpolestream: *OLESTREAM) -> long
export import def #extern #dllimport OleDoAutoConvert(pStg: *s_IStorage, pClsidNew: *GUID) -> long
export import def #extern #dllimport OleGetAutoConvert(clsidOld: *GUID, pClsidNew: *GUID) -> long
export import def #extern #dllimport OleSetAutoConvert(clsidOld: *GUID, clsidNew: *GUID) -> long
export import def #extern #dllimport SetConvertStg(pStg: *s_IStorage, fConvert: int) -> long
export import def #extern #dllimport OleConvertIStorageToOLESTREAMEx(pstg: *s_IStorage, cfFormat: ushort, lWidth: long, lHeight: long, dwSize: ulong, pmedium: *uSTGMEDIUM, polestm: *OLESTREAM) -> long
export import def #extern #dllimport OleConvertOLESTREAMToIStorageEx(polestm: *OLESTREAM, pstg: *s_IStorage, pcfFormat: *ushort, plwWidth: *long, plHeight: *long, pdwSize: *ulong, pmedium: *uSTGMEDIUM) -> long
export import def #extern #dllimport GetOpenFileNameA(_0: *OPENFILENAMEA) -> int
export import def #extern #dllimport GetOpenFileNameW(_0: *OPENFILENAMEW) -> int
export import def #extern #dllimport GetSaveFileNameA(_0: *OPENFILENAMEA) -> int
export import def #extern #dllimport GetSaveFileNameW(_0: *OPENFILENAMEW) -> int
export import def #extern #dllimport GetFileTitleA(_0: *char, Buf: *char, cchSize: ushort) -> short
export import def #extern #dllimport GetFileTitleW(_0: *ushort, Buf: *ushort, cchSize: ushort) -> short
export import def #extern #dllimport ChooseColorA(_0: *CHOOSECOLORA) -> int
export import def #extern #dllimport ChooseColorW(_0: *CHOOSECOLORW) -> int
export import def #extern #dllimport FindTextA(_0: *FINDREPLACEA) -> *s_HWND__
export import def #extern #dllimport FindTextW(_0: *FINDREPLACEW) -> *s_HWND__
export import def #extern #dllimport ReplaceTextA(_0: *FINDREPLACEA) -> *s_HWND__
export import def #extern #dllimport ReplaceTextW(_0: *FINDREPLACEW) -> *s_HWND__
export import def #extern #dllimport ChooseFontA(_0: *CHOOSEFONTA) -> int
export import def #extern #dllimport ChooseFontW(_0: *CHOOSEFONTW) -> int
export import def #extern #dllimport PrintDlgA(pPD: *PRINTDLGA) -> int
export import def #extern #dllimport PrintDlgW(pPD: *PRINTDLGW) -> int
export import def #extern #dllimport PrintDlgExA(pPD: *PRINTDLGEXA) -> long
export import def #extern #dllimport PrintDlgExW(pPD: *PRINTDLGEXW) -> long
export import def #extern #dllimport CommDlgExtendedError() -> ulong
export import def #extern #dllimport PageSetupDlgA(_0: *PAGESETUPDLGA) -> int
export import def #extern #dllimport PageSetupDlgW(_0: *PAGESETUPDLGW) -> int
export import def #extern uaw_CharUpperW(String: *ushort) -> *ushort
export import def #extern uaw_lstrcmpW(String1: *ushort, String2: *ushort) -> int
export import def #extern uaw_lstrcmpiW(String1: *ushort, String2: *ushort) -> int
export import def #extern uaw_lstrlenW(String: *ushort) -> int
export import def #extern uaw_wcschr(String: *ushort, Character: ushort) -> *ushort
export import def #extern uaw_wcscpy(Destination: *ushort, Source: *ushort) -> *ushort
export import def #extern uaw_wcsicmp(String1: *ushort, String2: *ushort) -> int
export import def #extern uaw_wcslen(String: *ushort) -> uint64
export import def #extern uaw_wcsrchr(String: *ushort, Character: ushort) -> *ushort
export import def #extern #dllimport ChangeServiceConfigA(hService: *s_SC_HANDLE__, dwServiceType: ulong, dwStartType: ulong, dwErrorControl: ulong, lpBinaryPathName: *char, lpLoadOrderGroup: *char, lpdwTagId: *ulong, lpDependencies: *char, lpServiceStartName: *char, lpPassword: *char, lpDisplayName: *char) -> int
export import def #extern #dllimport ChangeServiceConfigW(hService: *s_SC_HANDLE__, dwServiceType: ulong, dwStartType: ulong, dwErrorControl: ulong, lpBinaryPathName: *ushort, lpLoadOrderGroup: *ushort, lpdwTagId: *ulong, lpDependencies: *ushort, lpServiceStartName: *ushort, lpPassword: *ushort, lpDisplayName: *ushort) -> int
export import def #extern #dllimport ChangeServiceConfig2A(hService: *s_SC_HANDLE__, dwInfoLevel: ulong, lpInfo: *) -> int
export import def #extern #dllimport ChangeServiceConfig2W(hService: *s_SC_HANDLE__, dwInfoLevel: ulong, lpInfo: *) -> int
export import def #extern #dllimport CloseServiceHandle(hSCObject: *s_SC_HANDLE__) -> int
export import def #extern #dllimport ControlService(hService: *s_SC_HANDLE__, dwControl: ulong, lpServiceStatus: *SERVICE_STATUS) -> int
export import def #extern #dllimport CreateServiceA(hSCManager: *s_SC_HANDLE__, lpServiceName: *char, lpDisplayName: *char, dwDesiredAccess: ulong, dwServiceType: ulong, dwStartType: ulong, dwErrorControl: ulong, lpBinaryPathName: *char, lpLoadOrderGroup: *char, lpdwTagId: *ulong, lpDependencies: *char, lpServiceStartName: *char, lpPassword: *char) -> *s_SC_HANDLE__
export import def #extern #dllimport CreateServiceW(hSCManager: *s_SC_HANDLE__, lpServiceName: *ushort, lpDisplayName: *ushort, dwDesiredAccess: ulong, dwServiceType: ulong, dwStartType: ulong, dwErrorControl: ulong, lpBinaryPathName: *ushort, lpLoadOrderGroup: *ushort, lpdwTagId: *ulong, lpDependencies: *ushort, lpServiceStartName: *ushort, lpPassword: *ushort) -> *s_SC_HANDLE__
export import def #extern #dllimport DeleteService(hService: *s_SC_HANDLE__) -> int
export import def #extern #dllimport EnumDependentServicesA(hService: *s_SC_HANDLE__, dwServiceState: ulong, lpServices: *ENUM_SERVICE_STATUSA, cbBufSize: ulong, pcbBytesNeeded: *ulong, lpServicesReturned: *ulong) -> int
export import def #extern #dllimport EnumDependentServicesW(hService: *s_SC_HANDLE__, dwServiceState: ulong, lpServices: *ENUM_SERVICE_STATUSW, cbBufSize: ulong, pcbBytesNeeded: *ulong, lpServicesReturned: *ulong) -> int
export import def #extern #dllimport EnumServicesStatusA(hSCManager: *s_SC_HANDLE__, dwServiceType: ulong, dwServiceState: ulong, lpServices: *ENUM_SERVICE_STATUSA, cbBufSize: ulong, pcbBytesNeeded: *ulong, lpServicesReturned: *ulong, lpResumeHandle: *ulong) -> int
export import def #extern #dllimport EnumServicesStatusW(hSCManager: *s_SC_HANDLE__, dwServiceType: ulong, dwServiceState: ulong, lpServices: *ENUM_SERVICE_STATUSW, cbBufSize: ulong, pcbBytesNeeded: *ulong, lpServicesReturned: *ulong, lpResumeHandle: *ulong) -> int
export import def #extern #dllimport EnumServicesStatusExA(hSCManager: *s_SC_HANDLE__, InfoLevel: SC_ENUM_TYPE, dwServiceType: ulong, dwServiceState: ulong, lpServices: *char, cbBufSize: ulong, pcbBytesNeeded: *ulong, lpServicesReturned: *ulong, lpResumeHandle: *ulong, pszGroupName: *char) -> int
export import def #extern #dllimport EnumServicesStatusExW(hSCManager: *s_SC_HANDLE__, InfoLevel: SC_ENUM_TYPE, dwServiceType: ulong, dwServiceState: ulong, lpServices: *char, cbBufSize: ulong, pcbBytesNeeded: *ulong, lpServicesReturned: *ulong, lpResumeHandle: *ulong, pszGroupName: *ushort) -> int
export import def #extern #dllimport GetServiceKeyNameA(hSCManager: *s_SC_HANDLE__, lpDisplayName: *char, lpServiceName: *char, lpcchBuffer: *ulong) -> int
export import def #extern #dllimport GetServiceKeyNameW(hSCManager: *s_SC_HANDLE__, lpDisplayName: *ushort, lpServiceName: *ushort, lpcchBuffer: *ulong) -> int
export import def #extern #dllimport GetServiceDisplayNameA(hSCManager: *s_SC_HANDLE__, lpServiceName: *char, lpDisplayName: *char, lpcchBuffer: *ulong) -> int
export import def #extern #dllimport GetServiceDisplayNameW(hSCManager: *s_SC_HANDLE__, lpServiceName: *ushort, lpDisplayName: *ushort, lpcchBuffer: *ulong) -> int
export import def #extern #dllimport LockServiceDatabase(hSCManager: *s_SC_HANDLE__) -> *
export import def #extern #dllimport NotifyBootConfigStatus(BootAcceptable: int) -> int
export import def #extern #dllimport OpenSCManagerA(lpMachineName: *char, lpDatabaseName: *char, dwDesiredAccess: ulong) -> *s_SC_HANDLE__
export import def #extern #dllimport OpenSCManagerW(lpMachineName: *ushort, lpDatabaseName: *ushort, dwDesiredAccess: ulong) -> *s_SC_HANDLE__
export import def #extern #dllimport OpenServiceA(hSCManager: *s_SC_HANDLE__, lpServiceName: *char, dwDesiredAccess: ulong) -> *s_SC_HANDLE__
export import def #extern #dllimport OpenServiceW(hSCManager: *s_SC_HANDLE__, lpServiceName: *ushort, dwDesiredAccess: ulong) -> *s_SC_HANDLE__
export import def #extern #dllimport QueryServiceConfigA(hService: *s_SC_HANDLE__, lpServiceConfig: *QUERY_SERVICE_CONFIGA, cbBufSize: ulong, pcbBytesNeeded: *ulong) -> int
export import def #extern #dllimport QueryServiceConfigW(hService: *s_SC_HANDLE__, lpServiceConfig: *QUERY_SERVICE_CONFIGW, cbBufSize: ulong, pcbBytesNeeded: *ulong) -> int
export import def #extern #dllimport QueryServiceConfig2A(hService: *s_SC_HANDLE__, dwInfoLevel: ulong, lpBuffer: *char, cbBufSize: ulong, pcbBytesNeeded: *ulong) -> int
export import def #extern #dllimport QueryServiceConfig2W(hService: *s_SC_HANDLE__, dwInfoLevel: ulong, lpBuffer: *char, cbBufSize: ulong, pcbBytesNeeded: *ulong) -> int
export import def #extern #dllimport QueryServiceLockStatusA(hSCManager: *s_SC_HANDLE__, lpLockStatus: *QUERY_SERVICE_LOCK_STATUSA, cbBufSize: ulong, pcbBytesNeeded: *ulong) -> int
export import def #extern #dllimport QueryServiceLockStatusW(hSCManager: *s_SC_HANDLE__, lpLockStatus: *QUERY_SERVICE_LOCK_STATUSW, cbBufSize: ulong, pcbBytesNeeded: *ulong) -> int
export import def #extern #dllimport QueryServiceObjectSecurity(hService: *s_SC_HANDLE__, dwSecurityInformation: ulong, lpSecurityDescriptor: *, cbBufSize: ulong, pcbBytesNeeded: *ulong) -> int
export import def #extern #dllimport QueryServiceStatus(hService: *s_SC_HANDLE__, lpServiceStatus: *SERVICE_STATUS) -> int
export import def #extern #dllimport QueryServiceStatusEx(hService: *s_SC_HANDLE__, InfoLevel: SC_STATUS_TYPE, lpBuffer: *char, cbBufSize: ulong, pcbBytesNeeded: *ulong) -> int
export import def #extern #dllimport RegisterServiceCtrlHandlerA(lpServiceName: *char, lpHandlerProc: def (ulong) -> ()) -> *s_SERVICE_STATUS_HANDLE__
export import def #extern #dllimport RegisterServiceCtrlHandlerW(lpServiceName: *ushort, lpHandlerProc: def (ulong) -> ()) -> *s_SERVICE_STATUS_HANDLE__
export import def #extern #dllimport RegisterServiceCtrlHandlerExA(lpServiceName: *char, lpHandlerProc: def (ulong, ulong, *, *) -> (ulong), lpContext: *) -> *s_SERVICE_STATUS_HANDLE__
export import def #extern #dllimport RegisterServiceCtrlHandlerExW(lpServiceName: *ushort, lpHandlerProc: def (ulong, ulong, *, *) -> (ulong), lpContext: *) -> *s_SERVICE_STATUS_HANDLE__
export import def #extern #dllimport SetServiceObjectSecurity(hService: *s_SC_HANDLE__, dwSecurityInformation: ulong, lpSecurityDescriptor: *) -> int
export import def #extern #dllimport SetServiceStatus(hServiceStatus: *s_SERVICE_STATUS_HANDLE__, lpServiceStatus: *SERVICE_STATUS) -> int
export import def #extern #dllimport StartServiceCtrlDispatcherA(lpServiceStartTable: *SERVICE_TABLE_ENTRYA) -> int
export import def #extern #dllimport StartServiceCtrlDispatcherW(lpServiceStartTable: *SERVICE_TABLE_ENTRYW) -> int
export import def #extern #dllimport StartServiceA(hService: *s_SC_HANDLE__, dwNumServiceArgs: ulong, lpServiceArgVectors: **char) -> int
export import def #extern #dllimport StartServiceW(hService: *s_SC_HANDLE__, dwNumServiceArgs: ulong, lpServiceArgVectors: **ushort) -> int
export import def #extern #dllimport UnlockServiceDatabase(ScLock: *) -> int
export import def #extern #dllimport NotifyServiceStatusChangeA(hService: *s_SC_HANDLE__, dwNotifyMask: ulong, pNotifyBuffer: *SERVICE_NOTIFY_2A) -> ulong
export import def #extern #dllimport NotifyServiceStatusChangeW(hService: *s_SC_HANDLE__, dwNotifyMask: ulong, pNotifyBuffer: *SERVICE_NOTIFY_2W) -> ulong
export import def #extern #dllimport ControlServiceExA(hService: *s_SC_HANDLE__, dwControl: ulong, dwInfoLevel: ulong, pControlParams: *) -> int
export import def #extern #dllimport ControlServiceExW(hService: *s_SC_HANDLE__, dwControl: ulong, dwInfoLevel: ulong, pControlParams: *) -> int
export import def #extern #dllimport QueryServiceDynamicInformation(hServiceStatus: *s_SERVICE_STATUS_HANDLE__, dwInfoLevel: ulong, ppDynamicInfo: **) -> int
export import def #extern #dllimport SubscribeServiceChangeNotifications(hService: *s_SC_HANDLE__, eEventType: SC_EVENT_TYPE, pCallback: *, pCallbackContext: *, pSubscription: **s__SC_NOTIFICATION_REGISTRATION) -> ulong
export import def #extern #dllimport UnsubscribeServiceChangeNotifications(pSubscription: *s__SC_NOTIFICATION_REGISTRATION)
export import def #extern #dllimport WaitServiceState(hService: *s_SC_HANDLE__, dwNotify: ulong, dwTimeout: ulong, hCancelEvent: *) -> ulong
export import def #extern GetServiceRegistryStateKey(ServiceStatusHandle: *s_SERVICE_STATUS_HANDLE__, StateType: SERVICE_REGISTRY_STATE_TYPE, AccessMask: ulong, ServiceStateKey: **s_HKEY__) -> ulong
export import def #extern GetServiceDirectory(hServiceStatus: *s_SERVICE_STATUS_HANDLE__, eDirectoryType: SERVICE_DIRECTORY_TYPE, lpPathBuffer: *ushort, cchPathBufferLength: ulong, lpcchRequiredBufferLength: *ulong) -> ulong
export import def #extern ImmInstallIMEA(lpszIMEFileName: *char, lpszLayoutText: *char) -> *s_HKL__
export import def #extern ImmInstallIMEW(lpszIMEFileName: *ushort, lpszLayoutText: *ushort) -> *s_HKL__
export import def #extern ImmGetDefaultIMEWnd(_0: *s_HWND__) -> *s_HWND__
export import def #extern ImmGetDescriptionA(_0: *s_HKL__, lpszDescription: *char, uBufLen: uint) -> uint
export import def #extern ImmGetDescriptionW(_0: *s_HKL__, lpszDescription: *ushort, uBufLen: uint) -> uint
export import def #extern ImmGetIMEFileNameA(_0: *s_HKL__, lpszFileName: *char, uBufLen: uint) -> uint
export import def #extern ImmGetIMEFileNameW(_0: *s_HKL__, lpszFileName: *ushort, uBufLen: uint) -> uint
export import def #extern ImmGetProperty(_0: *s_HKL__, _1: ulong) -> ulong
export import def #extern ImmIsIME(_0: *s_HKL__) -> int
export import def #extern ImmSimulateHotKey(_0: *s_HWND__, _1: ulong) -> int
export import def #extern ImmCreateContext() -> *s_HIMC__
export import def #extern ImmDestroyContext(_0: *s_HIMC__) -> int
export import def #extern ImmGetContext(_0: *s_HWND__) -> *s_HIMC__
export import def #extern ImmReleaseContext(_0: *s_HWND__, _1: *s_HIMC__) -> int
export import def #extern ImmAssociateContext(_0: *s_HWND__, _1: *s_HIMC__) -> *s_HIMC__
export import def #extern ImmAssociateContextEx(_0: *s_HWND__, _1: *s_HIMC__, _2: ulong) -> int
export import def #extern ImmGetCompositionStringA(_0: *s_HIMC__, _1: ulong, lpBuf: *, dwBufLen: ulong) -> long
export import def #extern ImmGetCompositionStringW(_0: *s_HIMC__, _1: ulong, lpBuf: *, dwBufLen: ulong) -> long
export import def #extern ImmSetCompositionStringA(_0: *s_HIMC__, dwIndex: ulong, lpComp: *, dwCompLen: ulong, lpRead: *, dwReadLen: ulong) -> int
export import def #extern ImmSetCompositionStringW(_0: *s_HIMC__, dwIndex: ulong, lpComp: *, dwCompLen: ulong, lpRead: *, dwReadLen: ulong) -> int
export import def #extern ImmGetCandidateListCountA(_0: *s_HIMC__, lpdwListCount: *ulong) -> ulong
export import def #extern ImmGetCandidateListCountW(_0: *s_HIMC__, lpdwListCount: *ulong) -> ulong
export import def #extern ImmGetCandidateListA(_0: *s_HIMC__, deIndex: ulong, lpCandList: *CANDIDATELIST, dwBufLen: ulong) -> ulong
export import def #extern ImmGetCandidateListW(_0: *s_HIMC__, deIndex: ulong, lpCandList: *CANDIDATELIST, dwBufLen: ulong) -> ulong
export import def #extern ImmGetGuideLineA(_0: *s_HIMC__, dwIndex: ulong, lpBuf: *char, dwBufLen: ulong) -> ulong
export import def #extern ImmGetGuideLineW(_0: *s_HIMC__, dwIndex: ulong, lpBuf: *ushort, dwBufLen: ulong) -> ulong
export import def #extern ImmGetConversionStatus(_0: *s_HIMC__, lpfdwConversion: *ulong, lpfdwSentence: *ulong) -> int
export import def #extern ImmSetConversionStatus(_0: *s_HIMC__, _1: ulong, _2: ulong) -> int
export import def #extern ImmGetOpenStatus(_0: *s_HIMC__) -> int
export import def #extern ImmSetOpenStatus(_0: *s_HIMC__, _1: int) -> int
export import def #extern ImmGetCompositionFontA(_0: *s_HIMC__, lplf: *LOGFONTA) -> int
export import def #extern ImmGetCompositionFontW(_0: *s_HIMC__, lplf: *LOGFONTW) -> int
export import def #extern ImmSetCompositionFontA(_0: *s_HIMC__, lplf: *LOGFONTA) -> int
export import def #extern ImmSetCompositionFontW(_0: *s_HIMC__, lplf: *LOGFONTW) -> int
export import def #extern ImmConfigureIMEA(_0: *s_HKL__, _1: *s_HWND__, _2: ulong, _3: *) -> int
export import def #extern ImmConfigureIMEW(_0: *s_HKL__, _1: *s_HWND__, _2: ulong, _3: *) -> int
export import def #extern ImmEscapeA(_0: *s_HKL__, _1: *s_HIMC__, _2: uint, _3: *) -> int64
export import def #extern ImmEscapeW(_0: *s_HKL__, _1: *s_HIMC__, _2: uint, _3: *) -> int64
export import def #extern ImmGetConversionListA(_0: *s_HKL__, _1: *s_HIMC__, lpSrc: *char, lpDst: *CANDIDATELIST, dwBufLen: ulong, uFlag: uint) -> ulong
export import def #extern ImmGetConversionListW(_0: *s_HKL__, _1: *s_HIMC__, lpSrc: *ushort, lpDst: *CANDIDATELIST, dwBufLen: ulong, uFlag: uint) -> ulong
export import def #extern ImmNotifyIME(_0: *s_HIMC__, dwAction: ulong, dwIndex: ulong, dwValue: ulong) -> int
export import def #extern ImmGetStatusWindowPos(_0: *s_HIMC__, lpptPos: *POINT) -> int
export import def #extern ImmSetStatusWindowPos(_0: *s_HIMC__, lpptPos: *POINT) -> int
export import def #extern ImmGetCompositionWindow(_0: *s_HIMC__, lpCompForm: *COMPOSITIONFORM) -> int
export import def #extern ImmSetCompositionWindow(_0: *s_HIMC__, lpCompForm: *COMPOSITIONFORM) -> int
export import def #extern ImmGetCandidateWindow(_0: *s_HIMC__, _1: ulong, lpCandidate: *CANDIDATEFORM) -> int
export import def #extern ImmSetCandidateWindow(_0: *s_HIMC__, lpCandidate: *CANDIDATEFORM) -> int
export import def #extern ImmIsUIMessageA(_0: *s_HWND__, _1: uint, _2: uint64, _3: int64) -> int
export import def #extern ImmIsUIMessageW(_0: *s_HWND__, _1: uint, _2: uint64, _3: int64) -> int
export import def #extern ImmGetVirtualKey(_0: *s_HWND__) -> uint
export import def #extern ImmRegisterWordA(_0: *s_HKL__, lpszReading: *char, _2: ulong, lpszRegister: *char) -> int
export import def #extern ImmRegisterWordW(_0: *s_HKL__, lpszReading: *ushort, _2: ulong, lpszRegister: *ushort) -> int
export import def #extern ImmUnregisterWordA(_0: *s_HKL__, lpszReading: *char, _2: ulong, lpszUnregister: *char) -> int
export import def #extern ImmUnregisterWordW(_0: *s_HKL__, lpszReading: *ushort, _2: ulong, lpszUnregister: *ushort) -> int
export import def #extern ImmGetRegisterWordStyleA(_0: *s_HKL__, nItem: uint, lpStyleBuf: *STYLEBUFA) -> uint
export import def #extern ImmGetRegisterWordStyleW(_0: *s_HKL__, nItem: uint, lpStyleBuf: *STYLEBUFW) -> uint
export import def #extern ImmEnumRegisterWordA(_0: *s_HKL__, _1: def (*char, ulong, *char, *) -> (int), lpszReading: *char, _3: ulong, lpszRegister: *char, _5: *) -> uint
export import def #extern ImmEnumRegisterWordW(_0: *s_HKL__, _1: def (*ushort, ulong, *ushort, *) -> (int), lpszReading: *ushort, _3: ulong, lpszRegister: *ushort, _5: *) -> uint
export import def #extern ImmDisableIME(_0: ulong) -> int
export import def #extern ImmEnumInputContext(idThread: ulong, lpfn: def (*s_HIMC__, int64) -> (int), lParam: int64) -> int
export import def #extern ImmGetImeMenuItemsA(_0: *s_HIMC__, _1: ulong, _2: ulong, lpImeParentMenu: *IMEMENUITEMINFOA, lpImeMenu: *IMEMENUITEMINFOA, dwSize: ulong) -> ulong
export import def #extern ImmGetImeMenuItemsW(_0: *s_HIMC__, _1: ulong, _2: ulong, lpImeParentMenu: *IMEMENUITEMINFOW, lpImeMenu: *IMEMENUITEMINFOW, dwSize: ulong) -> ulong
export import def #extern ImmDisableTextFrameService(idThread: ulong) -> int
export import def #extern ImmDisableLegacyIME() -> int
export import def #extern #dllimport SymFindDebugInfoFile(hProcess: *, FileName: *char, DebugFilePath: *char, Callback: def (*, *char, *) -> (int), CallerData: *) -> *
export import def #extern #dllimport SymFindDebugInfoFileW(hProcess: *, FileName: *ushort, DebugFilePath: *ushort, Callback: def (*, *ushort, *) -> (int), CallerData: *) -> *
export import def #extern #dllimport FindDebugInfoFile(FileName: *char, SymbolPath: *char, DebugFilePath: *char) -> *
export import def #extern #dllimport FindDebugInfoFileEx(FileName: *char, SymbolPath: *char, DebugFilePath: *char, Callback: def (*, *char, *) -> (int), CallerData: *) -> *
export import def #extern #dllimport FindDebugInfoFileExW(FileName: *ushort, SymbolPath: *ushort, DebugFilePath: *ushort, Callback: def (*, *ushort, *) -> (int), CallerData: *) -> *
export import def #extern #dllimport SymFindFileInPath(hprocess: *, SearchPathA: *char, FileName: *char, id: *, two: ulong, three: ulong, flags: ulong, FoundFile: *char, callback: def (*char, *) -> (int), context: *) -> int
export import def #extern #dllimport SymFindFileInPathW(hprocess: *, SearchPathA: *ushort, FileName: *ushort, id: *, two: ulong, three: ulong, flags: ulong, FoundFile: *ushort, callback: def (*ushort, *) -> (int), context: *) -> int
export import def #extern #dllimport SymFindExecutableImage(hProcess: *, FileName: *char, ImageFilePath: *char, Callback: def (*, *char, *) -> (int), CallerData: *) -> *
export import def #extern #dllimport SymFindExecutableImageW(hProcess: *, FileName: *ushort, ImageFilePath: *ushort, Callback: def (*, *ushort, *) -> (int), CallerData: *) -> *
export import def #extern #dllimport FindExecutableImage(FileName: *char, SymbolPath: *char, ImageFilePath: *char) -> *
export import def #extern #dllimport FindExecutableImageEx(FileName: *char, SymbolPath: *char, ImageFilePath: *char, Callback: def (*, *char, *) -> (int), CallerData: *) -> *
export import def #extern #dllimport FindExecutableImageExW(FileName: *ushort, SymbolPath: *ushort, ImageFilePath: *ushort, Callback: def (*, *ushort, *) -> (int), CallerData: *) -> *
export import def #extern #dllimport ImageNtHeader(Base: *) -> *IMAGE_NT_HEADERS64
export import def #extern #dllimport ImageDirectoryEntryToDataEx(Base: *, MappedAsImage: char, DirectoryEntry: ushort, Size: *ulong, FoundHeader: **IMAGE_SECTION_HEADER) -> *
export import def #extern #dllimport ImageDirectoryEntryToData(Base: *, MappedAsImage: char, DirectoryEntry: ushort, Size: *ulong) -> *
export import def #extern #dllimport ImageRvaToSection(NtHeaders: *IMAGE_NT_HEADERS64, Base: *, Rva: ulong) -> *IMAGE_SECTION_HEADER
export import def #extern #dllimport ImageRvaToVa(NtHeaders: *IMAGE_NT_HEADERS64, Base: *, Rva: ulong, LastRvaSection: **IMAGE_SECTION_HEADER) -> *
export import def #extern #dllimport SearchTreeForFile(RootPath: *char, InputPathName: *char, OutputPathBuffer: *char) -> int
export import def #extern #dllimport SearchTreeForFileW(RootPath: *ushort, InputPathName: *ushort, OutputPathBuffer: *ushort) -> int
export import def #extern #dllimport EnumDirTree(hProcess: *, RootPath: *char, InputPathName: *char, OutputPathBuffer: *char, cb: def (*char, *) -> (int), data: *) -> int
export import def #extern #dllimport EnumDirTreeW(hProcess: *, RootPath: *ushort, InputPathName: *ushort, OutputPathBuffer: *ushort, cb: def (*ushort, *) -> (int), data: *) -> int
export import def #extern #dllimport MakeSureDirectoryPathExists(DirPath: *char) -> int
export import def #extern #dllimport UnDecorateSymbolName(name: *char, outputString: *char, maxStringLength: ulong, flags: ulong) -> ulong
export import def #extern #dllimport UnDecorateSymbolNameW(name: *ushort, outputString: *ushort, maxStringLength: ulong, flags: ulong) -> ulong
export import def #extern #dllimport StackWalk64(MachineType: ulong, hProcess: *, hThread: *, StackFrame: *STACKFRAME64, ContextRecord: *, ReadMemoryRoutine: def (*, uint64, *, ulong, *ulong) -> (int), FunctionTableAccessRoutine: def (*, uint64) -> (*), GetModuleBaseRoutine: def (*, uint64) -> (uint64), TranslateAddress: def (*, *, *ADDRESS64) -> (uint64)) -> int
export import def #extern #dllimport StackWalkEx(MachineType: ulong, hProcess: *, hThread: *, StackFrame: *STACKFRAME_EX, ContextRecord: *, ReadMemoryRoutine: def (*, uint64, *, ulong, *ulong) -> (int), FunctionTableAccessRoutine: def (*, uint64) -> (*), GetModuleBaseRoutine: def (*, uint64) -> (uint64), TranslateAddress: def (*, *, *ADDRESS64) -> (uint64), Flags: ulong) -> int
export import def #extern #dllimport ImagehlpApiVersion() -> *API_VERSION
export import def #extern #dllimport ImagehlpApiVersionEx(AppVersion: *API_VERSION) -> *API_VERSION
export import def #extern #dllimport GetTimestampForLoadedLibrary(Module: *s_HINSTANCE__) -> ulong
export import def #extern #dllimport SymSetParentWindow(hwnd: *s_HWND__) -> int
export import def #extern #dllimport SymSetHomeDirectory(hProcess: *, dir: *char) -> *char
export import def #extern #dllimport SymSetHomeDirectoryW(hProcess: *, dir: *ushort) -> *ushort
export import def #extern #dllimport SymGetHomeDirectory(type_: ulong, dir: *char, size: uint64) -> *char
export import def #extern #dllimport SymGetHomeDirectoryW(type_: ulong, dir: *ushort, size: uint64) -> *ushort
export import def #extern #dllimport SymGetOmaps(hProcess: *, BaseOfDll: uint64, OmapTo: **OMAP, cOmapTo: *uint64, OmapFrom: **OMAP, cOmapFrom: *uint64) -> int
export import def #extern #dllimport SymSetOptions(SymOptions: ulong) -> ulong
export import def #extern #dllimport SymGetOptions() -> ulong
export import def #extern #dllimport SymCleanup(hProcess: *) -> int
export import def #extern #dllimport SymGetExtendedOption(option: IMAGEHLP_EXTENDED_OPTIONS) -> int
export import def #extern #dllimport SymSetExtendedOption(option: IMAGEHLP_EXTENDED_OPTIONS, value: int) -> int
export import def #extern #dllimport SymMatchString(string: *char, expression: *char, fCase: int) -> int
export import def #extern #dllimport SymMatchStringA(string: *char, expression: *char, fCase: int) -> int
export import def #extern #dllimport SymMatchStringW(string: *ushort, expression: *ushort, fCase: int) -> int
export import def #extern #dllimport SymEnumSourceFiles(hProcess: *, ModBase: uint64, Mask: *char, cbSrcFiles: def (*SOURCEFILE, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymEnumSourceFilesW(hProcess: *, ModBase: uint64, Mask: *ushort, cbSrcFiles: def (*SOURCEFILEW, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymEnumerateModules64(hProcess: *, EnumModulesCallback: def (*char, uint64, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymEnumerateModulesW64(hProcess: *, EnumModulesCallback: def (*ushort, uint64, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport EnumerateLoadedModulesEx(hProcess: *, EnumLoadedModulesCallback: def (*char, uint64, ulong, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport EnumerateLoadedModulesExW(hProcess: *, EnumLoadedModulesCallback: def (*ushort, uint64, ulong, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport EnumerateLoadedModules64(hProcess: *, EnumLoadedModulesCallback: def (*char, uint64, ulong, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport EnumerateLoadedModulesW64(hProcess: *, EnumLoadedModulesCallback: def (*ushort, uint64, ulong, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymFunctionTableAccess64(hProcess: *, AddrBase: uint64) -> *
export import def #extern #dllimport SymFunctionTableAccess64AccessRoutines(hProcess: *, AddrBase: uint64, ReadMemoryRoutine: def (*, uint64, *, ulong, *ulong) -> (int), GetModuleBaseRoutine: def (*, uint64) -> (uint64)) -> *
export import def #extern #dllimport SymGetUnwindInfo(hProcess: *, Address: uint64, Buffer: *, Size: *ulong) -> int
export import def #extern #dllimport SymGetModuleInfo64(hProcess: *, qwAddr: uint64, ModuleInfo: *IMAGEHLP_MODULE64) -> int
export import def #extern #dllimport SymGetModuleInfoW64(hProcess: *, qwAddr: uint64, ModuleInfo: *IMAGEHLP_MODULEW64) -> int
export import def #extern #dllimport SymGetModuleBase64(hProcess: *, qwAddr: uint64) -> uint64
export import def #extern #dllimport SymEnumLines(hProcess: *, Base: uint64, Obj: *char, File: *char, EnumLinesCallback: def (*SRCCODEINFO, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymEnumLinesW(hProcess: *, Base: uint64, Obj: *ushort, File: *ushort, EnumLinesCallback: def (*SRCCODEINFOW, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymGetLineFromAddr64(hProcess: *, qwAddr: uint64, pdwDisplacement: *ulong, Line64: *IMAGEHLP_LINE64) -> int
export import def #extern #dllimport SymGetLineFromAddrW64(hProcess: *, dwAddr: uint64, pdwDisplacement: *ulong, Line: *IMAGEHLP_LINEW64) -> int
export import def #extern #dllimport SymGetLineFromInlineContext(hProcess: *, qwAddr: uint64, InlineContext: ulong, qwModuleBaseAddress: uint64, pdwDisplacement: *ulong, Line64: *IMAGEHLP_LINE64) -> int
export import def #extern #dllimport SymGetLineFromInlineContextW(hProcess: *, dwAddr: uint64, InlineContext: ulong, qwModuleBaseAddress: uint64, pdwDisplacement: *ulong, Line: *IMAGEHLP_LINEW64) -> int
export import def #extern #dllimport SymEnumSourceLines(hProcess: *, Base: uint64, Obj: *char, File: *char, Line: ulong, Flags: ulong, EnumLinesCallback: def (*SRCCODEINFO, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymEnumSourceLinesW(hProcess: *, Base: uint64, Obj: *ushort, File: *ushort, Line: ulong, Flags: ulong, EnumLinesCallback: def (*SRCCODEINFOW, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymAddrIncludeInlineTrace(hProcess: *, Address: uint64) -> ulong
export import def #extern #dllimport SymCompareInlineTrace(hProcess: *, Address1: uint64, InlineContext1: ulong, RetAddress1: uint64, Address2: uint64, RetAddress2: uint64) -> ulong
export import def #extern #dllimport SymQueryInlineTrace(hProcess: *, StartAddress: uint64, StartContext: ulong, StartRetAddress: uint64, CurAddress: uint64, CurContext: *ulong, CurFrameIndex: *ulong) -> int
export import def #extern #dllimport SymGetLineFromName64(hProcess: *, ModuleName: *char, FileName: *char, dwLineNumber: ulong, plDisplacement: *long, Line: *IMAGEHLP_LINE64) -> int
export import def #extern #dllimport SymGetLineFromNameW64(hProcess: *, ModuleName: *ushort, FileName: *ushort, dwLineNumber: ulong, plDisplacement: *long, Line: *IMAGEHLP_LINEW64) -> int
export import def #extern #dllimport SymGetLineNext64(hProcess: *, Line: *IMAGEHLP_LINE64) -> int
export import def #extern #dllimport SymGetLineNextW64(hProcess: *, Line: *IMAGEHLP_LINEW64) -> int
export import def #extern #dllimport SymGetLinePrev64(hProcess: *, Line: *IMAGEHLP_LINE64) -> int
export import def #extern #dllimport SymGetLinePrevW64(hProcess: *, Line: *IMAGEHLP_LINEW64) -> int
export import def #extern #dllimport SymGetFileLineOffsets64(hProcess: *, ModuleName: *char, FileName: *char, Buffer: *uint64, BufferLines: ulong) -> ulong
export import def #extern #dllimport SymMatchFileName(FileName: *char, Match: *char, FileNameStop: **char, MatchStop: **char) -> int
export import def #extern #dllimport SymMatchFileNameW(FileName: *ushort, Match: *ushort, FileNameStop: **ushort, MatchStop: **ushort) -> int
export import def #extern #dllimport SymGetSourceFile(hProcess: *, Base: uint64, Params: *char, FileSpec: *char, FilePath: *char, Size: ulong) -> int
export import def #extern #dllimport SymGetSourceFileW(hProcess: *, Base: uint64, Params: *ushort, FileSpec: *ushort, FilePath: *ushort, Size: ulong) -> int
export import def #extern #dllimport SymGetSourceFileToken(hProcess: *, Base: uint64, FileSpec: *char, Token: **, Size: *ulong) -> int
export import def #extern #dllimport SymGetSourceFileChecksumW(hProcess: *, Base: uint64, FileSpec: *ushort, pCheckSumType: *ulong, pChecksum: *char, checksumSize: ulong, pActualBytesWritten: *ulong) -> int
export import def #extern #dllimport SymGetSourceFileChecksum(hProcess: *, Base: uint64, FileSpec: *char, pCheckSumType: *ulong, pChecksum: *char, checksumSize: ulong, pActualBytesWritten: *ulong) -> int
export import def #extern #dllimport SymGetSourceFileTokenW(hProcess: *, Base: uint64, FileSpec: *ushort, Token: **, Size: *ulong) -> int
export import def #extern #dllimport SymGetSourceFileFromToken(hProcess: *, Token: *, Params: *char, FilePath: *char, Size: ulong) -> int
export import def #extern #dllimport SymGetSourceFileFromTokenW(hProcess: *, Token: *, Params: *ushort, FilePath: *ushort, Size: ulong) -> int
export import def #extern #dllimport SymGetSourceVarFromToken(hProcess: *, Token: *, Params: *char, VarName: *char, Value: *char, Size: ulong) -> int
export import def #extern #dllimport SymGetSourceVarFromTokenW(hProcess: *, Token: *, Params: *ushort, VarName: *ushort, Value: *ushort, Size: ulong) -> int
export import def #extern #dllimport SymEnumSourceFileTokens(hProcess: *, Base: uint64, Callback: def (*, uint64) -> (int)) -> int
export import def #extern #dllimport SymInitialize(hProcess: *, UserSearchPath: *char, fInvadeProcess: int) -> int
export import def #extern #dllimport SymInitializeW(hProcess: *, UserSearchPath: *ushort, fInvadeProcess: int) -> int
export import def #extern #dllimport SymGetSearchPath(hProcess: *, SearchPathA: *char, SearchPathLength: ulong) -> int
export import def #extern #dllimport SymGetSearchPathW(hProcess: *, SearchPathA: *ushort, SearchPathLength: ulong) -> int
export import def #extern #dllimport SymSetSearchPath(hProcess: *, SearchPathA: *char) -> int
export import def #extern #dllimport SymSetSearchPathW(hProcess: *, SearchPathA: *ushort) -> int
export import def #extern #dllimport SymLoadModuleEx(hProcess: *, hFile: *, ImageName: *char, ModuleName: *char, BaseOfDll: uint64, DllSize: ulong, Data: *MODLOAD_DATA, Flags: ulong) -> uint64
export import def #extern #dllimport SymLoadModuleExW(hProcess: *, hFile: *, ImageName: *ushort, ModuleName: *ushort, BaseOfDll: uint64, DllSize: ulong, Data: *MODLOAD_DATA, Flags: ulong) -> uint64
export import def #extern #dllimport SymUnloadModule64(hProcess: *, BaseOfDll: uint64) -> int
export import def #extern #dllimport SymUnDName64(sym: *IMAGEHLP_SYMBOL64, UnDecName: *char, UnDecNameLength: ulong) -> int
export import def #extern #dllimport SymRegisterCallback64(hProcess: *, CallbackFunction: def (*, ulong, uint64, uint64) -> (int), UserContext: uint64) -> int
export import def #extern #dllimport SymRegisterCallbackW64(hProcess: *, CallbackFunction: def (*, ulong, uint64, uint64) -> (int), UserContext: uint64) -> int
export import def #extern #dllimport SymRegisterFunctionEntryCallback64(hProcess: *, CallbackFunction: def (*, uint64, uint64) -> (*), UserContext: uint64) -> int
export import def #extern #dllimport SymSetContext(hProcess: *, StackFrame: *IMAGEHLP_STACK_FRAME, Context: *) -> int
export import def #extern #dllimport SymSetScopeFromAddr(hProcess: *, Address: uint64) -> int
export import def #extern #dllimport SymSetScopeFromInlineContext(hProcess: *, Address: uint64, InlineContext: ulong) -> int
export import def #extern #dllimport SymSetScopeFromIndex(hProcess: *, BaseOfDll: uint64, Index: ulong) -> int
export import def #extern #dllimport SymEnumProcesses(EnumProcessesCallback: def (*, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymFromAddr(hProcess: *, Address: uint64, Displacement: *uint64, Symbol: *SYMBOL_INFO) -> int
export import def #extern #dllimport SymFromAddrW(hProcess: *, Address: uint64, Displacement: *uint64, Symbol: *SYMBOL_INFOW) -> int
export import def #extern #dllimport SymFromInlineContext(hProcess: *, Address: uint64, InlineContext: ulong, Displacement: *uint64, Symbol: *SYMBOL_INFO) -> int
export import def #extern #dllimport SymFromInlineContextW(hProcess: *, Address: uint64, InlineContext: ulong, Displacement: *uint64, Symbol: *SYMBOL_INFOW) -> int
export import def #extern #dllimport SymFromToken(hProcess: *, Base: uint64, Token: ulong, Symbol: *SYMBOL_INFO) -> int
export import def #extern #dllimport SymFromTokenW(hProcess: *, Base: uint64, Token: ulong, Symbol: *SYMBOL_INFOW) -> int
export import def #extern #dllimport SymNext(hProcess: *, si: *SYMBOL_INFO) -> int
export import def #extern #dllimport SymNextW(hProcess: *, siw: *SYMBOL_INFOW) -> int
export import def #extern #dllimport SymPrev(hProcess: *, si: *SYMBOL_INFO) -> int
export import def #extern #dllimport SymPrevW(hProcess: *, siw: *SYMBOL_INFOW) -> int
export import def #extern #dllimport SymFromName(hProcess: *, Name: *char, Symbol: *SYMBOL_INFO) -> int
export import def #extern #dllimport SymFromNameW(hProcess: *, Name: *ushort, Symbol: *SYMBOL_INFOW) -> int
export import def #extern #dllimport SymEnumSymbols(hProcess: *, BaseOfDll: uint64, Mask: *char, EnumSymbolsCallback: def (*SYMBOL_INFO, ulong, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymEnumSymbolsEx(hProcess: *, BaseOfDll: uint64, Mask: *char, EnumSymbolsCallback: def (*SYMBOL_INFO, ulong, *) -> (int), UserContext: *, Options: ulong) -> int
export import def #extern #dllimport SymEnumSymbolsW(hProcess: *, BaseOfDll: uint64, Mask: *ushort, EnumSymbolsCallback: def (*SYMBOL_INFOW, ulong, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymEnumSymbolsExW(hProcess: *, BaseOfDll: uint64, Mask: *ushort, EnumSymbolsCallback: def (*SYMBOL_INFOW, ulong, *) -> (int), UserContext: *, Options: ulong) -> int
export import def #extern #dllimport SymEnumSymbolsForAddr(hProcess: *, Address: uint64, EnumSymbolsCallback: def (*SYMBOL_INFO, ulong, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymEnumSymbolsForAddrW(hProcess: *, Address: uint64, EnumSymbolsCallback: def (*SYMBOL_INFOW, ulong, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymSearch(hProcess: *, BaseOfDll: uint64, Index: ulong, SymTag: ulong, Mask: *char, Address: uint64, EnumSymbolsCallback: def (*SYMBOL_INFO, ulong, *) -> (int), UserContext: *, Options: ulong) -> int
export import def #extern #dllimport SymSearchW(hProcess: *, BaseOfDll: uint64, Index: ulong, SymTag: ulong, Mask: *ushort, Address: uint64, EnumSymbolsCallback: def (*SYMBOL_INFOW, ulong, *) -> (int), UserContext: *, Options: ulong) -> int
export import def #extern #dllimport SymGetScope(hProcess: *, BaseOfDll: uint64, Index: ulong, Symbol: *SYMBOL_INFO) -> int
export import def #extern #dllimport SymGetScopeW(hProcess: *, BaseOfDll: uint64, Index: ulong, Symbol: *SYMBOL_INFOW) -> int
export import def #extern #dllimport SymFromIndex(hProcess: *, BaseOfDll: uint64, Index: ulong, Symbol: *SYMBOL_INFO) -> int
export import def #extern #dllimport SymFromIndexW(hProcess: *, BaseOfDll: uint64, Index: ulong, Symbol: *SYMBOL_INFOW) -> int
export import def #extern #dllimport SymGetTypeInfo(hProcess: *, ModBase: uint64, TypeId: ulong, GetType: IMAGEHLP_SYMBOL_TYPE_INFO, pInfo: *) -> int
export import def #extern #dllimport SymGetTypeInfoEx(hProcess: *, ModBase: uint64, Params: *IMAGEHLP_GET_TYPE_INFO_PARAMS) -> int
export import def #extern #dllimport SymEnumTypes(hProcess: *, BaseOfDll: uint64, EnumSymbolsCallback: def (*SYMBOL_INFO, ulong, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymEnumTypesW(hProcess: *, BaseOfDll: uint64, EnumSymbolsCallback: def (*SYMBOL_INFOW, ulong, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymEnumTypesByName(hProcess: *, BaseOfDll: uint64, mask: *char, EnumSymbolsCallback: def (*SYMBOL_INFO, ulong, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymEnumTypesByNameW(hProcess: *, BaseOfDll: uint64, mask: *ushort, EnumSymbolsCallback: def (*SYMBOL_INFOW, ulong, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymGetTypeFromName(hProcess: *, BaseOfDll: uint64, Name: *char, Symbol: *SYMBOL_INFO) -> int
export import def #extern #dllimport SymGetTypeFromNameW(hProcess: *, BaseOfDll: uint64, Name: *ushort, Symbol: *SYMBOL_INFOW) -> int
export import def #extern #dllimport SymAddSymbol(hProcess: *, BaseOfDll: uint64, Name: *char, Address: uint64, Size: ulong, Flags: ulong) -> int
export import def #extern #dllimport SymAddSymbolW(hProcess: *, BaseOfDll: uint64, Name: *ushort, Address: uint64, Size: ulong, Flags: ulong) -> int
export import def #extern #dllimport SymDeleteSymbol(hProcess: *, BaseOfDll: uint64, Name: *char, Address: uint64, Flags: ulong) -> int
export import def #extern #dllimport SymDeleteSymbolW(hProcess: *, BaseOfDll: uint64, Name: *ushort, Address: uint64, Flags: ulong) -> int
export import def #extern #dllimport SymRefreshModuleList(hProcess: *) -> int
export import def #extern #dllimport SymAddSourceStream(hProcess: *, Base: uint64, StreamFile: *char, Buffer: *char, Size: uint64) -> int
export import def #extern #dllimport SymAddSourceStreamA(hProcess: *, Base: uint64, StreamFile: *char, Buffer: *char, Size: uint64) -> int
export import def #extern #dllimport SymAddSourceStreamW(hProcess: *, Base: uint64, FileSpec: *ushort, Buffer: *char, Size: uint64) -> int
export import def #extern #dllimport SymSrvIsStoreW(hProcess: *, path: *ushort) -> int
export import def #extern #dllimport SymSrvIsStore(hProcess: *, path: *char) -> int
export import def #extern #dllimport SymSrvDeltaName(hProcess: *, SymPath: *char, Type: *char, File1: *char, File2: *char) -> *char
export import def #extern #dllimport SymSrvDeltaNameW(hProcess: *, SymPath: *ushort, Type: *ushort, File1: *ushort, File2: *ushort) -> *ushort
export import def #extern #dllimport SymSrvGetSupplement(hProcess: *, SymPath: *char, Node: *char, File: *char) -> *char
export import def #extern #dllimport SymSrvGetSupplementW(hProcess: *, SymPath: *ushort, Node: *ushort, File: *ushort) -> *ushort
export import def #extern #dllimport SymSrvGetFileIndexes(File: *char, Id: *GUID, Val1: *ulong, Val2: *ulong, Flags: ulong) -> int
export import def #extern #dllimport SymSrvGetFileIndexesW(File: *ushort, Id: *GUID, Val1: *ulong, Val2: *ulong, Flags: ulong) -> int
export import def #extern #dllimport SymSrvGetFileIndexStringW(hProcess: *, SrvPath: *ushort, File: *ushort, Index: *ushort, Size: uint64, Flags: ulong) -> int
export import def #extern #dllimport SymSrvGetFileIndexString(hProcess: *, SrvPath: *char, File: *char, Index: *char, Size: uint64, Flags: ulong) -> int
export import def #extern #dllimport SymSrvGetFileIndexInfo(File: *char, Info: *SYMSRV_INDEX_INFO, Flags: ulong) -> int
export import def #extern #dllimport SymSrvGetFileIndexInfoW(File: *ushort, Info: *SYMSRV_INDEX_INFOW, Flags: ulong) -> int
export import def #extern #dllimport SymSrvStoreSupplement(hProcess: *, SrvPath: *char, Node: *char, File: *char, Flags: ulong) -> *char
export import def #extern #dllimport SymSrvStoreSupplementW(hProcess: *, SymPath: *ushort, Node: *ushort, File: *ushort, Flags: ulong) -> *ushort
export import def #extern #dllimport SymSrvStoreFile(hProcess: *, SrvPath: *char, File: *char, Flags: ulong) -> *char
export import def #extern #dllimport SymSrvStoreFileW(hProcess: *, SrvPath: *ushort, File: *ushort, Flags: ulong) -> *ushort
export import def #extern #dllimport SymGetSymbolFile(hProcess: *, SymPath: *char, ImageFile: *char, Type: ulong, SymbolFile: *char, cSymbolFile: uint64, DbgFile: *char, cDbgFile: uint64) -> int
export import def #extern #dllimport SymGetSymbolFileW(hProcess: *, SymPath: *ushort, ImageFile: *ushort, Type: ulong, SymbolFile: *ushort, cSymbolFile: uint64, DbgFile: *ushort, cDbgFile: uint64) -> int
export import def #extern DbgHelpCreateUserDump(FileName: *char, Callback: def (ulong, **, *ulong, *) -> (int), UserData: *) -> int
export import def #extern DbgHelpCreateUserDumpW(FileName: *ushort, Callback: def (ulong, **, *ulong, *) -> (int), UserData: *) -> int
export import def #extern #dllimport SymGetSymFromAddr64(hProcess: *, qwAddr: uint64, pdwDisplacement: *uint64, Symbol: *IMAGEHLP_SYMBOL64) -> int
export import def #extern #dllimport SymGetSymFromName64(hProcess: *, Name: *char, Symbol: *IMAGEHLP_SYMBOL64) -> int
export import def #extern #dllimport FindFileInPath(hprocess: *, SearchPathA: *char, FileName: *char, id: *, two: ulong, three: ulong, flags: ulong, FilePath: *char) -> int
export import def #extern #dllimport FindFileInSearchPath(hprocess: *, SearchPathA: *char, FileName: *char, one: ulong, two: ulong, three: ulong, FilePath: *char) -> int
export import def #extern #dllimport SymEnumSym(hProcess: *, BaseOfDll: uint64, EnumSymbolsCallback: def (*SYMBOL_INFO, ulong, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymEnumerateSymbols64(hProcess: *, BaseOfDll: uint64, EnumSymbolsCallback: def (*char, uint64, ulong, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymEnumerateSymbolsW64(hProcess: *, BaseOfDll: uint64, EnumSymbolsCallback: def (*ushort, uint64, ulong, *) -> (int), UserContext: *) -> int
export import def #extern #dllimport SymLoadModule64(hProcess: *, hFile: *, ImageName: *char, ModuleName: *char, BaseOfDll: uint64, SizeOfDll: ulong) -> uint64
export import def #extern #dllimport SymGetSymNext64(hProcess: *, Symbol: *IMAGEHLP_SYMBOL64) -> int
export import def #extern #dllimport SymGetSymNextW64(hProcess: *, Symbol: *IMAGEHLP_SYMBOLW64) -> int
export import def #extern #dllimport SymGetSymPrev64(hProcess: *, Symbol: *IMAGEHLP_SYMBOL64) -> int
export import def #extern #dllimport SymGetSymPrevW64(hProcess: *, Symbol: *IMAGEHLP_SYMBOLW64) -> int
export import def #extern #dllimport SetCheckUserInterruptShared(lpStartAddress: def () -> (ulong))
export import def #extern #dllimport GetCheckUserInterruptShared() -> def () -> (ulong)
export import def #extern #dllimport GetSymLoadError() -> ulong
export import def #extern #dllimport SetSymLoadError(error: ulong)
export import def #extern #dllimport ReportSymbolLoadSummary(hProcess: *, pLoadModule: *ushort, pSymbolData: *DBGHELP_DATA_REPORT_STRUCT) -> int
export import def #extern #dllimport RemoveInvalidModuleList(hProcess: *)
export import def #extern #dllimport RangeMapCreate() -> *
export import def #extern #dllimport RangeMapFree(RmapHandle: *)
export import def #extern #dllimport RangeMapAddPeImageSections(RmapHandle: *, ImageName: *ushort, MappedImage: *, MappingBytes: ulong, ImageBase: uint64, UserTag: uint64, MappingFlags: ulong) -> int
export import def #extern #dllimport RangeMapRemove(RmapHandle: *, UserTag: uint64) -> int
export import def #extern #dllimport RangeMapRead(RmapHandle: *, Offset: uint64, Buffer: *, RequestBytes: ulong, Flags: ulong, DoneBytes: *ulong) -> int
export import def #extern #dllimport RangeMapWrite(RmapHandle: *, Offset: uint64, Buffer: *, RequestBytes: ulong, Flags: ulong, DoneBytes: *ulong) -> int
export import def #extern MiniDumpWriteDump(hProcess: *, ProcessId: ulong, hFile: *, DumpType: MINIDUMP_TYPE, ExceptionParam: *MINIDUMP_EXCEPTION_INFORMATION, UserStreamParam: *MINIDUMP_USER_STREAM_INFORMATION, CallbackParam: *MINIDUMP_CALLBACK_INFORMATION) -> int
export import def #extern MiniDumpReadDumpStream(BaseOfDump: *, StreamNumber: ulong, Dir: **MINIDUMP_DIRECTORY, StreamPointer: **, StreamSize: *ulong) -> int
export import var #extern GUID_MAX_POWER_SAVINGS: GUID
export import var #extern GUID_MIN_POWER_SAVINGS: GUID
export import var #extern GUID_TYPICAL_POWER_SAVINGS: GUID
export import var #extern NO_SUBGROUP_GUID: GUID
export import var #extern ALL_POWERSCHEMES_GUID: GUID
export import var #extern GUID_POWERSCHEME_PERSONALITY: GUID
export import var #extern GUID_ACTIVE_POWERSCHEME: GUID
export import var #extern GUID_IDLE_RESILIENCY_SUBGROUP: GUID
export import var #extern GUID_IDLE_RESILIENCY_PERIOD: GUID
export import var #extern GUID_DEEP_SLEEP_ENABLED: GUID
export import var #extern GUID_DEEP_SLEEP_PLATFORM_STATE: GUID
export import var #extern GUID_DISK_COALESCING_POWERDOWN_TIMEOUT: GUID
export import var #extern GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT: GUID
export import var #extern GUID_VIDEO_SUBGROUP: GUID
export import var #extern GUID_VIDEO_POWERDOWN_TIMEOUT: GUID
export import var #extern GUID_VIDEO_ANNOYANCE_TIMEOUT: GUID
export import var #extern GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE: GUID
export import var #extern GUID_VIDEO_DIM_TIMEOUT: GUID
export import var #extern GUID_VIDEO_ADAPTIVE_POWERDOWN: GUID
export import var #extern GUID_MONITOR_POWER_ON: GUID
export import var #extern GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS: GUID
export import var #extern GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS: GUID
export import var #extern GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS: GUID
export import var #extern GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS: GUID
export import var #extern GUID_CONSOLE_DISPLAY_STATE: GUID
export import var #extern GUID_ALLOW_DISPLAY_REQUIRED: GUID
export import var #extern GUID_VIDEO_CONSOLE_LOCK_TIMEOUT: GUID
export import var #extern GUID_ADVANCED_COLOR_QUALITY_BIAS: GUID
export import var #extern GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP: GUID
export import var #extern GUID_NON_ADAPTIVE_INPUT_TIMEOUT: GUID
export import var #extern GUID_ADAPTIVE_INPUT_CONTROLLER_STATE: GUID
export import var #extern GUID_DISK_SUBGROUP: GUID
export import var #extern GUID_DISK_MAX_POWER: GUID
export import var #extern GUID_DISK_POWERDOWN_TIMEOUT: GUID
export import var #extern GUID_DISK_IDLE_TIMEOUT: GUID
export import var #extern GUID_DISK_BURST_IGNORE_THRESHOLD: GUID
export import var #extern GUID_DISK_ADAPTIVE_POWERDOWN: GUID
export import var #extern GUID_DISK_NVME_NOPPME: GUID
export import var #extern GUID_SLEEP_SUBGROUP: GUID
export import var #extern GUID_SLEEP_IDLE_THRESHOLD: GUID
export import var #extern GUID_STANDBY_TIMEOUT: GUID
export import var #extern GUID_UNATTEND_SLEEP_TIMEOUT: GUID
export import var #extern GUID_HIBERNATE_TIMEOUT: GUID
export import var #extern GUID_HIBERNATE_FASTS4_POLICY: GUID
export import var #extern GUID_CRITICAL_POWER_TRANSITION: GUID
export import var #extern GUID_SYSTEM_AWAYMODE: GUID
export import var #extern GUID_ALLOW_AWAYMODE: GUID
export import var #extern GUID_USER_PRESENCE_PREDICTION: GUID
export import var #extern GUID_STANDBY_BUDGET_GRACE_PERIOD: GUID
export import var #extern GUID_STANDBY_BUDGET_PERCENT: GUID
export import var #extern GUID_STANDBY_RESERVE_GRACE_PERIOD: GUID
export import var #extern GUID_STANDBY_RESERVE_TIME: GUID
export import var #extern GUID_STANDBY_RESET_PERCENT: GUID
export import var #extern GUID_ALLOW_STANDBY_STATES: GUID
export import var #extern GUID_ALLOW_RTC_WAKE: GUID
export import var #extern GUID_LEGACY_RTC_MITIGATION: GUID
export import var #extern GUID_ALLOW_SYSTEM_REQUIRED: GUID
export import var #extern GUID_POWER_SAVING_STATUS: GUID
export import var #extern GUID_ENERGY_SAVER_SUBGROUP: GUID
export import var #extern GUID_ENERGY_SAVER_BATTERY_THRESHOLD: GUID
export import var #extern GUID_ENERGY_SAVER_BRIGHTNESS: GUID
export import var #extern GUID_ENERGY_SAVER_POLICY: GUID
export import var #extern GUID_SYSTEM_BUTTON_SUBGROUP: GUID
export import var #extern GUID_POWERBUTTON_ACTION: GUID
export import var #extern GUID_SLEEPBUTTON_ACTION: GUID
export import var #extern GUID_USERINTERFACEBUTTON_ACTION: GUID
export import var #extern GUID_LIDCLOSE_ACTION: GUID
export import var #extern GUID_LIDOPEN_POWERSTATE: GUID
export import var #extern GUID_BATTERY_SUBGROUP: GUID
export import var #extern GUID_BATTERY_DISCHARGE_ACTION_0: GUID
export import var #extern GUID_BATTERY_DISCHARGE_LEVEL_0: GUID
export import var #extern GUID_BATTERY_DISCHARGE_FLAGS_0: GUID
export import var #extern GUID_BATTERY_DISCHARGE_ACTION_1: GUID
export import var #extern GUID_BATTERY_DISCHARGE_LEVEL_1: GUID
export import var #extern GUID_BATTERY_DISCHARGE_FLAGS_1: GUID
export import var #extern GUID_BATTERY_DISCHARGE_ACTION_2: GUID
export import var #extern GUID_BATTERY_DISCHARGE_LEVEL_2: GUID
export import var #extern GUID_BATTERY_DISCHARGE_FLAGS_2: GUID
export import var #extern GUID_BATTERY_DISCHARGE_ACTION_3: GUID
export import var #extern GUID_BATTERY_DISCHARGE_LEVEL_3: GUID
export import var #extern GUID_BATTERY_DISCHARGE_FLAGS_3: GUID
export import var #extern GUID_PROCESSOR_SETTINGS_SUBGROUP: GUID
export import var #extern GUID_PROCESSOR_THROTTLE_POLICY: GUID
export import var #extern GUID_PROCESSOR_THROTTLE_MAXIMUM: GUID
export import var #extern GUID_PROCESSOR_THROTTLE_MAXIMUM_1: GUID
export import var #extern GUID_PROCESSOR_THROTTLE_MINIMUM: GUID
export import var #extern GUID_PROCESSOR_THROTTLE_MINIMUM_1: GUID
export import var #extern GUID_PROCESSOR_FREQUENCY_LIMIT: GUID
export import var #extern GUID_PROCESSOR_FREQUENCY_LIMIT_1: GUID
export import var #extern GUID_PROCESSOR_ALLOW_THROTTLING: GUID
export import var #extern GUID_PROCESSOR_IDLESTATE_POLICY: GUID
export import var #extern GUID_PROCESSOR_PERFSTATE_POLICY: GUID
export import var #extern GUID_PROCESSOR_PERF_INCREASE_THRESHOLD: GUID
export import var #extern GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1: GUID
export import var #extern GUID_PROCESSOR_PERF_DECREASE_THRESHOLD: GUID
export import var #extern GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1: GUID
export import var #extern GUID_PROCESSOR_PERF_INCREASE_POLICY: GUID
export import var #extern GUID_PROCESSOR_PERF_INCREASE_POLICY_1: GUID
export import var #extern GUID_PROCESSOR_PERF_DECREASE_POLICY: GUID
export import var #extern GUID_PROCESSOR_PERF_DECREASE_POLICY_1: GUID
export import var #extern GUID_PROCESSOR_PERF_INCREASE_TIME: GUID
export import var #extern GUID_PROCESSOR_PERF_INCREASE_TIME_1: GUID
export import var #extern GUID_PROCESSOR_PERF_DECREASE_TIME: GUID
export import var #extern GUID_PROCESSOR_PERF_DECREASE_TIME_1: GUID
export import var #extern GUID_PROCESSOR_PERF_TIME_CHECK: GUID
export import var #extern GUID_PROCESSOR_PERF_BOOST_POLICY: GUID
export import var #extern GUID_PROCESSOR_PERF_BOOST_MODE: GUID
export import var #extern GUID_PROCESSOR_PERF_AUTONOMOUS_MODE: GUID
export import var #extern GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE: GUID
export import var #extern GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1: GUID
export import var #extern GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW: GUID
export import var #extern GUID_PROCESSOR_DUTY_CYCLING: GUID
export import var #extern GUID_PROCESSOR_IDLE_ALLOW_SCALING: GUID
export import var #extern GUID_PROCESSOR_IDLE_DISABLE: GUID
export import var #extern GUID_PROCESSOR_IDLE_STATE_MAXIMUM: GUID
export import var #extern GUID_PROCESSOR_IDLE_TIME_CHECK: GUID
export import var #extern GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD: GUID
export import var #extern GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD: GUID
export import var #extern GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD: GUID
export import var #extern GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD: GUID
export import var #extern GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY: GUID
export import var #extern GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY: GUID
export import var #extern GUID_PROCESSOR_CORE_PARKING_MAX_CORES: GUID
export import var #extern GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1: GUID
export import var #extern GUID_PROCESSOR_CORE_PARKING_MIN_CORES: GUID
export import var #extern GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1: GUID
export import var #extern GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME: GUID
export import var #extern GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME: GUID
export import var #extern GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR: GUID
export import var #extern GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD: GUID
export import var #extern GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING: GUID
export import var #extern GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR: GUID
export import var #extern GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD: GUID
export import var #extern GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING: GUID
export import var #extern GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD: GUID
export import var #extern GUID_PROCESSOR_PARKING_CORE_OVERRIDE: GUID
export import var #extern GUID_PROCESSOR_PARKING_PERF_STATE: GUID
export import var #extern GUID_PROCESSOR_PARKING_PERF_STATE_1: GUID
export import var #extern GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD: GUID
export import var #extern GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD: GUID
export import var #extern GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD: GUID
export import var #extern GUID_PROCESSOR_SOFT_PARKING_LATENCY: GUID
export import var #extern GUID_PROCESSOR_PERF_HISTORY: GUID
export import var #extern GUID_PROCESSOR_PERF_HISTORY_1: GUID
export import var #extern GUID_PROCESSOR_PERF_INCREASE_HISTORY: GUID
export import var #extern GUID_PROCESSOR_PERF_DECREASE_HISTORY: GUID
export import var #extern GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY: GUID
export import var #extern GUID_PROCESSOR_PERF_LATENCY_HINT: GUID
export import var #extern GUID_PROCESSOR_PERF_LATENCY_HINT_PERF: GUID
export import var #extern GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1: GUID
export import var #extern GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK: GUID
export import var #extern GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1: GUID
export import var #extern GUID_PROCESSOR_DISTRIBUTE_UTILITY: GUID
export import var #extern GUID_PROCESSOR_HETEROGENEOUS_POLICY: GUID
export import var #extern GUID_PROCESSOR_HETERO_DECREASE_TIME: GUID
export import var #extern GUID_PROCESSOR_HETERO_INCREASE_TIME: GUID
export import var #extern GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD: GUID
export import var #extern GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD: GUID
export import var #extern GUID_PROCESSOR_CLASS0_FLOOR_PERF: GUID
export import var #extern GUID_PROCESSOR_CLASS1_INITIAL_PERF: GUID
export import var #extern GUID_PROCESSOR_THREAD_SCHEDULING_POLICY: GUID
export import var #extern GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY: GUID
export import var #extern GUID_SYSTEM_COOLING_POLICY: GUID
export import var #extern GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD: GUID
export import var #extern GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1: GUID
export import var #extern GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD: GUID
export import var #extern GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1: GUID
export import var #extern GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME: GUID
export import var #extern GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1: GUID
export import var #extern GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME: GUID
export import var #extern GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1: GUID
export import var #extern GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING: GUID
export import var #extern GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1: GUID
export import var #extern GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR: GUID
export import var #extern GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1: GUID
export import var #extern GUID_LOCK_CONSOLE_ON_WAKE: GUID
export import var #extern GUID_DEVICE_IDLE_POLICY: GUID
export import var #extern GUID_CONNECTIVITY_IN_STANDBY: GUID
export import var #extern GUID_DISCONNECTED_STANDBY_MODE: GUID
export import var #extern GUID_ACDC_POWER_SOURCE: GUID
export import var #extern GUID_LIDSWITCH_STATE_CHANGE: GUID
export import var #extern GUID_BATTERY_PERCENTAGE_REMAINING: GUID
export import var #extern GUID_BATTERY_COUNT: GUID
export import var #extern GUID_GLOBAL_USER_PRESENCE: GUID
export import var #extern GUID_SESSION_DISPLAY_STATUS: GUID
export import var #extern GUID_SESSION_USER_PRESENCE: GUID
export import var #extern GUID_IDLE_BACKGROUND_TASK: GUID
export import var #extern GUID_BACKGROUND_TASK_NOTIFICATION: GUID
export import var #extern GUID_APPLAUNCH_BUTTON: GUID
export import var #extern GUID_PCIEXPRESS_SETTINGS_SUBGROUP: GUID
export import var #extern GUID_PCIEXPRESS_ASPM_POLICY: GUID
export import var #extern GUID_ENABLE_SWITCH_FORCED_SHUTDOWN: GUID
export import var #extern GUID_INTSTEER_SUBGROUP: GUID
export import var #extern GUID_INTSTEER_MODE: GUID
export import var #extern GUID_INTSTEER_LOAD_PER_PROC_TRIGGER: GUID
export import var #extern GUID_INTSTEER_TIME_UNPARK_TRIGGER: GUID
export import var #extern GUID_GRAPHICS_SUBGROUP: GUID
export import var #extern GUID_GPU_PREFERENCE_POLICY: GUID
export import var #extern GUID_MIXED_REALITY_MODE: GUID
export import var #extern GUID_SPR_ACTIVE_SESSION_CHANGE: GUID
export import var #extern PPM_PERFSTATE_CHANGE_GUID: GUID
export import var #extern PPM_PERFSTATE_DOMAIN_CHANGE_GUID: GUID
export import var #extern PPM_IDLESTATE_CHANGE_GUID: GUID
export import var #extern PPM_PERFSTATES_DATA_GUID: GUID
export import var #extern PPM_IDLESTATES_DATA_GUID: GUID
export import var #extern PPM_IDLE_ACCOUNTING_GUID: GUID
export import var #extern PPM_IDLE_ACCOUNTING_EX_GUID: GUID
export import var #extern PPM_THERMALCONSTRAINT_GUID: GUID
export import var #extern PPM_PERFMON_PERFSTATE_GUID: GUID
export import var #extern PPM_THERMAL_POLICY_CHANGE_GUID: GUID
export import var #extern __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec: *
export import var #extern IWinTypesBase_v0_1_c_ifspec: *
export import var #extern IWinTypesBase_v0_1_s_ifspec: *
export import var #extern __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec: *
export import var #extern __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec: *
export import var #extern IWinTypes_v0_1_c_ifspec: *
export import var #extern IWinTypes_v0_1_s_ifspec: *
export import var #extern __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec: *
export import var #extern GUID_DEVINTERFACE_DISK: GUID
export import var #extern GUID_DEVINTERFACE_CDROM: GUID
export import var #extern GUID_DEVINTERFACE_PARTITION: GUID
export import var #extern GUID_DEVINTERFACE_TAPE: GUID
export import var #extern GUID_DEVINTERFACE_WRITEONCEDISK: GUID
export import var #extern GUID_DEVINTERFACE_VOLUME: GUID
export import var #extern GUID_DEVINTERFACE_MEDIUMCHANGER: GUID
export import var #extern GUID_DEVINTERFACE_FLOPPY: GUID
export import var #extern GUID_DEVINTERFACE_CDCHANGER: GUID
export import var #extern GUID_DEVINTERFACE_STORAGEPORT: GUID
export import var #extern GUID_DEVINTERFACE_VMLUN: GUID
export import var #extern GUID_DEVINTERFACE_SES: GUID
export import var #extern GUID_DEVINTERFACE_SERVICE_VOLUME: GUID
export import var #extern GUID_DEVINTERFACE_HIDDEN_VOLUME: GUID
export import var #extern GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB: GUID
export import var #extern GUID_DEVINTERFACE_SCM_PHYSICAL_DEVICE: GUID
export import var #extern GUID_SCM_PD_HEALTH_NOTIFICATION: GUID
export import var #extern GUID_SCM_PD_PASSTHROUGH_INVDIMM: GUID
export import var #extern GUID_DEVINTERFACE_COMPORT: GUID
export import var #extern GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR: GUID
export import var #extern FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE: GUID
export import var #extern FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE: GUID
export import var #extern FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE: GUID
export import var #extern GUID_DEVINTERFACE_SMARTCARD_READER: GUID
export import var #extern #dllimport g_rgSCardT0Pci: SCARD_IO_REQUEST
export import var #extern #dllimport g_rgSCardT1Pci: SCARD_IO_REQUEST
export import var #extern #dllimport g_rgSCardRawPci: SCARD_IO_REQUEST
export import var #extern __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec: *
export import var #extern IID_IUnknown: GUID
export import var #extern __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec: *
export import var #extern IID_AsyncIUnknown: GUID
export import var #extern __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec: *
export import var #extern IID_IClassFactory: GUID
export import var #extern __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec: *
export import var #extern IID_IMarshal: GUID
export import var #extern IID_INoMarshal: GUID
export import var #extern IID_IAgileObject: GUID
export import var #extern __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec: *
export import var #extern IID_IActivationFilter: GUID
export import var #extern IID_IMarshal2: GUID
export import var #extern IID_IMalloc: GUID
export import var #extern IID_IStdMarshalInfo: GUID
export import var #extern IID_IExternalConnection: GUID
export import var #extern __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec: *
export import var #extern IID_IMultiQI: GUID
export import var #extern IID_AsyncIMultiQI: GUID
export import var #extern __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec: *
export import var #extern IID_IInternalUnknown: GUID
export import var #extern __MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec: *
export import var #extern IID_IEnumUnknown: GUID
export import var #extern IID_IEnumString: GUID
export import var #extern IID_ISequentialStream: GUID
export import var #extern IID_IStream: GUID
export import var #extern IID_IRpcChannelBuffer: GUID
export import var #extern __MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec: *
export import var #extern IID_IRpcChannelBuffer2: GUID
export import var #extern IID_IAsyncRpcChannelBuffer: GUID
export import var #extern IID_IRpcChannelBuffer3: GUID
export import var #extern IID_IRpcSyntaxNegotiate: GUID
export import var #extern IID_IRpcProxyBuffer: GUID
export import var #extern __MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec: *
export import var #extern IID_IRpcStubBuffer: GUID
export import var #extern IID_IPSFactoryBuffer: GUID
export import var #extern __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec: *
export import var #extern IID_IChannelHook: GUID
export import var #extern __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec: *
export import var #extern IID_IClientSecurity: GUID
export import var #extern __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec: *
export import var #extern IID_IServerSecurity: GUID
export import var #extern __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec: *
export import var #extern IID_IRpcOptions: GUID
export import var #extern __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec: *
export import var #extern IID_IGlobalOptions: GUID
export import var #extern __MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec: *
export import var #extern IID_ISurrogate: GUID
export import var #extern IID_IGlobalInterfaceTable: GUID
export import var #extern __MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec: *
export import var #extern IID_ISynchronize: GUID
export import var #extern IID_ISynchronizeHandle: GUID
export import var #extern IID_ISynchronizeEvent: GUID
export import var #extern IID_ISynchronizeContainer: GUID
export import var #extern IID_ISynchronizeMutex: GUID
export import var #extern IID_ICancelMethodCalls: GUID
export import var #extern IID_IAsyncManager: GUID
export import var #extern IID_ICallFactory: GUID
export import var #extern IID_IRpcHelper: GUID
export import var #extern IID_IReleaseMarshalBuffers: GUID
export import var #extern IID_IWaitMultiple: GUID
export import var #extern IID_IAddrTrackingControl: GUID
export import var #extern IID_IAddrExclusionControl: GUID
export import var #extern IID_IPipeByte: GUID
export import var #extern IID_AsyncIPipeByte: GUID
export import var #extern IID_IPipeLong: GUID
export import var #extern IID_AsyncIPipeLong: GUID
export import var #extern IID_IPipeDouble: GUID
export import var #extern IID_AsyncIPipeDouble: GUID
export import var #extern __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec: *
export import var #extern IID_IComThreadingInfo: GUID
export import var #extern IID_IProcessInitControl: GUID
export import var #extern IID_IFastRundown: GUID
export import var #extern __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec: *
export import var #extern IID_IMarshalingStream: GUID
export import var #extern __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec: *
export import var #extern IID_IAgileReference: GUID
export import var #extern IID_ICallbackWithNoReentrancyToApplicationSTA: GUID
export import var #extern __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec: *
export import var #extern GUID_NULL: GUID
export import var #extern CATID_MARSHALER: GUID
export import var #extern IID_IRpcChannel: GUID
export import var #extern IID_IRpcStub: GUID
export import var #extern IID_IStubManager: GUID
export import var #extern IID_IRpcProxy: GUID
export import var #extern IID_IProxyManager: GUID
export import var #extern IID_IPSFactory: GUID
export import var #extern IID_IInternalMoniker: GUID
export import var #extern IID_IDfReserved1: GUID
export import var #extern IID_IDfReserved2: GUID
export import var #extern IID_IDfReserved3: GUID
export import var #extern CLSID_StdMarshal: GUID
export import var #extern CLSID_AggStdMarshal: GUID
export import var #extern CLSID_StdAsyncActManager: GUID
export import var #extern IID_IStub: GUID
export import var #extern IID_IProxy: GUID
export import var #extern IID_IEnumGeneric: GUID
export import var #extern IID_IEnumHolder: GUID
export import var #extern IID_IEnumCallback: GUID
export import var #extern IID_IOleManager: GUID
export import var #extern IID_IOlePresObj: GUID
export import var #extern IID_IDebug: GUID
export import var #extern IID_IDebugStream: GUID
export import var #extern CLSID_PSGenObject: GUID
export import var #extern CLSID_PSClientSite: GUID
export import var #extern CLSID_PSClassObject: GUID
export import var #extern CLSID_PSInPlaceActive: GUID
export import var #extern CLSID_PSInPlaceFrame: GUID
export import var #extern CLSID_PSDragDrop: GUID
export import var #extern CLSID_PSBindCtx: GUID
export import var #extern CLSID_PSEnumerators: GUID
export import var #extern CLSID_StaticMetafile: GUID
export import var #extern CLSID_StaticDib: GUID
export import var #extern CID_CDfsVolume: GUID
export import var #extern CLSID_DCOMAccessControl: GUID
export import var #extern CLSID_GlobalOptions: GUID
export import var #extern CLSID_StdGlobalInterfaceTable: GUID
export import var #extern CLSID_ComBinding: GUID
export import var #extern CLSID_StdEvent: GUID
export import var #extern CLSID_ManualResetEvent: GUID
export import var #extern CLSID_SynchronizeContainer: GUID
export import var #extern CLSID_AddrControl: GUID
export import var #extern CLSID_ContextSwitcher: GUID
export import var #extern CLSID_CCDFormKrnl: GUID
export import var #extern CLSID_CCDPropertyPage: GUID
export import var #extern CLSID_CCDFormDialog: GUID
export import var #extern CLSID_CCDCommandButton: GUID
export import var #extern CLSID_CCDComboBox: GUID
export import var #extern CLSID_CCDTextBox: GUID
export import var #extern CLSID_CCDCheckBox: GUID
export import var #extern CLSID_CCDLabel: GUID
export import var #extern CLSID_CCDOptionButton: GUID
export import var #extern CLSID_CCDListBox: GUID
export import var #extern CLSID_CCDScrollBar: GUID
export import var #extern CLSID_CCDGroupBox: GUID
export import var #extern CLSID_CCDGeneralPropertyPage: GUID
export import var #extern CLSID_CCDGenericPropertyPage: GUID
export import var #extern CLSID_CCDFontPropertyPage: GUID
export import var #extern CLSID_CCDColorPropertyPage: GUID
export import var #extern CLSID_CCDLabelPropertyPage: GUID
export import var #extern CLSID_CCDCheckBoxPropertyPage: GUID
export import var #extern CLSID_CCDTextBoxPropertyPage: GUID
export import var #extern CLSID_CCDOptionButtonPropertyPage: GUID
export import var #extern CLSID_CCDListBoxPropertyPage: GUID
export import var #extern CLSID_CCDCommandButtonPropertyPage: GUID
export import var #extern CLSID_CCDComboBoxPropertyPage: GUID
export import var #extern CLSID_CCDScrollBarPropertyPage: GUID
export import var #extern CLSID_CCDGroupBoxPropertyPage: GUID
export import var #extern CLSID_CCDXObjectPropertyPage: GUID
export import var #extern CLSID_CStdPropertyFrame: GUID
export import var #extern CLSID_CFormPropertyPage: GUID
export import var #extern CLSID_CGridPropertyPage: GUID
export import var #extern CLSID_CWSJArticlePage: GUID
export import var #extern CLSID_CSystemPage: GUID
export import var #extern CLSID_IdentityUnmarshal: GUID
export import var #extern CLSID_InProcFreeMarshaler: GUID
export import var #extern CLSID_Picture_Metafile: GUID
export import var #extern CLSID_Picture_EnhMetafile: GUID
export import var #extern CLSID_Picture_Dib: GUID
export import var #extern GUID_TRISTATE: GUID
export import var #extern __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec: *
export import var #extern __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec: *
export import var #extern __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec: *
export import var #extern __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0053_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0053_v0_0_s_ifspec: *
export import var #extern IID_IMallocSpy: GUID
export import var #extern __MIDL_itf_objidl_0000_0054_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0054_v0_0_s_ifspec: *
export import var #extern IID_IBindCtx: GUID
export import var #extern IID_IEnumMoniker: GUID
export import var #extern __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec: *
export import var #extern IID_IRunnableObject: GUID
export import var #extern IID_IRunningObjectTable: GUID
export import var #extern __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec: *
export import var #extern IID_IPersist: GUID
export import var #extern IID_IPersistStream: GUID
export import var #extern IID_IMoniker: GUID
export import var #extern __MIDL_itf_objidl_0000_0061_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0061_v0_0_s_ifspec: *
export import var #extern IID_IROTData: GUID
export import var #extern __MIDL_itf_objidl_0000_0062_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0062_v0_0_s_ifspec: *
export import var #extern IID_IEnumSTATSTG: GUID
export import var #extern IID_IStorage: GUID
export import var #extern __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec: *
export import var #extern IID_IPersistFile: GUID
export import var #extern IID_IPersistStorage: GUID
export import var #extern __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec: *
export import var #extern IID_ILockBytes: GUID
export import var #extern IID_IEnumFORMATETC: GUID
export import var #extern IID_IEnumSTATDATA: GUID
export import var #extern IID_IRootStorage: GUID
export import var #extern IID_IAdviseSink: GUID
export import var #extern IID_AsyncIAdviseSink: GUID
export import var #extern __MIDL_itf_objidl_0000_0071_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0071_v0_0_s_ifspec: *
export import var #extern IID_IAdviseSink2: GUID
export import var #extern IID_AsyncIAdviseSink2: GUID
export import var #extern __MIDL_itf_objidl_0000_0072_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0072_v0_0_s_ifspec: *
export import var #extern IID_IDataObject: GUID
export import var #extern __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec: *
export import var #extern IID_IDataAdviseHolder: GUID
export import var #extern IID_IMessageFilter: GUID
export import var #extern FMTID_SummaryInformation: GUID
export import var #extern FMTID_DocSummaryInformation: GUID
export import var #extern FMTID_UserDefinedProperties: GUID
export import var #extern FMTID_DiscardableInformation: GUID
export import var #extern FMTID_ImageSummaryInformation: GUID
export import var #extern FMTID_AudioSummaryInformation: GUID
export import var #extern FMTID_VideoSummaryInformation: GUID
export import var #extern FMTID_MediaFileSummaryInformation: GUID
export import var #extern __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec: *
export import var #extern IID_IClassActivator: GUID
export import var #extern __MIDL_itf_objidl_0000_0076_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0076_v0_0_s_ifspec: *
export import var #extern IID_IFillLockBytes: GUID
export import var #extern __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec: *
export import var #extern IID_IProgressNotify: GUID
export import var #extern __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec: *
export import var #extern IID_ILayoutStorage: GUID
export import var #extern __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec: *
export import var #extern IID_IBlockingLock: GUID
export import var #extern IID_ITimeAndNoticeControl: GUID
export import var #extern IID_IOplockStorage: GUID
export import var #extern __MIDL_itf_objidl_0000_0082_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0082_v0_0_s_ifspec: *
export import var #extern IID_IDirectWriterLock: GUID
export import var #extern __MIDL_itf_objidl_0000_0083_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0083_v0_0_s_ifspec: *
export import var #extern IID_IUrlMon: GUID
export import var #extern IID_IForegroundTransfer: GUID
export import var #extern IID_IThumbnailExtractor: GUID
export import var #extern IID_IDummyHICONIncluder: GUID
export import var #extern __MIDL_itf_objidl_0000_0087_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0087_v0_0_s_ifspec: *
export import var #extern IID_IProcessLock: GUID
export import var #extern IID_ISurrogateService: GUID
export import var #extern __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec: *
export import var #extern IID_IInitializeSpy: GUID
export import var #extern __MIDL_itf_objidl_0000_0090_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0090_v0_0_s_ifspec: *
export import var #extern IID_IApartmentShutdown: GUID
export import var #extern __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec: *
export import var #extern __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec: *
export import var #extern IOleAutomationTypes_v1_0_c_ifspec: *
export import var #extern IOleAutomationTypes_v1_0_s_ifspec: *
export import var #extern __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec: *
export import var #extern IID_ICreateTypeInfo: GUID
export import var #extern IID_ICreateTypeInfo2: GUID
export import var #extern IID_ICreateTypeLib: GUID
export import var #extern IID_ICreateTypeLib2: GUID
export import var #extern __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec: *
export import var #extern IID_IDispatch: GUID
export import var #extern IID_IEnumVARIANT: GUID
export import var #extern IID_ITypeComp: GUID
export import var #extern __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec: *
export import var #extern IID_ITypeInfo: GUID
export import var #extern IID_ITypeInfo2: GUID
export import var #extern __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec: *
export import var #extern IID_ITypeLib: GUID
export import var #extern __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec: *
export import var #extern IID_ITypeLib2: GUID
export import var #extern IID_ITypeChangeEvents: GUID
export import var #extern IID_IErrorInfo: GUID
export import var #extern IID_ICreateErrorInfo: GUID
export import var #extern IID_ISupportErrorInfo: GUID
export import var #extern IID_ITypeFactory: GUID
export import var #extern IID_ITypeMarshal: GUID
export import var #extern IID_IRecordInfo: GUID
export import var #extern IID_IErrorLog: GUID
export import var #extern IID_IPropertyBag: GUID
export import var #extern IID_ITypeLibRegistrationReader: GUID
export import var #extern IID_ITypeLibRegistration: GUID
export import var #extern CLSID_TypeLibRegistrationReader: GUID
export import var #extern __MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec: *
export import var #extern __MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec: *
export import var #extern IID_IPropertyStorage: GUID
export import var #extern IID_IPropertySetStorage: GUID
export import var #extern IID_IEnumSTATPROPSTG: GUID
export import var #extern IID_IEnumSTATPROPSETSTG: GUID
export import var #extern __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec: *
export import var #extern __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec: *
export import var #extern IID_IOleAdviseHolder: GUID
export import var #extern __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec: *
export import var #extern IID_IOleCache: GUID
export import var #extern IID_IOleCache2: GUID
export import var #extern __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec: *
export import var #extern IID_IOleCacheControl: GUID
export import var #extern IID_IParseDisplayName: GUID
export import var #extern IID_IOleContainer: GUID
export import var #extern IID_IOleClientSite: GUID
export import var #extern IID_IOleObject: GUID
export import var #extern IOLETypes_v0_0_c_ifspec: *
export import var #extern IOLETypes_v0_0_s_ifspec: *
export import var #extern IID_IOleWindow: GUID
export import var #extern IID_IOleLink: GUID
export import var #extern IID_IOleItemContainer: GUID
export import var #extern IID_IOleInPlaceUIWindow: GUID
export import var #extern IID_IOleInPlaceActiveObject: GUID
export import var #extern IID_IOleInPlaceFrame: GUID
export import var #extern IID_IOleInPlaceObject: GUID
export import var #extern IID_IOleInPlaceSite: GUID
export import var #extern IID_IContinue: GUID
export import var #extern IID_IViewObject: GUID
export import var #extern IID_IViewObject2: GUID
export import var #extern IID_IDropSource: GUID
export import var #extern IID_IDropTarget: GUID
export import var #extern IID_IDropSourceNotify: GUID
export import var #extern IID_IEnterpriseDropTarget: GUID
export import var #extern __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec: *
export import var #extern IID_IEnumOLEVERB: GUID
export import var #extern __MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec: *
export import var #extern __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec: *
export import var #extern IID_IServiceProvider: GUID
export import var #extern __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec: *
export import var #extern __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec: *
export import var #extern LIBID_MSXML: GUID
export import var #extern IID_IXMLDOMImplementation: GUID
export import var #extern IID_IXMLDOMNode: GUID
export import var #extern IID_IXMLDOMDocumentFragment: GUID
export import var #extern IID_IXMLDOMDocument: GUID
export import var #extern IID_IXMLDOMNodeList: GUID
export import var #extern IID_IXMLDOMNamedNodeMap: GUID
export import var #extern IID_IXMLDOMCharacterData: GUID
export import var #extern IID_IXMLDOMAttribute: GUID
export import var #extern IID_IXMLDOMElement: GUID
export import var #extern IID_IXMLDOMText: GUID
export import var #extern IID_IXMLDOMComment: GUID
export import var #extern IID_IXMLDOMProcessingInstruction: GUID
export import var #extern IID_IXMLDOMCDATASection: GUID
export import var #extern IID_IXMLDOMDocumentType: GUID
export import var #extern IID_IXMLDOMNotation: GUID
export import var #extern IID_IXMLDOMEntity: GUID
export import var #extern IID_IXMLDOMEntityReference: GUID
export import var #extern IID_IXMLDOMParseError: GUID
export import var #extern IID_IXTLRuntime: GUID
export import var #extern DIID_XMLDOMDocumentEvents: GUID
export import var #extern CLSID_DOMDocument: GUID
export import var #extern CLSID_DOMFreeThreadedDocument: GUID
export import var #extern IID_IXMLHttpRequest: GUID
export import var #extern CLSID_XMLHTTPRequest: GUID
export import var #extern IID_IXMLDSOControl: GUID
export import var #extern CLSID_XMLDSOControl: GUID
export import var #extern IID_IXMLElementCollection: GUID
export import var #extern IID_IXMLDocument: GUID
export import var #extern IID_IXMLDocument2: GUID
export import var #extern IID_IXMLElement: GUID
export import var #extern IID_IXMLElement2: GUID
export import var #extern IID_IXMLAttribute: GUID
export import var #extern IID_IXMLError: GUID
export import var #extern CLSID_XMLDocument: GUID
export import var #extern __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec: *
export import var #extern CLSID_SBS_StdURLMoniker: GUID
export import var #extern CLSID_SBS_HttpProtocol: GUID
export import var #extern CLSID_SBS_FtpProtocol: GUID
export import var #extern CLSID_SBS_GopherProtocol: GUID
export import var #extern CLSID_SBS_HttpSProtocol: GUID
export import var #extern CLSID_SBS_FileProtocol: GUID
export import var #extern CLSID_SBS_MkProtocol: GUID
export import var #extern CLSID_SBS_UrlMkBindCtx: GUID
export import var #extern CLSID_SBS_SoftDistExt: GUID
export import var #extern CLSID_SBS_CdlProtocol: GUID
export import var #extern CLSID_SBS_ClassInstallFilter: GUID
export import var #extern CLSID_SBS_InternetSecurityManager: GUID
export import var #extern CLSID_SBS_InternetZoneManager: GUID
export import var #extern IID_IAsyncMoniker: GUID
export import var #extern CLSID_StdURLMoniker: GUID
export import var #extern CLSID_HttpProtocol: GUID
export import var #extern CLSID_FtpProtocol: GUID
export import var #extern CLSID_GopherProtocol: GUID
export import var #extern CLSID_HttpSProtocol: GUID
export import var #extern CLSID_FileProtocol: GUID
export import var #extern CLSID_ResProtocol: GUID
export import var #extern CLSID_AboutProtocol: GUID
export import var #extern CLSID_JSProtocol: GUID
export import var #extern CLSID_MailtoProtocol: GUID
export import var #extern CLSID_IE4_PROTOCOLS: GUID
export import var #extern CLSID_MkProtocol: GUID
export import var #extern CLSID_StdURLProtocol: GUID
export import var #extern CLSID_TBAuthProtocol: GUID
export import var #extern CLSID_UrlMkBindCtx: GUID
export import var #extern CLSID_CdlProtocol: GUID
export import var #extern CLSID_ClassInstallFilter: GUID
export import var #extern IID_IAsyncBindCtx: GUID
export import var #extern __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec: *
export import var #extern IID_IPersistMoniker: GUID
export import var #extern __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec: *
export import var #extern IID_IMonikerProp: GUID
export import var #extern __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec: *
export import var #extern IID_IBindProtocol: GUID
export import var #extern __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec: *
export import var #extern IID_IBinding: GUID
export import var #extern __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec: *
export import var #extern IID_IBindStatusCallback: GUID
export import var #extern __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec: *
export import var #extern IID_IBindStatusCallbackEx: GUID
export import var #extern __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec: *
export import var #extern IID_IAuthenticate: GUID
export import var #extern __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec: *
export import var #extern IID_IAuthenticateEx: GUID
export import var #extern __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec: *
export import var #extern IID_IHttpNegotiate: GUID
export import var #extern __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec: *
export import var #extern IID_IHttpNegotiate2: GUID
export import var #extern __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec: *
export import var #extern IID_IHttpNegotiate3: GUID
export import var #extern __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec: *
export import var #extern IID_IWinInetFileStream: GUID
export import var #extern __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec: *
export import var #extern IID_IWindowForBindingUI: GUID
export import var #extern __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec: *
export import var #extern IID_ICodeInstall: GUID
export import var #extern __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec: *
export import var #extern IID_IUri: GUID
export import var #extern __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec: *
export import var #extern IID_IUriContainer: GUID
export import var #extern IID_IUriBuilder: GUID
export import var #extern IID_IUriBuilderFactory: GUID
export import var #extern __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec: *
export import var #extern IID_IWinInetInfo: GUID
export import var #extern __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec: *
export import var #extern IID_IHttpSecurity: GUID
export import var #extern __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec: *
export import var #extern IID_IWinInetHttpInfo: GUID
export import var #extern __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec: *
export import var #extern IID_IWinInetHttpTimeouts: GUID
export import var #extern __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec: *
export import var #extern IID_IWinInetCacheHints: GUID
export import var #extern __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec: *
export import var #extern IID_IWinInetCacheHints2: GUID
export import var #extern SID_BindHost: GUID
export import var #extern __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec: *
export import var #extern IID_IBindHost: GUID
export import var #extern __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec: *
export import var #extern IID_IInternet: GUID
export import var #extern __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec: *
export import var #extern IID_IInternetBindInfo: GUID
export import var #extern __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec: *
export import var #extern IID_IInternetBindInfoEx: GUID
export import var #extern __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec: *
export import var #extern IID_IInternetProtocolRoot: GUID
export import var #extern __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec: *
export import var #extern IID_IInternetProtocol: GUID
export import var #extern __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec: *
export import var #extern IID_IInternetProtocolEx: GUID
export import var #extern __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec: *
export import var #extern IID_IInternetProtocolSink: GUID
export import var #extern __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec: *
export import var #extern IID_IInternetProtocolSinkStackable: GUID
export import var #extern __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec: *
export import var #extern IID_IInternetSession: GUID
export import var #extern __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec: *
export import var #extern IID_IInternetThreadSwitch: GUID
export import var #extern __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec: *
export import var #extern IID_IInternetPriority: GUID
export import var #extern __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec: *
export import var #extern IID_IInternetProtocolInfo: GUID
export import var #extern CLSID_InternetSecurityManager: GUID
export import var #extern CLSID_InternetZoneManager: GUID
export import var #extern CLSID_PersistentZoneIdentifier: GUID
export import var #extern __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec: *
export import var #extern IID_IInternetSecurityMgrSite: GUID
export import var #extern __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec: *
export import var #extern IID_IInternetSecurityManager: GUID
export import var #extern __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec: *
export import var #extern IID_IInternetSecurityManagerEx: GUID
export import var #extern __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec: *
export import var #extern IID_IInternetSecurityManagerEx2: GUID
export import var #extern __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec: *
export import var #extern IID_IZoneIdentifier: GUID
export import var #extern __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec: *
export import var #extern IID_IZoneIdentifier2: GUID
export import var #extern __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec: *
export import var #extern IID_IInternetHostSecurityManager: GUID
export import var #extern GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED: GUID
export import var #extern __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec: *
export import var #extern IID_IInternetZoneManager: GUID
export import var #extern __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec: *
export import var #extern IID_IInternetZoneManagerEx: GUID
export import var #extern __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec: *
export import var #extern IID_IInternetZoneManagerEx2: GUID
export import var #extern CLSID_SoftDistExt: GUID
export import var #extern __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec: *
export import var #extern IID_ISoftDistExt: GUID
export import var #extern __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec: *
export import var #extern IID_ICatalogFileInfo: GUID
export import var #extern __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec: *
export import var #extern IID_IDataFilter: GUID
export import var #extern __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec: *
export import var #extern IID_IEncodingFilterFactory: GUID
export import var #extern GUID_CUSTOM_CONFIRMOBJECTSAFETY: GUID
export import var #extern __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec: *
export import var #extern IID_IWrappedProtocol: GUID
export import var #extern __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec: *
export import var #extern IID_IGetBindHandle: GUID
export import var #extern __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec: *
export import var #extern IID_IBindCallbackRedirect: GUID
export import var #extern __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec: *
export import var #extern IID_IBindHttpSecurity: GUID
export import var #extern __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec: *
export import var #extern __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec: *
export import var #extern __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec: *
export import var #extern IID_StdOle: GUID
export import var #extern IID_IPrintDialogCallback: GUID
export import var #extern IID_IPrintDialogServices: GUID
export import var #extern NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID: GUID
export import var #extern NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID: GUID
export import var #extern DOMAIN_JOIN_GUID: GUID
export import var #extern DOMAIN_LEAVE_GUID: GUID
export import var #extern FIREWALL_PORT_OPEN_GUID: GUID
export import var #extern FIREWALL_PORT_CLOSE_GUID: GUID
export import var #extern MACHINE_POLICY_PRESENT_GUID: GUID
export import var #extern USER_POLICY_PRESENT_GUID: GUID
export import var #extern RPC_INTERFACE_EVENT_GUID: GUID
export import var #extern NAMED_PIPE_EVENT_GUID: GUID
export import var #extern CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID: GUID
