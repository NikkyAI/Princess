export const FFI_FIRST_ABI: int = 0
export const FFI_WIN64: int = FFI_FIRST_ABI + 1
export const FFI_GNUW64: int = FFI_WIN64 + 1
export const FFI_LAST_ABI: int = FFI_GNUW64 + 1
export const FFI_DEFAULT_ABI: int = FFI_WIN64
export const FFI_OK: int = 0
export const FFI_BAD_TYPEDEF: int = FFI_OK + 1
export const FFI_BAD_ABI: int = FFI_BAD_TYPEDEF + 1
export const FFI_BAD_ARGTYPE: int = FFI_BAD_ABI + 1
export type ffi_abi = enum { FFI_FIRST_ABI = 0; FFI_WIN64; FFI_GNUW64; FFI_LAST_ABI; FFI_DEFAULT_ABI = FFI_WIN64; }
export type ffi_type = struct { size: uint64; alignment: ushort; type_: ushort; elements: **ffi_type; }
export type ffi_status = enum { FFI_OK = 0; FFI_BAD_TYPEDEF; FFI_BAD_ABI; FFI_BAD_ARGTYPE; }
export type ffi_cif = struct { abi: ffi_abi; nargs: uint; arg_types: **ffi_type; rtype: *ffi_type; bytes: uint; flags: uint; }
export type ffi_raw = struct #union { sint: int64; uint: uint64; flt: float; data: [8; char]; ptr: *; }
export type ffi_closure = struct { _2: struct #union { tramp: [32; char]; ftramp: *; }; cif: *ffi_cif; fun: def (*ffi_cif, *, **, *) -> (); user_data: *; }
export type ffi_raw_closure = struct { tramp: [32; char]; cif: *ffi_cif; translate_args: def (*ffi_cif, *, **, *) -> (); this_closure: *; fun: def (*ffi_cif, *, *ffi_raw, *) -> (); user_data: *; }
export type ffi_java_raw_closure = struct { tramp: [32; char]; cif: *ffi_cif; translate_args: def (*ffi_cif, *, **, *) -> (); this_closure: *; fun: def (*ffi_cif, *, *ffi_raw, *) -> (); user_data: *; }
export type ffi_go_closure = struct { tramp: *; cif: *ffi_cif; fun: def (*ffi_cif, *, **, *) -> (); }
export type s__GUID
export import def #extern #dllimport ffi_closure_alloc(size: uint64, code: **) -> *
export import def #extern #dllimport ffi_closure_free(_0: *)
export import def #extern #dllimport ffi_prep_closure(_0: *ffi_closure, _1: *ffi_cif, fun: def (*ffi_cif, *, **, *) -> (), user_data: *) -> ffi_status
export import def #extern #dllimport ffi_prep_closure_loc(_0: *ffi_closure, _1: *ffi_cif, fun: def (*ffi_cif, *, **, *) -> (), user_data: *, codeloc: *) -> ffi_status
export import def #extern #dllimport ffi_prep_go_closure(_0: *ffi_go_closure, _1: *ffi_cif, fun: def (*ffi_cif, *, **, *) -> ()) -> ffi_status
export import def #extern #dllimport ffi_call_go(cif: *ffi_cif, fn: def () -> (), rvalue: *, avalue: **, closure: *)
export import def #extern #dllimport ffi_prep_cif(cif: *ffi_cif, abi: ffi_abi, nargs: uint, rtype: *ffi_type, atypes: **ffi_type) -> ffi_status
export import def #extern #dllimport ffi_prep_cif_var(cif: *ffi_cif, abi: ffi_abi, nfixedargs: uint, ntotalargs: uint, rtype: *ffi_type, atypes: **ffi_type) -> ffi_status
export import def #extern #dllimport ffi_call(cif: *ffi_cif, fn: def () -> (), rvalue: *, avalue: **)
export import def #extern #dllimport ffi_get_struct_offsets(abi: ffi_abi, struct_type: *ffi_type, offsets: *uint64) -> ffi_status
export import var #extern #dllimport ffi_type_void: ffi_type
export import var #extern #dllimport ffi_type_uint8: ffi_type
export import var #extern #dllimport ffi_type_sint8: ffi_type
export import var #extern #dllimport ffi_type_uint16: ffi_type
export import var #extern #dllimport ffi_type_sint16: ffi_type
export import var #extern #dllimport ffi_type_uint32: ffi_type
export import var #extern #dllimport ffi_type_sint32: ffi_type
export import var #extern #dllimport ffi_type_uint64: ffi_type
export import var #extern #dllimport ffi_type_sint64: ffi_type
export import var #extern #dllimport ffi_type_float: ffi_type
export import var #extern #dllimport ffi_type_double: ffi_type
export import var #extern #dllimport ffi_type_pointer: ffi_type
