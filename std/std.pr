import cstd

#if defined WIN32 {
    import windows
} else {
    import linux
}

export type File = *cstd::s__IO_FILE

export def make_string(ptr: *char) -> string {
    var s: string
    s.value = ptr
    s.size = strlen(ptr) + 1
    return s
}

// TODO These functions should accept strings but for now they need to be like this
export def #extern starts_with(str: *char, pre: *char) -> int8 {
    return (cstd::strncmp(pre, str, cstd::strlen(pre)) == 0) !int8
}

export def #extern absolute_path(pathname: *char, resolved: *char) {
    #if defined WIN32 {
        windows::GetFullPathNameA(pathname, MAX_PATH, resolved, null)
    } else {
        linux::realpath(pathname, resolved)
    }
}

export def #extern executable_file(resolved: *char) {
    #if defined WIN32 {
        // TODO Windows
    } else {
        var len = linux::readlink("/proc/self/exe".value, resolved, PATH_MAX);
        if (len != -1) {
            resolved[len] = '\0';
        }
    }
}