import cstd
import runtime

#if defined WIN32 {
    import windows
    export type File = *cstd::FILE

    export def stdin  -> File { return cstd::__acrt_iob_func(0) }
    export def stdout -> File { return cstd::__acrt_iob_func(1) }
    export def stderr -> File { return cstd::__acrt_iob_func(2) }

    export const PATH_MAX = 260

} else {
    import linux
    export type File = *cstd::s__IO_FILE

    export def stdin  -> File { return cstd::stdin  }
    export def stdout -> File { return cstd::stdout }
    export def stderr -> File { return cstd::stderr }

    export const PATH_MAX = 4096
}

// These are the same on both platforms
export const SEEK_SET = 0
export const SEEK_CUR = 1
export const SEEK_END = 2

// String functions
export def make_string(ptr: *char) -> string {
    var s: string
    s.value = ptr
    s.size = strlen(ptr) + 1
    return s
}

export def remove(str: &string, i: size_t) {
    assert i < str.size
    if str.size > 0 {
        cstd::memmove(str.value ++ i, str.value ++ i ++ 1, str.size - i)
    }
    str.value[str.size - 1] = '\0'
    str.size -= 1
}

export def insert(str: &string, i: size_t, s: &string) {
    let new_size = str.size + length(s) !size_t
    str.value = reallocate(str.value, (size_of char) * new_size)
    
    if str.size >= 1 { 
        cstd::memmove(str.value ++ i ++ length(s), str.value ++ i, str.size - i) 
    }
    memcopy(s.value, str.value ++ i, length(s))
    str.size = new_size
}

export def insert(str: &string, i: size_t, c: char) {
    let new_size = str.size + 1 !size_t
    str.value = reallocate(str.value, (size_of char) * new_size)
    
    if str.size >= 1 { 
        cstd::memmove(str.value ++ i ++ 1, str.value ++ i, str.size - i) 
    }
    str.value[i] = c
    str.size = new_size
}

export def substring(str: &string, start: size_t, end: size_t) -> &string {
    assert end >= start
    var substr: string
    substr.size = end - start
    substr.value = str.value ++ start
    var res: &string = substr
    res.value = reallocate(res.value, res.size + 1)
    res.value[res.size] = '\0'
    res.size += 1
    return res
}

export type ToString = interface {
    def to_string -> &string
}

// TODO remove special casing this
export def == (a: string, b: string) -> bool {
    return strncmp(a.value, b.value, max(a.size - 1, b.size - 1) !size_t) == 0
}

export def != (a: string, b: string) -> bool {
    return not (a == b)
}

export def == (a: string, b: &string) -> bool {
    if b { return a == @b }
    return false
}

export def != (a: string, b: &string) -> bool {
    return not (a == b)
}

export def == (a: &string, b: string) -> bool {
    if a { return @a == b }
    return false
}

export def != (a: &string, b: string) -> bool {
    return not (a == b)
}

export def == (a: &string, b: &string) -> bool {
    if not a and not b { return true }
    if not a or not b { return false }
    return @a == @b
}

export def != (a: &string, b: &string) -> bool {
    return not (a == b)
}

export def + (a: &string, b: &string) -> &string {
    if not b { return a + "null" }
    let ret = allocate(char, a.size + b.size - 1)
    defer delete(ret)
    memcopy(a.value, ret.value, a.size - 1)
    memcopy(b.value, ret.value ++ (a.size - 1), b.size)
    return ret !&string
}

export def += (a: &string, b: &string) -> &string {
    return a + b
}

export def + (a: &string, b: &ToString) -> &string {
    return a + b.to_string()
}

export def += (a: &string, b: &ToString) -> &string {
    return a + b
}

export def + (a: &ToString, b: &string) -> &string {
    return a.to_string() + b
}

// These are defined for better performance
export def + (a: char, b: &string) -> &string {
    let ret = zero_allocate(char, b.size + 1)
    defer delete(ret)
    memcopy(b.value, ret.value ++ 1, b.size)
    ret[0] = a
    return ret !&string
}

export def + (a: &string, b: char) -> &string {
    let ret = zero_allocate(char, a.size + 1)
    defer delete(ret)
    memcopy(a.value, ret.value, a.size)
    ret[ret.size - 2] = b
    return ret !&string
}

export def += (a: &string, b: char) -> &string {
    return a + b
}

export def to_string(sign: int, n: uint64) -> &string {
    let digits = "0123456789"

    var str: &string = ""
    if n == 0 {
        str += '0'
        return str
    }

    while n {
        str = digits[n % 10] + str
        n /= 10
    }

    if sign < 0 {
        str = '-' + str
    }

    return str
}

export def to_string(a: &int64) -> &string {
    let n = -@a if @a < 0 else @a 
    return to_string(1 if @a >= 0 else -1, n)
}

export def to_string(a: &int32) -> &string {
    let n = -@a if @a < 0 else @a 
    return to_string(1 if @a >= 0 else -1, n)
}

export def to_string(a: &int16) -> &string {
    let n = -@a if @a < 0 else @a 
    return to_string(1 if @a >= 0 else -1, n)
}

export def to_string(a: &int8) -> &string {
    let n = -@a if @a < 0 else @a 
    return to_string(1 if @a >= 0 else -1, n)
}

export def to_string(a: &uint64) -> &string {
    return to_string(0, @a)
}

export def to_string(a: &uint32) -> &string {
    return to_string(0, @a)
}

export def to_string(a: &uint16) -> &string {
    return to_string(0, @a)
}

export def to_string(a: &uint8) -> &string {
    return to_string(0, @a)
}

export def to_string(a: &bool) -> &string {
    return "true" if @a else "false"
}

export def to_string(a: &char) -> &string {
    return [@a]
}

export def print(args: &...) -> int {
    return fprint(stdout(), args)
}

export def error(args: &...) -> int {
    return fprint(stderr(), args)
}

def make_ref(tpe: *runtime::Type, value: *) -> runtime::Ref {
    var ref: runtime::Ref
    ref.tpe = runtime::reference(tpe)
    ref.value = value
    return ref
}

def print_val(file: File, ref: runtime::Ref) -> int {
    let reftpe = runtime::ref_type(ref)
    let tpe = reftpe.tpe
    let value = ref.value
    if not tpe or not value {
        return cstd::fprintf(file, "%p".value, value)
    } else if tpe == string {
        return cstd::fprintf(file, "%s".value, (@(value !*string)).value)
    } else if tpe.kind == runtime::TypeKind::STATIC_ARRAY and tpe.tpe == char {
        return cstd::fprintf(file, "%s".value, value !*char)
    } else if tpe == type *char {
        return cstd::fprintf(file, "%s".value, @(value !**char))
    } else if tpe == size_t {
        return cstd::fprintf(file, "%zu".value, @(value !*size_t))
    } else if tpe == char {
        return cstd::fprintf(file, "%c".value, @(value !*char))
    } else if tpe == int8 {
        return cstd::fprintf(file, "%hhd".value, @(value !*int8))
    } else if tpe == uint8 {
        return cstd::fprintf(file, "%hhu".value, @(value !*uint8))
    } else if tpe == int16 {
        return cstd::fprintf(file, "%hd".value, @(value !*int16))
    } else if tpe == uint16 {
        return cstd::fprintf(file, "%hu".value, @(value !*uint16))
    } else if tpe == int32 {
        return cstd::fprintf(file, "%d".value, @(value !*int32))
    } else if tpe == uint32 {
        return cstd::fprintf(file, "%u".value, @(value !*uint32))
    } else if tpe == int64 {
        return cstd::fprintf(file, "%ld".value, @(value !*int64))
    } else if tpe == uint64 {
        return cstd::fprintf(file, "%lu".value, @(value !*uint64))
    } else if tpe == float64 {
        return cstd::fprintf(file, "%lf".value, @(value !*float64))
    } else if tpe == float32 {
        return cstd::fprintf(file, "%f".value, @(value !*float32))
    } else if tpe == bool {
        if @(value !*bool) {
            return cstd::fprintf(file, "true".value)
        } else {
            return cstd::fprintf(file, "false".value)
        } 
    } else if tpe.kind == runtime::TypeKind::POINTER {
        return cstd::fprintf(file, "%p".value, @(value !**))
    } else if tpe.kind == runtime::TypeKind::REFERENCE {
        let v = value !*runtime::Ref
        return print_val(file, make_ref(tpe.tpe, v.value))
    } else if tpe.kind == runtime::TypeKind::ARRAY {
        let arr = @(value !*[int8])
        let size = arr.size
        let elements = arr.value
        var sum = 0

        sum += cstd::fprintf(file, "[".value)
        for var i in 0..size {
            sum += print_val(file, make_ref(tpe.tpe, elements ++ i * tpe.tpe.size))
            if i < size - 1 {
                sum += cstd::fprintf(file, ", ".value)
            }
        }
        sum += cstd::fprintf(file, "]".value)
        return sum
    } else if tpe.kind == runtime::TypeKind::STATIC_ARRAY {
        let size = tpe.length
        var sum = 0

        sum += cstd::fprintf(file, "[".value)
        for var i in 0..size {
            sum += print_val(file, make_ref(tpe.tpe, value ++ i * tpe.tpe.size))
            if i < size - 1 {
                sum += cstd::fprintf(file, ", ".value)
            }
        }
        sum += cstd::fprintf(file, "]".value)
        return sum
    } else if tpe.kind == runtime::TypeKind::ENUM {
        var v: int64 = 0
        for var i in 0..tpe.tpe.size {
            v |= (@((value ++ i) !*byte)) !int64 << (i * 8)
        }

        var str = "INVALID!!"
        for var i in 0..tpe.enum_values.size {
            let ev = tpe.enum_values[i]
            if ev.value == v {
                str = ev.name
            }
        }
        return cstd::fprintf(file, "%s".value, str.value)
    } else if runtime::implements(reftpe, ToString) {
        let str = (ref !&ToString).to_string()
        return cstd::fprintf(file, "%s".value, (@str).value)
    } else if tpe.kind == runtime::TypeKind::STRUCT or tpe.kind == runtime::TypeKind::UNION {
        let fields = tpe.fields
        var sum = 0
        sum += cstd::fprintf(file, "{".value)
        for var i in 0..fields.size {
            let field = fields[i]
            sum += cstd::fprintf(file, "%s = ".value, field.name.value)
            sum += print_val(file, make_ref(field.tpe, value ++ field.offset))
            if i < fields.size - 1 {
                sum += cstd::fprintf(file, ", ".value)
            }
        }
        sum += cstd::fprintf(file, "} !%s".value, tpe.name.value)
        return sum
    }
}

export def fprint(file: File, args: &...) -> int {
    var sum = 0
    for var i in 0..args.size {
        let arg = args[i]
        let ref_tpe = ref_type(arg)
        if ref_tpe {
            sum += print_val(file, make_ref(ref_tpe.tpe, arg !*))
        } else {
            sum += cstd::fprintf(file, "null".value)
        }
    }
    return sum
}

export def abort(s: &string) {
    abort(@s)
}

export def abort(s: string) {
    cstd::fprintf(stderr(), "%s\n".value, s.value)
    cstd::abort()
}

export def delete(v: type *T) {
    #if defined __destruct__::(*T) {
        __destruct__(v)
    }
    free(v)
}

export def delete(v: type [T]) {
    #if defined __destruct__::(*T) {
        for var i in 0..v.size {
            __destruct__(*v[i])
        }
    }
    free(v.value)
}

export def new(t: type T) -> *T {
    let ptr = allocate(T)
    memcopy(*t, ptr, size_of T)
    return ptr
}

// Deprecated
export def concat(base: string, to_append: string) {
    cstd::memcpy(base.value ++ strlen(base.value), to_append.value, to_append.size)
}

export def length(s: string) -> size_t {
    return s.size - 1
}

export def length(s: &string) -> size_t {
    return s.size - 1
}

// Allocators
export def allocate(size: size_t) -> * {
    return cstd::malloc(size)
}

export def allocate(type T) -> *T {
    return cstd::malloc(T.size) !*T
}

export def allocate(type T, size: size_t) -> [T] {
    var arr: [T]
    arr.size = size
    arr.value = cstd::malloc(T.size * size) !*T
    return arr
}

export def zero_allocate(size: size_t) -> * {
    return cstd::calloc(1, size)
}

export def zero_allocate(type T) -> *T {
    return cstd::calloc(1, T.size) !*T
}

export def zero_allocate(type T, size: size_t) -> [T] {
    var arr: [T]
    arr.size = size
    arr.value = cstd::calloc(size, T.size) !*T
    return arr
}

export def allocate_ref(type T, size: size_t) -> &[T] {
    var arr: [T]
    arr.size = size
    arr.value = cstd::calloc(size, T.size) !*T
    defer free(arr.value)
    return arr !&[T]
}

export def reallocate(value: type *T, size: size_t) -> *T {
    return cstd::realloc(value, size) !*T
}

// Free pointer is in cstd

export def free(value: type [T]) {
    cstd::free(value.value)
}

// File functions

export def open(file_path: &string, mode: &string) -> File {
    return cstd::fopen(file_path.value, mode.value)
}

export def reopen(file_path: &string, mode: &string, file: File) -> File {
    return cstd::freopen(file_path.value, mode.value, file)
}

export def close(file: File) -> int {
    return cstd::fclose(file)
}

// Reads buffer.size * T.size bytes from file
export def read(file: File, buffer: type [T]) -> size_t {
    return cstd::fread(buffer.value, T.size, buffer.size, file)
}

export def read(file: File, buffer: type [T], size: size_t) -> size_t {
    return cstd::fread(buffer.value, T.size, size, file)
}

export def read(file: File, ptr: type *T) -> size_t {
    return cstd::fread(ptr, T.size, 1, file)
}

export def write(file: File, buffer: type [T]) -> size_t {
    return cstd::fwrite(buffer.value, T.size, buffer.size, file)
}

// TODO This might not be needed
export def write(file: File, buffer: type [T], size: size_t) -> size_t {
    return cstd::fwrite(buffer.value, T.size, size, file)
}

export def write(file: File, ptr: type *T) -> size_t {
    return cstd::fwrite(ptr, T.size, 1, file)
}

// Deprecated, alias for fprint
export def write_string(file: File, args: &...) -> int {
    return fprint(file, args)
}

// Deprecated
export def read_line(file: File, str: string) {
    cstd::fgets(str.value, str.size !int, file)
    str.size = strlen(str) + 1
}

// Rewind defined in cstd

export def seek(file: File, offset: long, whence: int) -> int {
    return cstd::fseek(file, offset, whence)
}

export def tell(file: File) -> long {
    return cstd::ftell(file)
}

// You should never have to use this
export def strlen(str: string) -> size_t {
    return cstd::strlen(str.value)
}

export def max(a: double, b: double) -> double {
    return cstd::fmax(a, b)
}

export def min(a: double, b: double) -> double {
    return cstd::fmin(a, b)
}

export def memcopy(src: *, dest: *, size: size_t) -> * {
    return cstd::memcpy(dest, src, size)
}

export def system(command: &string) -> int {
    return cstd::system(command.value)
}

export def starts_with(str: &string, pre: &string) -> bool {
    return (cstd::strncmp(pre.value, str.value, cstd::strlen(pre.value)) == 0) !bool
}

export def executable_file -> &string {
    let resolved = zero_allocate(char, PATH_MAX)
    defer delete(resolved)
    #if defined WIN32 {
        windows::GetModuleFileNameA(null, resolved.value, PATH_MAX)
    } else {
        linux::readlink("/proc/self/exe".value, resolved.value, PATH_MAX)
    }
    resolved.size = cstd::strlen(resolved.value) + 1
    return resolved
}

export def absolute_path(pathname: &string) -> &string {
    let resolved = zero_allocate(char, PATH_MAX)
    defer delete(resolved)
    #if defined WIN32 {
        windows::GetFullPathNameA(pathname.value, PATH_MAX, resolved.value, null)
    } else {
        linux::realpath(pathname.value, resolved.value)
    }
    resolved.size = cstd::strlen(resolved.value) + 1
    return resolved
}