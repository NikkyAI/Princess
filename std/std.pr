import cstd
import runtime

#if defined WIN32 {
    import windows
} else {
    import linux
}

export type File = *cstd::s__IO_FILE

export def make_string(ptr: *char) -> string {
    var s: string
    s.value = ptr
    s.size = strlen(ptr) + 1
    return s
}

/*export def print(args: &...) -> int {
    return fprint(cstd::stdout, args)
}

export def error(args: &...) -> int {
    return fprint(cstd::stderr, args)
}

def print_val(file: File, tpe: *runtime::Type, value: *) -> int {
    return 0
}

export def fprint(file: File, args: &...) -> int {
    var sum = 0
    for var i in 0..args.size {
        let arg = args[i]
        sum += print_val(file, runtime::ref_type(arg), arg !*)
    }
    return sum
}*/

// TODO These functions should accept strings but for now they need to be like this
export def #extern starts_with(str: *char, pre: *char) -> int8 {
    return (cstd::strncmp(pre, str, cstd::strlen(pre)) == 0) !int8
}

export def #extern absolute_path(pathname: *char, resolved: *char) {
    #if defined WIN32 {
        windows::GetFullPathNameA(pathname, MAX_PATH, resolved, null)
    } else {
        linux::realpath(pathname, resolved)
    }
}

export def #extern executable_file(resolved: *char) {
    #if defined WIN32 {
        // TODO Windows
    } else {
        var len = linux::readlink("/proc/self/exe".value, resolved, PATH_MAX)
        if len != -1 {
            resolved[len] = '\0'
        }
    }
}