import map
import optional

let sentinel = 1 !*

type Set(type T) = map::Map(T, *)
type SSet = Set(&string)

export def make(type T) -> &Set(T) {
    return map::make(T, type *)
}

export def make() -> &SSet {
    return map::make(type &string, type *)
}

export def add(set: &Set(type T), value: T) {
    map::put(set, value, sentinel)
}

export def remove(set: &Set(type T), value: T) {
    map::remove(set, value)
}

export def contains(set: &Set(type T), value: T) -> bool {
    return map::get(set, value).exists
}