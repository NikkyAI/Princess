// Ported to Princess, original work from https://github.com/Aivech
import cstd
import std
import vector
import runtime
import optional

const TRUE_VALUE = "true"
const FALSE_VALUE = "false"
const NIL_VALUE = "null"

type NodeStack = struct {
    up: *NodeStack
    node: *JsonTreeNode
    index: size_t
}

type Type = enum { NIL; OBJECT; ARRAY; STRING; NUMBER; TRUE; FALSE; KEY }
type Status = enum { JSON_NULL; JSON_EMPTY; JSON_OK; JSON_ERROR }

type Data = struct #union {
    number: double
    str: &string
    b: bool
}

type JsonTreeNode = struct {
    tpe: Type
    parent: *JsonTreeNode
    data: Data
    children: &Vector(JsonTreeNode)
}

export def destruct(this: *JsonTreeNode) {
    if this.tpe == Type::STRING or this.tpe == Type::KEY {
        __destruct__(*this.data.str)
    }
}

export def construct(copy: *JsonTreeNode, this: *JsonTreeNode) {
    copy.tpe = this.tpe
    copy.parent = this.parent
    if this.tpe == Type::STRING or this.tpe == Type::KEY {
        copy.data.str = this.data.str
    } else if this.tpe == Type::NUMBER {
        copy.data.number = this.data.number
    } else if this.tpe == Type::TRUE or
        this.tpe == Type::FALSE {
        copy.data.b = this.data.b        
    }

    copy.children = this.children
    if this.children {
        copy.children = vector::make(JsonTreeNode)
        for var i in 0..this.children.length {
            copy.children.push(this.children[i])
        }
    }
}

type JsonTree = struct {
    status: Status
    root: JsonTreeNode
}

def == (this: *JsonTreeNode, other: *JsonTreeNode) -> bool {
    if not this or not other { return false }
    if this.tpe != other.tpe { return false }
    if this.tpe == Type::TRUE or this.tpe == Type::FALSE { 
        return this.data.b == other.data.b 
    }
    if this.tpe == Type::STRING {
        return this.data.str == other.data.str
    }
    if this.tpe == Type::NUMBER {
        return this.data.number == other.data.number
    }
    if this.tpe == Type::ARRAY {
        if this.children.length != other.children.length { return false }
        for var i in 0..this.children.length {
            if this.children.get(i) != other.children.get(i) { return false }
        }
        return true
    }
    if this.tpe == Type::OBJECT {
        if this.children.length != other.children.length { return false }
        for var i in 0..this.children.length {
            let key = this.children.get(i)
            let child = key.children.get(0)
            var found = false
            for var j in 0..other.children.length {
                let key2 = other.children.get(j)
                let child2 = key2.children.get(0)
                if key2.data.str == key.data.str {
                    if not child == child2 { return false }
                    found = true
                    break
                }
            }
            if not found { return false }
        }
        return true
    }
    return false
}

export def == (this: &JsonTree, other: &JsonTree) -> bool {
    return *this.root == *other.root
}
export def != (this: &JsonTree, other: &JsonTree) -> bool {
    return not (this == other)
}

export def make_array() -> &JsonTree {
    let children = vector::make(JsonTreeNode)
    let root = { tpe = Type::ARRAY, children = children } !JsonTreeNode
    return { status = Status::JSON_OK, root = root } !&JsonTree
}
export def make_object() -> &JsonTree {
    let children = vector::make(JsonTreeNode)
    let root = { tpe = Type::OBJECT, children = children } !JsonTreeNode
    return { status = Status::JSON_OK, root = root } !&JsonTree
}
export def make_null() -> &JsonTree {
    let root = { tpe = Type::NIL } !JsonTreeNode
    return { status = Status::JSON_NULL, root = root } !&JsonTree
}

export def push(tree: &JsonTree, item: &JsonTree) {
    assert tree.root.tpe == Type::ARRAY
    tree.root.children.push(item.root)
}
export def push(tree: &JsonTree, item: double) {
    assert tree.root.tpe == Type::ARRAY
    tree.root.children.push({ tpe = Type::NUMBER, data = { number = item } !Data } !JsonTreeNode)
}
export def push(tree: &JsonTree, item: bool) {
    assert tree.root.tpe == Type::ARRAY
    tree.root.children.push({ tpe = Type::TRUE if item else Type::FALSE, data = { b = item } !Data } !JsonTreeNode)
}
export def push(tree: &JsonTree, item: &string) {
    assert tree.root.tpe == Type::ARRAY
    tree.root.children.push({ tpe = Type::STRING, data = { str = item } !Data } !JsonTreeNode)
}

export def set_item(tree: &JsonTree, key: &string, item: &JsonTree) {
    assert tree.root.tpe == Type::OBJECT
    for var i in 0..tree.root.children.length {
        let child = tree.root.children.get(i)
        if child.data.str == tree {
            child.children[0] = item.root
            return
        }
    }
    let children = vector::make(JsonTreeNode)
    children.push(item.root)
    tree.root.children.push({ tpe = Type::KEY, data = { str = key } !Data, children = children } !JsonTreeNode) 
}
export def set_item(tree: &JsonTree, key: &string, item: double) {
    let root = { tpe = Type::NUMBER, data = { number = item } !Data } !JsonTreeNode
    set_item(tree, key, { root = root, status = Status::JSON_OK } !&JsonTree)
}
export def set_item(tree: &JsonTree, key: &string, item: bool) {
    let root = { tpe = Type::TRUE if item else Type::FALSE, data = { b = item } !Data } !JsonTreeNode
    set_item(tree, key, { root = root, status = Status::JSON_OK } !&JsonTree)
}
export def set_item(tree: &JsonTree, key: &string, item: &string) {
    let root = { tpe = Type::STRING, data = { str = item } !Data } !JsonTreeNode
    set_item(tree, key, { root = root, status = Status::JSON_OK } !&JsonTree)
}

export def length(tree: &JsonTree) -> size_t {
    assert tree.root.tpe == Type::OBJECT or tree.root.tpe == Type::ARRAY
    return tree.root.children.length
}

export def has_item(tree: &JsonTree, str: &string) -> bool {
    if tree.root.tpe != Type::OBJECT { return false }
    for var i in 0..tree.root.children.length {
        if tree.root.children.get(i).data.str == str {
            return true
        }
    }
    return false
}
export def get_item(tree: &JsonTree, str: &string) -> &JsonTree {
    assert tree.status == Status::JSON_OK
    assert tree.root.tpe == Type::OBJECT

    var node: JsonTreeNode
    for var i in 0..tree.root.children.length {
        if tree.root.children.get(i).data.str == str {
            return { status = Status::JSON_OK, root = tree.root.children[i].children[0] } !&JsonTree
        }
    }
    assert
}

export def has_item(tree: &JsonTree, index: size_t) -> bool {
    if tree.root.tpe != Type::ARRAY { return false }
    return index < tree.root.children.length
}
export def get_item(tree: &JsonTree, index: size_t) -> &JsonTree {
    assert tree.status == Status::JSON_OK
    assert tree.root.tpe == Type::ARRAY
    assert index < tree.root.children.length

    return { status = Status::JSON_OK, root = tree.root.children[index] } !&JsonTree
}

export def as_bool(tree: &JsonTree) -> bool {
    return tree.root.data.b
}
export def as_double(tree: &JsonTree) -> double {
    return tree.root.data.number
}
export def as_string(tree: &JsonTree) -> &string {
    return tree.root.data.str
}

export def is_bool(tree: &JsonTree) -> bool {
    return tree.root.tpe == Type::TRUE or tree.root.tpe == Type::FALSE
}
export def is_double(tree: &JsonTree) -> bool {
    return tree.root.tpe == Type::NUMBER
}
export def is_string(tree: &JsonTree) -> bool {
    return tree.root.tpe == Type::STRING
}
export def is_null(tree: &JsonTree) -> bool {
    return tree.root.tpe == Type::NIL
}
export def is_object(tree: &JsonTree) -> bool {
    return tree.root.tpe == Type::OBJECT
}
export def is_array(tree: &JsonTree) -> bool {
    return tree.root.tpe == Type::ARRAY
}

// TODO Serialize references
def serialize(tpe: *runtime::Type, data: *) -> JsonTreeNode {
    if tpe == int8   { return { tpe = Type::NUMBER, data = { number = @(data !*int8)   !double } !Data } !JsonTreeNode }
    if tpe == uint8  { return { tpe = Type::NUMBER, data = { number = @(data !*uint8)  !double } !Data } !JsonTreeNode }
    if tpe == int16  { return { tpe = Type::NUMBER, data = { number = @(data !*int16)  !double } !Data } !JsonTreeNode }
    if tpe == uint16 { return { tpe = Type::NUMBER, data = { number = @(data !*uint16) !double } !Data } !JsonTreeNode }
    if tpe == int32  { return { tpe = Type::NUMBER, data = { number = @(data !*int32)  !double } !Data } !JsonTreeNode }
    if tpe == uint32 { return { tpe = Type::NUMBER, data = { number = @(data !*uint32) !double } !Data } !JsonTreeNode }
    if tpe == int64  { return { tpe = Type::NUMBER, data = { number = @(data !*int64)  !double } !Data } !JsonTreeNode }
    if tpe == uint64 { return { tpe = Type::NUMBER, data = { number = @(data !*uint64) !double } !Data } !JsonTreeNode }
    if tpe == char   { return { tpe = Type::NUMBER, data = { number = @(data !*char)   !double } !Data } !JsonTreeNode }

    if tpe == float  { return { tpe = Type::NUMBER, data = { number = @(data !*float) !double } !Data } !JsonTreeNode }
    if tpe == double { return { tpe = Type::NUMBER, data = { number = @(data !*double)        } !Data } !JsonTreeNode }

    if tpe == string { return { tpe = Type::STRING, data = { str = @(data !*string) !&string } !Data } !JsonTreeNode }
    if tpe == type &string { return { tpe = Type::STRING, data = { str = @(data !*&string) !&string } !Data } !JsonTreeNode }
    
    /*if tpe.kind == runtime::TypeKind::ARRAY {
        let vec = vector::make(JsonTreeNode)
        let arr = (@(data !*[*]))
        for var i in 0..arr.size {
            var node = serialize(tpe.tpe, arr.value ++ i * tpe.tpe.size)
            vec.push(node)
        }
        return { tpe = Type::ARRAY, children = vec } !JsonTreeNode
    }*/
    if tpe.kind == runtime::TypeKind::STATIC_ARRAY {
        let vec = vector::make(JsonTreeNode)
        for var i in 0..tpe.length {
            var node = serialize(tpe.tpe, data ++ i * tpe.tpe.size)
            vec.push(node)
        }
        return { tpe = Type::ARRAY, children = vec } !JsonTreeNode
    }
    if tpe.kind == runtime::TypeKind::STRUCT {
        let vec = vector::make(JsonTreeNode)
        for var i in 0..tpe.fields.size {
            let field = tpe.fields[i]
            let children = vector::make(JsonTreeNode)
            children.push(serialize(field.tpe, data ++ field.offset))
            vec.push({ tpe = Type::KEY, data = { str = field.name } !Data, children = children } !JsonTreeNode)
        }
        return { tpe = Type::OBJECT, children = vec } !JsonTreeNode
    }

    assert false, @("Can't serialize type" + tpe.name)
}

export def serialize(obj: type *T) -> &JsonTree {
    return { status = Status::JSON_OK, root = serialize(T, obj) } !&JsonTree
}

def deserialize(tpe: *runtime::Type, data: *, json: *JsonTreeNode) -> bool {
    if tpe == int8 {
        if json.tpe != Type::NUMBER or json.data.number < MIN_INT8 or json.data.number > MAX_INT8  { return false } 
        else { @(data !*int8) = json.data.number !int8 }
    } else if tpe == uint8 { 
        if json.tpe != Type::NUMBER or json.data.number < 0 or json.data.number > MAX_UINT8  { return false } 
        else { @(data !*uint8) = json.data.number !uint8 }
    } else if tpe == int16 { 
        if json.tpe != Type::NUMBER or json.data.number < MIN_INT16 or json.data.number > MAX_INT16  { return false } 
        @(data !*int16)  = json.data.number !int16 
    } else if tpe == uint16 { 
        if json.tpe != Type::NUMBER or json.data.number < 0 or json.data.number > MAX_UINT16 { return false } 
        @(data !*uint16) = json.data.number !uint16 
    } else if tpe == int32 { 
        if json.tpe != Type::NUMBER or json.data.number < MIN_INT32 or json.data.number > MAX_INT32  { return false } 
        @(data !*int32)  = json.data.number !int32 
    } else if tpe == uint32 { 
        if json.tpe != Type::NUMBER or json.data.number < 0 or json.data.number > MAX_UINT32  { return false } 
        @(data !*uint32) = json.data.number !uint32 
    } else if tpe == int64 { 
        if json.tpe != Type::NUMBER or json.data.number < MIN_INT64 or json.data.number > MAX_INT64  { return false } 
        @(data !*int64) = json.data.number !int64 
    } else if tpe == uint64 { 
        if json.tpe != Type::NUMBER or json.data.number < 0 or json.data.number > MAX_UINT64  { return false } 
        @(data !*uint64) = json.data.number !uint64 
    } else if tpe == char { 
        if json.tpe != Type::NUMBER or json.data.number < 0 or json.data.number > MAX_INT8  { return false } 
        @(data !*char) = json.data.number !char 
    } else if tpe == float { 
        if json.tpe != Type::NUMBER { return false } 
        @(data !*float) = json.data.number !float 
    } else if tpe == double { 
        if json.tpe != Type::NUMBER { return false } 
        @(data !*double) = json.data.number !double 
    } else if tpe == string {
        if json.tpe != Type::STRING { return false }  
        @(data !*string) = @json.data.str 
    } else if tpe == type &string {
        if json.tpe != Type::STRING { return false }  
        @(data !*&string) = json.data.str 
    } else if tpe.kind == runtime::TypeKind::STRUCT {
        if json.tpe != Type::OBJECT { return false }
        for var i in 0..tpe.fields.size {
            let field = tpe.fields[i]
            var found = false
            for var j in 0..json.children.length {
                let child = json.children.get(j)
                if @child.data.str == field.name {
                    if not deserialize(field.tpe, data ++ field.offset, child.children.get(0)) {
                        return false
                    }
                    found = true
                    break
                }
            }
            if not found { return false }
        }
    } else if tpe.kind == runtime::TypeKind::STATIC_ARRAY {
        if json.tpe != Type::ARRAY { return false }
        if json.children.length != tpe.length { return false }
        for var i in 0..tpe.length {
            if not deserialize(tpe.tpe, data ++ i * tpe.tpe.size, json.children.get(i)) { 
                return false 
            }
        }
    } else {
        return false
    }

    return true
}

export def deserialize(json: &JsonTree, type T) -> Optional(T) {
    var res: T
    let result = deserialize(T, *res, *json.root)
    if result {
        return optional::some(res)
    }
    return optional::none(T)
}

export def to_string(tree: &JsonTree) -> &string {
    return to_string(*tree.root)
}

def to_string(node: *JsonTreeNode, level: int = 1) -> &string {
    if not node { return null }
    switch node.tpe {
    case Type::OBJECT, Type::ARRAY:
        var res: &string = "{\n" if node.tpe == Type::OBJECT else "[\n"
        for var i in 0..node.children.length {
            for var j in 0..level {
                res += "  "
            }
            res += to_string(node.children.get(i), level + 1)
            if i < node.children.length - 1 {
                res += ","
            }
            res += "\n"
        }
        for var j in 0..(level - 1) {
            res += "  "
        }
        res += ("}" if node.tpe == Type::OBJECT else "]")
        return res
    case Type::NIL:
        return "null"
    case Type::STRING:
        return "\"" + node.data.str + "\""
    case Type::NUMBER:
        return to_string(node.data.number)
    case Type::TRUE:
        return "true"
    case Type::FALSE:
        return "false"
    case Type::KEY:
        return "\"" + node.data.str + "\": " + to_string(node.children.get(0), level)
    }
    return null
}

export def destruct(self: *JsonTree) {
    var stack = allocate(NodeStack)
    stack.node = *self.root
    stack.up = null
    stack.index = 0

    var node = *self.root
    loop {
        if not stack.node.children {
            if (stack.node.tpe == Type::KEY or stack.node.tpe == Type::STRING) and stack.node.data.str != null {
                // printf("Free node: \"%s\"\n", stack.node.data.string.str)
                stack.node.data.str = null
            }
            if stack.up == null { // terminate
                free(stack)
                stack = null
                break
            } else {
                var temp = stack
                stack = stack.up
                free(temp)
            }
        } else {
            if stack.index < stack.node.children.length {
                let new = allocate(NodeStack)
                new.up = stack
                new.index = 0
                new.node = stack.node.children.get(stack.index)
                stack.index += 1
                stack = new
            } else {
                stack.node.children = null
            }
        }
    }
}

export def parse(str: &string) -> &JsonTree {
    let node = {
        status = Status::JSON_EMPTY
    } !&JsonTree
    json_parse(node, str)
    return node
}

def skip_space(text: &string, pos: size_t) -> size_t {
    while isspace(text[pos]) {
        pos += 1
    }
    return pos
}

def open(parent: *JsonTreeNode) -> *JsonTreeNode {
    if not parent.children {
        parent.children = vector::make(JsonTreeNode)
    }
    parent.children.push({} !JsonTreeNode)
    let new: *JsonTreeNode = parent.children.get(parent.children.length - 1)
    new.parent = parent
    return new
}

def json_parse(self: &JsonTree, json_text: &string) {
    var node = *self.root
    var pos: size_t = 0
    pos = skip_space(json_text, pos)
    if json_text[pos] == '\0' { // empty json
        return
    }
    while pos < json_text.length {
        var next = json_text[pos]
        switch next {
        case '{':
            node.tpe = Type::OBJECT
            pos = skip_space(json_text, pos+1)
            if json_text[pos] != '}' {
                node = open(node)
                continue
            } else {
                pos += 1
            }
        case '[':
            node.tpe = Type::ARRAY
            pos = skip_space(json_text, pos+1)
            if json_text[pos] != ']' {
                node = open(node)
                continue
            } else {
                pos += 1
            }
        case '"':
            if node.parent != null and node.parent.tpe == Type::OBJECT {
                node.tpe = Type::KEY
            } else {
                node.tpe = Type::STRING
            }
            if not parse_str(node, json_text, *pos) {
                self.status = Status::JSON_ERROR
                return
            }
        case '}':
            if node.parent == null or node.parent.parent == null or node.parent.parent.tpe != Type::OBJECT {
                self.status = Status::JSON_ERROR
                return
            }
            node = node.parent.parent
            pos += 1
        case ']':
            if node.parent == null or node.parent.tpe != Type::ARRAY {
                self.status = Status::JSON_ERROR
                return
            }
            node = node.parent
            pos += 1
        case:
            if isdigit(next) or next == '-' {
                node.tpe = Type::NUMBER
                if (parse_num(node, json_text, *pos)) {
                } else {
                    self.status = Status::JSON_ERROR
                    return
                }
            } else if (isalpha(next)) {
                if(not parse_true_false_nil(node, json_text, *pos)) {
                    self.status = Status::JSON_ERROR
                    return
                }

            } else if isspace(next) {
                pos = skip_space(json_text, pos)
                continue
            } else {
                self.status = Status::JSON_ERROR
                return
            }
        }

        // after a value:
        pos = skip_space(json_text, pos)
        next = json_text[pos]

        switch next {
        case '\0': // end of file
            if node.parent != null {
                self.status = Status::JSON_ERROR
            } else { 
                self.status = Status::JSON_OK 
            }
            return
        case ',':     // next element in an array or object
            if node.parent.tpe == Type::ARRAY {
                pos = skip_space(json_text, pos + 1)
                if json_text[pos] == ']' {
                    self.status = Status::JSON_ERROR
                    return
                }
                node = open(node.parent)
                continue
            } else if node.parent.tpe == Type::KEY {
                pos = skip_space(json_text, pos + 1)
                if json_text[pos] != '"' {
                    self.status = Status::JSON_ERROR
                    return
                }
                node = open(node.parent.parent)
                continue
            } else {
                self.status = Status::JSON_ERROR
                return
            }
        
        case ']', '}':
            continue
        case ':':
            if node.tpe != Type::KEY {
                self.status = Status::JSON_ERROR
                return
            }
            pos = skip_space(json_text, pos+1)
            if json_text[pos] == '}' {
                self.status = Status::JSON_ERROR
                return
            }
            node = open(node)
            continue
        case:
            self.status = Status::JSON_ERROR
            return
        }
    }
}

def parse_true_false_nil(node: *JsonTreeNode, text: &string, pos: *size_t) -> int {
    if strncmp(text.value ++ @pos, TRUE_VALUE.value, 4) == 0 {
        node.tpe = Type::TRUE
        node.data.b = 1
        @pos += 4
    } else if strncmp(text.value ++ @pos, FALSE_VALUE.value, 5) == 0 {
        node.tpe = Type::FALSE
        node.data.b = 0
        @pos += 5
    } else if strncmp(text.value ++ @pos, NIL_VALUE.value, 4) == 0 {
        node.tpe = Type::NIL
        @pos += 4
    } else {
        return 0
    }
    return 1
}

def parse_num(node: *JsonTreeNode, text: &string, pos: *size_t) -> int {
    var crawl = @pos
    var next = text[crawl]
    if next == '-' {
        crawl += 1
        next = text[crawl]
        if not isdigit(next) { return 0 }
    }
    loop {
        if not isdigit(next) { break }
        crawl += 1
        next = text[crawl]
    }
    if (next == '.') {
        crawl += 1
        next = text[crawl]
        if not isdigit(next) { return 0 }
    }
    loop {
        if not isdigit(next) { break }
        crawl += 1
        next = text[crawl]
    }
    if tolower(next) == 'e' {
        crawl += 1
        next = text[crawl]
        if (next == '-' or next == '+') {
            crawl += 1
            next = text[crawl]
        }
        if not isdigit(next) { return 0 }
    }
    loop {
        if not isdigit(next) { break }
        crawl += 1
        next = text[crawl]
    }
    node.data.number = strtod(text.value ++ @pos, null)
    @pos = crawl
    return 1
}

// if this handles multi-byte UTF8 characters weirdly it's because they have null bytes in them
def parse_str(node: *JsonTreeNode, text: &string, pos: *size_t) -> int {
    var str: &string = ""
    var crawl = @pos
    var next = text[crawl]
    if next != '"' {
        return 0 
    }
    crawl += 1
    loop {
        next = text[crawl]
        if next == '"' {
            crawl += 1
            break
        }
        if next == '\\' {
            crawl += 1
            next = text[crawl]
            switch next {
            case '"', '/', '\\':
                str += next
            case 'b':
                str += '\b'
            case 'f':
                str += '\f'
            case 'n':
                str += '\n'
            case 'r':
                str += '\r'
            case 't':
                str += '\t'
            case 'u':
                var glyph: uint64 = 0
                for var i in 0..2 {
                    var append: uint64
                    crawl += 1
                    next = text[crawl]
                    if isdigit(next) {
                        append = ((next - '0') << 4) !char
                    } else {
                        next = tolower(next) !char
                        if next >= 'a' and next <= 'f' {
                            append = ((next - 'a' + 10) << 4) !char
                        } else {
                            return 0 
                        }
                    }
                    crawl += 1
                    next = text[crawl]
                    if isdigit(next) {
                        append = (append + next - '0') !char
                    } else {
                        next = tolower(next) !char
                        if next >= 'a' and next <= 'f' {
                            append = (append + next - 'a' + 10) !char
                        } else {
                            return 0 
                        }
                    }
                    glyph |= append << ((1 - i) * 8)
                }
                str += utf8_encode(glyph)
            case:
                return 0
            }
            crawl += 1
            continue
        }
        if next == '\0' {
            return 0
        }
        str += next
        crawl += 1
    }
    @pos = crawl
    node.data.str = str
    // printf("Allocated String for str \"%s\"\n", str.str)
    return 1
}