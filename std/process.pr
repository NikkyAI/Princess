import cstd
import std

export let PIPE = -1 !File

#if defined WIN32 {
    import windows

    const WAIT_OBJECT_0 = 0 !ulong
    const WAIT_TIMEOUT = 0x102 !ulong
    const WAIT_FAILED = 0xFFFFFFFF !ulong

    const STARTF_USESTDHANDLES = 0x00000100

    export type Process = struct {
        exit_code: int
        running: bool

        // Windows specific
        si: windows::STARTUPINFOA
        pi: windows::PROCESS_INFORMATION
    }

    // TODO Can't use File here because the compiler thinks it's not a pointer
    export def spawn(exe: &string, args: [&string], stdin: *cstd::FILE = null, stdout: *cstd::FILE = null, stderr: *cstd::FILE = null) -> Process {
        var si: windows::STARTUPINFOA 
        var pi: windows::PROCESS_INFORMATION

        si.cb = (size_of windows::STARTUPINFOA) !ulong

        if stdin { si.hStdInput = cstd::_get_osfhandle(cstd::fileno(stdin)) !* }
        if stdout { si.hStdOutput = cstd::_get_osfhandle(cstd::fileno(stdout)) !* }
        if stderr { si.hStdError = cstd::_get_osfhandle(cstd::fileno(stderr)) !* }

        if stdin or stdout or stderr {
            si.dwFlags |= STARTF_USESTDHANDLES
        }

        var cmd: &string = exe + " "
        for var arg in args {
            cmd += arg + " "
        }

        if not windows::CreateProcessA(
            exe.value,
            cmd.value,
            null, null, 0, 0 !ulong, 
            null, null, *si, *pi
        ) { abort("Couldn't create process") }
        
        return {
            0, true, si, pi
        } !Process
    }

    export def wait(process: *Process, timeout: ulong = -1) {
        let code = windows::WaitForSingleObject(process.pi.hProcess, timeout)
        if code == WAIT_TIMEOUT or code == WAIT_FAILED { return }

        var exit_code: ulong
        windows::GetExitCodeProcess(process.pi.hProcess, *exit_code)
        process.exit_code = exit_code !int
        process.running = false
    }

    // TODO Call this in the destructor
    export def dispose(process: *Process) {
        windows::CloseHandle(process.pi.hProcess)
        windows::CloseHandle(process.pi.hThread)
    }

} else {
    import linux
    //TODO
}