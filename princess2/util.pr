import buffer

export let MAX_UINT8: uint8 = 0xFF
export let MAX_UINT16: uint16 = 0xFFFF
export let MAX_UINT32: uint32 = 0xFFFFFFFF
export let MAX_UINT64: uint64 = 0xFFFFFFFFFFFFFFFF

export let MIN_INT8: int8 = -0x80
export let MIN_INT16: int16 = -0x8000
export let MIN_INT32: int32 = -0x80000000
export let MIN_INT64: int64 = -0x7FFFFFFFFFFFFFFF - 1

export let MAX_INT8: int8 = 0x7F
export let MAX_INT16: int16 = 0x7FFF
export let MAX_INT32: int32 = 0x7FFFFFFF
export let MAX_INT64: int64 = 0x7FFFFFFFFFFFFFFF

// copy string
export def copy_string(str: string) -> *string {
    var res = allocate(string)
    (@res).size = str.size
    (@res).value = allocate((size_of char) * str.size)
    memcopy(str.value, (@res).value, str.size)
    return res
}

export def find_substr(str: string, search: string, start: int) -> int {
    if start >= length(str) {
        return -1
    }
    for var i in start..length(str) {
        if str[i] == search[0] {
            var j = 0
            while j < length(search) {
                if i + j >= length(str) {
                    return -1
                }
                if str[i + j] != search[j] {
                    break
                }
                j += 1
            }
            if j == length(search) {
                return i
            }
            i += j
        }
    }
    return -1
}

export def replace_all(str: string, search: string, replace: string) -> string {
    let buf = buffer::make_buffer()

    var i = 0
    var j = find_substr(str, search, 0)
    while j != -1 {
        var before = zero_allocate(char, j - i + 1)
        memcopy(str.value ++ i, before, j - i)
        buffer::append_str(*buf, before)
        buffer::append_str(*buf, replace)
        free(before)

        i = j + length(search)
        j = find_substr(str, search, i)
    }
    var after = zero_allocate(char, length(str) - i + 1)
    memcopy(str.value ++ i, after, length(str) - i)
    buffer::append_str(*buf, after)
    free(after)
    return buffer::to_string(*buf)
}

export def split_lines(s: string) -> [string] {
    let size = length(s)

    var lines = 1
    for var i in 0..size {
        let ch = s[i]
        if ch == '\n' {
            lines += 1
        }
    }
    var result = allocate(string, lines)

    var line = 0
    var j = 0
    var k = 0
    var l = 0
    while j < size {
        let ch = s[j]
        if ch == '\n' {
            if j - 1 >= 0 and s[j - 1] == '\r' {
                l = j - 1
            } else {
                l = j
            }

            result[line] = allocate(char, l - k + 1)
            memcopy(s.value ++ k, result[line], l - k)
            result[line][l - k] = '\0'

            k = j + 1
            line += 1
        }
        j += 1
    }

    result[line] = allocate(char, size - k + 1)
    memcopy(s.value ++ k, result[line], size - k)
    result[line][size - k] = '\0'

    return result
}

export def uint_to_str_sign(sign: int, n: uint64) -> string {
    let digits = "0123456789"

    var str: string
    str.value = zero_allocate((size_of char) * 22)

    if n == 0 {
        str[0] = '0'
        str.size = 2
        return str
    }

    var i: uint64 = 0
    if sign < 0 {
        str[i] = '-'
        i += 1
    }

    var shifter: uint64 = n
    while shifter {
        i += 1
        shifter /= 10
    }

    str.size = i + 1

    while n {
        i -= 1
        str[i] = digits[n % 10]
        n /= 10
    }

    return str
}

export def uint_to_str(i: uint64) -> string {
    return uint_to_str_sign(1, i)
}

export def int_to_str(i: int64) -> string {
    var sign = 1
    if i < 0 {
        i *= -1
        sign = -1
    }
    return uint_to_str_sign(sign, i)
}

export def exists(filename: string) -> bool {
    let fp = open(filename, "r")
    if fp {
        close(fp)
        return true
    }
    return false
}

export def gcd(a: int, b: int) -> int {
    while b != 0 {
        var t = b
        b = a % b
        a = t
    }
    return a
}

export def lcm(a: int, b: int) -> int {
    return (a * b) / gcd(a, b)
}

var counter = 0

export def make_unique_name -> string {
    let s = int_to_str(counter)
    counter += 1
    return s
}