export let MAX_UINT8: uint8 = 0xFF
export let MAX_UINT16: uint16 = 0xFFFF
export let MAX_UINT32: uint32 = 0xFFFFFFFF
export let MAX_UINT64: uint64 = 0xFFFFFFFFFFFFFFFF

export let MIN_INT8: int8 = -0x80
export let MIN_INT16: int16 = -0x8000
export let MIN_INT32: int32 = -0x80000000
export let MIN_INT64: int64 = -0x7FFFFFFFFFFFFFFF - 1

export let MAX_INT8: int8 = 0x7F
export let MAX_INT16: int16 = 0x7FFF
export let MAX_INT32: int32 = 0x7FFFFFFF
export let MAX_INT64: int64 = 0x7FFFFFFFFFFFFFFF

// copy string
export def copy_string(str: string) -> *string {
    var res = allocate(string)
    (@res).size = str.size
    (@res).value = allocate((size_of char) * str.size)
    memcopy(str.value, (@res).value, str.size)
    return res
}

export def split_lines(s: string) -> [string] {
    let size = length(s)

    var lines = 1
    for var i in 0..size {
        let ch = s[i]
        if ch == '\n' {
            lines += 1
        }
    }
    var result = allocate(string, lines)

    var line = 0
    var j = 0
    var k = 0
    var l = 0
    while j < size {
        let ch = s[j]
        if ch == '\n' {
            if j - 1 >= 0 and s[j - 1] == '\r' {
                l = j - 1
            } else {
                l = j
            }

            result[line] = allocate(char, l - k + 1)
            memcopy(s.value ++ k, result[line], l - k)
            result[line].size = l - k + 1
            result[line][l - k] = '\0'

            k = j + 1
            line += 1
        }
        j += 1
    }
    result[line] = allocate(char, size - k + 1)
    memcopy(s.value ++ k, result[line], size - k)
    result[line].size = size - k + 1
    result[line][size - k] = '\0'


    return result
}

export def int_to_str(n: int64) -> string {
    let digits = "0123456789"

    var str: string
    str.value = zero_allocate((size_of char) * 21)

    if n == 0 {
        str[0] = '0'
        str.size = 2
        return str
    }

    var i: int64 = 0
    if n < 0 {
        str[i] = '-'
        i += 1
        n *= -1
    }

    var shifter: int64 = n
    while shifter {
        i += 1
        shifter /= 10
    }

    str.size = i + 1

    while n {
        i -= 1
        str[i] = digits[n % 10]
        n /= 10
    }

    return str
}