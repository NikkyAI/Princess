import lexer

export type NodeKind = enum {
    PROGRAM
}

export type Node

export type NodeBinOp = struct {
    left: *Node
    right: *Node
}

export type NodeUnOP = struct {
    right: *Node
}

export type NodeValue = struct #union {
    bin_op: NodeBinOp
    un_op: NodeUnOp 
}

export type Node = struct {
    kind: NodeKind

    line: int
    column: int
    end_line: int
    end_column: int

    value: NodeValue
}

type ParseState = struct {
    last_token: *lexer::Token
}

export def parse(list: *lexer::TokenList) -> Node {

}