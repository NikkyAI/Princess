import lexer

export type NodeKind = enum {
    PROGRAM
}

export type Node

export type NodeBinaryOp = struct {
    left: *Node
    right: *Node
}

export type NodeUnaryOp = struct {
    right: *Node
}

export type NodeValue = struct #union {
    bin_op: NodeBinaryOp
    un_op: NodeUnaryOp 
}

export type Node = struct {
    kind: NodeKind

    start_line: int
    start_column: int
    end_line: int
    end_column: int

    value: NodeValue
}

def pop(list: **lexer::TokenList) -> lexer::Token {

}

def peek(list: **lexer::TokenList) -> lexer::Token {
    return @@list
}

def parse_expression(list: **lexer::TokenList) -> Node {

}

def parse_t_term(list: **lexer::TokenList) {

}

def parse_statement(list: **lexer::TokenList) -> Node {

}

export def parse(list: *lexer::TokenList) -> Node {
    while list != null {
        let node = parse_statement(*list)
    }
}