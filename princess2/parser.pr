import lexer

export type NodeKind = enum {
    PROGRAM
}

export type Node

export type NodeBinaryOp = struct {
    left: *Node
    right: *Node
}

export type NodeUnaryOp = struct {
    right: *Node
}

export type NodeValue = struct #union {
    bin_op: NodeBinaryOp
    un_op: NodeUnaryOp 
}

export type Node = struct {
    kind: NodeKind

    line: int
    column: int

    value: NodeValue
}

type ParseState = struct {
    lines: [string]
}

def skip_whitespace(list: **lexer::TokenList) {
    var tt = (@@list).value.tpe
    while tt == lexer::TokenType::WHITESPACE or tt == lexer::TokenType::COMMENT {
        @list = (@@list).next
        tt = (@@list).value.tpe
    }
}

def pop(list: **lexer::TokenList) -> lexer::Token {
    skip_whitespace(list)
    let token = (@@list).value
    @list = (@@list).next
    return token
}

def peek(list: **lexer::TokenList) -> lexer::Token {
    skip_whitespace(list)
    return (@@list).value
}

def parse_expression(list: **lexer::TokenList, parse_state: *ParseState) -> *Node {

}

def parse_vardecl(list: **lexer::TokenList, parse_state: *ParseState) -> *Node {

}

def parse_typedecl(list: **lexer::TokenList, parse_state: *ParseState) -> *Node {

}

def parse_if_stmt(list: **lexer::TokenList, parse_state: *ParseState) -> *Node {

}

def parse_t_term(list: **lexer::TokenList, parse_state: *ParseState) {
    let token = peek(list)
    if token.tpe == lexer::TokenType::SEMICOLON or token.tpe == lexer::TokenType::NEW_LINE {
        pop(list)
    } else if token.tpe != lexer::TokenType::EOF and token.tpe != lexer::TokenType::C_BRACE {
        error("Missing statement separator\n")
    }
}

def parse_statement(list: **lexer::TokenList, parse_state: *ParseState) -> *Node {
    let lh = peek(list)
    var node: *Node
    if lh.tpe == lexer::TokenType::K_VAR {
        node = parse_vardecl(list, parse_state)
    } else if lh.tpe == lexer::TokenType::K_TYPE {
        node = parse_typedecl(list, parse_state)
    } else if lh.tpe == lexer::TokenType::K_IF {
        node = parse_if_stmt(list, parse_state)
    } else {
        node = parse_expression(list, parse_state)
    }
    parse_t_term(list, parse_state)
    return node
}

export def parse(list: *lexer::TokenList, lines: [string]) -> *Node {
    var parse_state: ParseState
    parse_state.lines = lines
    
    while list != null {
        let node = parse_statement(*list, *parse_state)
    }
}