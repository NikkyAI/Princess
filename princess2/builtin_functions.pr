import vector
import buffer
import map
import util
import parser
import typechecking
import compiler
import scope
import debug
import builtins

def param(name: string, tpe: *typechecking::Type) -> *typechecking::NamedParameter {
    let named = allocate(typechecking::NamedParameter)
    (@named).name = name
    (@named).value = tpe
    (@named).varargs = false
    return named
}

def varargs(name: string, tpe: *typechecking::Type) -> *typechecking::NamedParameter {
    let named = allocate(typechecking::NamedParameter)
    (@named).name = name
    (@named).value = tpe
    (@named).varargs = true
    return named
}

def make_function_type(
    name: string, 
    parameter_t: [*typechecking::NamedParameter],
    return_t: [*typechecking::Type],
    macro: (*parser::Node, [compiler::Value], *compiler::State) -> compiler::Value,
    proto: (*vector::Vector, *vector::Vector, *typechecking::State) -> (*vector::Vector)) -> *typechecking::Type {
    
    let pars = vector::make()
    for var i in 0..parameter_t.size {
        vector::push(pars, parameter_t[i])
    }
    let rets = vector::make()
    for var i in 0..return_t.size {
        vector::push(rets, return_t[i])
    }

    let tpe = allocate(typechecking::Type)
    (@tpe).kind = typechecking::TypeKind::FUNCTION
    (@tpe).name = name
    (@tpe).type_name = name
    (@tpe).parameter_t = pars
    (@tpe).return_t = rets
    (@tpe).macro = macro
    (@tpe).proto = proto

    return tpe
}

def create_function(
    name: string, 
    parameter_t: [*typechecking::NamedParameter],
    return_t: [*typechecking::Type],
    macro: (*parser::Node, [compiler::Value], *compiler::State) -> compiler::Value,
    proto: (*vector::Vector, *vector::Vector, *typechecking::State) -> (*vector::Vector)) {
    
    scope::create_function(
        builtins::builtins, 
        parser::make_identifier([name]), 
        parser::ShareMarker::EXPORT, 
        make_function_type(name, parameter_t, return_t, macro, proto),
        false
    )
}

def import_function(state: *compiler::State, function: string) {
    map::put((@(@state).module).imported, function, map::sentinel)
}

def charp_str(value: compiler::Value, state: *compiler::State) -> compiler::Value {
    let local = compiler::make_local_value(typechecking::pointer(builtins::char_), null, state)

    let index = allocate(int, 1)
    index[0] = 1

    let extract = allocate(compiler::Insn)
    (@extract).kind = compiler::InsnKind::EXTRACTVALUE
    (@extract).value.extract_value = {
        ret = local,
        value = value,
        index = index
    } !InsnExtractValue

    compiler::push_insn(extract, state)

    return local
}

def charp_static(global: *compiler::Value, state: *compiler::State) -> compiler::Value {
    let local = compiler::make_local_value(typechecking::pointer(builtins::char_), global, state)

    let index = allocate(compiler::Value, 2)
    index[0] = compiler::make_int_value(0)
    index[1] = compiler::make_int_value(0)

    let gep = allocate(compiler::Insn)
    (@gep).kind = compiler::InsnKind::GETELEMENTPTR
    (@gep).value.gep = {
        ret = local,
        tpe = (@(@global).tpe).tpe,
        value = @global,
        index = index
    } !InsnGetElementPtr

    compiler::push_insn(gep, state)

    return local
}

def charp(str: string, state: *compiler::State) -> compiler::Value {
    let tpe = allocate(typechecking::Type)
    (@tpe).kind = typechecking::TypeKind::STATIC_ARRAY
    (@tpe).tpe = builtins::char_
    (@tpe).length = str.size
    (@tpe).size = (@tpe).length * (size_of char)
    (@tpe).align = size_of char

    let value = allocate(compiler::Value)
    @value = {
        kind = compiler::ValueKind::STRING,
        s = str,
        tpe = tpe
    } !compiler::Value

    let global = compiler::make_global_value(tpe, "str", value, state)
    let globalp = allocate(compiler::Value)
    @globalp = global
    return charp_static(globalp, state)
}

def convert_to_charp(values: [compiler::Value], state: *compiler::State) {
    for var i in 0..values.size {
        if typechecking::equals(values[i].tpe, builtins::string_) {
            values[i] = charp_str(values[i], state)
        }
    }
}

def get_arg(args: *vector::Vector, kwargs: *vector::Vector, index: int, name: string) -> *parser::Node {
    if index < vector::length(args) {
        return vector::get(args, index) !*parser::Node
    }
    for var i in 0..vector::length(kwargs) {
        let kwarg = vector::get(kwargs, i) !*parser::Node
        let nname = typechecking::last_ident_to_str((@kwarg).value.named_arg.name)
        if nname == name {
            return (@kwarg).value.named_arg.value
        }
    }
    return null
}

def forward_to_function(args: [compiler::Value], tpe: *typechecking::Type, name: string, state: *compiler::State) -> compiler::Value {
    var ret = compiler::NO_VALUE
    if tpe {
        ret = compiler::make_local_value(tpe, null, state)
    }
    let call = allocate(compiler::Insn)
    (@call).kind = compiler::InsnKind::CALL
    (@call).value.call = {
        name = { kind = compiler::ValueKind::GLOBAL, name = name } !compiler::Value,
        ret = ret,
        args = args
    } !compiler::InsnCall
    
    compiler::push_insn(call, state)
    return ret
}

def _assert(node: *parser::Node, argsv: [compiler::Value], state: *compiler::State) -> compiler::Value {
    import_function(state, "__assert_fail")
    let insn = argsv[0]
    if not insn.tpe { return compiler::NO_VALUE }

    let if_false = compiler::make_label(state)
    
    let br = allocate(compiler::Insn)
    (@br).kind = compiler::InsnKind::BR
    (@br).value.br = {
        cond = insn,
        if_false = if_false
    } !compiler::InsnBr
    compiler::push_insn(br, state)

    compiler::push_label(if_false, state)

    let args = allocate(compiler::Value, 4)
    // TODO I think assertions are supposed to only show the assertion and not the whole line
    args[0] = charp((@node).loc.lines[(@node).loc.line], state)
    args[1] = charp((@node).loc.filename, state)
    args[2] = { kind = compiler::ValueKind::INT, i = (@node).loc.line, sign = 1, tpe = builtins::int_ } !compiler::Value

    var current_function = "main"
    if (@state).current_function {
        current_function = (@(@state).current_function).unmangled
    }
    args[3] = charp(current_function, state)

    let call = allocate(compiler::Insn)
    (@call).kind = compiler::InsnKind::CALL
    (@call).value.call = {
        name = { kind = compiler::ValueKind::GLOBAL, name = "__assert_fail" } !compiler::Value,
        ret = compiler::NO_VALUE,
        args = args
    } !compiler::InsnCall
    
    compiler::push_insn(call, state)

    let unreachable = allocate(compiler::Insn)
    (@unreachable).kind = compiler::InsnKind::UNREACHABLE

    compiler::push_insn(unreachable, state)

    let if_true = compiler::make_label(state)
    compiler::push_label(if_true, state)
    (@br).value.br.if_true = if_true

    return compiler::NO_VALUE
}

create_function(
    "assert", 
    [param("assertion", builtins::bool_)],
    // TODO This is ugly...
    [] ![typechecking::Type], 
    *_assert,
    null
)

// TODO it would make more sense to accept [compiler::Value] here, lets see what we can do about that error message
def format_str(args: *vector::Vector) -> *string {
    let buf = buffer::make_buffer()
    for var i in 0..vector::length(args) {
        let arg = vector::get(args, i) !*parser::Node
        let tpe = (@arg).tpe
        if not tpe { return null }

        // TODO Typedefs of these types don't work
        // TODO Also do something about other types like structs and arrays
        if tpe == builtins::size_t_ { buffer::append_str(*buf, "%zu") 
        } else if tpe == builtins::char_ { buffer::append_str(*buf, "%c")
        } else if typechecking::equals(tpe, builtins::string_) or
            typechecking::equals(tpe, typechecking::pointer(builtins::char_)) or
            ((@tpe).kind == typechecking::TypeKind::STATIC_ARRAY and typechecking::equals((@tpe).tpe, builtins::char_)) { 
                buffer::append_str(*buf, "%s")
        } else if typechecking::is_pointer(tpe) { buffer::append_str(*buf, "%p") 
        } else if typechecking::equals(tpe, builtins::int8_) { buffer::append_str(*buf, "%hhd") 
        } else if typechecking::equals(tpe, builtins::uint8_) { buffer::append_str(*buf, "%hhu") 
        } else if typechecking::equals(tpe, builtins::int16_) { buffer::append_str(*buf, "%hd")
        } else if typechecking::equals(tpe, builtins::uint16_) { buffer::append_str(*buf, "%hu")
        } else if typechecking::equals(tpe, builtins::int32_) { buffer::append_str(*buf, "%d")
        } else if typechecking::equals(tpe, builtins::uint32_) { buffer::append_str(*buf, "%u")
        } else if typechecking::equals(tpe, builtins::int64_) { buffer::append_str(*buf, "%ld")
        } else if typechecking::equals(tpe, builtins::uint64_) { buffer::append_str(*buf, "%lu")
        } else if typechecking::equals(tpe, builtins::float32_) { buffer::append_str(*buf, "%f")
        } else if typechecking::equals(tpe, builtins::float64_) { buffer::append_str(*buf, "%f")
        } else {
            typechecking::errorn(arg, "Print type ")
            error(debug::type_to_str(tpe), " not supported\n")
            return null
        }
    }
    return util::copy_string(buffer::to_string(*buf))
}

def print_convert_types(value: compiler::Value, state: *compiler::State) -> compiler::Value {
    if not value.tpe { return compiler::NO_VALUE }
    if ((@value.tpe).kind == typechecking::TypeKind::STATIC_ARRAY and 
        typechecking::equals((@value.tpe).tpe, builtins::char_)) {
        return charp_static(value.addr, state)
    } else if typechecking::equals(value.tpe, builtins::string_) {
        return charp_str(value, state)
    }
    return value
}

// TODO Add a keyword argument file
def _print(node: *parser::Node, argsv: [compiler::Value], state: *compiler::State) -> compiler::Value {
    import_function(state, "printf")

    let fmt = format_str((@node).value.func_call.args)
    if not fmt { return compiler::NO_VALUE }

    let args = allocate(compiler::Value, argsv.size + 1)
    args[0] = charp(@fmt, state)

    for var i in 0..argsv.size {
        args[i + 1] = print_convert_types(argsv[i], state)
    }

    let ret = compiler::make_local_value(builtins::int_, null, state)
    let call = allocate(compiler::Insn)

    let proto = allocate(typechecking::NamedParameter, 2)
    proto[0] = @param("", typechecking::pointer(builtins::char_))
    proto[1] = @varargs("", null)

    (@call).kind = compiler::InsnKind::CALL
    (@call).value.call = {
        name = { kind = compiler::ValueKind::GLOBAL, name = "printf" } !compiler::Value,
        ret = ret,
        args = args,
        proto = proto
    } !compiler::InsnCall

    compiler::push_insn(call, state)

    return ret
}

create_function(
    "print",
    [varargs("", null)],
    [builtins::int_],
    *_print,
    null
)

def _error(node: *parser::Node, argsv: [compiler::Value], state: *compiler::State) -> compiler::Value {
    import_function(state, "fprintf")

    let fmt = format_str((@node).value.func_call.args)
    if not fmt { return compiler::NO_VALUE }

    let load_ret = compiler::make_local_value(builtins::File_, null, state)
    let load = allocate(compiler::Insn)
    (@load).kind = compiler::InsnKind::LOAD
    (@load).value.load = {
        value = load_ret,
        loc = { 
            kind = compiler::ValueKind::GLOBAL, 
            name = "stderr", 
            tpe = typechecking::pointer(builtins::File_) 
        } !compiler::Value
    } !compiler::InsnLoad

    compiler::push_insn(load, state)

    let args = allocate(compiler::Value, argsv.size + 2)
    args[0] = load_ret
    args[1] = charp(@fmt, state)

    for var i in 0..argsv.size {
        args[i + 2] = print_convert_types(argsv[i], state)
    }

    let ret = compiler::make_local_value(builtins::int_, null, state)
    let call = allocate(compiler::Insn)

    let proto = allocate(typechecking::NamedParameter, 3)
    proto[0] = @param("", builtins::File_)
    proto[1] = @param("", typechecking::pointer(builtins::char_))
    proto[2] = @varargs("", null)

    (@call).kind = compiler::InsnKind::CALL
    (@call).value.call = {
        name = { kind = compiler::ValueKind::GLOBAL, name = "fprintf" } !compiler::Value,
        ret = ret,
        args = args,
        proto = proto
    } !compiler::InsnCall

    compiler::push_insn(call, state)

    return ret
}

create_function(
    "error",
    [varargs("", null)],
    [builtins::int_],
    *_error,
    null
)

def _length(node: *parser::Node, argsv: [compiler::Value], state: *compiler::State) -> compiler::Value {
    let array = argsv[0]

    let len = compiler::make_local_value(builtins::size_t_, null, state)

    let index = allocate(int, 1)
    index[0] = 0
    let extract = allocate(compiler::Insn)
    (@extract).kind = compiler::InsnKind::EXTRACTVALUE
    (@extract).value.extract_value = {
        index = index,
        value = array,
        ret = len
    } !compiler::InsnExtractValue
    compiler::push_insn(extract, state)
    
    let ret = compiler::make_local_value(builtins::size_t_, null, state)
    let sub = allocate(compiler::Insn)
    (@sub).kind = compiler::InsnKind::SUB
    (@sub).value.arith = {
        ret = ret,
        left = len,
        right = {
            kind = compiler::ValueKind::INT,
            i = 1,
            sign = 1,
            tpe = builtins::size_t_
        } !compiler::Value
    } !InsnArithmetic
    compiler::push_insn(sub, state)

    return ret
}

create_function(
    "length",
    [param("str", typechecking::array(builtins::char_))],
    [builtins::size_t_],
    *_length,
    null
)

def _allocate_size(node: *parser::Node, argsv: [compiler::Value], state: *compiler::State) -> compiler::Value {
    import_function(state, "malloc")
    let arg = argsv[0]

    let args = allocate(compiler::Value, 1)
    args[0] = arg

    return forward_to_function(args, typechecking::pointer(null), "malloc", state)
}

create_function(
    "allocate",
    [param("size", builtins::size_t_)],
    [typechecking::pointer(null)],
    *_allocate_size,
    null
)

def _allocate_type(node: *parser::Node, argsv: [compiler::Value], state: *compiler::State) -> compiler::Value {
    import_function(state, "malloc")
    let tpe = argsv[0].value_tpe

    let args = allocate(compiler::Value, 1)
    args[0] = { kind = compiler::ValueKind::INT, i = (@tpe).size, tpe = builtins::size_t_ } !compiler::Value
    
    let call_ret = forward_to_function(args, typechecking::pointer(null), "malloc", state)

    let ret = compiler::make_local_value(typechecking::pointer(tpe), null, state)
    let bitcast = allocate(compiler::Insn)
    (@bitcast).kind = compiler::InsnKind::BITCAST
    (@bitcast).value.convert = {
        ret = ret,
        value = call_ret
    }

    compiler::push_insn(bitcast, state)

    return ret
}

def _allocate_type_proto(args: *vector::Vector, kwargs: *vector::Vector, state: *typechecking::State) -> *vector::Vector {
    let rets = vector::make()
    let arg = get_arg(args, kwargs, 0, "tpe")
    let tpe = typechecking::type_lookup(arg, state)
    vector::push(rets, typechecking::pointer(tpe))
    return rets
}

create_function(
    "allocate",
    [param("tpe", typechecking::type_)],
    [typechecking::pointer(null)],
    *_allocate_type,
    *_allocate_type_proto
)

def allocate_make_array(call_ret: compiler::Value, size: compiler::Value, tpe: *typechecking::Type, state: *compiler::State) -> compiler::Value {
    let bitcast_ret = compiler::make_local_value(typechecking::pointer(tpe), null, state)
    let bitcast = allocate(compiler::Insn)
    (@bitcast).kind = compiler::InsnKind::BITCAST
    (@bitcast).value.convert = {
        ret = bitcast_ret,
        value = call_ret
    } !compiler::InsnConvert

    compiler::push_insn(bitcast, state)

    let index1 = allocate(int, 1)
    index1[0] = 1
    let insert1_ret = compiler::make_local_value(typechecking::array(tpe), null, state)
    let insert1 = allocate(compiler::Insn)
    (@insert1).kind = compiler::InsnKind::INSERTVALUE
    (@insert1).value.insert_value = {
        ret = insert1_ret,
        value = { kind = compiler::ValueKind::LOCAL, undef = true, tpe = typechecking::array(tpe) } !compiler::Value,
        element = bitcast_ret,
        index = index1
    } !compiler::InsnInsertValue

    compiler::push_insn(insert1, state)

    let index2 = allocate(int, 1)
    index2[0] = 0
    let insert2_ret = compiler::make_local_value(typechecking::array(tpe), null, state)
    let insert2 = allocate(compiler::Insn)
    (@insert2).kind = compiler::InsnKind::INSERTVALUE
    (@insert2).value.insert_value = {
        ret = insert2_ret,
        value = insert1_ret,
        element = size,
        index = index2
    } !compiler::InsnInsertValue

    compiler::push_insn(insert2, state)

    return insert2_ret
}

def _allocate_array(node: *parser::Node, argsv: [compiler::Value], state: *compiler::State) -> compiler::Value {
    import_function(state, "malloc")
    let tpe = argsv[0].value_tpe
    let size = argsv[1]

    let sizev = compiler::make_local_value(builtins::size_t_, null, state)
    let mul = allocate(compiler::Insn)
    (@mul).kind = compiler::InsnKind::MUL
    (@mul).value.arith = {
        ret = sizev,
        left = size,
        right = { kind = compiler::ValueKind::INT, i = (@tpe).size, sign = 1, tpe = builtins::size_t_ } !compiler::Value
    } !compiler::InsnArithmetic

    compiler::push_insn(mul, state)

    let args = allocate(compiler::Value, 1)
    args[0] = sizev

    let call_ret = forward_to_function(args, typechecking::pointer(null), "malloc", state)
    return allocate_make_array(call_ret, size, tpe, state)
}

def _allocate_array_proto(args: *vector::Vector, kwargs: *vector::Vector, state: *typechecking::State) -> *vector::Vector {
    let rets = vector::make()
    let arg = get_arg(args, kwargs, 0, "tpe")
    let tpe = typechecking::type_lookup(arg, state)
    vector::push(rets, typechecking::array(tpe))
    return rets
}

create_function(
    "allocate",
    [param("tpe", typechecking::type_), param("size", builtins::size_t_)],
    [typechecking::array(null)],
    *_allocate_array,
    *_allocate_array_proto
)

def _reallocate(node: *parser::Node, argsv: [compiler::Value], state: *compiler::State) -> compiler::Value {
    import_function(state, "realloc")
    return forward_to_function(argsv, argsv[0].tpe, "realloc", state)
}

def _reallocate_proto(args: *vector::Vector, kwargs: *vector::Vector, state: *typechecking::State) -> *vector::Vector {
    let rets = vector::make()
    let arg = get_arg(args, kwargs, 0, "ptr")
    vector::push(rets, (@arg).tpe)
    return rets
}

//TODO Add an array version of this
create_function(
    "reallocate",
    [param("ptr", typechecking::pointer(null)), param("size", builtins::size_t_)],
    [typechecking::pointer(null)],
    *_reallocate,
    *_reallocate_proto
)

def _free_array(node: *parser::Node, argsv: [compiler::Value], state: *compiler::State) -> compiler::Value {
    import_function(state, "free")
    let arg = argsv[0]

    let ret_extract = compiler::make_local_value(typechecking::pointer((@arg.tpe).tpe), null, state)
    let index = allocate(int, 1)
    index[0] = 1
    let extract = allocate(compiler::Insn)
    (@extract).kind = compiler::InsnKind::EXTRACTVALUE
    (@extract).value.extract_value = {
        ret = ret_extract,
        value = arg,
        index = index
    } !compiler::InsnExtractValue

    compiler::push_insn(extract, state)
    
    let args = allocate(compiler::Value, 1)
    args[0] = ret_extract

    return forward_to_function(args, null, "free", state)
}

create_function(
    "free",
    [param("value", typechecking::array(null))],
    [] ![typechecking::Type],
    *_free_array,
    null
)

def _free_pointer(node: *parser::Node, argsv: [compiler::Value], state: *compiler::State) -> compiler::Value {
    import_function(state, "free")
    let arg = argsv[0]

    let args = allocate(compiler::Value, 1)
    args[0] = arg

    return forward_to_function(args, null, "free", state)
}

create_function(
    "free",
    [param("value", typechecking::pointer(null))],
    [] ![typechecking::Type],
    *_free_pointer,
    null
)

def _open(node: *parser::Node, argsv: [compiler::Value], state: *compiler::State) -> compiler::Value {
    import_function(state, "fopen")
    convert_to_charp(argsv, state)
    return forward_to_function(argsv, builtins::File_, "fopen", state)
}

create_function(
    "open",
    [param("file", builtins::string_), param("mode", builtins::string_)],
    [builtins::File_],
    *_open,
    null
)

def _reopen(node: *parser::Node, argsv: [compiler::Value], state: *compiler::State) -> compiler::Value {
    import_function(state, "freopen")
    convert_to_charp(argsv, state)
    return forward_to_function(argsv, builtins::File_, "freopen", state)
}

create_function(
    "open",
    [param("file", builtins::string_), param("mode", builtins::string_), param("fp", builtins::File_)],
    [builtins::File_],
    *_reopen,
    null
)

def _close(node: *parser::Node, argsv: [compiler::Value], state: *compiler::State) -> compiler::Value {
    import_function(state, "fclose")
    return forward_to_function(argsv, builtins::int_, "fclose", state)
}

create_function(
    "close",
    [param("fp", builtins::File_)],
    [builtins::int_],
    *_close,
    null
)

def read_write_array(node: *parser::Node, argsv: [compiler::Value], name: string, state: *compiler::State) -> compiler::Value {
    
    // TODO This is ugly, we should really use argsv here
    // The problem is that the type gets lost in translation
    let arrayn = get_arg((@node).value.func_call.args, (@node).value.func_call.kwargs, 1, "buffer")
    let size = { kind = compiler::ValueKind::INT, i = (@(@(@arrayn).tpe).tpe).size, sign = 1, tpe = builtins::size_t_ } !compiler::Value
    let array = argsv[1]
    
    let len = compiler::make_local_value(builtins::size_t_, null, state)
    let index = allocate(int, 1)
    index[0] = 0
    let extract = allocate(compiler::Insn)
    (@extract).kind = compiler::InsnKind::EXTRACTVALUE
    (@extract).value.extract_value = {
        index = index,
        value = array,
        ret = len
    } !compiler::InsnExtractValue
    compiler::push_insn(extract, state)

    let ptr = compiler::make_local_value(typechecking::pointer(null), null, state)
    let index2 = allocate(int, 1)
    index2[0] = 1
    let extract2 = allocate(compiler::Insn)
    (@extract2).kind = compiler::InsnKind::EXTRACTVALUE
    (@extract2).value.extract_value = {
        index = index2,
        value = array,
        ret = ptr
    } !compiler::InsnExtractValue
    compiler::push_insn(extract2, state)

    let args = allocate(compiler::Value, 4)
    args[0] = ptr
    args[1] = size
    args[2] = len
    args[3] = argsv[0]

    return forward_to_function(args, builtins::size_t_, name, state)
}

def _read_array(node: *parser::Node, argsv: [compiler::Value], state: *compiler::State) -> compiler::Value {
    import_function(state, "fread")
    return read_write_array(node, argsv, "fread", state)
}

create_function(
    "read",
    [param("fp", builtins::File_), param("buffer", typechecking::array(null))],
    [builtins::size_t_],
    *_read_array,
    null
)

def _write_array(node: *parser::Node, argsv: [compiler::Value], state: *compiler::State) -> compiler::Value {
    import_function(state, "fwrite")
    return read_write_array(node, argsv, "fwrite", state)
}

create_function(
    "write",
    [param("fp", builtins::File_), param("buffer", typechecking::array(null))],
    [builtins::size_t_],
    *_write_array,
    null
)

def read_write_pointer(node: *parser::Node, argsv: [compiler::Value], name: string, state: *compiler::State) -> compiler::Value {
    let ptrn = get_arg((@node).value.func_call.args, (@node).value.func_call.kwargs, 1, "ptr")
    let size = { kind = compiler::ValueKind::INT, i = (@(@(@ptrn).tpe).tpe).size, sign = 1, tpe = builtins::size_t_ } !compiler::Value
    let ptr = argsv[1]

    let args = allocate(compiler::Value, 4)
    args[0] = ptr
    args[1] = size
    args[2] = { kind = compiler::ValueKind::INT, i = 1, sign = 1, tpe = builtins::size_t_ } !compiler::Value
    args[3] = argsv[0]

    return forward_to_function(args, builtins::size_t_, name, state)
}

def _read_pointer(node: *parser::Node, argsv: [compiler::Value], state: *compiler::State) -> compiler::Value {
    import_function(state, "fread")
    return read_write_pointer(node, argsv, "fread", state)
}

create_function(
    "read",
    [param("fp", builtins::File_), param("ptr", typechecking::pointer(null))],
    [builtins::size_t_],
    *_read_pointer,
    null
)

def _write_pointer(node: *parser::Node, argsv: [compiler::Value], state: *compiler::State) -> compiler::Value {
    import_function(state, "fwrite")
    return read_write_pointer(node, argsv, "fwrite", state)
}

create_function(
    "write",
    [param("fp", builtins::File_), param("ptr", typechecking::pointer(null))],
    [builtins::size_t_],
    *_write_pointer,
    null
)

def _write_string(node: *parser::Node, argsv: [compiler::Value], state: *compiler::State) -> compiler::Value {
    import_function(state, "fprintf")
    
    let fmt = format_str(vector::tail((@node).value.func_call.args))
    if not fmt { return compiler::NO_VALUE }

    let args = allocate(compiler::Value, argsv.size + 1)
    args[0] = argsv[0]
    args[1] = charp(@fmt, state)

    for var i in 0..(argsv.size - 1) {
        args[i + 2] = print_convert_types(argsv[i + 1], state)
    }

    let ret = compiler::make_local_value(builtins::int_, null, state)
    let proto = allocate(typechecking::NamedParameter, 3)
    proto[0] = @param("", builtins::File_)
    proto[1] = @param("", typechecking::pointer(builtins::char_))
    proto[2] = @varargs("", null)

    let call = allocate(compiler::Insn)
    (@call).kind = compiler::InsnKind::CALL
    (@call).value.call = {
        name = { kind = compiler::ValueKind::GLOBAL, name = "fprintf" } !compiler::Value,
        ret = ret,
        args = args,
        proto = proto
    } !compiler::InsnCall

    compiler::push_insn(call, state)

    return ret
}

create_function(
    "write_string",
    [param("fp", builtins::File_), varargs("", null)],
    [builtins::int_],
    *_write_string,
    null
)

def _read_line(node: *parser::Node, argsv: [compiler::Value], state: *compiler::State) -> compiler::Value {
    import_function(state, "fgets")
    
    let extract_ret = compiler::make_local_value(builtins::size_t_, null, state)
    let index = allocate(int, 1)
    index[0] = 0
    let extract = allocate(compiler::Insn)
    (@extract).kind = compiler::InsnKind::EXTRACTVALUE
    (@extract).value.extract_value = {
        index = index,
        value = argsv[1],
        ret = extract_ret
    } !compiler::InsnExtractValue
    compiler::push_insn(extract, state)

    let len = compiler::make_local_value(builtins::int_, null, state)
    let convert = allocate(compiler::Insn)
    (@convert).kind = compiler::InsnKind::TRUNC
    (@convert).value.convert = {
        ret = len,
        value = extract_ret
    } !compiler::InsnConvert
    compiler::push_insn(convert, state)

    let args = allocate(compiler::Value, 3)
    args[0] = charp_str(argsv[1], state)
    args[1] = len
    args[2] = argsv[0]

    return forward_to_function(args, typechecking::pointer(builtins::char_), "fgets", state)
}

create_function(
    "read_line",
    [param("fp", builtins::File_), param("str", builtins::string_)],
    [typechecking::pointer(builtins::char_)],
    *_read_line,
    null
)

def _scanf(node: *parser::Node, argsv: [compiler::Value], state: *compiler::State) -> compiler::Value {
    import_function(state, "fscanf")
    convert_to_charp(argsv, state)
    
    let ret = compiler::make_local_value(builtins::int_, null, state)
    let proto = allocate(typechecking::NamedParameter, 3)
    proto[0] = @param("", builtins::File_)
    proto[1] = @param("", typechecking::pointer(builtins::char_))
    proto[2] = @varargs("", null)

    let call = allocate(compiler::Insn)
    (@call).kind = compiler::InsnKind::CALL
    (@call).value.call = {
        name = { kind = compiler::ValueKind::GLOBAL, name = "fscanf" } !compiler::Value,
        ret = ret,
        args = argsv,
        proto = proto
    } !compiler::InsnCall

    compiler::push_insn(call, state)

    return ret
}

create_function(
    "scanf",
    [param("fp", builtins::File_), param("fmt", builtins::string_), varargs("", null)],
    [builtins::int_],
    *_scanf,
    null
)

def _rewind(node: *parser::Node, argsv: [compiler::Value], state: *compiler::State) -> compiler::Value {
    import_function(state, "rewind")
    return forward_to_function(argsv, null, "rewind", state)
}

create_function(
    "rewind",
    [param("fp", builtins::File_)],
    [] ![typechecking::Type],
    *_rewind,
    null
)

def _seek(node: *parser::Node, argsv: [compiler::Value], state: *compiler::State) -> compiler::Value {
    import_function(state, "fseek")
    return forward_to_function(argsv, builtins::int_, "fseek", state)
}

create_function(
    "seek",
    [param("fp", builtins::File_), param("offset", builtins::long_), param("whence", builtins::int_)],
    [builtins::int_],
    *_seek,
    null
)