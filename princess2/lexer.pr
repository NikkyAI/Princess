export type TokenType = enum {
    O_PAREN
    C_PAREN
    INTEGER
    FLOAT
    STRING
}

export type Token = struct {
    tpe: TokenType
    value: *
}

export type TokenList = struct {
    value: Token
    next: *TokenList
}

def string_token(s: string) -> Token {
    let v = allocate(string)
    (@v).size = s.size
    (@v).value = allocate((size_of char) * s.size)
    memcopy(s.value, (@v).value, s.size)
    return {
        tpe = TokenType::STRING,
        value = v
    } !Token
}

export def lex(s: string) -> TokenList {
    for var i in 0:length(s):1 {
        print(s[i], "\n")
    }

    let tl = {
        value = string_token(s),
        next = null
    } !TokenList

    return tl
}