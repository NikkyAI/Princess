import vector
import buffer
import map
import util
import compiler
import typechecking

export var outfolder = "."

def type_to_str(tpe: *typechecking::Type) -> string {
    if not tpe { return "void" }
    let buf = buffer::make_buffer()
    switch (@tpe).kind !int {
        case typechecking::TypeKind::WORD:
            buffer::append_char(*buf, 'i')
            buffer::append_str(*buf, util::int_to_str((@tpe).size * 8))
        case typechecking::TypeKind::INT_LITERAL:
            buffer::append_char(*buf, 'i')
            buffer::append_str(*buf, util::int_to_str((size_of int) * 8))
        case typechecking::TypeKind::ARRAY:
            buffer::append_str(*buf, "{i32, [0 x ")
            buffer::append_str(*buf, type_to_str((@tpe).tpe))
            buffer::append_str(*buf, "]}")
        case typechecking::TypeKind::STRUCT..typechecking::TypeKind::UNION:
            buffer::append_str(*buf, "%\"")
            buffer::append_str(*buf, (@tpe).type_name)
            buffer::append_char(*buf, '"')
        case: assert(false)
    }
    return buffer::to_string(*buf)
}

def value_to_str(value: compiler::Value) -> string {
    let buf = buffer::make_buffer()
    switch value.kind !int {
        case compiler::ValueKind::LOCAL:
            buffer::append_char(*buf, '%')
            buffer::append_str(*buf, value.name)
        case compiler::ValueKind::GLOBAL:
            buffer::append_str(*buf, "@\"")
            buffer::append_str(*buf, value.name)
            buffer::append_char(*buf, '"')
        case compiler::ValueKind::INT:
            buffer::append_str(*buf, util::uint_to_str_sign(value.sign, value.i))
        case: assert(false)
    }
    return buffer::to_string(*buf)
}

def emit_arithmetic(fp: *, name: string, insn: *compiler::Insn) {
    write_string(fp, "\t")
    write_string(fp, value_to_str((@insn).value.arith.ret))
    write_string(fp, " = ")
    write_string(fp, name, " ")
    write_string(fp, type_to_str((@insn).value.arith.tpe))
    write_string(fp, " ")
    write_string(fp, value_to_str((@insn).value.arith.left))
    write_string(fp, ", ")
    write_string(fp, value_to_str((@insn).value.arith.right))
}

def emit(fp: *, insn: *compiler::Insn) {
    switch (@insn).kind !int {
        case compiler::InsnKind::ADD:
            emit_arithmetic(fp, "add", insn)
        case: assert(false)
    }
}

def emit_structure(fp: *, structure: *compiler::Structure) {

}

def emit_block(fp: *, block: *compiler::Block) {
    write_string(fp, (@block).label_, ":\n")
    for var i in 0..vector::length((@block).insn) {
        let insn = vector::get((@block).insn, i) !*compiler::Insn
        emit(fp, insn)
    }
}

def emit_function(fp: *, function: *compiler::Function) {
    write_string(fp, "define ", type_to_str((@function).ret), " ")
    write_string(fp, "@\"", (@function).name, "\" (")

    let len = vector::length((@function).args)
    for var i in 0..len {
        let np = vector::get((@function).args, i) !*typechecking::NamedParameter
        let tpe = (@np).value
        let name = (@np).name

        write_string(fp, type_to_str(tpe))
        write_string(fp, " ")
        write_string(fp, "%", name)
        if i < len - 1 {
            write_string(fp, ", ")
        }
    }

    write_string(fp, ") {\n")
    var block = (@function).block
    while block {
        emit_block(fp, block)
        block = (@block).next
    }
    write_string(fp, "\n}")
}

export def gen(result: compiler::Result, filename: string, module: string) -> string {
    let buf = buffer::make_buffer()
    buffer::append_str(*buf, outfolder)
    buffer::append_char(*buf, '/')
    buffer::append_str(*buf, util::replace_all(module, "::", "."))
    buffer::append_str(*buf, ".ll")
    let outfile = buffer::to_string(*buf)

    let fp = open(outfile, "w")
    
    let keys_structures = map::keys(result.structures)
    for var i in 0..keys_structures.size {
        let structure = map::get(result.structures, keys_structures[i]) !*compiler::Structure
        emit_structure(fp, structure)
    }

    let keys_functions = map::keys(result.functions)
    for var i in 0..keys_functions.size {
        let function = map::get(result.functions, keys_functions[i]) !*compiler::Function
        emit_function(fp, function)
    }

    close(fp)

    return outfile
}