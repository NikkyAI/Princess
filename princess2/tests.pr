import buffer
import util
import parser
import vector
import map

import test_lexer
import test_parser
import test_typechecking
import test_compiler

def test_buffer {
    print("Running tests on Buffer...\n")
    var str = "this is a test"
    var buf = buffer::make_buffer()
    buffer::append_str(*buf, str)
    var res = buffer::to_string(*buf)
    assert(res == str)
    buffer::append_char(*buf, 't')
    res = buffer::to_string(*buf)
    assert(res == "this is a testt")
}

def test_vector {
    print("Running tests on Vector...\n")
    var vec = vector::make()
    let i1 = allocate(int); @i1 = 0
    vector::push(vec, i1)
    let i2 = allocate(int); @i2 = 1
    vector::push(vec, i2)
    let i3 = allocate(int); @i3 = 2
    vector::push(vec, i3)

    assert(@(vector::get(vec, 0) !*int) == 0)
    assert(@(vector::get(vec, 1) !*int) == 1)
    assert(@(vector::get(vec, 2) !*int) == 2)

    let i4 = allocate(int); @i4 = 3
    vector::set(vec, 0, i4)

    assert(@(vector::get(vec, 0) !*int) == 3)
}

def test_split_lines {
    print(">Test split_lines... ")

    var str = "this\nis\na\ntest"
    var res = util::split_lines(str)

    assert(res.size == 4)
    assert(res[0] == "this")
    assert(res[1] == "is")
    assert(res[2] == "a")
    assert(res[3] == "test")

    str = "this is a test"
    res = util::split_lines(str)

    assert(res.size == 1)
    assert(res[0] == "this is a test")

    str = "this\r\nis\r\na\r\ntest"
    res = util::split_lines(str)
    
    assert(res.size == 4)
    assert(res[0] == "this")
    assert(res[1] == "is")
    assert(res[2] == "a")
    assert(res[3] == "test")

    print("OK\n")
}

def test_int_to_str {
    print(">Test int_to_str... ")

    assert(util::int_to_str(0) == "0")
    assert(util::int_to_str(-55) == "-55")
    assert(util::int_to_str(125) == "125")
    assert(util::int_to_str(2147483647) == "2147483647")

    print("OK\n")
}

def test_find_substr {
    print(">Test find_substr... ")

    var str = "foo%%bar%%baz"
    assert(util::find_substr(str, "banana", 0) == -1)
    assert(util::find_substr(str, "%%", 0) == 3)
    assert(util::find_substr(str, "%%", 4) == 8)

    print("OK\n")
}

def test_replace_all {
    print(">Test replace_all... ")

    var str = "foo%%bar%%baz"
    assert(util::replace_all(str, "%%", ", ") == "foo, bar, baz")

    str = "%%"
    assert(util::replace_all(str, "%%", "") == "")

    print("OK\n")
}

def test_util {
    print("Running tests on Util...\n")
    test_split_lines()
    test_int_to_str()
    test_find_substr()
    test_replace_all()
}

def allocate_int(a: int) -> *int {
    var i = allocate(int)
    @i = a
    return i
}

def test_map_simple {
    print(">Test map simple... ")

    let m = map::make()
    map::put(m, "foo", allocate_int(20))
    map::put(m, "bar", allocate_int(50))

    assert(map::size(m) == 2)
    var val = map::get(m, "foo") !*int
    assert(@val == 20)
    val = map::get(m, "bar") !*int
    assert(@val == 50)
    
    map::remove(m, "foo")
    assert(map::size(m) == 1)
    assert(map::get(m, "foo") == null)

    print("OK\n")
}

def test_map_collision {
    print(">Test map collision... ")

    let m = map::make()
    map::put(m, "JUvEoj", allocate_int(20))
    map::put(m, "JVVdoj", allocate_int(50))

    assert(map::size(m) == 2)
    var val = map::get(m, "JUvEoj") !*int
    assert(@val == 20)
    val = map::get(m, "JVVdoj") !*int
    assert(@val == 50)

    map::remove(m, "JVVdoj")
    assert(map::size(m) == 1)
    assert(map::get(m, "JVVdoj") == null)

    print("OK\n")
}

def test_map_resize {
    print(">Test map resize... ")

    let m = map::make_size(2)
    map::put(m, "1", allocate_int(1))
    map::put(m, "2", allocate_int(2))
    map::put(m, "3", allocate_int(3))
    map::put(m, "4", allocate_int(4))

    assert(map::size(m) == 4)

    var val = map::get(m, "1") !*int
    assert(@val == 1)
    val = map::get(m, "2") !*int
    assert(@val == 2)
    val = map::get(m, "3") !*int
    assert(@val == 3)
    val = map::get(m, "4") !*int
    assert(@val == 4)


    print("OK\n")
}

def is_in(array: [string], key: string) -> bool {
    for var i in 0..array.size {
        let value = array[i]
        if value == key {
            return true
        }
    }
    return false
}

def test_map_keys {
    print(">Test map keys... ")

    let m = map::make()
    map::put(m, "JUvEoj", allocate_int(20))
    map::put(m, "JVVdoj", allocate_int(50))
    map::put(m, "foo", allocate_int(0))
    map::put(m, "bar", allocate_int(1))

    let keys = map::keys(m)
    assert(keys.size == 4)
    assert(is_in(keys, "JUvEoj"))
    assert(is_in(keys, "JVVdoj"))
    assert(is_in(keys, "foo"))
    assert(is_in(keys, "bar"))

    print("OK\n")
}

def test_map {
    print("Running tests on Map...\n")
    test_map_simple()
    test_map_collision()
    test_map_resize()
    test_map_keys()
}

export def run_test_suite {
    test_buffer()
    test_util()
    test_vector()
    test_map()
    test_lexer::test()
    test_parser::test()
    test_typechecking::test()
    test_compiler::test()
}