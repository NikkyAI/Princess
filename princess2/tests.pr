import lexer
import buffer

def next_char(list: **lexer::TokenList) -> char {
    let value = (@@list).value
    if value.tpe == lexer::TokenType::ERROR {
        print("Error: ", @(value.value !*string), "\n")
        exit(-1)
    }
    @list = (@@list).next
    return @(value.value !*char)
}

def next_string(list: **lexer::TokenList) -> string {
    let value = (@@list).value
    if value.tpe == lexer::TokenType::ERROR {
        print("Error: ", @(value.value !*string), "\n")
        exit(-1)
    }
    @list = (@@list).next
    return @(value.value !*string)
}

def next_error(list: **lexer::TokenList) -> string {
    let value = (@@list).value
    assert(value.tpe == lexer::TokenType::ERROR)
    let s = @(value.value !*string)
    @list = (@@list).next
    return s
}

def test_char_literal {
    print(">Test char literal... ")

    var str = "'A'"
    var result = lexer::lex(str)
    assert(next_char(*result) == 'A')

    str = "'A' 'B'"
    result = lexer::lex(str)
    assert(next_char(*result) == 'A')
    assert(next_char(*result) == 'B')

    str = "'\\a'"
    result = lexer::lex(str)
    assert(next_char(*result) == '\a')

    str = "'\\xFF'"
    result = lexer::lex(str)
    assert(next_char(*result) == '\xFF')

    print("OK\n")
}

def test_char_literal_error {
    print(">Test char literal error... ")

    var str = "'A"
    var result = lexer::lex(str)
    assert(next_error(*result) == "Unexpected end of file while parsing character")

    str = "'\\d'"
    result = lexer::lex(str)
    assert(next_error(*result) == "Invalid escape sequence")

    str = "'\\x"
    result = lexer::lex(str)
    assert(next_error(*result) == "Unexpected end of character")

    //TODO Test more corner cases

    print("OK\n")
}

def test_string_literal {
    print(">Test string literal... ")

    var str = "\"this is a test\""
    var result = lexer::lex(str)
    assert(next_string(*result) == "this is a test")

    str = "\"test\" \"more\""
    result = lexer::lex(str)
    assert(next_string(*result) == "test")
    assert(next_string(*result) == "more")

    str = "\"\\a\\b\\f\\n\\r\\t\\v\\'\\\"\\\\\""
    result = lexer::lex(str)
    assert(next_string(*result) == "\a\b\f\n\r\t\v\'\"\\")

    str = "\"\\xFF\""
    result = lexer::lex(str)
    assert(next_string(*result) == "\xFF")

    str = "\"\\u01FF\""
    result = lexer::lex(str)
    assert(next_string(*result) == "\u01FF")

    str = "\"\\u88AA\""
    result = lexer::lex(str)
    assert(next_string(*result) == "\u88AA")

    str = "\"\\U0010FFFF\""
    result = lexer::lex(str)
    assert(next_string(*result) == "\U0010FFFF")

    str = "\"\n\n\""
    result = lexer::lex(str)
    assert(next_string(*result) == "\n\n")

    print("OK\n")
}

def test_string_literal_error {
    print(">Test string literal error... ")

    var str = "\"this is a test"
    var result = lexer::lex(str)
    assert(next_error(*result) == "Unexpected end of file while parsing string literal")

    str = "\"test \\d \""
    result = lexer::lex(str)
    assert(next_error(*result) == "Invalid escape sequence")

    str = "\"\\UGHRR\""
    result = lexer::lex(str)
    assert(next_error(*result) == "Invalid escape sequence")

    str = "\"\\UFF0000FF\""
    result = lexer::lex(str)
    assert(next_error(*result) == "Invalid unicode sequence")

    print("OK\n")
}

def test_lexer {
    print("Running tests on Lexer...\n")
    test_string_literal()
    test_string_literal_error()
    test_char_literal()
    test_char_literal_error()
}

def test_buffer {
    print("Running tests on Buffer...\n")
    var str = "this is a test"
    var buf = buffer::make_buffer()
    buffer::append_str(*buf, str)
    var res = buffer::to_string(*buf)
    assert(res == str)
    buffer::append_char(*buf, 't')
    res = buffer::to_string(*buf)
    assert(res == "this is a testt")
}

export def run_test_suite {
    test_buffer()
    test_lexer()
}