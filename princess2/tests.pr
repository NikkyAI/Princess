import buffer
import util
import parser
import vector
import map

import test_lexer
import test_parser

def test_buffer {
    print("Running tests on Buffer...\n")
    var str = "this is a test"
    var buf = buffer::make_buffer()
    buffer::append_str(*buf, str)
    var res = buffer::to_string(*buf)
    assert(res == str)
    buffer::append_char(*buf, 't')
    res = buffer::to_string(*buf)
    assert(res == "this is a testt")
}

def test_vector {
    print("Running tests on Vector...\n")
    var vec = vector::make()
    let i1 = allocate(int); @i1 = 0
    vector::push(vec, i1)
    let i2 = allocate(int); @i2 = 1
    vector::push(vec, i2)
    let i3 = allocate(int); @i3 = 2
    vector::push(vec, i3)

    assert(@(vector::get(vec, 0) !*int) == 0)
    assert(@(vector::get(vec, 1) !*int) == 1)
    assert(@(vector::get(vec, 2) !*int) == 2)

    let i4 = allocate(int); @i4 = 3
    vector::set(vec, 0, i4)

    assert(@(vector::get(vec, 0) !*int) == 3)
}

def test_split_lines {
    print(">Test split lines... ")

    var str = "this\nis\na\ntest"
    var res = util::split_lines(str)

    assert(res.size == 4)
    assert(res[0] == "this")
    assert(res[1] == "is")
    assert(res[2] == "a")
    assert(res[3] == "test")

    str = "this is a test"
    res = util::split_lines(str)

    assert(res.size == 1)
    assert(res[0] == "this is a test")

    str = "this\r\nis\r\na\r\ntest"
    res = util::split_lines(str)
    
    assert(res.size == 4)
    assert(res[0] == "this")
    assert(res[1] == "is")
    assert(res[2] == "a")
    assert(res[3] == "test")

    print("OK\n")
}

def test_util {
    print("Running tests on Util...\n")
    test_split_lines()
}

def allocate_int(a: int) -> *int {
    var i = allocate(int)
    @i = a
    return i
}

def test_map_simple {
    print(">Test map simple...")

    let m = map::make()
    map::put(m, "foo", allocate_int(20))
    map::put(m, "bar", allocate_int(50))

    var val = map::get(m, "foo") !*int
    assert(@val == 20)
    val = map::get(m, "bar") !*int
    assert(@val == 50)

    print("OK\n")
}

def test_map {
    print("Running tests on Map...\n")
    test_map_simple()
}

export def run_test_suite {
    test_buffer()
    test_util()
    test_vector()
    test_map()
    test_lexer::test()
    test_parser::test()
}