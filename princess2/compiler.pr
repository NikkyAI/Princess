import parser
import vector
import typechecking

export type Label = struct {
    name: string
}

export type ValueKind = enum {
    LOCAL; GLOBAL;
    INT; FLOAT; STRING
    ARRAY; STRUCT
}

export type Value = struct {
    kind: ValueKind
    name: string
    sign: int
    i: uint64
    f: double
    s: string
    length: size_t
    // This is an array of size length
    // Used for both struct and array
    values: *Value
    tpe: *typechecking::Type
}

export type InsnKind = enum {
    ADD; SUB; MUL; SREM; UREM; SDIV; UDIV
    FADD; FSUB; FMUL; FREM; FDIV
}

export type InsnArithmetic = struct {
    ret: Value
    left: Value
    right: Value
}

export type InsnValue = struct #union {
    arith: InsnArithmetic
}

export type Insn = struct {
    kind: InsnKind
    value: InsnValue
}

// Block for CFG
export type Block = struct {
    label_: string
    // Vector of Insn
    insn: *vector::Vector
    // Vector of Block
    next: *vector::Vector
}

export type Function = struct {
    // Vector of typechecking::Type
    args: *vector::Vector
    ret: *typechecking::Type
    // First node
    block: *Block
}

export type Structure = struct {
    packed: bool
    // Vector of typechecking::Type
    values: *vector::Vector
}

export type Result = struct {
    functions: *vector::Vector
    structures: *vector::Vector
}

export def compile(node: *parser::Node, filename: string) -> Result {
    
}
