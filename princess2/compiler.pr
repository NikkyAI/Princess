import map
import typechecking
import scope
import parser
import lexer
import util
import debug

// Contains the scopes for already compiled modules 
export let modules = map::make()
export var base_path: string

export def compile(node: *parser::Node, filename: string) {
    
}

export def compile_file(filename: string) {
    let fh = open(filename, "rb")
    if not fh {
        error("File \"", filename, "\" doesn't exist\n")
    } else {
        seek(fh, 0, SEEK_END)
        let filesize = tell(fh)
        rewind(fh)
        let buf = allocate(char, filesize + 1)
        read(fh, buf, filesize)
        buf[filesize] = '\0'
        let lines = util::split_lines(buf)

        let tokens = lexer::lex(buf)
        free(buf)
        let node = parser::parse(tokens, lines, filename)
        debug::print_node(node)
        let scope = typechecking::typecheck(node, filename)
        map::put(modules, filename, scope)
        compile(node, filename)
        
        close(fh)
    }
}

export def compile_module(module: string) -> *scope::Scope {
    
}
