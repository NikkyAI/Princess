import map
import vector
import getopt
import tests
import test_parser
import test_compiler
import toolchain

let options = allocate(getopt::Option, 5)
options[0] = {getopt::Type::BOOL, "", "--ast", 0, false} !getopt::Option
options[1] = {getopt::Type::BOOL, "", "--ll", 0, false} !getopt::Option
options[2] = {getopt::Type::BOOL, "", "--test", 0, false} !getopt::Option
options[4] = {getopt::Type::STRING, "-i", "--include", 1, true} !getopt::Option
options[3] = {getopt::Type::STRING, "", "compile", getopt::ARGS_ANY, false} !getopt::Option
let res = getopt::parse(args, options)
if not res { exit(-1) }

let test        = @(map::get(res, "--test") !*bool)
let print_ast   = @(map::get(res, "--ast") !*bool)
let print_ll    = @(map::get(res, "--ll") !*bool)
let filenames   = map::get(res, "compile") !*vector::Vector
let includes    = map::get(res, "--include") !*vector::Vector

if includes {
    toolchain::include_path = allocate(string, vector::length(includes) + 1)
    toolchain::include_path[0] = "."
    for var i in 0..vector::length(includes) {
        let path = @(vector::get(includes, i) !*string)
        toolchain::include_path[i + 1] = path
    }
} else {
    toolchain::include_path = allocate(string, 1)
    toolchain::include_path[0] = "."
}

if test {
    test_parser::print_ast = print_ast
    test_compiler::print_ll = print_ll
    tests::run_test_suite()
} else {
    if filenames and vector::length(filenames) > 0 {
        if vector::length(filenames) > 1 {
            error("More than one file specified")
            return
        }
        toolchain::compile_file(@(vector::peek(filenames) !*string), "main")

        if toolchain::error_count > 0 {
            error("\nTotal errors: ", toolchain::error_count, "\n")
        }      
    } else {
        error("File argument required\n")
    }
}

