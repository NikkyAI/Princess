import parser
import vector
import buffer
import util

// TODO Might want to replace this by turning stuff into a string instead of printing it

def print_indent(indent: int) {
    for var i in 0..indent {
        print(" ")
    }
}

def print_node_(node: *parser::Node, indent: int)

def print_bin_op(str: string, node: *parser::Node, indent: int) {
    print(str)
    print(" {\n")
    print_indent(indent)
    print("left = ")
    print_node_((@node).value.bin_op.left, indent + 1)
    print("\n")
    print_indent(indent)
    print("right = ")
    print_node_((@node).value.bin_op.right, indent + 1)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_un_op(str: string, node: *parser::Node, indent: int) {
    print(str)
    print(" {\n")
    print_indent(indent)
    print("expr = ")
    print_node_((@node).value.expr, indent + 1)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_vector(name: string, vec: *vector::Vector, indent: int) {
    print_indent(indent)
    print(name, " = ")
    if not vec {
        print("(null)")
    } else {
        print("[\n")
        for var i in 0..vector::length(vec) {
            print_indent(indent + 1)
            print_node_(vector::get(vec, i), indent + 2)
            print("\n")
        }
        print_indent(indent)
        print("]")
    }
}

def print_func_call(node: *parser::Node, indent: int) {
    print("FuncCall {\n")
    print_indent(indent)
    print("left = ")
    print_node_((@node).value.func_call.left, indent + 1)
    print("\n")
    print_vector("args", (@node).value.func_call.args, indent)
    print("\n")
    print_vector("kwargs", (@node).value.func_call.kwargs, indent)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_var_decl(node: *parser::Node, indent: int) {
    print("VarDecl {\n")
    print_indent(indent)
    print("share = ")
    print((@node).value.var_decl.share)
    print("\n")
    print_indent(indent)
    print("kw = ")
    print((@node).value.var_decl.kw)
    print("\n")
    print_vector("left", (@node).value.var_decl.left, indent)
    print("\n")
    print_vector("right", (@node).value.var_decl.right, indent)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_id_decl(node: *parser::Node, indent: int) {
    print("IdDecl {\n")
    print_indent(indent)
    print("value = ")
    print_node_((@node).value.id_decl.value, indent + 1)
    print("\n")
    print_indent(indent)
    print("tpe = ")
    print_node_((@node).value.id_decl.tpe, indent + 1)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_id_decl_struct(node: *parser::Node, indent: int) {
    print("IdDeclStruct {\n")
    print_indent(indent)
    print("ident = ")
    print_node_((@node).value.id_decl_struct.ident, indent + 1)
    print("\n")
    print_indent(indent)
    print("tpe = ")
    print_node_((@node).value.id_decl_struct.tpe, indent + 1)
    print("\n")
    print_indent(indent - 1)
    print("}")    
}

def print_id_decl_enum(node: *parser::Node, indent: int) {
    print("IdDeclEnum {\n")
    print_indent(indent)
    print("ident = ")
    print_node_((@node).value.id_decl_enum.ident, indent + 1)
    print("\n")
    print_indent(indent)
    print("value = ")
    print_node_((@node).value.id_decl_enum.value, indent + 1)
    print("\n")
    print_indent(indent - 1)
    print("}")    
}

def print_enum(node: *parser::Node, indent: int) {
    print("Enum {\n")
    print_indent(indent)
    print("tpe = ")
    print_node_((@node).value.t_enum.tpe, indent + 1)
    print("\n")
    print_vector("body", (@node).value.t_enum.body, indent)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_id_assign(node: *parser::Node, indent: int) {
    print("IdAssign {\n")
    print_indent(indent)
    print("value = ")
    print_node_((@node).value.expr, indent + 1)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_named_arg(node: *parser::Node, indent: int) {
    print("NamedArg {\n")
    print_indent(indent)
    print("name = ")
    print_node_((@node).value.named_arg.name, indent + 1)
    print("\n")
    print_indent(indent)
    print("value = ")
    print_node_((@node).value.named_arg.value, indent + 1)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_identifier(node: *parser::Node, indent: int) {
    print("Identifier [\n")
    for var i in 0..vector::length((@node).value.body) {
        print_indent(indent)
        print("\"", @(vector::get((@node).value.body, i) !*string), "\"\n")
    }
    print_indent(indent - 1)
    print("]")
}

def print_function_t(node: *parser::Node, indent: int) {
    print("FunctionT {\n")
    print_vector("args", (@node).value.t_func.args, indent)
    print("\n")
    print_vector("ret", (@node).value.t_func.ret, indent)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_ptrarray(str: string, node: *parser::Node, indent: int) {
    print(str, " {\n")
    print_indent(indent)
    print("kw = ")
    print((@node).value.t_parr.kw)
    print("\n")
    print_indent(indent)
    print("tpe = ")
    print_node_((@node).value.t_parr.tpe, indent + 1)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_array_static(node: *parser::Node, indent: int) {
    print("ArrayStaticT {\n")
    print_indent(indent)
    print("n = ")
    print_node_((@node).value.t_arrs.n, indent + 1)
    print("\n")
    print_indent(indent)
    print("kw = ")
    print((@node).value.t_arrs.kw)
    print("\n")
    print_indent(indent)
    print("tpe = ")
    print_node_((@node).value.t_arrs.tpe, indent + 1)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_assign(node: *parser::Node, indent: int) {
    print("Assign {\n")
    print_vector("left", (@node).value.assign.left, indent)
    print("\n")
    print_vector("right", (@node).value.assign.right, indent)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_unsigned(node: *parser::Node, indent: int) {
    print("Unsigned {\n")
    print_indent(indent)
    print("expr = ")
    print_node_((@node).value.expr, indent + 1)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_switch(node: *parser::Node, indent: int) {
    print("Switch {\n")
    print_indent(indent)
    print("expr = ")
    print_node_((@node).value.switch_.expr, indent + 1)
    print("\n")
    print_vector("body", (@node).value.switch_.body, indent)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_case(node: *parser::Node, indent: int) {
    print("Case {\n")
    print_indent(indent)
    print("expr = ")
    print_node_((@node).value.case_.expr, indent + 1)
    print("\n")
    print_vector("body", (@node).value.case_.body, indent)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_if(node: *parser::Node, indent: int) {
    print("If {\n")
    print_indent(indent)
    print("cond = ")
    print_node_((@node).value.if_.cond, indent + 1)
    print("\n")
    print_vector("body", (@node).value.if_.body, indent)
    print("\n")
    print_vector("else_if", (@node).value.if_.else_if, indent)
    print("\n")
    print_indent(indent)
    print("else_ = ")
    print_node_((@node).value.if_.else_, indent + 1)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_else_if(node: *parser::Node, indent: int) {
    print("ElseIf {\n")
    print_indent(indent)
    print("cond = ")
    print_node_((@node).value.if_.cond, indent + 1)
    print("\n")
    print_vector("body", (@node).value.if_.body, indent + 1)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_else(node: *parser::Node, indent: int) {
    print("Else {\n")
    print_vector("body", (@node).value.body, indent)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_type_decl(node: *parser::Node, indent: int) {
    print("TypeDecl {\n")
    print_indent(indent)
    print("share = ")
    print((@node).value.type_decl.share)
    print("\n")
    print_vector("left", (@node).value.type_decl.left, indent)
    print("\n")
    print_vector("right", (@node).value.type_decl.right, indent)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_loop(node: *parser::Node, indent: int) {
    print("Loop {\n")
    print_vector("body", (@node).value.body, indent)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_for(node: *parser::Node, indent: int) {
    print("For {\n")
    print_indent(indent)
    print("iddecl = ")
    print_node_((@node).value.for_loop.iddecl, indent + 1)
    print("\n")
    print_indent(indent)
    print("expr = ")
    print_node_((@node).value.for_loop.expr, indent + 1)
    print("\n")
    print_vector("body", (@node).value.for_loop.body, indent)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_for_id_decl(node: *parser::Node, indent: int) {
    print("ForIdDecl {\n")
    print_indent(indent)
    print("kw = ")
    print((@node).value.for_id_decl.kw)
    print("\n")
    print_indent(indent)
    print("ident = ")
    print_node_((@node).value.for_id_decl.ident, indent + 1)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_while(node: *parser::Node, indent: int) {
    print("While {\n")
    print_indent(indent)
    print("expr = ")
    print_node_((@node).value.while_loop.expr, indent + 1)
    print("\n")
    print_vector("body", (@node).value.while_loop.body, indent)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_import_module(node: *parser::Node, indent: int) {
    print("ImportModule {\n")
    print_indent(indent)
    print("name = ")
    print_node_((@node).value.import_module.name, indent + 1)
    print("\n")
    print_indent(indent)
    print("alias = ")
    print_node_((@node).value.import_module.alias, indent + 1)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_def(node: *parser::Node, indent: int) {
    print("Def {\n")
    print_indent(indent)
    print("share = ")
    print((@node).value.def_.share)
    print("\n")
    print_indent(indent)
    print("name = ")
    print_node_((@node).value.def_.name, indent + 1)
    print("\n")
    print_vector("params", (@node).value.def_.params, indent)
    print("\n")
    print_vector("returns", (@node).value.def_.returns, indent)
    print("\n")
    print_vector("body", (@node).value.def_.body, indent)
    print("\n")
    print_indent(indent - 1)
    print("}") 
}

def print_parameter(node: *parser::Node, indent: int) {
    print("Parameter {\n")
    print_indent(indent)
    print("kw = ")
    print((@node).value.param.kw)
    print("\n")
    print_indent(indent)
    print("name = ")
    print_node_((@node).value.param.name, indent + 1)
    print("\n")
    print_indent(indent)
    print("tpe = ")
    print_node_((@node).value.param.tpe, indent + 1)
    print("\n")
    print_indent(indent)
    print("value = ")
    print_node_((@node).value.param.value, indent + 1)
    print("\n")
    print_indent(indent - 1)
    print("}") 
}

def print_struct_lit(node: *parser::Node, indent: int) {
    print("StructLit {\n")
    print_vector("args", (@node).value.struct_lit.args, indent)
    print("\n")
    print_vector("kwargs", (@node).value.struct_lit.kwargs, indent)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_node_(node: *parser::Node, indent: int) {
    if not node {
        print("(null)")
        return
    }
    switch (@node).kind !int {
        case parser::NodeKind::PROGRAM:
            print("Program [\n")
            for var i in 0..vector::length((@node).value.body) {
                print_indent(indent)
                print_node_(vector::get((@node).value.body, i), indent + 1)
                print("\n")
            }
            print_indent(indent - 1)
            print("]")
        case parser::NodeKind::INTEGER:
            print("Integer ", (@node).value.i)
        case parser::NodeKind::CHAR:
            print("Char '", (@node).value.i !char, "'")
        case parser::NodeKind::STRING:
            print("String \"", (@node).value.str, "\"")
        case parser::NodeKind::FLOAT:
            print("Float ", (@node).value.f)
        case parser::NodeKind::BOOLEAN:
            print("Boolean ")
            if (@node).value.i {
                print("true")
            } else {
                print("false")
            }
        case parser::NodeKind::IDENTIFIER:
            print_identifier(node, indent)
        case parser::NodeKind::NULL:
            print("Null")
        case parser::NodeKind::RANGE:
            print_bin_op("Range", node, indent)
        case parser::NodeKind::RANGE_INC:
            print_bin_op("RangeInc", node, indent)
        case parser::NodeKind::ARRAY_LIT:
            print("ArrayLit {\n")
            print_vector("body", (@node).value.body, indent)
            print("\n")
            print_indent(indent - 1)
            print("}")
        case parser::NodeKind::STRUCT_LIT:
            print_struct_lit(node, indent)
        case parser::NodeKind::MEMBER_ACCESS:
            print_bin_op("MemberAccess", node, indent)
        case parser::NodeKind::CAST:
            print_bin_op("Cast", node, indent)
        case parser::NodeKind::SIZE_OF:
            print_un_op("SizeOf", node, indent)
        case parser::NodeKind::ADD:
            print_bin_op("Add", node, indent)
        case parser::NodeKind::SUB:
            print_bin_op("Sub", node, indent)
        case parser::NodeKind::MUL:
            print_bin_op("Mul", node, indent)
        case parser::NodeKind::DIV:
            print_bin_op("Div", node, indent)
        case parser::NodeKind::MOD:
            print_bin_op("Mod", node, indent)
        case parser::NodeKind::AND:
            print_bin_op("And", node, indent)
        case parser::NodeKind::OR:
            print_bin_op("Or", node, indent)
        case parser::NodeKind::UADD:
            print_un_op("UAdd", node, indent)
        case parser::NodeKind::USUB:
            print_un_op("USub", node, indent)
        case parser::NodeKind::PTR:
            print_un_op("Ptr", node, indent)
        case parser::NodeKind::DEREF:
            print_un_op("Deref", node, indent)
        case parser::NodeKind::BNOT:
            print_un_op("BNot", node, indent)
        case parser::NodeKind::NOT:
            print_un_op("Not", node, indent)
        case parser::NodeKind::BAND:
            print_bin_op("BAnd", node, indent)
        case parser::NodeKind::BOR:
            print_bin_op("BOr", node, indent)
        case parser::NodeKind::BXOR:
            print_bin_op("BXor", node, indent)
        case parser::NodeKind::SHL:
            print_bin_op("Shl", node, indent)
        case parser::NodeKind::SHR:
            print_bin_op("Shr", node, indent)
        case parser::NodeKind::PADD:
            print_bin_op("PAdd", node, indent)
        case parser::NodeKind::PSUB:
            print_bin_op("PSub", node, indent)
        case parser::NodeKind::EQ:
            print_bin_op("Eq", node, indent)
        case parser::NodeKind::NEQ:
            print_bin_op("NEq", node, indent)
        case parser::NodeKind::GT:
            print_bin_op("Gt", node, indent)
        case parser::NodeKind::LT:
            print_bin_op("Lt", node, indent)
        case parser::NodeKind::GEQ:
            print_bin_op("GEq", node, indent)
        case parser::NodeKind::LEQ:
            print_bin_op("LEq", node, indent)
        case parser::NodeKind::PADD_EQ:
            print_bin_op("PAddEq", node, indent)
        case parser::NodeKind::PSUB_EQ:
            print_bin_op("PSubEq", node, indent)
        case parser::NodeKind::ADD_EQ:
            print_bin_op("AddEq", node, indent)
        case parser::NodeKind::SUB_EQ:
            print_bin_op("SubEq", node, indent)
        case parser::NodeKind::MUL_EQ:
            print_bin_op("MulEq", node, indent)
        case parser::NodeKind::DIV_EQ:
            print_bin_op("DivEq", node, indent)
        case parser::NodeKind::MOD_EQ:
            print_bin_op("ModEq", node, indent)
        case parser::NodeKind::AND_EQ:
            print_bin_op("AndEq", node, indent)
        case parser::NodeKind::OR_EQ:
            print_bin_op("OrEq", node, indent)
        case parser::NodeKind::XOR_EQ:
            print_bin_op("XorEq", node, indent)
        case parser::NodeKind::SHL_EQ:
            print_bin_op("ShlEq", node, indent)
        case parser::NodeKind::SHR_EQ:
            print_bin_op("ShrEq", node, indent)
        case parser::NodeKind::IMPORT:
            print("Import {\n")
            print_vector("body", (@node).value.body, indent)
            print("\n")
            print_indent(indent - 1)
            print("}")
        case parser::NodeKind::IMPORT_MODULE:
            print_import_module(node, indent) 
        case parser::NodeKind::ASSIGN:
            print_assign(node, indent)
        case parser::NodeKind::DEF:
            print_def(node, indent)
        case parser::NodeKind::PARAMETER:
            print_parameter(node, indent)
        case parser::NodeKind::SWITCH:
            print_switch(node, indent)
        case parser::NodeKind::CASE:
            print_case(node, indent)
        case parser::NodeKind::IF:
            print_if(node, indent)
        case parser::NodeKind::ELSE_IF:
            print_else_if(node, indent)
        case parser::NodeKind::ELSE:
            print_else(node, indent)
        case parser::NodeKind::LOOP:
            print_loop(node, indent)
        case parser::NodeKind::WHILE:
            print_while(node, indent)
        case parser::NodeKind::FOR:
            print_for(node, indent)
        case parser::NodeKind::FOR_ID_DECL:
            print_for_id_decl(node, indent)
        case parser::NodeKind::BREAK:
            print("Break")
        case parser::NodeKind::CONTINUE:
            print("Continue")
        case parser::NodeKind::RETURN:
            print("Return {\n")
            print_vector("body", (@node).value.body, indent)
            print("\n")
            print_indent(indent - 1)
            print("}")
        case parser::NodeKind::ARRAY_SUBSCRIPT:
            print_bin_op("ArraySubscript", node, indent)
        case parser::NodeKind::FUNC_CALL:
            print_func_call(node, indent)
        case parser::NodeKind::TYPE_DECL:
            print_type_decl(node, indent)
        case parser::NodeKind::VAR_DECL:
            print_var_decl(node, indent)
        case parser::NodeKind::ID_DECL:
            print_id_decl(node, indent)
        case parser::NodeKind::ID_ASSIGN:
            print_id_assign(node, indent)
        case parser::NodeKind::NAMED_ARG:
            print_named_arg(node, indent)
        case parser::NodeKind::ID_DECL_STRUCT:
            print_id_decl_struct(node, indent)
        case parser::NodeKind::ID_DECL_ENUM:
            print_id_decl_enum(node, indent)
        case parser::NodeKind::ENUM_T:
            print_enum(node, indent)
        case parser::NodeKind::STRUCT_T:
            print("Struct {\n")
            print_vector("body", (@node).value.body, indent)
            print("\n")
            print_indent(indent - 1)
            print("}")
        case parser::NodeKind::UNION_T:
            print("Union {\n")
            print_vector("body", (@node).value.body, indent)
            print("\n")
            print_indent(indent - 1)
            print("}")
        case parser::NodeKind::FUNCTION_T:
            print_function_t(node, indent)
        case parser::NodeKind::UNSIGNED_T:
            print_unsigned(node, indent)
        case parser::NodeKind::PTR_T:
            print_ptrarray("PtrT", node, indent)
        case parser::NodeKind::REF_T:
            print_ptrarray("RefT", node, indent)
        case parser::NodeKind::ARRAY_T:
            print_ptrarray("ArrayT", node, indent)
        case parser::NodeKind::WORD_T:
            print("Word ", (@node).value.i)
        case parser::NodeKind::ARRAY_STATIC_T:
            print_array_static(node, indent)
        case:
            print("Error: Missing node")
    }
}

export def print_node(node: *parser::Node) {
    print_node_(node, 1)
    print("\n")
}

// TODO extract line and column, possibly by depending on a regex library...
export type Error = struct {
    where: string
    src: string
    msg: string
}

let file = "bin/stderr.txt"
var fh: *

export def redirect_stderr {
    fh = reopen(file, "w", stderr)
}

export def catch_errors -> *vector::Vector {
    close(fh)
    if WIN32 {
        reopen("CON", "w", stderr)
    } else {
        reopen("/dev/tty", "w", stderr)
    }
    
    let errors = vector::make()

    let fh2 = open(file, "rb")
    if not fh2 { return errors }

    seek(fh2, 0, SEEK_END)
    let filesize = tell(fh2)
    rewind(fh2)
    let buf = allocate(char, filesize + 1)
    read(fh2, buf, filesize)
    buf[filesize] = '\0'
    let lines = util::split_lines(buf)
    free(buf)

    var i = 0
    while i < lines.size {
        var line = lines[i]
        if length(line) == 0 {
            i += 1
            continue
        }

        let where   = lines[i]; i += 1
        let src     = lines[i]; i += 1
        let caret   = lines[i]; i += 1
        let msg     = lines[i]; i += 1

        let err = allocate(Error)
        (@err).where = where
        (@err).src = src
        (@err).msg = msg
        
        vector::push(errors, err)
    }

    close(fh2)
    return errors
}

type typechecking::Type
export def type_to_str(tpe: *typechecking::Type) -> string

import typechecking

def function_t_to_string(tpe: *typechecking::Type) -> string {
    let buf = buffer::make_buffer()

    buffer::append_char(*buf, '(')
    var len = vector::length((@tpe).parameter_t)
    for var i in 0..len {
        let param = vector::get((@tpe).parameter_t, i) !*typechecking::NamedParameter
        buffer::append_str(*buf, type_to_str((@param).value))
        if i < len - 1 {
            buffer::append_str(*buf, " ,")
        }
    }

    buffer::append_str(*buf, ") -> (")
    len = vector::length((@tpe).return_t)
    for var i in 0..len {
        let ret = vector::get((@tpe).return_t, i) !*typechecking::Type
        buffer::append_str(*buf, type_to_str(ret))
        if i < len - 1 {
            buffer::append_str(*buf, ", ")
        }
    }
    buffer::append_char(*buf, ')')

    return buffer::to_string(*buf)
}

def pointer_t_to_string(tpe: *typechecking::Type) -> string {
    let buf = buffer::make_buffer()
    buffer::append_char(*buf, '*')
    if (@tpe).tpe { 
        buffer::append_str(*buf, type_to_str((@tpe).tpe)) 
    }
    return buffer::to_string(*buf)
}

def reference_t_to_string(tpe: *typechecking::Type) -> string {
    let buf = buffer::make_buffer()
    buffer::append_char(*buf, '&')
    if (@tpe).tpe { 
        buffer::append_str(*buf, type_to_str((@tpe).tpe))
    }
    return buffer::to_string(*buf)
}

def array_t_to_string(tpe: *typechecking::Type) -> string {
    let buf = buffer::make_buffer()
    buffer::append_char(*buf, '[')
    buffer::append_str(*buf, type_to_str((@tpe).tpe))
    buffer::append_char(*buf, ']')
    return buffer::to_string(*buf)
}

def static_array_t_to_string(tpe: *typechecking::Type) -> string {
    let buf = buffer::make_buffer()
    buffer::append_char(*buf, '[')
    buffer::append_str(*buf, util::int_to_str((@tpe).length !int))
    buffer::append_str(*buf, "; ")
    buffer::append_str(*buf, type_to_str((@tpe).tpe))
    buffer::append_char(*buf, ']')
    return buffer::to_string(*buf)
}

def int_literal_t_to_string(tpe: *typechecking::Type) -> string {
    let buf = buffer::make_buffer()
    buffer::append_str(*buf, "int_literal(")
    if (@tpe).sign == -1 {
        buffer::append_char(*buf, '-')
    }
    // TODO This fails for really big numbers
    buffer::append_str(*buf, util::int_to_str((@tpe).i !int64))
    buffer::append_char(*buf, ')')
    return buffer::to_string(*buf)
}

export def type_to_str(tpe: *typechecking::Type) -> string {
    if not tpe { return "(null)" }
    switch (@tpe).kind !int {
        case typechecking::TypeKind::TYPE..typechecking::TypeKind::ENUM:
            return (@tpe).name
        case typechecking::TypeKind::FUNCTION:
            return function_t_to_string(tpe)
        case typechecking::TypeKind::POINTER:
            return pointer_t_to_string(tpe)
        case typechecking::TypeKind::REFERENCE:
            return reference_t_to_string(tpe)
        case typechecking::TypeKind::ARRAY:
            return array_t_to_string(tpe)
        case typechecking::TypeKind::STATIC_ARRAY:
            return static_array_t_to_string(tpe)
        case typechecking::TypeKind::INT_LITERAL:
            return int_literal_t_to_string(tpe)
        case:
            assert(false)
    }
}