import parser
import vector

def print_indent(indent: int) {
    for var i in 0..indent {
        print(" ")
    }
}

def print_node_(node: *parser::Node, indent: int)

def print_bin_op(str: string, node: *parser::Node, indent: int) {
    print(str)
    print(" {\n")
    print_indent(indent)
    print("left = ")
    print_node_((@node).value.bin_op.left, indent + 1)
    print("\n")
    print_indent(indent)
    print("right = ")
    print_node_((@node).value.bin_op.right, indent + 1)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_un_op(str: string, node: *parser::Node, indent: int) {
    print(str)
    print(" {\n")
    print_indent(indent)
    print("expr = ")
    print_node_((@node).value.expr, indent + 1)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_vector(name: string, vec: *vector::Vector, indent: int) {
    print_indent(indent)
    print(name)
    print(" = [\n")
    for var i in 0..vector::length(vec) {
        print_indent(indent + 1)
        print_node_(vector::get(vec, i), indent + 2)
        print("\n")
    }
    print_indent(indent)
    print("]")
}

def print_func_call(node: *parser::Node, indent: int) {
    print("FuncCall {\n")
    print_indent(indent)
    print("left = ")
    print_node_((@node).value.func_call.left, indent + 1)
    print("\n")
    print_vector("args", (@node).value.func_call.args, indent)
    print("\n")
    print_vector("kwargs", (@node).value.func_call.kwargs, indent)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_var_decl(node: *parser::Node, indent: int) {
    print("VarDecl {\n")
    print_indent(indent)
    print("share = ")
    print((@node).value.var_decl.share)
    print("\n")
    print_indent(indent)
    print("kw = ")
    print((@node).value.var_decl.kw)
    print("\n")
    print_vector("left", (@node).value.var_decl.left, indent)
    print("\n")
    print_vector("right", (@node).value.var_decl.right, indent)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_id_decl(node: *parser::Node, indent: int) {
    print("IdDecl {\n")
    print_indent(indent)
    print("value = ")
    print_node_((@node).value.id_decl.value, indent + 1)
    print("\n")
    print_indent(indent)
    print("tpe = ")
    print_node_((@node).value.id_decl.tpe, indent + 1)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_id_assign(node: *parser::Node, indent: int) {
    print("IdAssign {\n")
    print_indent(indent)
    print("value = ")
    print_node_((@node).value.expr, indent + 1)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_named_arg(node: *parser::Node, indent: int) {
    print("NamedArg {\n")
    print_indent(indent)
    print("name = \"")
    print((@node).value.named_arg.name)
    print("\"\n")
    print_indent(indent)
    print("value = ")
    print_node_((@node).value.named_arg.value, indent + 1)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_identifier(node: *parser::Node, indent: int) {
    print("Identifier [\n")
    for var i in 0..vector::length((@node).value.body) {
        print_indent(indent)
        print("\"", @(vector::get((@node).value.body, i) !*string), "\"\n")
    }
    print_indent(indent - 1)
    print("]")
}

def print_function_t(node: *parser::Node, indent: int) {
    print("FunctionT {\n")
    print_vector("args", (@node).value.t_func.args, indent)
    print("\n")
    print_vector("ret", (@node).value.t_func.ret, indent)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_ptrarray(str: string, node: *parser::Node, indent: int) {
    print(str, " {\n")
    print_indent(indent)
    print("kw = ")
    print((@node).value.t_parr.kw)
    print("\n")
    print_indent(indent)
    print("tpe = ")
    print_node_((@node).value.t_parr.tpe, indent + 1)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_array_static(node: *parser::Node, indent: int) {
    print("ArrayStaticT {\n")
    print_indent(indent)
    print("n = ")
    print_node_((@node).value.t_arrs.n, indent + 1)
    print("\n")
    print_indent(indent)
    print("kw = ")
    print((@node).value.t_arrs.kw)
    print("\n")
    print_indent(indent)
    print("tpe = ")
    print_node_((@node).value.t_arrs.tpe, indent + 1)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_assign(node: *parser::Node, indent: int) {
    print("Assign {\n")
    print_vector("left", (@node).value.assign.left, indent)
    print("\n")
    print_vector("right", (@node).value.assign.right, indent)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_unsigned(node: *parser::Node, indent: int) {
    print("Unsigned {\n")
    print_indent(indent)
    print("expr = ")
    print_node_((@node).value.expr, indent + 1)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_if(node: *parser::Node, indent: int) {
    print("If {\n")
    print_indent(indent)
    print("cond = ")
    print_node_((@node).value.if_.cond, indent + 1)
    print("\n")
    print_vector("body", (@node).value.if_.body, indent)
    print("\n")
    print_vector("else_if", (@node).value.if_.else_if, indent)
    print("\n")
    print_indent(indent)
    print("else_ = ")
    print_node_((@node).value.if_.else_, indent + 1)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_else_if(node: *parser::Node, indent: int) {
    print("ElseIf {\n")
    print_indent(indent)
    print("cond = ")
    print_node_((@node).value.if_.cond, indent + 1)
    print("\n")
    print_vector("body", (@node).value.if_.body, indent + 1)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_else(node: *parser::Node, indent: int) {
    print("Else {\n")
    print_vector("body", (@node).value.body, indent)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_type_decl(node: *parser::Node, indent: int) {
    print("TypeDecl {\n")
    print_indent(indent)
    print("share = ")
    print((@node).value.type_decl.share)
    print("\n")
    print_vector("left", (@node).value.type_decl.left, indent)
    print("\n")
    print_vector("right", (@node).value.type_decl.right, indent)
    print("\n")
    print_indent(indent - 1)
    print("}")
}

def print_node_(node: *parser::Node, indent: int) {
    if not node {
        print("(null)")
        return
    }
    switch((@node).kind !int) {
        case parser::NodeKind::PROGRAM:
            print("Program [\n")
            for var i in 0..vector::length((@node).value.body) {
                print_indent(indent)
                print_node_(vector::get((@node).value.body, i), indent + 1)
                print("\n")
            }
            print_indent(indent - 1)
            print("]")
        case parser::NodeKind::INTEGER:
            print("Integer ", (@node).value.i)
        case parser::NodeKind::CHAR:
            print("Char '", (@node).value.i !char, "'")
        case parser::NodeKind::STRING:
            print("String \"", (@node).value.str, "\"")
        case parser::NodeKind::FLOAT:
            print("Float ", (@node).value.f)
        case parser::NodeKind::BOOLEAN:
            print("Boolean ")
            if (@node).value.i {
                print("true")
            } else {
                print("false")
            }
        case parser::NodeKind::IDENTIFIER:
            print_identifier(node, indent)
        case parser::NodeKind::NULL:
            print("Null")
        case parser::NodeKind::CAST:
            print_bin_op("Cast", node, indent)
        case parser::NodeKind::ADD:
            print_bin_op("Add", node, indent)
        case parser::NodeKind::SUB:
            print_bin_op("Sub", node, indent)
        case parser::NodeKind::MUL:
            print_bin_op("Mul", node, indent)
        case parser::NodeKind::DIV:
            print_bin_op("Div", node, indent)
        case parser::NodeKind::MOD:
            print_bin_op("Mod", node, indent)
        case parser::NodeKind::AND:
            print_bin_op("And", node, indent)
        case parser::NodeKind::OR:
            print_bin_op("Or", node, indent)
        case parser::NodeKind::UADD:
            print_un_op("UAdd", node, indent)
        case parser::NodeKind::USUB:
            print_un_op("USub", node, indent)
        case parser::NodeKind::PTR:
            print_un_op("Ptr", node, indent)
        case parser::NodeKind::DEREF:
            print_un_op("Deref", node, indent)
        case parser::NodeKind::BNOT:
            print_un_op("BNot", node, indent)
        case parser::NodeKind::NOT:
            print_un_op("Not", node, indent)
        case parser::NodeKind::BAND:
            print_bin_op("BAnd", node, indent)
        case parser::NodeKind::BOR:
            print_bin_op("BOr", node, indent)
        case parser::NodeKind::BXOR:
            print_bin_op("BXor", node, indent)
        case parser::NodeKind::SHL:
            print_bin_op("Shl", node, indent)
        case parser::NodeKind::SHR:
            print_bin_op("Shr", node, indent)
        case parser::NodeKind::PADD:
            print_bin_op("PAdd", node, indent)
        case parser::NodeKind::PSUB:
            print_bin_op("PSub", node, indent)
        case parser::NodeKind::EQ:
            print_bin_op("Eq", node, indent)
        case parser::NodeKind::NEQ:
            print_bin_op("NEq", node, indent)
        case parser::NodeKind::GT:
            print_bin_op("Gt", node, indent)
        case parser::NodeKind::LT:
            print_bin_op("Lt", node, indent)
        case parser::NodeKind::GEQ:
            print_bin_op("GEq", node, indent)
        case parser::NodeKind::LEQ:
            print_bin_op("LEq", node, indent)
        case parser::NodeKind::PADD_EQ:
            print_bin_op("PAddEq", node, indent)
        case parser::NodeKind::PSUB_EQ:
            print_bin_op("PSubEq", node, indent)
        case parser::NodeKind::ADD_EQ:
            print_bin_op("AddEq", node, indent)
        case parser::NodeKind::SUB_EQ:
            print_bin_op("SubEq", node, indent)
        case parser::NodeKind::MUL_EQ:
            print_bin_op("MulEq", node, indent)
        case parser::NodeKind::DIV_EQ:
            print_bin_op("DivEq", node, indent)
        case parser::NodeKind::MOD_EQ:
            print_bin_op("ModEq", node, indent)
        case parser::NodeKind::AND_EQ:
            print_bin_op("AndEq", node, indent)
        case parser::NodeKind::OR_EQ:
            print_bin_op("OrEq", node, indent)
        case parser::NodeKind::XOR_EQ:
            print_bin_op("XorEq", node, indent)
        case parser::NodeKind::SHL_EQ:
            print_bin_op("ShlEq", node, indent)
        case parser::NodeKind::SHR_EQ:
            print_bin_op("ShrEq", node, indent)
        case parser::NodeKind::ASSIGN:
            print_assign(node, indent)
        case parser::NodeKind::IF:
            print_if(node, indent)
        case parser::NodeKind::ELSE_IF:
            print_else_if(node, indent)
        case parser::NodeKind::ELSE:
            print_else(node, indent)
        case parser::NodeKind::ARRAY_SUBSCRIPT:
            print_bin_op("ArraySubscript", node, indent)
        case parser::NodeKind::FUNC_CALL:
            print_func_call(node, indent)
        case parser::NodeKind::TYPE_DECL:
            print_type_decl(node, indent)
        case parser::NodeKind::VAR_DECL:
            print_var_decl(node, indent)
        case parser::NodeKind::ID_DECL:
            print_id_decl(node, indent)
        case parser::NodeKind::ID_ASSIGN:
            print_id_assign(node, indent)
        case parser::NodeKind::NAMED_ARG:
            print_named_arg(node, indent)
        case parser::NodeKind::FUNCTION_T:
            print_function_t(node, indent)
        case parser::NodeKind::UNSIGNED_T:
            print_unsigned(node, indent)
        case parser::NodeKind::PTR_T:
            print_ptrarray("PtrT", node, indent)
        case parser::NodeKind::REF_T:
            print_ptrarray("RefT", node, indent)
        case parser::NodeKind::ARRAY_T:
            print_ptrarray("ArrayT", node, indent)
        case parser::NodeKind::WORD_T:
            print("Word ", (@node).value.i)
        case parser::NodeKind::ARRAY_STATIC_T:
            print_array_static(node, indent)
        case:
            print("Error: Missing node")
    }
}

export def print_node(node: *parser::Node) {
    print_node_(node, 1)
    print("\n")
}