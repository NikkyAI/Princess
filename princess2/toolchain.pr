// This file handles all global state related to compiling

import vector
import util
import buffer
import map
import util
import lexer
import typechecking
import scope
import compiler
import debug
import parser
import builtins

// Contains the scopes for already compiled modules 
export let modules = map::make()
export var include_path: [string]

def find_module_file(module: *parser::Node) -> string {
    assert((@module).kind == parser::NodeKind::IDENTIFIER)
    let ident = (@module).value.body
    let path = zero_allocate(char, PATH_MAX)

    let len = vector::length(ident)
    for var i in 0..len {
        var str = @(vector::get(ident, i) !*string)
        concat(path, str)
        if i < len - 1 {
            concat(path, "/")
        }
    }
    for var i in 0..include_path.size {
        let module_path = zero_allocate(char, PATH_MAX)
        concat(module_path, include_path[i])
        concat(module_path, "/", path, ".pr")
        module_path.size = strlen(module_path) + 1
        
        if util::exists(module_path) {
            return module_path
        }
    }
    return ""
}

export def compile_file(filename: string, module: string) {
    let fh = open(filename, "rb")
    if not fh {
        error("File \"", filename, "\" doesn't exist\n")
    } else {
        seek(fh, 0, SEEK_END)
        let filesize = tell(fh)
        rewind(fh)
        let buf = allocate(char, filesize + 1)
        read(fh, buf, filesize)
        buf[filesize] = '\0'
        close(fh)
        let lines = util::split_lines(buf)

        let tokens = lexer::lex(buf)
        free(buf)
        let node = parser::parse(tokens, lines, filename, module)
        //debug::print_node(node)
        let sc = scope::enter_scope(builtins::builtins)
        map::put(modules, filename, sc)
        typechecking::typecheck(node, sc, filename, module)       
        compiler::compile(node, filename, module)
    }
}

// module is an identifier
export def compile_module(module: *parser::Node) -> *scope::Scope {
    let filename = find_module_file(module)
    let modulename = parser::identifier_to_str(module)
    if length(filename) == 0 {
        return null
    }
    var sc = map::get(modules, filename) !*scope::Scope
    if not sc {
        compile_file(filename, modulename)
        sc = map::get(modules, filename)
    }
    return sc
}