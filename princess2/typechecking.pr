import map
import vector
import parser

export type TypeKind = enum {
    WORD
    FLOAT
    BOOL
    STRUCT
    UNION
    ENUM
    FUNCTION
    POINTER
    ARRAY
}

export type Type = struct {
    kind: TypeKind
    // Size in bytes
    size: size_t
    align: size_t
    unsig: bool
    // array
    length: size_t
    // Type both used for array/pointer and enum
    tpe: *Type
    // Fields for both struct and enum
    fields: *map::Map
    // Function
    return_t: *vector::Vector
    parameter_t: *vector::Vector
}

def errorn(node: *parser::Node, msg: string) {
    let line = (@node).loc.line
    let column = (@node).loc.column

    error("\n")
    error(line + 1, ":", column + 1, "\n")
    error((@node).loc.lines[line], "\n")
    for var i in 0..column {
        error(" ")
    }
    error("^\n")
    error(msg)
}

import scope