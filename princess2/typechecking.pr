import parser
import map
import vector

export type TypeKind = enum {
    WORD
    FLOAT
    BOOL
    STRUCT
    UNION
    ENUM
    FUNCTION
    POINTER
    ARRAY
}

export type Type

export type Type = struct {
    kind: TypeKind
    // Size in bytes
    size: size_t
    align: size_t
    unsig: bool
    // array
    length: size_t
    // Type both used for array/pointer and enum
    tpe: *Type
    // Fields for both struct and enum
    fields: *map::Map
    // Function
    return_t: *vector::Vector
    parameter_t: *vector::Vector
}