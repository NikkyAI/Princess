def test_loop {
    print(">Testing loops... \n")

    var cnt = 0
    while cnt < 10 {
        print(cnt)
        cnt += 1
    }
    print("\n")

    for var i in 0..10 {
        print(i)
    }
    print("\n")
    print("OK\n")
}

def test_print {
    let a = 20
    print(">Testing print... \n")
    print("Hello World ", 1, " ", 'x', " ", 10.5, " ", *a, "\n")
    error("Hello World ", 1, " ", 'x', " ", 10.5, " ", *a, "\n")

    print("OK\n")
}

def pass_dynamic_array(a: string) {
    print(a)
}

def function(a: int, b: double) -> double { return a * b }
def function(b: double, a: int) -> double { return a * b }

def test_function_calls {
    print(">Testing function calls... \n")

    pass_dynamic_array("Some string\n")
    pass_dynamic_array(a = "Named parameter\n")

    function(2, 1.5)
    function(1.5, 2)
    function(2, b = 1.5)
    function(1.5, a = 2)
    // function(a = 1, b = 1.5) # Ambiguous reference

    print("OK\n")
}

def test_length {
    print(">Testing length... ")
    let a = "Some string"
    assert(length(a) == 11)
    print("OK\n")
}

def test_allocate {
    print(">Testing allocate... ")
    let a = allocate(size_of int) !*int
    @a = 10
    assert(@a == 10)
    free(a)

    let b = allocate(int)
    @b = 20
    assert(@b == 20)
    free(b)

    let c = allocate(int, 10)
    c[0] = 10
    c[9] = 20
    assert(c[0] == 10)
    assert(c[9] == 20)
    free(c)

    print("OK\n")
}

def test_file {
    print(">Testing file functions... ")
    let fp = open("bin/test_file_io_text", "w+")
    close(fp)
    print("OK\n")
}

def test_operators {
    print(">Testing operators... ")

    let g = true and false
    let h = true and true
    let i = false and true
    assert(not g)
    assert(h)
    assert(not i)
    print("OK\n")
}

print(">Testing imports... ")

import test::a as A
import test::b

assert(A::multiply_by_2(10) == 20)
let a, b = return_multiple()
assert(a == 10)
assert(b == 20)

print("OK\n")

test_loop()
test_print()
test_function_calls()
test_length()
test_allocate()
test_file()
test_operators()