def test_loop {
    print(">Testing loops... \n")

    var cnt = 0
    while cnt < 10 {
        print(cnt)
        cnt += 1
    }
    print("\n")

    for var i in 0..10 {
        print(i)
    }
    print("\n")
    print("OK\n")
}

def test_print {
    let a = 20
    print(">Testing print... \n")
    print("Hello World ", 1, " ", 'x', " ", 10.5, " ", *a, "\n")
    error("Hello World ", 1, " ", 'x', " ", 10.5, " ", *a, "\n")

    print("OK\n")
}

def pass_dynamic_array(a: string) {
    print(a)
}

def function(a: int, b: double) -> double { return a * b }
def function(b: double, a: int) -> double { return a * b }

def test_function_calls {
    print(">Testing function calls... \n")

    pass_dynamic_array("Some string\n")
    pass_dynamic_array(a = "Named parameter\n")

    function(2, 1.5)
    function(1.5, 2)
    function(2, b = 1.5)
    function(1.5, a = 2)
    // function(a = 1, b = 1.5) # Ambiguous reference

    print("OK\n")
}

def test_length {
    print(">Testing length... ")
    let a = "Some string"
    assert(length(a) == 11)
    print("OK\n")
}

def test_allocate {
    print(">Testing allocate... ")
    let a = allocate(size_of int) !*int
    @a = 10
    assert(@a == 10)
    free(a)

    let b = allocate(int)
    @b = 20
    assert(@b == 20)
    free(b)

    let c = allocate(int, 10)
    c[0] = 10
    c[9] = 20
    assert(c[0] == 10)
    assert(c[9] == 20)
    free(c)

    print("OK\n")
}

def test_file_binary {
    print(">Testing binary file functions... \n")
    let fp = open("bin/test_file_io_binary", "wb+")
    
    let str = "Some text"
    write(fp, str)
    let i = 10
    write(fp, *i)

    rewind(fp)

    var str2: [10; char]
    read(fp, str2)
    print(str2, "\n")

    var i2: int
    read(fp, *i2)
    print(i2, "\n")

    close(fp)
    print("OK\n")
}

def test_file_text {
    print(">Testing textual file functions... \n")
    let fp = open("bin/test_file_io_text", "w+")

    write_string(fp, "This is a test\n", 10)

    seek(fp, 0, SEEK_SET) // Same as rewind

    var buffer: [20; char]
    read_line(fp, buffer)
    print(buffer)
    var num: int
    scanf(fp, "%d", *num)
    print(num, "\n")

    close(fp)
    print("OK\n")
}

def test_operators {
    print(">Testing operators... ")

    let g = true and false
    let h = true and true
    let i = false and true
    assert(not g)
    assert(h)
    assert(not i)
    print("OK\n")
}

type Enum = enum {
    A = 10;
    B; C; D
}

def pass_enum(a: Enum) {}

def test_enum {
    print(">Testing enum... ")
    assert(Enum::A == 10)
    assert(Enum::B == 11)
    pass_enum(Enum::A)
    let a = Enum::A !int
    let b = 10 !Enum
    pass_enum(b)
    print("OK\n")
}

def some_function {
    print("Hello\n")
}

def test_function_pointers {
    print(">Testing function pointers... \n")
    let function = *some_function
    function()
    print("OK\n")
}

type Struct = struct {
    a: string
    b: int
    c: char
}

def test_structs {
    print(">Testing structs...")
    let s = {
        c = 10
    } !Struct
    print("OK\n")
}

type Union = struct #union {
    a: string
    b: int
    c: char
}

def test_unions {
    print(">Testing unions...\n")
    let u = {
        "some string"
    } !Union

    let u2 = {
        b = 20
    } !Union
    u2.b = 120
    print(u2.c, "\n")

    let u3 = {} !Union
    print("OK\n")
}

def test_strings {
    print(">Testing strings... ")

    let stra = "Some value"
    assert(stra == "Some value")
    assert(stra != "Other value")

    print("OK\n")
}

print(">Testing imports... ")

import test::a as A
import test::b

assert(A::multiply_by_2(10) == 20)
let a, b = return_multiple()
assert(a == 10)
assert(b == 20)

let c = {10, 10} !A::Point
let d = test::b::some_value

print("OK\n")

test_loop()
test_print()
test_function_calls()
test_length()
test_allocate()
test_file_binary()
test_file_text()
test_operators()
test_enum()
test_function_pointers()
test_structs()
test_unions()
test_strings()