import vector
import util
import lexer
import parser
import typechecking
import scope
import builtins

type Result = struct {
    scope: *scope::Scope
    node: *parser::Node
}

def typecheck(s: string) -> Result {
    let tokens = lexer::lex(s)
    let lines = util::split_lines(s)
    let node = parser::parse(tokens, lines, "main")
    let scope = typechecking::typecheck(node, "main")
    
    return { scope, node } !Result
}

def make_identifier(s: [string]) -> *parser::Node {
    let node = allocate(parser::Node)
    let vec = vector::make()
    for var i in 0..s.size {
        vector::push(vec, util::copy_string(s[i]))
    }
    (@node).kind = parser::NodeKind::IDENTIFIER
    (@node).value.body = vec
    return node
}

def test_vardecl {
    print(">Test VarDecl... ")

    var str = "
        var foo: byte = 5
    "
    var res = typecheck(str)
    let v1 = (@scope::get(res.scope, make_identifier(["foo"]))).tpe
    assert(v1 == builtins::byte_)

    str = "
        var bar: long
        let foo, (bar) = 0, 1
    "
    res = typecheck(str)
    let v2 = (@scope::get(res.scope, make_identifier(["bar"]))).tpe
    let v3 = (@scope::get(res.scope, make_identifier(["foo"]))).tpe
    assert(v2 == builtins::long_)
    assert(v3 == builtins::int_)
    
    print("OK\n")
}

def test_literals {
    print(">Test literals...")

    var str = "
        let v1 = \"string\"
        let v2 = 'c'
        let v3 = 0.0
        let v4 = 0xFF
        let v5 = false
    "

    var res = typecheck(str)
    let v1 = (@scope::get(res.scope, make_identifier(["v1"]))).tpe
    let v2 = (@scope::get(res.scope, make_identifier(["v2"]))).tpe 
    let v3 = (@scope::get(res.scope, make_identifier(["v3"]))).tpe 
    let v4 = (@scope::get(res.scope, make_identifier(["v4"]))).tpe
    let v5 = (@scope::get(res.scope, make_identifier(["v5"]))).tpe

    assert((@v1).kind == typechecking::TypeKind::STATIC_ARRAY)
    assert((@v1).tpe == builtins::char_)
    assert(v2 == builtins::char_)
    assert(v3 == builtins::double_)
    assert(v4 == builtins::int_)
    assert(v5 == builtins::bool_)

    print("OK\n")
}

def test_assign {
    print(">Test assignment... ")
    
    var str = "
        var foo = 5
        var bar = 10

        foo, bar = 10, 20
    "
    typecheck(str)

    print("OK\n")
}

def test_operators {
    print(">Test operators... ")

    var str = "
        let foo = 0
        let bar = -foo
        let baz = +50
    "

    // TODO This doesnt really test anything, we need to inspect the nodes
    var res = typecheck(str)
    let v1 = (@scope::get(res.scope, make_identifier(["foo"]))).tpe
    let v2 = (@scope::get(res.scope, make_identifier(["baz"]))).tpe
    assert(v1 == builtins::int_)
    assert(v2 == builtins::int_)

    print("OK\n")
}

export def test {
    print("Running tests on Typechecking...\n")
    test_vardecl()
    test_literals()
    test_operators()
    test_assign()
}