import vector
import util
import lexer
import parser
import typechecking
import scope

def typecheck(s: string) -> *scope::Scope {
    let tokens = lexer::lex(s)
    let lines = util::split_lines(s)
    let node = parser::parse(tokens, lines, "main")
    let scope = typechecking::typecheck(node, "main")
    
    return scope
}

def make_identifier(s: string) -> *parser::Node {
    let node = allocate(parser::Node)
    let vec = vector::make()
    vector::push(vec, util::copy_string(s))
    (@node).kind = parser::NodeKind::IDENTIFIER
    (@node).value.body = vec
    return node
}

def test_vardecl {
    print(">Test VarDecl... ")

    var str = "
        var foo: int = 5
    "
    var sc = typecheck(str)
    var value = scope::get(sc, make_identifier("foo"))
    var tpe = (@value).tpe
    assert((@tpe).kind == typechecking::TypeKind::WORD)
    assert((@tpe).size == (size_of int))
    
    print("OK\n")
}

export def test {
    print("Running tests on Typechecking...\n")
    test_vardecl()
}