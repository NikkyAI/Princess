import compiler
import codegen
import lexer
import util
import parser
import scope
import typechecking

export var print_ll = false

def compile(s: string) -> string {
    codegen::outfolder = "./bin"

    let main = "main"
    let tokens = lexer::lex(s)
    let lines = util::split_lines(s)
    let node = parser::parse(tokens, lines, main, main)
    let scope = scope::enter_scope(builtins::builtins)
    typechecking::typecheck(node, scope, main, main)
    let result = compiler::compile(node, main, main)
    codegen::gen(result, main, main)
    
    let fh = open("./bin/main.ll", "r")
    seek(fh, 0, SEEK_END)
    let filesize = tell(fh)
    rewind(fh)
    let buf = allocate(char, filesize + 1)
    read(fh, buf, filesize)
    buf[filesize] = '\0'
    close(fh)

    if print_ll {
        print("\n")
        print(s)
        print("\n")
        print(buf)
    }

    return buf
}

def test_emit_arithmetic {
    print(">Test arithmetic instruction... ")

    var str = "
        10 + 10 + 10
    "
    var res = compile(str)

    print("OK\n")
}

def test_emit_call {
    print(">Test call instruction... ")

    var str = "
        def add(a: int, b: int) -> int {
            return a + b
        }
        add(10, 10)
    "
    var res = compile(str)

    // Overloaded function
    str = "
        def add(a: int, b: int) -> int {
            return a + b
        }
        def add(a: double, b: double) -> double {
            return a + b
        }
        add(10, 10)
        add(10.0, 10.5)
    "
    res = compile(str)

    print("OK\n")
}

export def test {
    print("Running tests on Compiler...\n")
    test_emit_arithmetic()
    test_emit_call()
}