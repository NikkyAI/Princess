import buffer
import compiler
import codegen
import lexer
import util
import parser
import scope
import typechecking

export var print_ll = false

def compile(s: string) -> string {
    codegen::outfolder = "./bin"

    let main = "main"
    let tokens = lexer::lex(s)
    let lines = util::split_lines(s)
    let node = parser::parse(tokens, lines, main, main)
    let scope = scope::enter_function_scope(builtins::builtins)
    typechecking::typecheck(node, scope, main, main)
    let result = compiler::compile(node, main, main)
    codegen::gen(result, main, main)
    
    let fh = open("./bin/main.ll", "r")
    let buf = util::read_all(fh)
    close(fh)

    let llc = system("llc bin/main.ll")
    if llc {
        error("LLC compilation failed!\n")
    }

    if print_ll or llc {
        print("\n")
        print(s)
        print("\n")
        print(buf)
    }

    if llc {
        exit(-1)
    }

    return buf
}

def test_emit_arithmetic {
    print(">Test arithmetic instruction... ")

    var str = "
        10 + 10 + 10
    "
    var res = compile(str)

    str = "
        10 * 2 + 5 / 4 - 5 % 3
    "
    res = compile(str)

    str = "
        10.5 / 4.0
    "
    res = compile(str)

    str = "
        10 << 1 + 10 >> 2
    "
    res = compile(str)

    print("OK\n")
}

def test_emit_call {
    print(">Test call instruction... ")

    var str = "
        def add(a: int, b: int) -> int {
            return a + b
        }
        add(10, 10)
    "
    var res = compile(str)

    // Overloaded function
    str = "
        def add(a: int, b: int) -> int {
            return a + b
        }
        def add(a: double, b: double) -> double {
            return a + b
        }
        add(10, 10)
        add(10.0, 10.5)
    "
    res = compile(str)

    print("OK\n")
}

def test_emit_if {
    print(">Test if statement... ")

    var str = "
        def foo
        if true {
            foo()
        }
        foo()
    "
    var res = compile(str)

    str = "
        def foo -> int
        if true {
            let x = foo()
        } else if false {
            let x = foo()
        } else if true {
            let x = foo()
        }
        let x = foo()
    "
    res = compile(str)

    str = "
        def foo
        if true {
            foo()
        } else {
            foo()
        }
        foo()
    "
    res = compile(str)

    // Nested
    str = "
        def foo
        if true {
            foo()
            if true {
                foo()
            } else {
                foo()
            }
        } else {
            foo()
            if true {
                foo()
            } else if true {
                foo()
            } else {
                foo()
            }
        }
        foo()
    "
    res = compile(str)

    print("OK\n")
}

def test_emit_loop {
    print(">Test loop statement... ")

    var str = "
        def foo
        loop {
            foo()
            continue
            foo()
            break
            foo()
        }
    "
    var res = compile(str)

    str = "
        loop {
            if true {
                break
            } else {
                continue
            }
            break
        }
    "
    res = compile(str)
    
    str = "
        loop {
            continue
            loop {
                continue
                break
            }
            break
        }
    "
    res = compile(str)

    print("OK\n")
}

def test_emit_vardecl {
    print(">Test vardecl... ")

    var str = "
        def foo {
            var a: int, b: int
        }
    "
    var res = compile(str)

    // Test scoping
    str = "
        def foo {
            var a: int
            if false {
                var a: int
            }
        }
    "
    res = compile(str)

    print("OK\n")
}

def test_emit_globals {
    print(">Test globals... ")

    var str = "
        var global: int
    "
    var res = compile(str)

    str = "
        let global = 20
    "
    res = compile(str)

    str = "
        let a, b = 10, 20
    "
    res = compile(str)

    str = "
        def foo -> int, int {
            return 10, 20
        }
        let a, b = foo()
    "
    res = compile(str)

    str = "
        def foo -> int, int {
            return 10, 20
        }
        var a: int
        let (a), b = foo()
    "
    res = compile(str)

    str = "
        def foo -> int {
            return 10
        }
        var a: int
        var b: int
        a = b = foo()
    "
    res = compile(str)

    print("OK\n")
}

def test_emit_ptr {
    print(">Test pointers... ")
    
    var str = "
        let a = 20
        let pa = *a
        @pa = 40
    "
    var res = compile(str)

    str = "
        let a = 20
        let pa = *a
        let ppa = *pa
        @@ppa = 40
        let b = @@ppa
    "
    res = compile(str)

    print("OK\n")
}

def test_emit_convert {
    print(">Test type conversion... ")

    var str = "
        let a = 10 !float
        let b = a !int
    "
    var res = compile(str)

    str = "
        let a = 10!float + 20
        let b = 10!uint + 20
    "
    res = compile(str)

    str = "
        let a = 200!bool
        let b = 1.5!bool
        let c: *int = null
        let d = c!bool
    "
    res = compile(str)

    str = "
        let a: int64 = 20
        let b: int16 = 20

        def foo(a: int64)
        foo(10)
    "
    res = compile(str)

    print("OK\n")
}

def test_member_access {
    print(">Test member access... ")

    var str = "
        type S = struct {
            value: int
        }
        type T = struct {
            a: int
            b: S
        }

        var t: T
        let a = t.a
        let b = t.b.value

        t.b.value = 20
        t.a = 40
    "
    var res = compile(str)

    print("OK\n")
}

def test_array_subscript {
    print(">Test array subscript... ")

    var str = "
        var a: [int]
        var b: *int
        var c: [3; int]

        let d = a[2]
        let e = b[2]
        let f = c[2]

        a[2] = 5
        b[2] = 10
        c[2] = 15
    "
    var res = compile(str)

    print("OK\n")
}

def test_struct_lit {
    print(">Test struct literal... ")

    var str = "
        type T = struct {
            a: int
            b: int
        }
        let a = {10, 20} !T
    "
    var res = compile(str)

    str = "
        type T = struct {
            a: int
            b: int
        }
        let a = 20
        let b = 50
        let c = {a = a, b = b} !T
    "
    res = compile(str)

    str = "
        type A = struct {
            a: int
        }
        type B = struct {
            b: A
            c: int
        }
        let a = 20
        let b = 50
        let v = {{a} !A, b} !B
    "
    res = compile(str)

    str = "
        type A = struct {
            value: int
        }

        def ret_a -> A {
            return {10}
        }

        let a: A = {10}
        var b: A
        b = {10}
    "
    res = compile(str)

    print("OK\n")
}

def test_size_of {
    print(">Test size_of... ")

    var str = "
        type T = struct {
            a: int
            b: int
        }

        let a = size_of T
        let b = size_of int
        let c = size_of type *
        let d = size_of a
        let e = size_of (a + b)
    "
    var res = compile(str)

    print("OK\n")
}

def test_array_lit {
    print(">Test array literal... ")

    var str = "
        let a = [1, 2, 3, 4]
    "

    // TODO

    print("OK\n")
}

def test_compare {
    print(">Test compare operator... ")

    var str = "
        let a = 10 == 20
        let b = 10 > 20
        let c = 10 < 20
        
        let d = 5
        let e = 1 < d < 10
    "
    var res = compile(str)

    print("OK\n")
}

def test_pointer_arithmetic {
    print(">Test pointer arithmetic... ")

    var str = "
        let a = 20
        let b = *a
        let c = b ++ 20 -- 5
    "
    var res = compile(str)

    str = "
        var a: *int
        @(a ++ 10) = 20
    "
    res = compile(str)

    print("OK\n")
}

def test_assign_eq {
    print(">Test assign_eq... ")

    var str = "
        var a = 10
        a += 20
        a <<= 1
        a >>= 2
        a *= 5
        a /= 10
    "
    var res = compile(str)
    
    print("OK\n")
}

def test_import {
    print(">Test import... ")

    var str = "
        import test::a
        import test::b
    "
    var res = compile(str)

    print("OK\n")
}

def test_array_size_and_value {
    print(">Test array size and value... ")

    var str = "
        var a: [4; int]
        var b: [int]

        let c = a.size
        let d = a.value
        let e = b.size
        let f = b.value

        b.size = 20
        b.value = null
    "
    var res = compile(str)

    print("OK\n")
}

export def test {
    print("Running tests on Compiler...\n")
    test_emit_arithmetic()
    test_emit_call()
    test_emit_if()
    test_emit_loop()
    test_emit_vardecl()
    test_emit_globals()
    test_emit_ptr()
    test_emit_convert()
    test_member_access()
    test_array_subscript()
    test_struct_lit()
    test_size_of()
    //test_array_lit()
    test_compare()
    test_pointer_arithmetic()
    test_assign_eq()
    test_import()
    test_array_size_and_value()
}