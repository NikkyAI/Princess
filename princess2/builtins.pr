import parser
import typechecking
import scope
import map

export let builtins: scope::Scope = {
    parent = null,
    fields = map::make()
}

def create_int_type(name: string, size: int, unsig: bool) -> *typechecking::Type {
    var tpe = typechecking::make_type(typechecking::TypeKind::WORD, name, null)
    (@tpe).size = size
    (@tpe).align = size
    (@tpe).unsig = unsig
    scope::create_type(*builtins, null, parser::ShareMarker::NONE, tpe)
    return tpe
}

def create_float_type(name: string, size: int) -> *typechecking::Type {
    var tpe = typechecking::make_type(typechecking::TypeKind::FLOAT, name, null)
    (@tpe).size = size
    (@tpe).align = size
    (@tpe).unsig = false
    scope::create_type(*builtins, null, parser::ShareMarker::NONE, tpe)
    return tpe
}

export let bool_ = typechecking::make_type(typechecking::TypeKind::BOOL, "bool", null)
(@bool_).size = (size_of bool)
scope::create_type(*builtins, null, parser::ShareMarker::NONE, bool_)

export let char_ = create_int_type("char", size_of char, false)

export let string_ = typechecking::make_type(typechecking::TypeKind::ARRAY, "string", null)
(@string_).size = (size_of string)
(@string_).tpe = char_
scope::create_type(*builtins, null, parser::ShareMarker::NONE, string_)

export let float_   = create_float_type("float", size_of float)
export let double_  = create_float_type("double", size_of double)
export let float32_ = create_float_type("float32", size_of float32)
export let float64_ = create_float_type("float64", size_of float64)

export let byte_    = create_int_type("byte", size_of byte, false)
export let short_   = create_int_type("short", size_of short, false)
export let int_     = create_int_type("int", size_of int, false)
export let long_    = create_int_type("long", size_of long, false)

export let ubyte_   = create_int_type("ubyte", size_of ubyte, true)
export let ushort_  = create_int_type("ushort", size_of ushort, true)
export let uint_    = create_int_type("uint", size_of uint, true)
export let ulong_   = create_int_type("ulong", size_of ulong, true)

export let int8_    = create_int_type("int8", size_of int8, false)
export let int16_   = create_int_type("int16", size_of int16, false)
export let int32_   = create_int_type("int32", size_of int32, false)
export let int64_   = create_int_type("int64", size_of int64, false)

export let uint8_   = create_int_type("uint8", size_of uint8, true)
export let uint16_  = create_int_type("uint16", size_of uint16, true)
export let uint32_  = create_int_type("uint32", size_of uint32, true)
export let uint64_  = create_int_type("uint64", size_of uint64, true)