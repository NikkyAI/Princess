import scope
import typechecking
import map

var state: typechecking::State
state.node = null
state.filename = "builtins"
state.scope = null

export var builtins: scope::Scope
builtins.parent = null
builtins.fields = map::make()

def create_int_type(name: string, size: int, unsig: bool) {
    var tpe = typechecking::make_type(typechecking::TypeKind::WORD, "int", *state)
    (@tpe).size = size
    (@tpe).unsig = unsig
    scope::create_type(*builtins, *state, scope::Share::EXPORT, "int", tpe)
}

create_int_type("char", size_of char, false)

create_int_type("byte", size_of byte, false)
create_int_type("short", size_of short, false)
create_int_type("int", size_of int, false)
create_int_type("long", size_of long, false)

create_int_type("ubyte", size_of ubyte, true)
create_int_type("ushort", size_of ushort, true)
create_int_type("uint", size_of uint, true)
create_int_type("ulong", size_of ulong, true)

create_int_type("int8", size_of int8, false)
create_int_type("int16", size_of int16, false)
create_int_type("int32", size_of int32, false)
create_int_type("int64", size_of int64, false)

create_int_type("uint8", size_of uint8, true)
create_int_type("uint16", size_of uint16, true)
create_int_type("uint32", size_of uint32, true)
create_int_type("uint64", size_of uint64, true)