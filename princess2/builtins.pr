import parser
import scope
import map
import vector
import typechecking

export let builtins = scope::enter_scope(null)

def create_int_type(name: string, size: int, unsig: bool) -> *typechecking::Type {
    let ident = parser::make_identifier([name])
    var tpe = typechecking::make_type(typechecking::TypeKind::WORD, ident)
    (@tpe).size = size
    (@tpe).align = size
    (@tpe).unsig = unsig
    scope::create_type(builtins, ident, parser::ShareMarker::NONE, tpe)
    return tpe
}

def create_float_type(name: string, size: int) -> *typechecking::Type {
    let ident = parser::make_identifier([name])
    var tpe = typechecking::make_type(typechecking::TypeKind::FLOAT, ident)
    (@tpe).size = size
    (@tpe).align = size
    (@tpe).unsig = false
    scope::create_type(builtins, ident, parser::ShareMarker::NONE, tpe)
    return tpe
}

export let char_ = create_int_type("char", size_of char, false)

let bool_ident = parser::make_identifier(["bool"])
export let bool_ = typechecking::make_type(typechecking::TypeKind::BOOL, bool_ident)
(@bool_).size = (size_of bool)
(@bool_).align = (align_of bool)
// This isn't very well defined, but I guess we need this for treating bool as an arithmetic type
(@bool_).unsig = true
scope::create_type(builtins, bool_ident, parser::ShareMarker::NONE, bool_)

let str_ident = parser::make_identifier(["string"])
export let string_ = typechecking::make_type(typechecking::TypeKind::ARRAY, str_ident)
(@string_).size = (size_of string)
(@string_).align = (align_of string)
(@string_).tpe = char_
scope::create_type(builtins, str_ident, parser::ShareMarker::NONE, string_)

export let float_   = create_float_type("float", size_of float)
export let double_  = create_float_type("double", size_of double)
export let float32_ = create_float_type("float32", size_of float32)
export let float64_ = create_float_type("float64", size_of float64)

export let byte_    = create_int_type("byte", size_of byte, false)
export let short_   = create_int_type("short", size_of short, false)
export let int_     = create_int_type("int", size_of int, false)
export let long_    = create_int_type("long", size_of long, false)

export let ubyte_   = create_int_type("ubyte", size_of ubyte, true)
export let ushort_  = create_int_type("ushort", size_of ushort, true)
export let uint_    = create_int_type("uint", size_of uint, true)
export let ulong_   = create_int_type("ulong", size_of ulong, true)

export let int8_    = create_int_type("int8", size_of int8, false)
export let int16_   = create_int_type("int16", size_of int16, false)
export let int32_   = create_int_type("int32", size_of int32, false)
export let int64_   = create_int_type("int64", size_of int64, false)

export let uint8_   = create_int_type("uint8", size_of uint8, true)
export let uint16_  = create_int_type("uint16", size_of uint16, true)
export let uint32_  = create_int_type("uint32", size_of uint32, true)
export let uint64_  = create_int_type("uint64", size_of uint64, true)

export let size_t_  = create_int_type("size_t", size_of size_t, true)

// These are macros so we need to create variables for them
let seek_set = SEEK_SET
scope::create_variable(builtins, parser::make_identifier(["SEEK_SET"]), parser::ShareMarker::NONE, parser::VarDecl::CONST, int_, *seek_set)
let seek_cur = SEEK_CUR
scope::create_variable(builtins, parser::make_identifier(["SEEK_CUR"]), parser::ShareMarker::NONE, parser::VarDecl::CONST, int_, *seek_cur)
let seek_end = SEEK_END
scope::create_variable(builtins, parser::make_identifier(["SEEK_END"]), parser::ShareMarker::NONE, parser::VarDecl::CONST, int_, *seek_end)

// TODO I don't know how the struct is called like on Windows
export let File_ = typechecking::pointer(typechecking::make_type(typechecking::TypeKind::STRUCT, parser::make_identifier(["struct._IO_FILE"])))
scope::create_type(builtins, parser::make_identifier(["File"]), parser::ShareMarker::NONE, File_)

scope::create_variable(builtins, parser::make_identifier(["stdin"]), parser::ShareMarker::NONE, parser::VarDecl::VAR, File_, null)
scope::create_variable(builtins, parser::make_identifier(["stdout"]), parser::ShareMarker::NONE, parser::VarDecl::VAR, File_, null)
scope::create_variable(builtins, parser::make_identifier(["stderr"]), parser::ShareMarker::NONE, parser::VarDecl::VAR, File_, null)

let path_max: int = PATH_MAX
scope::create_variable(builtins, parser::make_identifier(["PATH_MAX"]), parser::ShareMarker::NONE, parser::VarDecl::CONST, int_, *path_max)
let win32: bool = WIN32
scope::create_variable(builtins, parser::make_identifier(["WIN32"]), parser::ShareMarker::NONE, parser::VarDecl::CONST, bool_, *win32)

import builtin_functions