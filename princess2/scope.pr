import map
import typechecking

export type Share = enum {
    NONE = 0
    EXPORT = 1
    IMPORT = 2
    BOTH = 3
}

export type Modifier = enum {
    LET
    VAR
    CONST
    TYPE
}

export type Value = struct {
    name: string
    identifier: string
    tpe: *typechecking::Type
    value: *
    share: Share
    modifier: Modifier
}

export type Scope

export type Scope = struct {
    parent: *Scope
    fields: *map::Map
}

export def enter_scope(scope: *Scope) -> *Scope {
    var s = allocate(Scope)
    (@s).parent = scope
    (@s).fields = map::make()
    return s
}

export def exit_scope(scope: *Scope) -> *Scope {
    return (@scope).parent
}