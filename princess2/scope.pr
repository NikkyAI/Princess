import map
import typechecking
import parser

export type Share = enum {
    NONE = 0
    EXPORT = 1
    IMPORT = 2
    BOTH = 3
}

export type Modifier = enum {
    LET
    VAR
    CONST
    TYPE
}

export type Value = struct {
    share: Share
    modifier: Modifier
    // Name used by the source code
    name: string
    // Identifier, changes for overloaded functions
    identifier: string
    tpe: *typechecking::Type
    value: *
}

export type Scope

export type Scope = struct {
    parent: *Scope
    fields: *map::Map
}

export def enter_scope(scope: *Scope) -> *Scope {
    var s = allocate(Scope)
    (@s).parent = scope
    (@s).fields = map::make()
    return s
}

export def exit_scope(scope: *Scope) -> *Scope {
    return (@scope).parent
}

export def create_variable(
    scope: *Scope, node: *parser::Node, share: Share, 
    modifier: Modifier, name: string, tpe: *typechecking::Type, value: *) {
        
    var v = allocate(Value)
    (@v).share = share
    (@v).modifier = modifier
    (@v).name = name
    (@v).identifier = name
    (@v).tpe = tpe
    (@v).value = value

    if map::contains((@scope).fields, identifier) {

    }
}