import map
import typechecking
import parser
import vector
import buffer
import util

export type Share = enum {
    NONE = 0
    EXPORT = 1
    IMPORT = 2
    BOTH = 3
}

export type Modifier = enum {
    LET
    VAR
    CONST
    TYPE
}

export type Value = struct {
    share: Share
    modifier: Modifier
    // Name used by the source code
    name: string
    tpe: *typechecking::Type
    value: *
    // In case multiple values share one name (overloaded functions)
    next: *Value
}

export type Scope = struct {
    parent: *Scope
    fields: *map::Map
}

export def enter_scope(scope: *Scope) -> *Scope {
    var s = allocate(Scope)
    (@s).parent = scope
    (@s).fields = map::make()
    return s
}

export def exit_scope(scope: *Scope) -> *Scope {
    return (@scope).parent
}

// TODO Give better error messages, where was the function/variable declared previously?
export def create_function(
    scope: *Scope, state: *typechecking::State, share: Share, 
    name: string, parameter_t: *vector::Vector, return_t: *vector::Vector) {

    var tpe = typechecking::make_type(typechecking::TypeKind::FUNCTION, name, state)
    (@tpe).parameter_t = parameter_t
    (@tpe).return_t = return_t
    
    var v = allocate(Value)
    (@v).share = share
    (@v).modifier = Modifier::CONST
    (@v).name = name
    (@v).tpe = tpe
    (@v).value = null
    (@v).next = null

    if map::contains((@scope).fields, name) {
        var val = map::get((@scope).fields, name) !*Value
        if not typechecking::is_function((@val).tpe) {
            typechecking::errorn(state, "Redeclaration of ")
            error("\"", name, "\"\n")
        }
        var next = (@val).next
        while next {
            if typechecking::overload_score((@next).tpe, tpe) == 0 {
                typechecking::errorn(state, "Function ")
                error("\"", name, "\" was already declared previously (same arguments)\n")
            }
            next = (@val).next
        }
        (@next).next = v
    } else {
        map::put((@scope).fields, name, v)
    }
}

export def create_variable(
    scope: *Scope, state: *typechecking::State, share: Share, 
    modifier: Modifier, name: string, tpe: *typechecking::Type, value: *) {

    var v = allocate(Value)
    (@v).share = share
    (@v).modifier = modifier
    (@v).name = name
    (@v).tpe = tpe
    (@v).value = value
    (@v).next = null

    if map::contains((@scope).fields, name) {
        typechecking::errorn(state, "Redeclaration of ")
        error("\"", name, "\"\n")
    } else {
        map::put((@scope).fields, name, v)
    }
}