import map
import typechecking
import parser
import vector
import buffer
import util

export type Share = enum {
    NONE = 0
    EXPORT = 1
    IMPORT = 2
    BOTH = 3
}

export type Modifier = enum {
    LET
    VAR
    CONST
    TYPE
}

export type Value = struct {
    share: Share
    modifier: Modifier
    // Name used by the source code
    name: string
    // Identifier, changes for overloaded functions
    identifier: string
    tpe: *typechecking::Type
    value: *
}

export type Scope = struct {
    parent: *Scope
    fields: *map::Map
}

export def enter_scope(scope: *Scope) -> *Scope {
    var s = allocate(Scope)
    (@s).parent = scope
    (@s).fields = map::make()
    return s
}

export def exit_scope(scope: *Scope) -> *Scope {
    return (@scope).parent
}

export def mangle_function_name(name: string, parameter_t: *vector::Vector) -> string {
    var buf = buffer::make_buffer()
    buffer::append_str(*buf, "_F")
    buffer::append_str(*buf, util::int_to_str(length(name)))
    buffer::append_str(*buf, name)
    buffer::append_str(*buf, "__")

    for var i in 0..vector::length(parameter_t) {
        buffer::append_str(*buf, typechecking::type_to_str(vector::get(parameter_t, i) !*typechecking::Type))
    }

    return buffer::to_string(*buf)
}

export def create_function(
    scope: *Scope, state: *typechecking::State, share: Share, 
    name: string, parameter_t: *vector::Vector, return_t: *vector::Vector) {

    let identifier = mangle_function_name(name, parameter_t)

    var tpe = allocate(typechecking::Type)
    (@tpe).kind = typechecking::TypeKind::FUNCTION
    (@tpe).parameter_t = parameter_t
    (@tpe).return_t = return_t
    (@tpe).name = name
    
    var v = allocate(Value)
    (@v).share = share
    (@v).modifier = Modifier::CONST
    (@v).name = name
    (@v).identifier = identifier
    (@v).tpe = tpe
    (@v).value = null

    if map::contains((@scope).fields, identifier) {
        typechecking::errorn(state, "Redeclaration of ")
        error("\"", name, "\"\n")
    } else {
        map::put((@scope).fields, identifier, v)
    }
}

export def create_variable(
    scope: *Scope, state: *typechecking::State, share: Share, 
    modifier: Modifier, name: string, tpe: *typechecking::Type, value: *) {

    var v = allocate(Value)
    (@v).share = share
    (@v).modifier = modifier
    (@v).name = name
    (@v).identifier = name
    (@v).tpe = tpe
    (@v).value = value

    if map::contains((@scope).fields, name) {
        typechecking::errorn(state, "Redeclaration of ")
        error("\"", name, "\"\n")
    } else {
        map::put((@scope).fields, name, v)
    }
}