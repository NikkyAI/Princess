import buffer
import vector
import toolchain
import util

def read_input {
    var history = allocate(size_of string) !*string
    var history_item = 0
    var history_length = 1
    history[0] = zero_allocate(char, 1)

    loop {
        var lines = allocate(size_of buffer::Buffer) !*buffer::Buffer
        lines[0] = buffer::make_buffer()

        var num_lines = 1
        var line = 0
        var column = 0

        print(">>> ")
        loop {
            var brace_stack_size = 0
            var brace_stack: *char = allocate(0) !*char

            var c: char
            loop {
                c = cstd::getchar() !char
                if c == '\r' {
                    print("\r\n")
                    let current_line = buffer::to_string(*lines[line])
                    if (history_length > 1 and history[history_length - 2] != current_line) or 
                        history_length <= 1 {

                        history_length += 1
                        history = reallocate(history, (size_of string) * history_length)
                        history[history_length - 1] = current_line
                    }
                    history_item = history_length - 1
                    history[history_item] = ""
                    break
                } else if c == 3 {
                    // ctrl + c
                    print("\r\n")
                    return
                } else if c == 127 {
                    // backspace
                    if column > 0 {
                        let width = util::get_terminal_size().ws_col
                        if (column + 4) % width == 0 {
                            print("\x1B[1A")
                            print("\x1B[", width, "C")
                            print("\x1B[K")
                        } else {
                            print("\b\x1B[K")
                        }
                        column -= 1
                        buffer::remove_char(*lines[line], column)
                        if column < lines[line].size - 1 {
                            print("\x1B7")
                            for var i in column..(lines[line].size - 1) {
                                print(lines[line].value[i])
                            }
                            print(" \x1B8")
                        }
                    } else {
                        print("\a")
                    }
                } else if c == 27 {
                    c = cstd::getchar() !char
                    if c == 91 {
                        c = cstd::getchar() !char
                        if c == 51 {
                            c = cstd::getchar() !char
                            if c == 126 {
                                // del
                                if column < lines[line].size - 1 {
                                    buffer::remove_char(*lines[line], column)
                                    print("\x1B7")
                                    for var i in column..(lines[line].size - 1) {
                                        print(lines[line].value[i])
                                    }
                                    print(" \x1B8")
                                } else {
                                    print("\a")
                                }
                            }
                        } else if c == 68 {
                            // left
                            if column > 0 {
                                let width = util::get_terminal_size().ws_col
                                if (column + 4) % width == 0 {
                                    print("\x1B[1A")
                                    print("\x1B[", width, "C")
                                } else {
                                    print("\x1B[D")
                                }
                                column -= 1
                            } else {
                                print("\a")
                            }
                        } else if c == 67 {
                            // right
                            if column < lines[line].size - 1 {
                                column += 1
                                let width = util::get_terminal_size().ws_col
                                if (column + 4) % width == 0 {
                                    print("\x1BE")
                                } else {
                                    print("\x1B[C")
                                }
                            } else {
                                print("\a")
                            }
                        } else if c == 65 {
                            // up
                            if history_item > 0 {
                                history_item -= 1
                                lines[line] = buffer::make_buffer()
                                buffer::append_str(*lines[line], history[history_item])
                                print(buffer::to_string(*lines[line]))
                                column = (lines[line].size - 1) !int
                            }
                        } else if c == 66 {
                            // down
                            if history_item < history_length - 1 {
                                history_item += 1
                                lines[line] = buffer::make_buffer()
                                buffer::append_str(*lines[line], history[history_item])
                                print(buffer::to_string(*lines[line]))
                                column = (lines[line].size - 1) !int
                            }
                        }
                    }
                } else {
                    buffer::insert(*lines[line], column, c)
                    let width = util::get_terminal_size().ws_col
                    column += 1
                    print(c)
                    if (column + 4) % width == 0 {
                        print("\x1BE")
                    }
                    if column < lines[line].size - 1 {
                        print("\x1B7")
                        for var i in column..(lines[line].size - 1) {
                            print(lines[line].value[i])
                        }
                        print(" \x1B8")
                    }
                    history[history_item] = buffer::to_string(*lines[line])
                }
            }

            var br = false
            var in_string = false  
            var in_escape = false

            let str = buffer::to_string(*lines[line])
            for var i in 0..str.size {
                let c = str[i]
                if c == '\\' and in_string {
                    in_escape = true
                    continue
                } else if c == '"' and not in_escape { 
                    in_string = not in_string 
                } else if not in_string {
                    var last_brace = '\0'
                    if brace_stack_size > 0 {
                        last_brace = brace_stack[brace_stack_size - 1]
                    }
                    if c == '(' or c == '[' or c == '{' {
                        brace_stack_size += 1
                        brace_stack = reallocate(brace_stack, brace_stack_size * (size_of char))
                        brace_stack[brace_stack_size - 1] = c
                    } else if c == ')' or c == ']' or c == '}' {
                        if brace_stack_size > 0 {
                            if c == ')' and last_brace == '(' or c == ']' and last_brace == '[' or c == '}' and last_brace == '{' {
                                brace_stack_size -= 1
                                brace_stack = reallocate(brace_stack, brace_stack_size * (size_of char))
                            } else {
                                free(brace_stack)
                                brace_stack = null
                                brace_stack_size = 0
                                br = true
                            }
                        }
                    }
                }
                in_escape = false
            }

            if br or (c == '\r' and brace_stack_size == 0) {
                column = 0
                line += 1
                lines = reallocate(lines, (size_of buffer::Buffer) * (line + 1)) !*buffer::Buffer
                lines[line] = buffer::make_buffer()
                break
            }
            print("... ")
        }
    }
}

export def run {
    print(toolchain::version, "\n")
    print("Press ctrl+c to quit\n")

    var old: cstd::s_termios
    cstd::tcgetattr(0, *old)
    var term: cstd::s_termios
    cstd::tcgetattr(0, *term)
    cstd::cfmakeraw(*term)
    cstd::tcsetattr(0, 1 /* TCSADRAIN */, *term)
    cstd::setbuf(cstd::stdin, null)

    read_input()

    cstd::tcsetattr(0, 1 /* TCSADRAIN */, *old)
}