import buffer
import toolchain

export def run {
    print(toolchain::version, "\n")
    print("Type exit to quit\n")


    loop {
        let buf = buffer::make_buffer()
    
        var count_paren = 0
        var count_square = 0
        var count_brace = 0
        var last_brace: char = '\0'
        var in_string = false

        print(">>> ")
        loop {
            var c: char
            var br = false
            while (c = cstd::getchar() !char) != '\n' {
                buffer::append_char(*buf, c)
                if c == '\\' and in_string {
                    buffer::append_char(*buf, cstd::getchar() !char)
                } else if c == '"' { 
                    in_string = not in_string 
                } else if not in_string {
                    if c == '(' {
                        last_brace = c
                        count_paren += 1
                    } else if c == ')' {
                        if last_brace == '(' { 
                            count_paren -= 1 
                            if count_paren < 0 { br = true }
                        }
                        else { br = true; }
                    } else if c == '[' {
                        last_brace = c
                        count_square += 1
                    } else if c == ']' {
                        if last_brace == '[' { 
                            count_square -= 1 
                            if count_square < 0 { br = true }
                        }
                        else { br = true; }
                    } else if c == '{' {
                        last_brace = c
                        count_brace += 1
                    } else if c == '}' {
                        if last_brace == '{' { 
                            count_brace -= 1 
                            if count_brace < 0 { br = true }
                        }
                        else { br = true; }
                    }
                }
            }
            if br or (c == '\n' and count_paren == count_square == count_paren == 0) {
                count_paren = count_square = count_paren = 0
                break
            }
            print("... ")
        }
        let program = buffer::to_string(*buf)
        if program == "exit" { break }
    }
}