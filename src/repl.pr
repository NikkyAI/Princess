import buffer
import toolchain

def read_input {
    loop {
        var lines = allocate(size_of buffer::Buffer) !*buffer::Buffer
        lines[0] = buffer::make_buffer()

        var num_lines = 1
        var line = 0
        var column = 0
    
        var count_paren = 0
        var count_square = 0
        var count_brace = 0
        var last_brace: char = '\0'

        print(">>> ")
        loop {
            var c: char
            var br = false

            var in_string = false  
            var in_escape = false          
            loop {
                c = cstd::getchar() !char
                if c == '\r' {
                    print("\r\n") 
                    column = 0
                    print(buffer::to_string(*lines[line]), "\r\n")
                    break 
                } else if c == 3 {
                    print("\r\n")
                    return
                } else if c == 127 {
                    if column > 0 {
                        column -= 1
                        print("\b\x1B[K")
                        buffer::remove_char(*lines[line], column)
                    }
                } else if c == 27 {
                    c = cstd::getchar() !char
                    if c == 91 {
                        c = cstd::getchar() !char
                        if c == 68 {
                            // left
                            if column > 0 {
                                column -= 1
                                print(27 !char, 91 !char, 68 !char)
                            }
                        } else if c == 67 {
                            // right
                            if column < lines[line].size - 1 {
                                column += 1
                                print(27 !char, 91 !char, 67 !char)
                            }
                        } else if c == 65 {
                            // up
                        } else if c == 66 {
                            // down
                        }
                    }

                } else {
                    print(c)
                    if column < lines[line].size - 1 {
                        for var i in column..(lines[line].size - 1) {
                            print(lines[line].value[i])
                        }
                        print("\x1B[")
                        print(lines[line].size - column - 1)
                        print("D")
                    }
                    buffer::insert(*lines[line], column, c)
                    column += 1
                }
                
                if c == '\\' and in_string {
                    in_escape = true
                    continue
                } else if c == '"' and not in_escape { 
                    in_string = not in_string 
                } else if not in_string {
                    if c == '(' {
                        last_brace = c
                        count_paren += 1
                    } else if c == ')' {
                        if last_brace == '(' { 
                            count_paren -= 1 
                            if count_paren < 0 { br = true }
                        }
                        else { br = true; }
                    } else if c == '[' {
                        last_brace = c
                        count_square += 1
                    } else if c == ']' {
                        if last_brace == '[' { 
                            count_square -= 1 
                            if count_square < 0 { br = true }
                        }
                        else { br = true; }
                    } else if c == '{' {
                        last_brace = c
                        count_brace += 1
                    } else if c == '}' {
                        if last_brace == '{' { 
                            count_brace -= 1 
                            if count_brace < 0 { br = true }
                        }
                        else { br = true; }
                    }
                }
                in_escape = false
            }
            if br or (c == '\r' and count_paren == count_square == count_paren == 0) {
                count_paren = count_square = count_paren = 0
                break
            }
            print("... ")
        }
    }
}

export def run {
    print(toolchain::version, "\n")
    print("Press ctrl+c to quit\n")

    var old: cstd::s_termios
    cstd::tcgetattr(0, *old)
    var term: cstd::s_termios
    cstd::tcgetattr(0, *term)
    cstd::cfmakeraw(*term)
    cstd::tcsetattr(0, 1 /* TCSADRAIN */, *term)
    cstd::setbuf(cstd::stdin, null)

    read_input()

    cstd::tcsetattr(0, 1 /* TCSADRAIN */, *old)
}