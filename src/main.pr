import map
import vector
import getopt
import toolchain
import util
import repl
import errors
import debug

let options = [
    (option("--ast", false)
        .set_help("Print the ast when compiling")),
    (option_repeat('I', "--include")
        .set_help("Include directory")
        .set_metavar("DIR")),
    (option_repeat('D', "--define")
        .set_help("Define constants for compilation")
        .set_metavar("DEFINE")),
    (option("--buildfolder", "")
        .set_help("Output folder for temporary files")
        .set_metavar("DIR")),
    (option('o', "--outfile", "a.out")
        .set_help("Output file")
        .set_metavar("FILE")),
    (option('d', "--debug", false)
        .set_help("Compile debug symbols")),
    (option("--coverage", false)
        .set_help("Emit coverage info")),
    (option("--time-report", false)
        .set_help("Emit timing information")),
    (option("--dependency-graph", false)
        .set_help("Emit dependency graph")),
    (option("--version", false)
        .set_help("Print version info")),
    (option('v', "--verbose", false)
        .set_help("Print detailed information when compiling")),
    (option("compile", "")
        .set_help("File to compile")
        .set_metavar("FILE"))
]
let parser = *getopt::make_parser(options, "Princess Compiler")
let res = parser.parse(args)
if not res { exit(1) }

let print_ast           = parser.get_value("--ast").b
let includes            = parser.get_value("--include")
let defines             = parser.get_value("--define")
let outfolder           = parser.get_value("--buildfolder").str
let outfile             = parser.get_value("--outfile").str
let debug_sym           = parser.get_value("--debug").b
let coverage            = parser.get_value("--coverage").b
let time_report         = parser.get_value("--time-report").b
let dependency_graph    = parser.get_value("--dependency-graph").b
let print_version       = parser.get_value("--version").b
let verbose             = parser.get_value("--verbose").b
let filename            = parser.get_value("compile").str

if print_version {
    print(toolchain::version, "\n")
    exit(0)
}

if time_report and dependency_graph {
    error("--time-report and --dependency-graph are mutually exclusive\n")
    exit(1)
}

var include = includes
while include {
    vector::push(toolchain::include_path, util::copy_string(include.str))
    include = include.next
}

if length(outfolder) > 0 {
    toolchain::outfolder = outfolder
}
toolchain::outfile = outfile

var define = defines
while define {
    toolchain::add_define(define.str)
    define = define.next
}

debug::verbose = verbose

toolchain::print_ast = print_ast
toolchain::debug_sym = debug_sym
toolchain::coverage = coverage
toolchain::time_report = time_report
toolchain::dependency_graph = dependency_graph

if length(filename) == 0 {
    repl::run()
    exit(0)
}

toolchain::compile_main_file(filename)

if errors::error_count > 0 {
    error("\nTotal errors: ", errors::error_count, "\n")
    exit(2)
}