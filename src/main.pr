import map
import vector
import getopt
import parser
import toolchain
import util

let options = [
    getopt::option("--ast", false, "Print the ast when compiling"),
    getopt::option_repeat('I', "--include", "Include directory"),
    getopt::option("--buildfolder", "", "Output folder for temporary files"),
    getopt::option('o', "--outfile", "a.out", "Output file"),
    getopt::option('d', "--debug", false, "Compile debug symbols"),
    getopt::option("compile", "File to compile")
]
let res = getopt::parse(args, options)
if not res { exit(-1) }

let print_ast   = options[0].value.b
let includes    = options[1].value
let outfolder   = options[2].value.str
let outfile     = options[3].value.str
let debug_sym   = options[4].value.b
let filename    = options[5].value.str

if length(outfolder) > 0 {
    toolchain::outfolder = outfolder
}
toolchain::outfile = outfile

var include = includes
while include {
    vector::push(toolchain::include_path, util::copy_string(include.str))
    include = include.next
}

toolchain::print_ast = print_ast
toolchain::debug_sym = debug_sym

toolchain::compile_main_file(filename)

if toolchain::error_count > 0 {
    error("\nTotal errors: ", toolchain::error_count, "\n")
    exit(toolchain::error_count)
}