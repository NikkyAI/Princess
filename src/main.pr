import map
import vector
import getopt
import toolchain
import util
import repl
import errors

let options = [
    getopt::option("--ast", false, "Print the ast when compiling"),
    getopt::option_repeat('I', "--include", "Include directory"),
    getopt::option_repeat('D', "--define", "Define constants for compilation"),
    getopt::option("--buildfolder", "", "Output folder for temporary files"),
    getopt::option('o', "--outfile", "a.out", "Output file"),
    getopt::option('d', "--debug", false, "Compile debug symbols"),
    getopt::option("--time-report", false, "Emit timing information"),
    getopt::option("--dependency-graph", false, "Emit dependency graph"),
    getopt::option('v', "--version", false, "Print version info"),
    getopt::option("compile", "", "File to compile")
]
let res = getopt::parse(args, options)
if not res { exit(1) }

let print_ast           = options[0].value.b
let includes            = options[1].value
let defines             = options[2].value
let outfolder           = options[3].value.str
let outfile             = options[4].value.str
let debug_sym           = options[5].value.b
let time_report         = options[6].value.b
let dependency_graph    = options[7].value.b
let print_version       = options[8].value.b
let filename            = options[9].value.str

if print_version {
    print(toolchain::version, "\n")
    exit(0)
}

if time_report and dependency_graph {
    error("--time-report and --dependency-graph are mutually exclusive\n")
    exit(1)
}

var include = includes
while include {
    vector::push(toolchain::include_path, util::copy_string(include.str))
    include = include.next
}

if length(filename) == 0 {
    repl::run()
    exit(0)
}

if length(outfolder) > 0 {
    toolchain::outfolder = outfolder
}
toolchain::outfile = outfile

var define = defines
while define {
    toolchain::add_define(define.str)
    define = define.next
}

toolchain::print_ast = print_ast
toolchain::debug_sym = debug_sym
toolchain::time_report = time_report
toolchain::dependency_graph = dependency_graph

toolchain::compile_main_file(filename)

if errors::error_count > 0 {
    error("\nTotal errors: ", errors::error_count, "\n")
    exit(2)
}