import lexer
import parser

export var error_count = 0
export var suppress_errors = false

export def errorv(msg: string...) {
    error("error: [eval] ")
    for var i in 0..msg.size {
        print(msg[i])
    }
    error("\n")
    error_count += 1
}

export def errorn(node: *parser::Node, msg: string...) {
    if suppress_errors { return }
    if not node { assert(false) }
    let filename = (@node).loc.filename
    let line = (@node).loc.line
    let column = (@node).loc.column
    let end_line = node.loc.end_line
    var end_column = node.loc.end_column
    let str = (@node).loc.lines[line]

    error("\n")
    error(filename, "@", line + 1, ":", column + 1, "\n")
    error(str, "\n")
    for var i in 0..column {
        error(" ")
    }
    error("^")
    if end_line > line {
        end_column = length(str) !int - 1
    }
    for var i in 0..(end_column - column - 1) {
        error("~")
    }
    error("\n")
    
    for var i in 0..msg.size {
        error(msg[i])
    }
    error("\n")

    error_count += 1
}

export def errort(token: lexer::Token, state: *parser::ParseState, msg: string...) {
    if suppress_errors { return }
    if state.has_error { return }

    let filename = (@state).filename
    let line = token.line
    let column = token.column
    let end_line = token.end_line
    var end_column = token.end_column
    let str = (@state).lines[line]

    error("\n")
    error(filename, "@", line + 1, ":", column + 1, "\n")
    error(str, "\n")
    for var i in 0..column {
        error(" ")
    }
    error("^")
    if end_line > line {
        end_column = length(str) !int - 1
    }
    for var i in 0..(end_column - column - 1) {
        error("~")
    }
    error("\n")
    
    for var i in 0..msg.size {
        error(msg[i])
    }
    error("\n")

    (@state).has_error = true

    error_count += 1
}