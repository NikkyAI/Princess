import vector
import map
import set
import toolchain
import json

import server
import cache

toolchain::file_loader = *load_file

type Document = struct {
    text: &string
}

let document_cache = map::make(type &Document)

export def load_file(filename: &string) -> &string {
    if document_cache.contains(filename) {
        return document_cache[filename].text
    }
    let text = toolchain::load_file(filename)
    document_cache[filename] = {
        text = text
    } !Document
    return text
}

export def open_document(uri: server::DocumentUri, text: &string) {
    let path = uri_to_path(uri)
    document_cache[path] = { text } !Document
    cache::recompile(path)
}

export def save_document(uri: server::DocumentUri, text: &string) {
    open_document(uri, text)
}

// TODO This is very inefficient, change the lexer to accept split lines as well instead
export def find_offset(text: &string, pos: server::Position) -> size_t {
    var offset = 0
    var line = 0
    var column = 0
    while offset < text.length() {
        if line == pos.line and column == pos.character {
            return offset
        }
        if text[offset] == '\r' {
            if offset + 1 < text.length() {
                if text[offset + 1] == '\n' {
                    offset += 1
                }
            }
            column = 0
            line += 1
        } else if text[offset] == '\n' {
            column = 0
            line += 1
        } else {
            column += 1
        }
        offset += 1
    }
    return offset
}

export def change_document(uri: server::DocumentUri, changes: &[server::TextDocumentContentChangeEvent]) {
    let path = uri_to_path(uri)
    let document = document_cache[path]

    for var change in @changes {
        if change.range {
            // TODO this is ugly, allow optionals instead
            let range = json::deserialize(change.range, server::Range).get()
            let start_offset = find_offset(document.text, range.start)
            let end_offset = find_offset(document.text, range.end)

            if start_offset != end_offset {
                document.text.remove(
                    min(document.text.length() - 1, start_offset) !size_t, 
                    end_offset - 1
                )
            }
            if start_offset < document.text.length() {
                document.text.insert(start_offset, change.text)
            } else {
                document.text += change.text
            }

            cache::offset_errors(path, range.start, range.end, change.text)
        } else {
            document.text = change.text
        }
    }

    cache::recompile(path)
}

export def close_document(uri: server::DocumentUri) {
    // TODO
}

// File system events
export def on_created(uri: server::DocumentUri) {
    let path = uri_to_path(uri)
    if cache::check_imports(path) {
        cache::recompile(path)
    }
}

export def on_changed(uri: server::DocumentUri) {
    let path = uri_to_path(uri)
    if document_cache.contains(path) {
        cache::recompile(path)
    }
}

export def on_deleted(uri: server::DocumentUri) {
    let path = uri_to_path(uri)
    cache::check_imports(path)
    document_cache.remove(path)
}