import toolchain
import errors
import map
import set
import typechecking
import compiler

import server

toolchain::file_loader = *load_file

type Document = struct {
    text: &string
}

let document_cache = map::make(Document)

def load_file(filename: &string) -> &string {
    if document_cache.contains(filename) {
        return document_cache[filename].text
    }
    let text = toolchain::load_file(filename)
    document_cache[filename] = {
        text = text
    } !Document
    return text
}

export def open_document(uri: server::DocumentUri, text: &string) {
    let path = uri_to_path(uri)
    document_cache[path] = { text } !Document
    recompile(path)
}

export def close_document(uri: server::DocumentUri) {
    // TODO
}

def recompile(path: &string) {
    var module = toolchain::find_module(path)

    if not module {
        // Do a full compile
        module = toolchain::consteval_file(path, toolchain::extract_module_name(path))
        typechecking::typecheck(module)
        compiler::compile(module)
    } else {
        // Create a diff and only compile functions as needed
        module = toolchain::consteval_file(path, toolchain::extract_module_name(path))
    }
}

def check_imports(path: &string) -> bool {
    var did_change = false
    let keys = toolchain::modules.keys()
    for var i in 0..keys.size {
        let module = toolchain::modules[keys[i]]
        for var import_ in @map::keys(module.imports) {
            let abspath = toolchain::find_module_file(import_, module)
            if abspath == path {
                recompile(module.filename)
                did_change = true
            }
        }
    }
    return did_change
}

// File system events
export def on_created(uri: server::DocumentUri) {
    let path = uri_to_path(uri)
    if check_imports(path) {
        recompile(path)
    }
}

export def on_changed(uri: server::DocumentUri) {
    let path = uri_to_path(uri)
    if document_cache.contains(path) {
        recompile(path)
    }
}

export def on_deleted(uri: server::DocumentUri) {
    let path = uri_to_path(uri)
    check_imports(path)
    document_cache.remove(path)
}