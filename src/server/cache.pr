import map
import set
import vector
import util
import lexer
import parser
import consteval
import toolchain
import errors
import typechecking
import compiler
import scope
import util

import document
import server

export def setup_error_handler {
    errors::error_handler = *error_handler
}

type DiagnosticSet = &Set(errors::Diagnostic)
type ModuleDiagnostics = struct {
    functions: &SMap(DiagnosticSet)
    diagnostics: DiagnosticSet
}

let diagnostics = map::make(type &ModuleDiagnostics)

def error_to_diagnostic(error: errors::Diagnostic) -> server::Diagnostic {
    return {
        range = {
            start = { error.line, error.column } !server::Position,
            end = { error.end_line, error.end_column } !server::Position
        } !server::Range,
        severity = server::DiagnosticSeverity::Error !int,
        message = error.message
    } !server::Diagnostic
}

def publish_diagnostics(module: &toolchain::Module) {
    if not diagnostics.contains(module.filename) { return }
    let mdiags = diagnostics[module.filename]

    let resolved = vector::make(server::Diagnostic)

    let keys = mdiags.functions.keys()
    for var key in @keys {
        for var diagnostic in @map::keys(mdiags.functions[key]) {   // TODO This is clashing with keys somehow
            resolved.push(error_to_diagnostic(diagnostic))
        }
    }
    for var diagnostic in @map::keys(mdiags.diagnostics) {
        resolved.push(error_to_diagnostic(diagnostic))
    }

    var params: server::PublishDiagnosticsParams
    params.uri = server::path_to_uri(module.filename)
    params.diagnostics = resolved.to_array()

    server::publish_diagnostics(params)
}

export def error_handler(diagnostic: errors::Diagnostic) {
    var mdiags = diagnostics.get_or_default(diagnostic.filename, null)
    if not mdiags {
        mdiags = {
            functions = map::make(DiagnosticSet),
            diagnostics = set::make(errors::Diagnostic)
        } !ModuleDiagnostics
        diagnostics[diagnostic.filename] = mdiags
    }

    if diagnostic.function {
        var fdiags = mdiags.functions.get_or_default(diagnostic.function, null)
        if not fdiags {
            fdiags = set::make(errors::Diagnostic)
            mdiags.functions[diagnostic.function] = fdiags
        }
        fdiags.add(diagnostic)
    } else {
        mdiags.diagnostics.add(diagnostic)
    }
}

export def offset_errors(path: &string, start: server::Position, end: server::Position, text: &string) {
    if not diagnostics.contains(path) { return }
    let mdiags = diagnostics[path]

    for var key in @mdiags.functions.keys() {
        let fdiags = mdiags.functions[key]
        let new = set::make(errors::Diagnostic)
        for var diagnostic in @fdiags.keys() {
            if start.line != end.line or start.character != end.character {
                if diagnostic.line > end.line {
                    diagnostic.line -= end.line - start.line
                    diagnostic.end_line -= end.line - start.line
                }
                if diagnostic.line == end.line and end.character <= diagnostic.column {
                    if diagnostic.line == diagnostic.end_line {
                        if start.line == end.line {
                            diagnostic.column -= end.character - start.character
                            diagnostic.end_column -= end.character - start.character
                        } else {
                            diagnostic.column -= end.character
                            diagnostic.end_column -= end.character
                        }
                    } else {
                        if start.line == end.line {
                            diagnostic.column -= end.character - start.character
                        } else {
                            diagnostic.column -= end.character
                        }
                    }
                }
            }
            if diagnostic.line >= start.line {
                var last_newline = 0
                var nlc = 0
                for var i in 0..text.length() {
                    let c = text[i]
                    if c == '\n' {
                        last_newline = i
                        nlc += 1
                    }
                }
                if nlc > 0 {
                    diagnostic.line += nlc
                    diagnostic.end_line += nlc
                }
                if diagnostic.line == start.line and start.character <= diagnostic.column {
                    diagnostic.column += text.length() - 1 - last_newline
                    diagnostic.end_column += text.length() - 1 - last_newline
                }
            }
            
            new.add(diagnostic)
        }

        mdiags.functions[key] = new
    }
}

def recompile_node(module: &toolchain::Module, node: &parser::Node) {
    if not node { return }
    node.parent = module.node

    // Reset the state
    module.state.scope = module.scope
    module.state.function_stack = vector::make(type &compiler::Function)
    module.state.function_stack.push(module.node.value.program.function)

    module.compiler_state.function_stack = vector::make(type &compiler::Function)
    module.compiler_state.function_stack.push(module.node.value.program.function)
    module.compiler_state.current_block = compiler::make_block()

    if node.kind == parser::NodeKind::DEF {
        if node.svalue {
            var mdiags = diagnostics.get_or_default(module.filename, null)
            if mdiags {
                mdiags.functions.remove(node.svalue.tpe.type_name)
            }
        }
        if node.value.def_.name {
            error("Recompiling function ", parser::identifier_to_str(node.value.def_.name), " ", node.value.def_.name.loc.line, "\n")
        }
        node.scope = module.scope
        consteval::walk_Def(node, module.state)
        if not typechecking::is_polymorph(node.tpe) {
            typechecking::walk_Def(node, module.state)
            compiler::verify_function(node)
            compiler::predeclare_function(node.tpe, module)
            compiler::create_function(node, node.tpe, node.value.def_.body, node.inner_scope, null, module.compiler_state)
        }
    } else if node.kind == parser::NodeKind::VAR_DECL {
        consteval::walk_top_VarDecl(node, module.state)
        typechecking::walk_VarDecl(node, module.state)
        compiler::walk_top_VarDecl(node, module.compiler_state, false)
    } else if node.kind == parser::NodeKind::TYPE_DECL {
        consteval::walk_TypeDecl(node, module.state)
        typechecking::walk_TypeDecl(node, module.state)
        compiler::walk_TypeDecl(node, module.compiler_state)
    }
}

type ToResolve = struct {
    module: &toolchain::Module
    node: &parser::Node
}
export def hash(to_resolve: ToResolve) -> uint64 {
    return (to_resolve.node !*) !uint64
}
export def == (this: ToResolve, other: ToResolve) -> bool {
    return this.node == other.node
}
export def != (this: ToResolve, other: ToResolve) -> bool {
    return not (this == other)
}

var nodes_to_resolve = set::make(ToResolve)

def recompile_nodes {
    for var key in @nodes_to_resolve.keys() {
        recompile_node(key.module, key.node)
    }
    nodes_to_resolve.clear()
}

def queue_node(module: &toolchain::Module, node: &parser::Node) {
    nodes_to_resolve.add({ module, node } !ToResolve)
}

def resolve_dependencies(node: &parser::Node) {
    if node.kind == parser::NodeKind::VAR_DECL {
        for var i in 0..node.value.var_decl.left.length {
            let left = node.value.var_decl.left[i]
            if not left { continue }
            resolve_dependencies(left.svalue)
        } 
    } else if node.kind == parser::NodeKind::TYPE_DECL {
        for var i in 0..node.value.type_decl.left.length {
            let left = node.value.type_decl.left[i]
            if not left { continue }
            resolve_dependencies(left.svalue)
        } 
    } else {
        let value = node.svalue
        resolve_dependencies(value)
    }
}

def resolve_dependencies(value: &scope::Value) {
    if not value { return }
    let keys = value.dependants.keys()
    for var dependant in @keys {
        let node = dependant.module.node
        for var i in 0..node.value.program.body.length {
            let n = node.value.program.body[i]
            if n.svalue and n.svalue.ident == dependant {
                remove(dependant.module, n)
                queue_node(dependant.module, n)
                break
            }
        }
    }
}

def remove(module: &toolchain::Module, node: &parser::Node) {
    let new_queue = set::make(ToResolve)
    for var to_resolve in @nodes_to_resolve.keys() {
        if to_resolve.node != node {
            new_queue.add(to_resolve)
        }
    }
    nodes_to_resolve = new_queue

    if node.kind == parser::NodeKind::VAR_DECL {
        for var i in 0..node.value.var_decl.left.length {
            let left = node.value.var_decl.left[i]
            if not left { continue }
            if left.svalue {
                scope::remove(module.scope, left.svalue)
            }
        } 
    } else if node.kind == parser::NodeKind::TYPE_DECL {
        for var i in 0..node.value.type_decl.left.length {
            let left = node.value.type_decl.left[i]
            if not left { continue }
            if left.svalue {
                scope::remove(module.scope, left.svalue)
            }
        } 
    } else {
        let value = node.svalue
        if value {
            scope::remove(module.scope, value)
            if value.tpe {
                var mdiags = diagnostics.get_or_default(module.filename, null)
                if mdiags {
                    mdiags.functions.remove(value.tpe.type_name)
                }
            }
        }
    }
}

def recompile_unresolved(ident: scope::Ident) {
    let keys1 = toolchain::modules.keys()
    for var key1 in @keys1 {
        let module = toolchain::modules[key1]
        let keys2 = map::keys(module.unresolved)
        for var key2 in @keys2 {
            let value = module.unresolved[key2]
            let keys3 = value.unresolved.keys()
            for var unresolved in @keys3 {
                if unresolved == ident {
                    remove(value.ident.module, value.node)
                    queue_node(value.ident.module, value.node)
                }
            }
        }
    }
}

def recompile_unresolved(node: &parser::Node) {
    if node.kind == parser::NodeKind::DEF {
        let name = typechecking::last_ident_to_str(node.value.def_.name)
        let ident = scope::make_ident(name)
        recompile_unresolved(ident)
    } else if node.kind == parser::NodeKind::VAR_DECL {
        for var i in 0..node.value.var_decl.left.length {
            let left = node.value.var_decl.left[i]
            if not left or left.kind != parser::NodeKind::IDENTIFIER { continue }
            let name = typechecking::last_ident_to_str(left)
            let ident = scope::make_ident(name)
            recompile_unresolved(ident)
        } 
    } else if node.kind == parser::NodeKind::TYPE_DECL {
        for var i in 0..node.value.type_decl.left.length {
            var left = node.value.type_decl.left[i]
            if not left { continue }
            if left.kind == parser::NodeKind::TYPE_CONSTRUCTOR {
                left = left.value.type_constructor.name
            }
            if not left or left.kind != parser::NodeKind::IDENTIFIER { continue }
            let name = typechecking::last_ident_to_str(left)
            let ident = scope::make_ident(name)
            recompile_unresolved(ident)
        } 
    }
}

def find_signature(n: &parser::Node, program: &parser::Node) -> &parser::Node, size_t {
    if n.signature_hash == 0 { return null, 0 }
    for var j in 0..program.value.program.body.length {
        let n2 = program.value.program.body[j]
        if n2 and n2.kind == n.kind {
            if n.signature_hash == n2.signature_hash {
                return n2, j
            }
        }
    }
    return null, 0
}

def transfer_value(frm: &parser::Node, to: &parser::Node) {
    if frm.kind == parser::NodeKind::TYPE_DECL {
        for var i in 0..frm.value.type_decl.left.length {
            let left1 = frm.value.type_decl.left[i]
            let left2 = to.value.type_decl.left[i]
            left2.svalue = left1.svalue
        }
    } else if frm.kind == parser::NodeKind::VAR_DECL {
        for var i in 0..frm.value.var_decl.left.length {
            let left1 = frm.value.var_decl.left[i]
            let left2 = to.value.type_decl.left[i]
            left2.svalue = left1.svalue
        }
    }
}

def insert_at_position(node: &parser::Node, n: &parser::Node) {
    var found = false
    for var j in 0..node.value.program.body.length {
        let n2 = node.value.program.body[j]
        if n2.loc.line > n.loc.line or
            (n2.loc.line == n.loc.line and n2.loc.column > n.loc.column) {
            
            node.value.program.body.insert(j, n)
            found = true
            break
        }
    }
    if not found {
        node.value.program.body.push(n)
    }
}

export def recompile(path: &string) {
    var module = toolchain::find_module_by_path(path)

    let mdiags = diagnostics.get_or_default(path, null)
    if mdiags {
        mdiags.diagnostics = set::make(errors::Diagnostic)
    }

    if not module {
        error("Compiling ", path, "\n")
        // Do a full compile
        module = toolchain::consteval_file(path, toolchain::extract_module_name(path))
        typechecking::typecheck(module)
        compiler::compile(module)
    } else {
        // Create a diff and only compile functions as needed
        let buf = document::load_file(path)
        let lines = util::split_lines(buf)
        let tokens = lexer::lex(buf)
        let new_node = parser::parse(tokens, lines, path, toolchain::extract_module_name(path))
        delete(tokens)

        // Current imports
        var old_imports = module.scope.imports
        if not old_imports {
            old_imports = vector::make(type weak_ref(toolchain::Module))
        }

        // Remove all imports
        module.scope.imports = null
        consteval::import_stdlib(module.state)

        module.state.shallow_walk = true
        consteval::consteval(new_node, module.state)
        module.state.shallow_walk = false

        let node = module.node
        let new_body = vector::make(type &parser::Node)

        // Iterate top level functions
        for var i in 0..new_node.value.program.body.length {
            let n = new_node.value.program.body[i]
            if n.kind != parser::NodeKind::DEF and
                n.kind != parser::NodeKind::VAR_DECL and
                n.kind != parser::NodeKind::TYPE_DECL {
                new_body.push(n)
                continue
            }

            var found = false
            for var j in 0..node.value.program.body.length {
                let n2 = node.value.program.body[j]
                if n2._hash == n._hash {
                    found = true
                    if n2.loc != n.loc { 
                        parser::offset(n2, n)
                        //resolve_dependencies(n2) 
                    }
                    new_body.push(n2)
                    break
                }
            }
            if not found {
                // Check for signatures
                var n2, loc = find_signature(n, node)
                if not n2 {
                    // Add new node
                    new_body.push(n)
                    queue_node(module, n)
                    recompile_unresolved(n)
                } else {
                    remove(module, n2)
                    //transfer_value(n2, n)

                    new_body.push(n)

                    queue_node(module, n)
                    if n.kind != parser::NodeKind::DEF or n2.loc != n.loc {
                        resolve_dependencies(n2)
                    }
                }
            }
        }

        // Remove unused functions from old body
        for var i in 0..node.value.program.body.length {
            let n = node.value.program.body[i]
            if n and n.kind != parser::NodeKind::DEF and
                n.kind != parser::NodeKind::VAR_DECL and
                n.kind != parser::NodeKind::TYPE_DECL {
                continue
            }

            var found = false
            for var j in 0..new_node.value.program.body.length {
                let n2 = new_node.value.program.body[j]
                if n2._hash == n._hash {
                    found = true
                    break
                }
            }
            if not found {
                remove(module, n)
                resolve_dependencies(n)
            }
        }
        
        node.value.program.body = new_body
        node.body = new_body

        parser::offset(node, new_node)

        // compile top level code
        typechecking::typecheck(node, module.state)
        compiler::compile(node, module.compiler_state)

        var new_imports = module.scope.imports
        if not new_imports {
            new_imports = vector::make(type weak_ref(toolchain::Module))
        }
        
        // Compare imports to old imports
        for var i in 0..old_imports.length {
            let imprt = old_imports[i]
            var found = false
            for var j in 0..new_imports.length {
                let nimport = new_imports[j]
                if nimport == imprt {
                    found = true
                    break
                }
            }
            if not found {
                // Remove import
                let all_functions = imprt.scope.all_functions()
                for var j in 0..all_functions.length {
                    let function = all_functions[j]
                    for var dependant in @function.dependants.keys() {
                        if dependant.module == module {
                            let n = dependant.find().node
                            remove(module, n)
                            queue_node(module, n)
                        }
                    }
                }
            }
        }
        for var i in 0..new_imports.length {
            let imprt = new_imports[i]
            var found = false
            for var j in 0..old_imports.length {
                let nimport = old_imports[j]
                if nimport == imprt {
                    found = true
                    break
                }
            }
            if not found {
                // Add import
                let all_functions = imprt.scope.all_functions()
                for var j in 0..all_functions.length {
                    let function = all_functions[j]
                    for var ident in @module.unresolved.keys() {
                        let value = module.unresolved[ident]
                        for var unresolved in @value.unresolved.keys() {
                            if function.ident == unresolved {
                                remove(module, value.node)
                                queue_node(module, value.node)
                            }
                        }
                    }
                }
            }
        }

        recompile_nodes()
    }

    publish_diagnostics(module)
}

export def check_imports(path: &string) -> bool {
    var did_change = false
    let keys = toolchain::modules.keys()
    for var i in 0..keys.size {
        let module = toolchain::modules[keys[i]]
        for var import_ in @map::keys(module.imports) {
            let abspath = toolchain::find_module_file(import_, module)
            if abspath == path {
                recompile(module.filename)
                did_change = true
            }
        }
    }
    return did_change
}