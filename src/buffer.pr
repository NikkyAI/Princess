const INITIAL_SIZE = 8

export type Buffer = struct {
    size: size_t
    allocated: size_t
    value: *char
}

// TODO Rename this to make, am too lazy to do it rn orz
export def make_buffer -> Buffer {
    let buffer = {
        size = 1,
        allocated = INITIAL_SIZE,
        value = zero_allocate((size_of char) * INITIAL_SIZE) !*char
    } !Buffer
    buffer.value[0] = '\0'
    return buffer
}

export def remove_char(buffer: *Buffer, i: size_t) {
    assert(i < buffer.size)
    if buffer.size > 0 {
        memcopy(buffer.value ++ i ++ 1, buffer.value ++ i, buffer.size - i)
    }
    buffer.value[buffer.size - 1] = '\0'
    buffer.size -= 1
}

export def insert(buffer: *Buffer, i: size_t, s: string) {
    if length(s) + (@buffer).size > (@buffer).allocated {
        let new_size = max((@buffer).allocated * 2, (@buffer).size + s.size - 1) !size_t
        (@buffer).allocated = new_size
        (@buffer).value = reallocate((@buffer).value, (size_of char) * new_size)
    }
    if buffer.size > 1 { 
        memcopy(buffer.value ++ i, buffer.value ++ i ++ length(s), buffer.size - i - 1) 
    }
    memcopy(s.value, buffer.value ++ i, length(s))
    buffer.size += length(s)
}

export def insert(buffer: *Buffer, i: size_t, c: char) {
    // TODO Implement properly
    var s: string = zero_allocate(char, 2)
    s[0] = c
    insert(buffer, i, s)
    free(s.value) 
}

export def append_str(buffer: *Buffer, s: string) {
    if length(s) + (@buffer).size > (@buffer).allocated {
        let new_size = max((@buffer).allocated * 2, (@buffer).size + s.size - 1) !size_t
        (@buffer).allocated = new_size
        (@buffer).value = reallocate((@buffer).value, (size_of char) * new_size)
    }
    memcopy(s.value, (@buffer).value ++ (@buffer).size -- 1, s.size)
    (@buffer).size += length(s)
}

export def append_char(buffer: *Buffer, c: char) {
    if 1 + (@buffer).size > (@buffer).allocated {
        // This is always big enough
        let new_size = (@buffer).allocated * 2
        (@buffer).allocated = new_size
        (@buffer).value = reallocate((@buffer).value, (size_of char) * new_size)
    }
    (@buffer).value[(@buffer).size - 1] = c
    (@buffer).value[(@buffer).size] = '\0'
    (@buffer).size += 1
}

export def to_string(buffer: *Buffer) -> string {
    var s: string
    s.value = (@buffer).value
    s.size = (@buffer).size
    return s
}