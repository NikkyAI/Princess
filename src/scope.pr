// TODO Right now only functions get imported into the local namespace
// Should do the same thing with types and variables

import map
import typechecking
import parser
import vector
import buffer
import util
import toolchain

export type Scope

export type Value = struct {
    share: parser::ShareMarker
    modifier: parser::VarDecl
    // Name used by the source code
    name: string
    // Name used by the assembly, might be suffixed with a number
    // in case of shadowed variables
    assembly_name: string
    tpe: *typechecking::Type
    value: *
    scope: *Scope
    // In case multiple values share one name (overloaded functions)
    next: *Value
    forward_declare: bool
    // True if the value is a global value
    global: bool
    // No mangling if extern
    extern: bool
}

export type Scope = struct {
    // Counter for local scopes (shadowing)
    // Starts from 0 for function scopes
    // is -1 for all other scopes
    scope_count: int
    parent: *Scope
    fields: *map::Map
    // This is a list of imported scopes,
    // for resolving names from other modules without
    // specifying the full path
    // Vector of toolchain::Module
    imports: *vector::Vector
}

def get_scope_count(scope: *Scope) -> *int {
    if not scope { return null }
    if (@scope).scope_count >= 0 {
        return *(@scope).scope_count
    }
    return get_scope_count((@scope).parent)
}

def is_global(scope: *Scope) -> bool {
    // TODO Check against builtins
    if (@scope).parent == null { return true }
    scope = (@scope).parent
    if (@scope).parent == null { return true }
    return false
}

export def enter_scope(scope: *Scope) -> *Scope {
    var s = allocate(Scope)
    var scope_count = get_scope_count(scope)
    if scope_count {
        (@scope_count) += 1
    }
    (@s).scope_count = -1
    (@s).parent = scope
    (@s).fields = map::make()
    (@s).imports = null
    return s
}

export def enter_function_scope(scope: *Scope) -> *Scope {
    var s = enter_scope(scope)
    (@s).scope_count = 0
    return s
}

export def exit_scope(scope: *Scope) -> *Scope {
    let parent = (@scope).parent
    let scope_count = get_scope_count(parent)
    if scope_count { 
        @scope_count += 1
    }
    return parent
}

export def get(scope: *Scope, id: *parser::Node) -> *Value

def find_function(node: *parser::Node, v: *Value, parameter_t: *vector::Vector, score: *int) -> *Value {
    if not v { return null }
    if not typechecking::is_function((@v).tpe) {
        return null
    }
    var found: *Value = null
    var d = false
    loop {
        let s = typechecking::overload_score((@v).tpe, parameter_t, false)
        if s >= 0 {
            if s < @score {
                @score = s
                found = v
                d = false
            } else if s == @score {
                d = true
            }
        }
        v = (@v).next
        if not v { break }
    }
    if d {
        typechecking::errorn(node, "Ambiguous reference\n")
    }
    return found
}

export def get_function(scope: *Scope, id: *parser::Node, parameter_t: *vector::Vector) -> *Value {
    assert((@id).kind == parser::NodeKind::IDENTIFIER)
    if vector::length((@id).value.body) == 1 {
        let name = @(vector::get((@id).value.body, 0) !*string)
        var score = util::MAX_INT32 !int
        let first_value = find_function(id, map::get((@scope).fields, name) !*Value, parameter_t, *score)
        let first_score = score
        var value = first_value
        var d = false
        if (@scope).imports {
            for var i in 0..vector::length((@scope).imports) {
                let module = vector::get((@scope).imports, i) !*toolchain::Module
                let scope2 = (@module).scope
                var new_score = util::MAX_INT32 !int
                let new_value = find_function(id, map::get((@scope2).fields, name) !*Value, parameter_t, *new_score)
                if new_value and (@new_value).share !int & parser::ShareMarker::EXPORT !int {
                    if score == new_score {
                        d = true 
                    } else if new_score < score {
                        score = new_score
                        value = new_value
                        d = false
                    }
                }
            }
            if first_value and first_score == score {
                // We always return the declaration in the current file
                // if there are multiple ones with the same score
                return first_value
            }

            if d {
                typechecking::errorn(id, "Ambiguous reference\n")
            }
        }
        if value { return value }
        if (@scope).parent {
            return get_function((@scope).parent, id, parameter_t)
        }
        return null
    } else {
        let head = vector::head_vec((@id).value.body)
        let tail = vector::tail((@id).value.body)

        let id_head = parser::copy_node(id)
        (@id_head).value.body = head
        let id_tail = parser::copy_node(id)
        (@id_tail).value.body = tail

        let s = get(scope, id_head)
        if s {
            if not (@s).scope {
                typechecking::errorn(id, "Use of :: on non namespace\n")
                return null
            }
            return get_function((@s).scope, id_tail, parameter_t)
        }
        return null
    }
}

// TODO We need to error if you reference an overloaded function
// I kinda want this syntax here to be able to reference an overload:
// some_fuction::(int, int)
export def get(scope: *Scope, id: *parser::Node) -> *Value {
    if not scope { return null }
    assert((@id).kind == parser::NodeKind::IDENTIFIER)
    if vector::length((@id).value.body) == 1 {
        let name = @(vector::get((@id).value.body, 0) !*string)
        var value = map::get((@scope).fields, name) !*Value
        if value { return value }
        if (@scope).imports {
            for var i in 0..vector::length((@scope).imports) {
                let module = vector::get((@scope).imports, i) !*toolchain::Module
                let scope2 = (@module).scope
                var value2 = map::get((@scope2).fields, name) !*Value
                if value2 and (@value2).share !int & parser::ShareMarker::EXPORT !int {
                    if value {
                        // TODO save location of values to give better error messages
                        typechecking::errorn(id, "Ambiguous reference\n")
                        return null
                    }
                    value = value2
                }
            }
        }
        if value { return value }
        if (@scope).parent {
            return get((@scope).parent, id)
        }
        return null
    } else {
        let head = vector::head_vec((@id).value.body)
        let tail = vector::tail((@id).value.body)

        let id_head = parser::copy_node(id)
        (@id_head).value.body = head
        let id_tail = parser::copy_node(id)
        (@id_tail).value.body = tail

        let s = get(scope, id_head)
        if s {
            if not (@s).scope {
                typechecking::errorn(id, "Use of :: on non namespace\n")
                return null
            }
            return get((@s).scope, id_tail)
        }
        return null
    }
}

export def get_const_value(scope: *Scope, id: *parser::Node) -> *Value {
    let value = get(scope, id)
    if not value {
        typechecking::errorn(id, "Unknown identifier \"")
        error(parser::identifier_to_str(id), "\"\n")
        return null
    }
    assert((@value).modifier == parser::VarDecl::CONST or (@value).modifier == parser::VarDecl::TYPE)
    return value
}

export def get_type(scope: *Scope, id: *parser::Node) -> *typechecking::Type {
    let value = get_const_value(scope, id)
    if not value { return null }
    assert((@value).modifier == parser::VarDecl::TYPE)
    return (@value).value !*typechecking::Type
}

export def enter_namespace(scope: *Scope, node: *parser::Node) -> *Scope

// This function creates the namespaces for identifiers like 
// namespace::path::foo
// beware, this function can return null
def create_path(scope: *Scope, node: *parser::Node) -> *Scope {
    assert((@node).kind == parser::NodeKind::IDENTIFIER)

    let length = vector::length((@node).value.body)
    for var i in 0..length - 1 {
        let ident = vector::get((@node).value.body, i) !*string
        let scope_v = map::get((@scope).fields, @ident) !*Value
        if not scope_v {
            let n = parser::copy_node(node)
            let vec = vector::make()
            vector::push(vec, ident)
            (@n).value.body = vec
            scope = enter_namespace(scope, n)
        } else {
            if not (@scope_v).scope {
                typechecking::errorn(node, "Illegal declaration of ")
                error(parser::identifier_to_str(node), "\n")
                return null
            } else {
                scope = (@scope_v).scope
            }
        }
    }
    return scope
}

// Returns the last element in a path, eg Element for path::Element
def last_path_element(node: *parser::Node) -> string {
    assert((@node).kind == parser::NodeKind::IDENTIFIER)
    let length = vector::length((@node).value.body)
    return @(vector::get((@node).value.body, length - 1) !*string)
}

import debug

// TODO Give better error messages, where was the function/variable declared previously?
export def create_function(
    scope: *Scope, node: *parser::Node, share: parser::ShareMarker, 
    tpe: *typechecking::Type, forward_declare: bool) {

    assert((@tpe).kind == typechecking::TypeKind::FUNCTION)

    scope = create_path(scope, node)
    if not scope { return }
    let name = last_path_element(node)
    
    let v = allocate(Value)
    @v = {
        share = share,
        modifier = parser::VarDecl::CONST,
        name = name,
        assembly_name = name,
        tpe = tpe,
        forward_declare = forward_declare,
        global = is_global(scope)
    } !Value

    if map::contains((@scope).fields, name) {
        var val = map::get((@scope).fields, name) !*Value
        if not typechecking::is_function((@val).tpe) {
            typechecking::errorn(node, "Redeclaration of ")
            error("\"", name, "\"\n")
        }
        var next = val
        while next {
            if typechecking::overload_score((@next).tpe, (@tpe).parameter_t, true) == 0 {
                if not (@next).forward_declare {
                    typechecking::errorn(node, "Function ")
                    error("\"", name, "\" was already declared previously (same arguments)\n")
                } else if not forward_declare {
                    (@next).forward_declare = false
                }
                return
            }
            if (@next).next {
                next = (@next).next
            } else {
                break
            }
        }
        (@next).next = v
    } else {
        map::put((@scope).fields, name, v)
    }
}

def append_scope_count(scope: *Scope, name: string) -> string {
    let scope_count = get_scope_count(scope)
    if scope_count {
        let buf = buffer::make_buffer()
        buffer::append_str(*buf, name)
        buffer::append_char(*buf, '.')
        buffer::append_str(*buf, util::int_to_str(@scope_count))
        return buffer::to_string(*buf)
    }
    return name
}

export def create_variable_ext(
    scope: *Scope, node: *parser::Node, share: parser::ShareMarker, 
    modifier: parser::VarDecl, tpe: *typechecking::Type, extern: bool, value: *) {
    
    scope = create_path(scope, node)
    if not scope { return }
    let name = last_path_element(node)

    let global = is_global(scope)
    let v = allocate(Value)
    @v = {
        share = share,
        modifier = modifier,
        name = name,
        tpe = tpe,
        value = value,
        global = global,
        extern = extern
    } !Value

    if extern {
        (@v).assembly_name = name
    } else if global {
        (@v).assembly_name = typechecking::append_module(name, (@node).loc.module)
    } else {
        (@v).assembly_name = append_scope_count(scope, name)
    }

    if map::contains((@scope).fields, name) {
        typechecking::errorn(node, "Redeclaration of ")
        error("\"", name, "\"\n")
    } else {
        map::put((@scope).fields, name, v)
    }
}

export def create_variable(
    scope: *Scope, node: *parser::Node, share: parser::ShareMarker, 
    modifier: parser::VarDecl, tpe: *typechecking::Type, value: *) {
    
    create_variable_ext(scope, node, share, modifier, tpe, false, value)
}

export def create_type(
    scope: *Scope, node: *parser::Node, 
    share: parser::ShareMarker, tpe: *typechecking::Type) -> bool {
    
    scope = create_path(scope, node)
    if not scope { return false }
    let name = last_path_element(node)

    let v = allocate(Value)
    @v = {
        share = share,
        modifier = parser::VarDecl::TYPE,
        name = name,
        assembly_name = name,
        tpe = typechecking::type_,
        value = tpe,
        scope = (@tpe).scope,
        global = is_global(scope)
    } !Value


    let value = map::get((@scope).fields, name) !*Value
    if value {
        let tpe2 = (@value).value !*typechecking::Type
        if (@(@value).tpe).kind != typechecking::TypeKind::TYPE or
            (@tpe2).kind != typechecking::TypeKind::STUB and    
            (@tpe).kind != typechecking::TypeKind::STUB {
            typechecking::errorn(node, "Redeclaration of ")
            error("\"", name, "\"\n")
            return false
        } else if (@tpe2).kind == typechecking::TypeKind::STUB and
            (@tpe).kind != typechecking::TypeKind::STUB {
            @tpe2 = @tpe
            @value = @v
        }
    } else {
        map::put((@scope).fields, name, v)
    }
    return true
}

export def enter_namespace(scope: *Scope, node: *parser::Node) -> *Scope {
    
    scope = create_path(scope, node)
    if not scope { return null }
    let name = last_path_element(node)
    let tpe = typechecking::make_type(typechecking::TypeKind::NAMESPACE, node)
    let scope2 = enter_scope(scope)

    let v = allocate(Value)
    @v = {
        share = parser::ShareMarker::NONE,
        modifier = parser::VarDecl::CONST,
        name = name,
        assembly_name = name,
        tpe = tpe,
        scope = scope2,
        global = is_global(scope)
    } !Value

    if map::contains((@scope).fields, name) {
        typechecking::errorn(node, "Redeclaration of ")
        error("\"", name, "\"\n")
    } else {
        map::put((@scope).fields, name, v)
    }
    return scope2
}

export def insert_module(scope: *Scope, alias: *parser::Node, module: *toolchain::Module) {
    // Don't import the same module twice
    if (@scope).imports {
        for var i in 0..vector::length((@scope).imports) {
            let module2 = vector::get((@scope).imports, i) !*toolchain::Module
            if (@module).filename == (@module2).filename { return }
        }
    }

    let v = get(scope, alias)
    var ns: *Scope = null
    if v and (@(@v).tpe).kind == typechecking::TypeKind::NAMESPACE {
        ns = (@v).scope
    } else {
        ns = enter_namespace(scope, alias)
    }
    if not ns { return }
    let values = map::keys((@(@module).scope).fields)
    for var i in 0..values.size {
        let value = map::get((@(@module).scope).fields, values[i]) !*Value
        if (@value).share !int & parser::ShareMarker::EXPORT !int {
            map::put((@ns).fields, values[i], value)
        }
    }
    if not (@scope).imports {
        (@scope).imports = vector::make()
    }
    vector::push((@scope).imports, module)
}