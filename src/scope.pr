import map
import set
import typechecking
import parser
import vector
import util
import toolchain
import debug
import builtins
import compiler
import errors
import consteval

// This is used to uniquely identify a value
export type Ident = struct {
    name: &string
    _hash: uint64
    module: weak_ref(toolchain::Module)
}

export def make_ident(name: &string, module: &toolchain::Module = null) -> Ident {
    return {
        name = name,
        _hash = hash(name),
        module = module
    } !Ident
}

export def hash(ident: Ident) -> uint64 {
    return combine_hashes(ident._hash, hash(ident.module.module) if ident.module else 0)
}
export def == (this: Ident, other: Ident) -> bool {
    if not other.module {
        return this.name == other.name
    } else {
        return this.name == other.name and 
            this.module == other.module
    }
}
export def != (this: Ident, other: Ident) -> bool {
    return not (this == other)
}

export def find(ident: Ident) -> &Value {
    if not ident.module { return null }

    let scope = ident.module.scope
    let functions = scope.all_functions()
    for var i in 0..functions.length {
        let fun = functions[i]
        if fun.ident == ident {
            return fun
        }
    }
    return null
}

export type Value = struct {
    // This is needed to store the location
    name_node: weak_ref(parser::Node)
    share: parser::ShareMarker
    modifier: parser::VarDecl
    // Name used by the source code
    name: &string
    // Name used by the assembly, might be suffixed with a number
    // in case of shadowed variables
    assembly_name: &string
    tpe: &typechecking::Type
    value: &compiler::Value
    _scope: &Scope
    _module: weak_ref(Scope) // This is needed for modules referencing each other
    // In case multiple values share one name (overloaded functions)
    next: &Value
    phase: Phase
    // True if the value is a global value
    global: bool
    // No mangling if extern
    extern: bool
    dllimport: bool
    // Definition of the value
    node: weak_ref(parser::Node)
    state: &typechecking::State
    // For imported scopes, this checks if a value is exported before accessing it
    imported: bool
    previous_underscore: &Value

    ident: Ident
    dependencies: &Set(Ident)
    // This belongs to functions that aren't found
    unresolved: &Set(Ident)
    dependants: &Set(Ident)
    is_capture: bool
    // TODO This is a strong reference to the identifier
    // It's needed because of compiler::create_type
    identifier: &parser::Node
}

export def loc(value: &Value) -> parser::SourceLoc {
    if not value.name_node { 
        if value.tpe and value.tpe.kind == typechecking::TypeKind::NAMESPACE {
            let module = value._module.module
            return {
                module.filename,
                module.module,
                0, 0, 0, 0
            } !parser::SourceLoc
        }
        return parser::invalid_loc
    }

    let loc = value.name_node.loc
    if not loc.filename {
        return parser::invalid_loc
    }
    return loc
}

export def get_scope(value: &Value) -> &Scope {
    if value._module {
        return value._module
    }
    return value._scope
}

export type Scope = struct {
    module: weak_ref(toolchain::Module)
    is_function: bool
    // Counter for local scopes (shadowing)
    scope_count: int
    parent: weak_ref(Scope)
    fields: &SMap(&Value)
    // This is a list of imported scopes,
    // for resolving names from other modules without
    // specifying the full path
    // Vector of toolchain::Module
    imports: &Vector(weak_ref(toolchain::Module))
    // Current underscore
    underscore: &Value
    underscore_count: int
}

export type Phase = enum {
    DECLARED; DEFINED; COMPILED
}

export def create_dependency(this: &Value, other: &parser::Node) {
    if other.svalue {
        create_dependency(this, other.svalue)        
    } else {
        var ident = other
        if other.kind == parser::NodeKind::TYPE_CONSTRUCTOR {
            ident = other.value.type_constructor.name
        }
        if ident and ident.kind == parser::NodeKind::IDENTIFIER {
            create_dependency(this, make_ident(parser::identifier_to_str(ident)))
        }
    }
}

export def create_dependency_on_type(this: &Value, node: &parser::Node) {
    if not node { return }
    let other = node.svalue
    if not other {
        // TODO We need to check for type here for some reason, without this enums from other files get caught
        // Figure out why instead of working around the problem
        if node.kind == parser::NodeKind::IDENTIFIER and not node.tpe or node.tpe.kind == typechecking::TypeKind::STUB {
            errors::errorn(node, "Unknown type")
            create_dependency(this, make_ident(parser::identifier_to_str(node)))
        }
        return
    }
    if other.modifier == parser::VarDecl::TYPE {
        let tpe = other.value.value_tpe
        if tpe {
            if tpe.kind == typechecking::TypeKind::STUB {
                create_dependency(this, make_ident(other.name))
                errors::errorn(node, "Can't refer to stub type")
                return
            }
        } else {
            errors::errorn(node, "Unknown type")
            if node.kind == parser::NodeKind::IDENTIFIER {
                create_dependency(this, make_ident(parser::identifier_to_str(node)))
            }
        }
    }
    create_dependency(this, other)
}

export def create_dependency(this: &Value, other: &Value) {
    if not this or not other { return }
    if not this.dependencies or not other.dependants { return }
    if this.ident == other.ident { return }

    this.dependencies.add(other.ident)
    other.dependants.add(this.ident)
}

export def create_dependency(this: &Value, other: Ident) {
    if not this { return }
    if not this.dependencies or not this.unresolved { return }
    if this.ident == other { return }
    this.unresolved.add(other)
    this.ident.module.unresolved[this.ident] = this
}

def get_scope_count(scope: &Scope) -> int {
    if not scope { return 0 }
    if scope.is_function { return 0 }
    return scope.scope_count
}

export def is_global(scope: &Scope) -> bool {
    if not scope { return true }
    // TODO Check against builtins
    if (@scope).parent == null { return true }
    scope = (@scope).parent
    if (@scope).parent == null { return true }
    return false
}

def get_function_parent(scope: &Scope) -> &Scope {
    if scope.is_function { return scope }
    if scope.parent { return get_function_parent(scope.parent) }
    return null
}

export def enter_scope(scope: &Scope, module: &toolchain::Module) -> &Scope {
    let s = {
        module = module,
        parent = scope,
        fields = map::make(type &Value),
        underscore_count = scope.underscore_count if scope else 0
    } !&Scope
    let function_parent = get_function_parent(s)
    if function_parent {
        function_parent.scope_count += 1
        s.scope_count = function_parent.scope_count
    }
    return s
}

export def enter_scope(scope: &Scope) -> &Scope {
    assert scope != null
    return enter_scope(scope, scope.module)
}

export def enter_function_scope(scope: &Scope, module: &toolchain::Module) -> &Scope {
    return {
        module = module,
        parent = scope,
        fields = map::make(type &Value),
        is_function = true,
        scope_count = 0
    } !&Scope
}

export def enter_function_scope(scope: &Scope) -> &Scope {
    assert scope != null
    return enter_function_scope(scope, scope.module)
}

export def exit_scope(scope: &Scope) -> &Scope {
    let parent = (@scope).parent
    return parent
}

// TODO Make this a generator
export def all_functions(scope: &Scope) -> &Vector(&Value) {
    let ret = vector::make(type &Value)
    for var key in @scope.fields.keys() {
        var value = scope.fields[key]
        if value.modifier == parser::VarDecl::CONST and 
            value.tpe.kind == typechecking::TypeKind::FUNCTION {
            ret.push(value)
            value = value.next
            while value {
                ret.push(value)
                value = value.next
            }
        }
    }
    return ret
}

def find_functions(value: &Value, resolved: &SMap(&Vector(&typechecking::Type)), result: &Vector(&typechecking::Type), template: &typechecking::Type) {
    if not value { return }

    let function = value.tpe
    let new_resolved = map::make(type &typechecking::Type)
    if vector::length(function.parameter_t) == vector::length(template.parameter_t) and
        vector::length(function.return_t) == vector::length(template.return_t) {
        var equal = true
        // TODO What about varargs functions?
        for var i in 0..vector::length(function.parameter_t) {
            let left = function.parameter_t[i]
            let right = template.parameter_t[i]
            if not typechecking::equals(left.tpe, right.tpe) {
                equal = false
                break
            } else if right.tpe.kind == typechecking::TypeKind::VARIANT {
                let old = new_resolved.get_or_default(right.tpe.name, null)
                if old and not typechecking::equals(old, left.tpe) {
                    equal = false
                    break
                }
                new_resolved[right.tpe.name] = left.tpe
            }
        }
        if equal {
            for var i in 0..vector::length(function.return_t) {
                let left = function.return_t[i]
                let right = template.return_t[i]
                if not typechecking::equals(left, right) {
                    equal = false
                    break
                } else if right.kind == typechecking::TypeKind::VARIANT {
                    let old = new_resolved.get_or_default(right.name, null)
                    if old and not typechecking::equals(old, left) {
                        equal = false
                        break
                    }
                    new_resolved[right.name] = left
                }
            }
        }
        if equal {
            let keys = map::keys(new_resolved)
            for var i in 0..keys.size {
                let key = keys[i]
                let tpe = new_resolved[key]
                var vec = resolved.get_or_default(key, null)
                if not vec { vec = vector::make(type &typechecking::Type) }
                vec.push(tpe)
                resolved[key] = vec
            }
            result.push(function)
        }
    }
}

export def find_functions(scope: &Scope, node: &parser::Node, template: &typechecking::Type) -> &Vector(&typechecking::Type), &SMap(&Vector(&typechecking::Type)) {
    assert template.kind == typechecking::TypeKind::FUNCTION

    var resolved = map::make(type &Vector(&typechecking::Type))
    var result = vector::make(type &typechecking::Type)
    
    var first_value = get_function(scope, node, template.parameter_t, true)
    find_functions(first_value, resolved, result, template)

    var value = get(scope, node)
    if not value or not typechecking::is_function(value.tpe) {
        return result, resolved
    }
    while value != null {
        if value != first_value {
            find_functions(value, resolved, result, template)
        }
        value = value.next
    }

    return result, resolved
}

def find_function(scope: &Scope, node: &parser::Node, v: &Value, parameter_t: &Vector(typechecking::NamedParameter), score: *int, dry_run: bool) -> bool, &Value {
    for var i in 0..vector::length(parameter_t) {
        let np = parameter_t[i]
        if not np.tpe { return false, null }
    }
    
    var generated = false
    if node.value.identifier.types {
        // We disregard the parameters and only look at the identifier
        // The calling function must check the overload score manually
        if not v {
            let generated = generate_function(scope, node, node.value.identifier.types, true)
            return generated != null, generated
        }

        if not is_function(v.tpe) { return false, null }

        loop {
            if not v { break }
            let s = typechecking::overload_score(v.tpe, node.value.identifier.types, scope.module, true)
            if s == 0 {
                @score = 0
                return true, v
            }
            v = v.next
            if not v {
                if generated {
                    break
                } else {
                    if @score != 0 {
                        v = generate_function(scope, node, node.value.identifier.types, true)
                    }
                    generated = true
                }
            }
        }
        return false, null
    }

    if not v {
        let generated = generate_function(scope, node, parameter_t, dry_run)
        return generated != null, generated
    }

    if not is_function(v.tpe) { return false, null }
    
    var found: &Value = null
    var d = false
    loop {
        if not v { break }
        if v.node and v.state {
            v.tpe = typechecking::lookup_parameters(v.node, v.state)
        }

        let s = typechecking::overload_score(v.tpe, parameter_t, scope.module, false)
        if s >= 0 {
            if s < @score {
                @score = s
                found = v
                d = false
            } else if s == @score {
                d = true
            }
        }
        v = v.next
        if not v {
            if generated {
                break
            } else {
                v = generate_function(scope, node, parameter_t, dry_run)
                generated = true
            }
        }
        
    }
    if d {
        if not dry_run { errors::errorn(node, "Ambiguous reference") }
        return true, null
    }
    return found != null, found
}

export def has_function(scope: &Scope, ftpe: &typechecking::Type) -> bool {
    var value = get(scope, parser::make_identifier(ftpe.name), false, false, true)
    if value and is_function(value.tpe) {
        while value {
            if value.tpe.type_name == ftpe.type_name {
                return true
            }
            value = value.next
        }
    }
    return false
}

export def remove(scope: &Scope, value: &Value) {
    if not value or not scope { return }
    let keys = scope.fields.keys()
    for var key in @keys {
        var v = scope.fields[key]
        if v !* == value !* {
            scope.fields.remove(key)
            if v.next {
                scope.fields[key] = v.next
            }
        } else {
            var prev = v
            v = v.next
            while v {
                if v !* == value !* {
                    prev.next = v.next
                    break
                }
                prev = v
                v = v.next
            }
        }
    }
}

def generate_function(scope: &Scope, node: &parser::Node, parameter_t: &Vector(typechecking::NamedParameter), dry_run: bool) -> &Value {
    let module = scope.module
    while not is_global(scope) {
        scope = scope.parent
    }
    
    let name = last_path_element(node)
    if vector::length(parameter_t) >= 1 {
        var first_parameter = parameter_t[0]
        if not first_parameter.tpe { return null }
        if first_parameter.tpe.kind == typechecking::TypeKind::REFERENCE and 
            (first_parameter.tpe.tpe and first_parameter.tpe.tpe.kind == typechecking::TypeKind::STRUCTURAL) {
            
            let equals = get(toolchain::runtime_.scope, parser::make_identifier("equals"))
            consteval::compile_function(equals.node, equals.state)

            let parameter_t2 = vector::copy(parameter_t)
            vector::remove(parameter_t2, 0)

            let stpe = first_parameter.tpe.tpe
            let module = stpe.module
            let scope = module.scope

            var duplicate = false
            let least_score = std::MAX_INT32 !int
            var found_member: *typechecking::StructuralTypeMember = null
            for var i in 0..vector::length(stpe.members) {
                let member = stpe.members.get(i)
                if member.name != name { continue }

                let score = typechecking::overload_score(member.parameter_t, vector::make(type &typechecking::Type), parameter_t2, scope.module, false)
                if score < least_score {
                    found_member = member
                    duplicate = false
                } else if score == least_score {
                    duplicate = true
                }
            }

            if duplicate {
                if not dry_run { errors::errorn(node, "Ambiguous referernce") }
                return null
            }
            if not found_member { return null }

            let name_node = parser::make_identifier(name)
            let parameter_t3 = typechecking::copy_parameter_t(found_member.parameter_t)
            let return_t = typechecking::copy_return_t(found_member.return_t)
            let types_map = map::make(type &typechecking::Type)

            if stpe.tc_args {
                for var i in 0..vector::length(stpe.tc_tpe.parameter_t) {
                    let np = stpe.tc_tpe.parameter_t[i]
                    let tpe = stpe.tc_args[i]
                    types_map[np.name] = tpe
                }
            }

            typechecking::replace_type_defs(parameter_t3, return_t, parameter_t2, types_map, module)
            
            vector::insert(parameter_t3, 0,  {
                name = "__ref",
                tpe = first_parameter.tpe
            } !typechecking::NamedParameter)
            let tpe = typechecking::make_function_type_n(name_node, parameter_t3, return_t, module)
            if has_function(scope, tpe) { return null }

            let value = create_function(scope, name_node, stpe.share, tpe)
            module.dyn_dispatch.push(tpe)
            return value
        } else if vector::length(parameter_t) == 1 and first_parameter.tpe.kind == typechecking::TypeKind::POINTER and 
            name == "__destruct__" and typechecking::has_destructor(first_parameter.tpe.tpe) {
            
            let args = vector::make(typechecking::NamedParameter)
            args.push({
                name = "__ptr",
                tpe = first_parameter.tpe
            } !typechecking::NamedParameter)

            let name_node = parser::make_identifier("__destruct__")
            let tpe = typechecking::make_function_type_n(name_node, args, vector::make(type &typechecking::Type))
            if has_function(builtins::builtins, tpe) { return null }

            let value = create_function(builtins::builtins, name_node, parser::ShareMarker::EXPORT, tpe)
            if module {
                compiler::predeclare_function(tpe, module)
            }
            compiler::destructors[debug::type_to_str(first_parameter.tpe, full_name = true)] = tpe
            return value
        } else if vector::length(parameter_t) == 2 and first_parameter.tpe.kind == typechecking::TypeKind::POINTER and
            name == "__construct__" and typechecking::has_copy_constructor(first_parameter.tpe.tpe, lookup = false) {
            let second_parameter = vector::get(parameter_t, 1) !*NamedParameter
            if equals(second_parameter.tpe, first_parameter.tpe) {
                
                let args = vector::make(typechecking::NamedParameter)
                args.push({
                    name = "__copy",
                    tpe = first_parameter.tpe
                } !typechecking::NamedParameter)
                args.push({
                    name = "__this",
                    tpe = second_parameter.tpe
                } !typechecking::NamedParameter)

                let name_node = parser::make_identifier("__construct__")
                let tpe = typechecking::make_function_type_n(name_node, args, vector::make(type &typechecking::Type))
                if has_function(builtins::builtins, tpe) { return null }
                
                let value = create_function(builtins::builtins, name_node, parser::ShareMarker::EXPORT, tpe)
                if module {
                    compiler::predeclare_function(tpe, module)
                }
                compiler::constructors[debug::type_to_str(first_parameter.tpe, full_name = true)] = tpe
                return value
            }
        }
    }
    return null
}

export def get_underscore(scope: &Scope) -> &Value {
    if scope.underscore { return scope.underscore }
    if scope.parent { return get_underscore(scope.parent) }
    return null
}

export def create_underscore(scope: &Scope, name_node: &parser::Node, tpe: &typechecking::Type) -> &Value {
    while not scope.is_function {
        scope = scope.parent
    }
    let value = {
        name_node = name_node,
        share = parser::ShareMarker::NONE,
        modifier = parser::VarDecl::VAR,
        tpe = tpe,
        global = is_global(scope),
        phase = Phase::COMPILED,
        name = "_",
        assembly_name = "_." + scope.underscore_count,
        previous_underscore = scope.underscore
    } !&Value
    scope.underscore_count += 1

    scope.underscore = value

    return value
}

export def typecheck_function(value: &Value, id: &parser::Node, scope: &Scope, dry_run: bool, parameter_t: &Vector(typechecking::NamedParameter)) -> &Value {
    id.svalue = null
    let tpe = typechecking::lookup_parameters(value.node, value.state)
    if typechecking::is_polymorph(value.tpe) {
        typechecking::walk_Def_with_type_argument(value.node, parameter_t, value.state)
        return get_function(scope, id, parameter_t, false, dry_run, false)
    } else {
        value.node.tpe = tpe
        typechecking::walk_Def(value.node, value.state)
        return value
    }
}

export def typecheck(value: &Value) {
    if not value.node { return }
    if value.node.kind == parser::NodeKind::DEF {
        let tpe = typechecking::lookup_parameters(value.node, value.state)
        if not typechecking::is_polymorph(tpe) {
            value.node.tpe = tpe
            value.tpe = tpe
            typechecking::walk_Def(value.node, value.state)
        }
    } else {
        typechecking::walk(value.node.parent, value.node, value.state)
    }
}

export def get_function_check(
    scope: &Scope, 
    id: &parser::Node, 
    parameter_t: &Vector(typechecking::NamedParameter), 
    check_export: bool = false, 
    dry_run: bool = false, 
    force_compile: bool = true, 
    only_function: bool = false
) -> bool, &Value {

    if not scope { return false, null }
    if id.svalue { return true, id.svalue }
    
    assert((@id).kind == parser::NodeKind::IDENTIFIER)
    if vector::length((@id).value.identifier.path) == 1 {
        let name = @((@id).value.identifier.path[0])
        var score = std::MAX_INT32 !int
        var code = false

        // We need to store this to check later that there's no entry by that name
        let first_value = scope.fields.get_or_default(name, null)
        let (code), first_function = find_function(scope, id, first_value, parameter_t, *score, dry_run)
        let first_score = score
        var value = first_function
        var d = false
        if (@scope).imports and not check_export {
            for var i in 0..vector::length((@scope).imports) {
                let module = (@scope).imports[i]
                let scope2 = (@module).scope
                var new_score = std::MAX_INT32 !int
                let code2, new_value = find_function(scope, id, scope2.fields.get_or_default(name, null), parameter_t, *new_score, dry_run)
                if code2 { code = true }
                if new_value and (@new_value).share !int & parser::ShareMarker::EXPORT !int {
                    if score == new_score {
                        d = true 
                    } else if new_score < score {
                        score = new_score
                        value = new_value
                        d = false
                    }
                }
            }
            if first_function and first_score == score {
                // We always return the declaration in the current file
                // if there are multiple ones with the same score
                value = first_function
            } else if d {
                if not dry_run { errors::errorn(id, "Ambiguous reference") }
                return true, null
            }
        }
        if not value and (@scope).parent and (not first_value or only_function) {
            code, value = get_function_check((@scope).parent, id, parameter_t, check_export, dry_run, force_compile, only_function)
        }
        if not value and vector::length(parameter_t) > 0 {
            let first_param = parameter_t[0]
            let module = typechecking::get_module(first_param.tpe)
            if first_param.tpe and module and module != scope.module {
                let scope = module.scope
                var new_score = std::MAX_INT32 !int
                let code2, new_value = find_function(scope, id, scope.fields.get_or_default(name, null), parameter_t, *new_score, dry_run)
                if code2 { code = true }
                if new_value and new_value.share !int & parser::ShareMarker::EXPORT !int {
                    value = new_value
                }
            }
        }
        if value and value.phase == Phase::DEFINED and force_compile {
            value = typecheck_function(value, id, scope, dry_run, parameter_t)
        }
        if value and check_export and (value.share !int & parser::ShareMarker::EXPORT !int) == 0 {
            value = null
        }
        id.svalue = value
        return code, value
    } else {
        let head = vector::head_vec((@id).value.identifier.path)
        let tail = vector::tail((@id).value.identifier.path)

        let id_head = parser::copy_node(id)
        (@id_head).value.identifier.path = head
        let id_tail = parser::copy_node(id)
        (@id_tail).value.identifier.path = tail

        let s = get(scope, id_head)
        if s {
            if not s.get_scope() {
                if not dry_run { errors::errorn(id, "Use of :: on non namespace") }
                return false, null
            }
            // TODO this should be able to go on one line
            let code, value = get_function_check(s.get_scope(), id_tail, parameter_t, s.imported, dry_run, force_compile, only_function)
            id.svalue = value
            return code, value
        }
        return false, null
    }
}
export def get_function(
    scope: &Scope, 
    id: &parser::Node, 
    parameter_t: &Vector(typechecking::NamedParameter), 
    check_export: bool, 
    dry_run: bool, 
    force_compile: bool = true, 
    only_function: bool = false) -> &Value {

    let _, value = get_function_check(scope, id, parameter_t, check_export, dry_run, force_compile, only_function)
    return value
}

export def get_function(scope: &Scope, id: &parser::Node, parameter_t: &Vector(typechecking::NamedParameter), dry_run: bool) -> &Value {
    return get_function(scope, id, parameter_t, false, dry_run)
}

export def get_function(scope: &Scope, id: &parser::Node, parameter_t: &Vector(typechecking::NamedParameter)) -> &Value {
    return get_function(scope, id, parameter_t, false, false)
}

export def get(scope: &Scope, id: &parser::Node, force_compile: bool = true, check_export: bool = false, dry_run: bool = false) -> &Value {
    if not scope { return null }
    assert((@id).kind == parser::NodeKind::IDENTIFIER)
    //TODO This optimization screws with incremental compilation
    //if id.svalue { return id.svalue }

    if vector::length((@id).value.identifier.path) == 1 {
        let name = @((@id).value.identifier.path[0])
        if name == "_" { 
            return get_underscore(scope) 
        }
        var value = scope.fields.get_or_default(name, null)
        if value { 
            if id.value.identifier.types {
                var score = 0
                let _, (value) = find_function(scope, id, value, id.value.identifier.types, *score, true)

                if value and force_compile and value.phase == Phase::DEFINED {
                    value = typecheck_function(value, id, scope, false, id.value.identifier.types)
                }
                id.svalue = value
                return value
            } else if is_function(value.tpe) and id.parent and id.parent.kind == parser::NodeKind::PTR and value.next {
                if not dry_run { errors::errorn(id, "Ambiguous reference") }
                return null
            }

            if value and force_compile and value.phase == Phase::DEFINED {
                typecheck(value)
            }
        } else if scope.imports and not check_export and not value {
            for var i in 0..vector::length((@scope).imports) {
                let module = (@scope).imports[i]
                let scope2 = (@module).scope
                var value2 = scope2.fields.get_or_default(name, null)
                
                if value2 and (@value2).share !int & parser::ShareMarker::EXPORT !int {
                    if value {
                        // TODO save location of values to give better error messages
                        if not dry_run { 
                            errors::errorn(id, "Ambiguous reference") 
                        }
                        return null
                    }

                    if id.value.identifier.types {
                        var score = 0
                        let _, (value2) = find_function(scope, id, value2, id.value.identifier.types, *score, true)
                        if value2 and force_compile and value2.phase == Phase::DEFINED {
                            value2 = typecheck_function(value2, id, scope, false, id.value.identifier.types)
                        }
                    } else {
                        if force_compile and value2.phase == Phase::DEFINED {
                            typecheck(value2)
                        }
                    }
                    value = value2
                }
            }
        }
        if not value and (@scope).parent {
            value = get((@scope).parent, id, force_compile, check_export, dry_run)
        }
        if value and check_export and (value.share !int & parser::ShareMarker::EXPORT !int) == 0 {
            value = null
        }
        if not value and id.value.identifier.types {
            value = generate_function(scope, id, id.value.identifier.types, dry_run)
        }
        id.svalue = value
        return value
    } else {
        let head = vector::head_vec((@id).value.identifier.path)
        let tail = vector::tail((@id).value.identifier.path)

        let id_head = parser::copy_node(id)
        (@id_head).value.identifier.path = head
        let id_tail = parser::copy_node(id)
        (@id_tail).value.identifier.path = tail

        let s = get(scope, id_head, force_compile, false, dry_run)
        if s {
            if not s.get_scope() {
                errors::errorn(id, "Use of :: on non namespace")
                return null
            }
            let value = get(s.get_scope(), id_tail, force_compile, s.imported, dry_run)
            id.svalue = value
            return value
        }
        return null
    }
}

export def get_const_value(scope: &Scope, id: &parser::Node) -> &Value {
    let value = get(scope, id)
    if not value {
        errors::errorn(id, "Unknown identifier `", parser::identifier_to_str(id), "`")
        return null
    }
    if value.modifier != parser::VarDecl::CONST and value.modifier != parser::VarDecl::TYPE {
        return null
    }
    return value
}

export def get_type(scope: &Scope, id: &parser::Node) -> &typechecking::Type {
    let value = get_const_value(scope, id)
    if not value { return null }
    if (@value).modifier != parser::VarDecl::TYPE {
        return null
    }
    return (@value).value.value_tpe
}

// This function creates the namespaces for identifiers like 
// namespace::path::foo
// beware, this function can return null
def create_path(scope: &Scope, node: &parser::Node) -> &Scope {
    assert((@node).kind == parser::NodeKind::IDENTIFIER)

    let length = vector::length((@node).value.identifier.path)
    for var i in 0..length - 1 {
        let ident = (@node).value.identifier.path[i]
        let scope_v = scope.fields.get_or_default(ident, null)
        if not scope_v {
            let n = parser::copy_node(node)
            let vec = vector::make(type &string)
            vec.push(ident)
            (@n).value.identifier.path = vec
            let scope2 = enter_scope(scope)
            enter_namespace(scope, scope2, n)
            scope = scope2
        } else {
            if not (@scope_v).get_scope() {
                errors::errorn(node, "Illegal declaration of `", parser::identifier_to_str(node), "`")
                return null
            } else {
                scope = (@scope_v).get_scope()
            }
        }
    }
    return scope
}

// Returns the last element in a path, eg Element for path::Element
// TODO Move this elsewhere
export def last_path_element(node: &parser::Node) -> string {
    assert((@node).kind == parser::NodeKind::IDENTIFIER)
    let length = vector::length((@node).value.identifier.path)
    return @((@node).value.identifier.path[length - 1])
}

// TODO These following functions grew organically, they are in need of a rewrite

export def create_function(scope: &Scope, name_node: &parser::Node, v: &Value) -> &Value {
    let name = last_path_element(name_node)
    let phase = v.phase
    let tpe = v.tpe

    if scope.fields.contains(name) {
        var val = scope.fields[name]
        if not typechecking::is_function((@val).tpe) {
            errors::errorn(name_node, "Redeclaration of `", name, "`")
            return null 
        }
        var next = val
        loop {
            if phase == Phase::COMPILED and next.node and next.state {
                next.tpe = typechecking::lookup_parameters(next.node, next.state)
            }
            if next.tpe and typechecking::overload_score((@next).tpe, (@tpe).parameter_t, scope.module, true) == 0 {
                if phase == Phase::DECLARED { return next }
                if phase == Phase::DEFINED and next.phase != Phase::DECLARED {
                    errors::errorn(name_node, "Function `", name, "` was already declared previously (same arguments)")
                    return null
                } else {
                    // Make sure we keep the chain intact
                    // TODO This is quite dodgy but its apparently needed for some reason
                    next.tpe = v.tpe
                    v.next = next.next
                    @next = @v
                }
                return next
            }
            if (@next).next {
                next = (@next).next
            } else {
                break
            }
        }
        (@next).next = v
    } else {
        (@scope).fields[name] = v
    }
    return v
}


// TODO Give better error messages, where was the function/variable declared previously?
export def create_function(
    scope: &Scope, name_node: &parser::Node, share: parser::ShareMarker, 
    tpe: &typechecking::Type, phase: Phase, node: &parser::Node,
    state: &typechecking::State) -> &Value {

    assert((@tpe).kind == typechecking::TypeKind::FUNCTION)

    scope = create_path(scope, name_node)
    if not scope { return null }
    let name = last_path_element(name_node)
    let global = is_global(scope)

    let v = {
        name_node = name_node,
        share = share,
        modifier = parser::VarDecl::CONST,
        name = name,
        assembly_name = name,
        tpe = tpe,
        phase = phase,
        global = global,
        node = node,
        state = state,
        ident = make_ident(name, scope.module)
    } !&Value

    if global {
        // Remove unresolved symbols
        v.unresolved = set::make(Ident)
        v.dependencies = set::make(Ident)
        v.dependants = set::make(Ident)
    }

    return create_function(scope, name_node, v)
}

export def create_function(
    scope: &Scope, name_node: &parser::Node, share: parser::ShareMarker, 
    tpe: &typechecking::Type) -> &Value {
    return create_function(scope, name_node, share, tpe, Phase::COMPILED, null, null)
}

def append_scope_count(scope: &Scope, name: &string) -> &string {
    let scope_count = get_scope_count(scope)
    return name + '.' + scope_count
}

export def create_variable(
    scope: &Scope, name_node: &parser::Node, share: parser::ShareMarker, 
    modifier: parser::VarDecl, tpe: &typechecking::Type, extern: bool, dllimport: bool, value: &compiler::Value, 
    phase: Phase, node: &parser::Node, state: &typechecking::State) -> &Value {
    
    scope = create_path(scope, name_node)
    if not scope { return null }
    let name = last_path_element(name_node)

    let global = is_global(scope)
    let v = {
        name_node = name_node,
        dllimport = dllimport,
        extern = extern,
        share = share,
        modifier = modifier,
        name = name,
        tpe = tpe,
        value = value,
        global = global,
        phase = phase,
        node = node,
        state = state,
        ident = make_ident(name, scope.module)
    } !&Value
    if global {
        v.unresolved = set::make(Ident)
        v.dependencies = set::make(Ident)
        v.dependants = set::make(Ident)
    }

    if extern {
        v.assembly_name = name
    } else if global {
        v.assembly_name = typechecking::append_module(name, (@name_node).loc.module)
    } else {
        v.assembly_name = append_scope_count(scope, name)
    }

    let val = scope.fields.get_or_default(name, null)
    if val {
        if phase == Phase::DEFINED and val.phase != Phase::DECLARED or 
            phase == Phase::COMPILED and val.phase != Phase::DEFINED or 
            typechecking::is_function(val.tpe) or typechecking::is_type(val.tpe) {

            errors::errorn(name_node, "Redeclaration of `", name, "`")
        } else {
            val.tpe = v.tpe
            val.phase = v.phase
            return val
        }
    } else {
        scope.fields[name] = v
    }

    return v
}

export def create_variable(
    scope: &Scope, name_node: &parser::Node, share: parser::ShareMarker, 
    modifier: parser::VarDecl, tpe: &typechecking::Type, extern: bool, value: &compiler::Value) -> &Value {
    return create_variable(scope, name_node, share, modifier, tpe, extern, false, value, Phase::COMPILED, null, null)
}

export def create_variable(
    scope: &Scope, name_node: &parser::Node, share: parser::ShareMarker, 
    modifier: parser::VarDecl, tpe: &typechecking::Type, value: &compiler::Value) -> &Value {
    return create_variable(scope, name_node, share, modifier, tpe, false, false, value, Phase::COMPILED, null, null)
}

export def create_type(
    scope: &Scope, name_node: &parser::Node, 
    share: parser::ShareMarker, tpe: &typechecking::Type, 
    phase: Phase, node: &parser::Node, state: &typechecking::State,
    no_svalue: bool = false
) -> &Value {
    
    scope = create_path(scope, name_node)
    if not scope { return null }
    let name = last_path_element(name_node)

    let value_tpe = { kind = compiler::ValueKind::TYPE, tpe = builtins::type_, value_tpe = tpe } !compiler::Value

    let global = is_global(scope)
    let v = {
        name_node = name_node,
        share = share,
        modifier = parser::VarDecl::TYPE,
        name = name,
        assembly_name = name,
        tpe = builtins::type_,
        value = value_tpe,
        _module = tpe.scope,
        global = global,
        phase = phase,
        node = node,
        state = state,
        ident = make_ident(name, scope.module)
    } !&Value
    if global {
        v.unresolved = set::make(Ident)
        v.dependencies = set::make(Ident)
        v.dependants = set::make(Ident)
    }

    let value = scope.fields.get_or_default(name, null)
    if value {
        let tpe2 = value.value
        if phase == Phase::DEFINED and value.phase != Phase::DECLARED or 
            phase == Phase::COMPILED and value.phase != Phase::DEFINED and not typechecking::is_stub(tpe2.value_tpe) or 
            value.tpe.kind != typechecking::TypeKind::TYPE {
            
            errors::errorn(node, "Redeclaration of `", name, "`")
            return null
        } 
        if phase != Phase::DECLARED {
            if not no_svalue { tpe.svalue = value }
            @tpe2.value_tpe = @tpe
            v.value = tpe2
            @value = @v
        }
        return value
    } else {
        if not no_svalue { tpe.svalue = v }
        scope.fields[name] = v
    }
    return v
}

export def create_type(
    scope: &Scope, name_node: &parser::Node, 
    share: parser::ShareMarker, tpe: &typechecking::Type, no_svalue: bool = false) -> &Value {
    return create_type(scope, name_node, share, tpe, Phase::COMPILED, null, null, no_svalue = no_svalue)
}

export def enter_namespace(scope: &Scope, scope2: &Scope, node: &parser::Node) -> &Value {
    
    scope = create_path(scope, node)
    if not scope { return null }
    let name = last_path_element(node)
    let tpe = typechecking::make_type(typechecking::TypeKind::NAMESPACE, node)

    let v = {
        share = parser::ShareMarker::NONE,
        modifier = parser::VarDecl::CONST,
        name = name,
        assembly_name = name,
        tpe = tpe,
        _scope = scope2,
        global = is_global(scope)
    } !&Value

    let value = scope.fields.get_or_default(name, null)
    if value and not value.get_scope() {
        errors::errorn(node, "Redeclaration of `", name, "`")
    } else {
        scope.fields[name] = v
    }
    return v
}

export def insert_module(scope: &Scope, alias: &parser::Node, module: &toolchain::Module) -> &Value {
    // Don't import the same module twice
    if (@scope).imports {
        for var i in 0..vector::length((@scope).imports) {
            let module2 = (@scope).imports[i]
            if (@module).filename == (@module2).filename { return null }
        }
    }

    let v = enter_namespace(scope, module.scope, alias)
    v.imported = true
    v._module = module.scope
    v._scope = null

    if not scope.imports {
        scope.imports = vector::make(type weak_ref(toolchain::Module))
    }
    scope.imports.push(module)
    return v
}