import map
import typechecking
import parser
import vector
import buffer
import util
import toolchain
import debug
import builtins
import compiler
import errors
import consteval

export type Value = struct {
    share: parser::ShareMarker
    modifier: parser::VarDecl
    // Name used by the source code
    name: string
    // Name used by the assembly, might be suffixed with a number
    // in case of shadowed variables
    assembly_name: string
    tpe: *typechecking::Type
    value: *compiler::Value
    // TODO is this actually used anywhere?
    scope: *Scope
    // In case multiple values share one name (overloaded functions)
    next: *Value
    phase: Phase
    // True if the value is a global value
    global: bool
    // No mangling if extern
    extern: bool
    dllimport: bool
    // Definition of the value
    node: *parser::Node
    state: *typechecking::State
    // For imported scopes, this checks if a value is exported before accessing it
    imported: bool
    previous_underscore: *Value
}

export type Scope = struct {
    module: *toolchain::Module
    is_function: bool
    // Counter for local scopes (shadowing)
    scope_count: int
    parent: *Scope
    fields: *map::Map
    // This is a list of imported scopes,
    // for resolving names from other modules without
    // specifying the full path
    // Vector of toolchain::Module
    imports: *vector::Vector
    // Current underscore
    underscore: *Value
    underscore_count: int
}

export type Phase = enum {
    DECLARED; DEFINED; COMPILED
}

def get_scope_count(scope: *Scope) -> int {
    if not scope { return 0 }
    if scope.is_function { return 0 }
    return scope.scope_count
}

def is_global(scope: *Scope) -> bool {
    // TODO Check against builtins
    if (@scope).parent == null { return true }
    scope = (@scope).parent
    if (@scope).parent == null { return true }
    return false
}

def get_function_parent(scope: *Scope) -> *Scope {
    if scope.is_function { return scope }
    if scope.parent { return get_function_parent(scope.parent) }
    return null
}

export def enter_scope(scope: *Scope, module: *toolchain::Module) -> *Scope {
    var s = allocate(Scope)
    @s = {
        module = module,
        parent = scope,
        fields = map::make(),
        underscore_count = scope.underscore_count if scope else 0
    } !Scope
    let function_parent = get_function_parent(s)
    if function_parent {
        function_parent.scope_count += 1
        s.scope_count = function_parent.scope_count
    }
    return s
}

export def enter_scope(scope: *Scope) -> *Scope {
    assert scope != null
    return enter_scope(scope, scope.module)
}

export def enter_function_scope(scope: *Scope, module: *toolchain::Module) -> *Scope {
    var s = allocate(Scope)
    @s = {
        module = module,
        parent = scope,
        fields = map::make(),
        is_function = true,
        scope_count = 0
    } !Scope
    return s
}

export def enter_function_scope(scope: *Scope) -> *Scope {
    assert scope != null
    return enter_function_scope(scope, scope.module)
}

export def exit_scope(scope: *Scope) -> *Scope {
    let parent = (@scope).parent
    return parent
}

def find_functions(value: *Value, resolved: *map::Map, result: *vector::Vector, template: *typechecking::Type) {
    if not value { return }

    let function = value.tpe
    let new_resolved = map::make()
    if vector::length(function.parameter_t) == vector::length(template.parameter_t) and
        vector::length(function.return_t) == vector::length(template.return_t) {
        var equal = true
        // TODO What about varargs functions?
        for var i in 0..vector::length(function.parameter_t) {
            let left = vector::get(function.parameter_t, i) !*NamedParameter
            let right = vector::get(template.parameter_t, i) !*NamedParameter
            if not typechecking::equals(left.tpe, right.tpe) {
                equal = false
                break
            } else if right.tpe.kind == typechecking::TypeKind::VARIANT {
                let old = map::get(new_resolved, right.tpe.name) !*Type
                if old and not typechecking::equals(old, left.tpe) {
                    equal = false
                    break
                }
                map::put(new_resolved, right.tpe.name, left.tpe)
            }
        }
        if equal {
            for var i in 0..vector::length(function.return_t) {
                let left = vector::get(function.return_t, i) !*Type
                let right = vector::get(template.return_t, i) !*Type
                if not typechecking::equals(left, right) {
                    equal = false
                    break
                } else if right.kind == typechecking::TypeKind::VARIANT {
                    let old = map::get(new_resolved, right.name) !*Type
                    if old and not typechecking::equals(old, left) {
                        equal = false
                        break
                    }
                    map::put(new_resolved, right.name, left)
                }
            }
        }
        if equal {
            let keys = map::keys(new_resolved)
            for var i in 0..keys.size {
                let key = keys[i]
                let tpe = map::get(new_resolved, key) !*Type
                var vec = map::get(resolved, key) !*vector::Vector
                if not vec { vec = vector::make() }
                vector::push(vec, tpe)
                map::put(resolved, key, vec)
            }
            vector::push(result, function)
        }
    }
}

export def find_functions(scope: *Scope, node: *parser::Node, template: *typechecking::Type) -> *vector::Vector, *map::Map {
    assert template.kind == typechecking::TypeKind::FUNCTION

    var resolved = map::make()
    var result = vector::make()
    
    var first_value = get_function(scope, node, template.parameter_t, true)
    find_functions(first_value, resolved, result, template)

    var value = get(scope, node)
    if not value or not typechecking::is_function(value.tpe) {
        return result, resolved
    }
    while value != null {
        if value != first_value {
            find_functions(value, resolved, result, template)
        }
        value = value.next
    }

    return result, resolved
}

def find_function(scope: *Scope, node: *parser::Node, v: *Value, parameter_t: *vector::Vector, score: *int, dry_run: bool) -> *Value {
    if not v { return null }
    if not typechecking::is_function((@v).tpe) {
        return null
    }
    
    for var i in 0..vector::length(parameter_t) {
        let np = vector::get(parameter_t, i) !*NamedParameter
        if debug::type_to_str(np.tpe) == "*Array(void)" {
            print("Got void for some reason\n")
        }
    }

    if v.node and v.state {
        typechecking::lookup_parameters(v.node, v.state)
    }

    if node.value.identifier.types {
        // We disregard the parameters and only look at the identifier
        // The calling function must check the overload score manually
        loop {
            let s = typechecking::overload_score(v.tpe, node.value.identifier.types, scope.module, true)
            if s == 0 {
                @score = 0
                return v
            }
            v = v.next
            if not v { break }
        }
        return null
    }
    
    var found: *Value = null
    var d = false
    loop {
        let s = typechecking::overload_score((@v).tpe, parameter_t, scope.module, false)
        if s >= 0 {
            if s < @score {
                @score = s
                found = v
                d = false
            } else if s == @score {
                d = true
            }
        }
        v = (@v).next
        if not v { break }
    }
    if d {
        if not dry_run { errors::errorn(node, "Ambiguous reference") }
        return null
    }
    return found
}

def generate_function(scope: *Scope, node: *parser::Node, parameter_t: *vector::Vector, dry_run: bool) -> *Value {
    let module = scope.module
    while not is_global(scope) {
        scope = scope.parent
    }
    
    let name = last_path_element(node)
    if vector::length(parameter_t) >= 1 {
        var first_parameter = vector::get(parameter_t, 0) !*typechecking::NamedParameter
        if not first_parameter or not first_parameter.tpe { return null }
        if first_parameter.tpe.kind == typechecking::TypeKind::REFERENCE and 
            (first_parameter.tpe.tpe and first_parameter.tpe.tpe.kind == typechecking::TypeKind::STRUCTURAL) {
            
            let equals = get(toolchain::runtime.scope, parser::make_identifier(["equals"]))
            consteval::compile_function(equals.node, equals.state)

            let parameter_t2 = vector::copy(parameter_t)
            vector::remove(parameter_t2, 0)

            let stpe = first_parameter.tpe.tpe
            let module = stpe.module
            let scope = module.scope

            var duplicate = false
            let least_score = util::MAX_INT32 !int
            var found_member: *typechecking::StructuralTypeMember = null
            for var i in 0..vector::length(stpe.members) {
                let member = vector::get(stpe.members, i) !*typechecking::StructuralTypeMember
                if member.name != name { continue }

                let score = typechecking::overload_score(member.parameter_t, vector::make(), parameter_t2, scope.module, false)
                if score < least_score {
                    found_member = member
                    duplicate = false
                } else if score == least_score {
                    duplicate = true
                }
            }

            if duplicate {
                if not dry_run { errors::errorn(node, "Ambiguous referernce") }
                return null
            }
            if not found_member { return null }

            let name_node = parser::make_identifier([name])
            name_node.loc.module = module.module

            let parameter_t3 = vector::copy(found_member.parameter_t)
            
            let fp = allocate(typechecking::NamedParameter)
            @fp = @first_parameter
            fp.name = "__ref"
            vector::insert(parameter_t3, 0, fp)
            let tpe = typechecking::make_function_type_n(name_node, parameter_t3, found_member.return_t)
            let value = create_function(scope, name_node, stpe.share, tpe)
            vector::push(module.dyn_dispatch, tpe)
            return value
        } else if first_parameter.tpe.kind == typechecking::TypeKind::POINTER and 
            name == "__destruct__" and typechecking::has_destructor(first_parameter.tpe.tpe) {
            
            let args = vector::make()
            let first_param = allocate(typechecking::NamedParameter)
            @first_param = {
                name = "__ptr",
                tpe = first_parameter.tpe
            } !typechecking::NamedParameter
            vector::push(args, first_param)

            let name_node = parser::make_identifier(["__destruct__"])
            let tpe = typechecking::make_function_type_n(name_node, args, vector::make())
            let value = create_function(builtins::builtins, name_node, parser::ShareMarker::EXPORT, tpe)
            if module {
                compiler::predeclare_function(tpe, module)
            }
            map::put(compiler::destructors, debug::type_to_str(first_parameter.tpe, full_name = true), tpe)
            return value
        }
    }
    return null
}

export def get_underscore(scope: *Scope) -> *Value {
    if scope.underscore { return scope.underscore }
    if scope.parent { return get_underscore(scope.parent) }
    return null
}

export def create_underscore(scope: *Scope, tpe: *typechecking::Type) -> *Value {
    while not scope.is_function {
        scope = scope.parent
    }
    
    let count = scope.underscore_count
    scope.underscore_count += 1
    
    let buf = buffer::make_buffer()
    buffer::append_str(*buf, "_.")
    buffer::append_str(*buf, util::int_to_str(count))

    let value = allocate(Value)
    @value = {
        share = parser::ShareMarker::NONE,
        modifier = parser::VarDecl::VAR,
        tpe = tpe,
        global = is_global(scope),
        phase = Phase::COMPILED,
        name = "_",
        assembly_name = buffer::to_string(*buf),
        previous_underscore = scope.underscore
    }

    scope.underscore = value

    return value
}

def typecheck_function(value: *Value, id: *parser::Node, scope: *Scope, dry_run: bool, parameter_t: *vector::Vector) -> *Value {
    typechecking::lookup_parameters(value.node, value.state)
    if typechecking::is_polymorph(value.tpe) {
        typechecking::walk_Def_with_type_argument(value.node, parameter_t, value.state)
        return get_function(scope, id, parameter_t, false, dry_run)
    } else {
        typechecking::walk(value.node.parent, value.node, value.state)
        return value
    }
}

export def typecheck(value: *Value) {
    if value.node.kind == parser::NodeKind::DEF {
        typechecking::lookup_parameters(value.node, value.state)
        if not typechecking::is_polymorph(value.tpe) {
            typechecking::walk(value.node.parent, value.node, value.state)
        }
    } else {
        typechecking::walk(value.node.parent, value.node, value.state)
    }
}

export def get_function(scope: *Scope, id: *parser::Node, parameter_t: *vector::Vector, check_export: bool, dry_run: bool) -> *Value {
    if not scope { return null }
    
    assert((@id).kind == parser::NodeKind::IDENTIFIER)
    if vector::length((@id).value.identifier.path) == 1 {
        let name = @(vector::get((@id).value.identifier.path, 0) !*string)
        var score = util::MAX_INT32 !int

        // We need to store this to check later that there's no entry by that name
        let first_value = map::get((@scope).fields, name) !*Value
        let first_function = find_function(scope, id, first_value, parameter_t, *score, dry_run)
        let first_score = score
        var value = first_function
        var d = false
        if (@scope).imports {
            for var i in 0..vector::length((@scope).imports) {
                let module = vector::get((@scope).imports, i) !*toolchain::Module
                let scope2 = (@module).scope
                var new_score = util::MAX_INT32 !int
                let new_value = find_function(scope, id, map::get((@scope2).fields, name) !*Value, parameter_t, *new_score, dry_run)
                if new_value and (@new_value).share !int & parser::ShareMarker::EXPORT !int {
                    if score == new_score {
                        d = true 
                    } else if new_score < score {
                        score = new_score
                        value = new_value
                        d = false
                    }
                }
            }
            if first_function and first_score == score {
                // We always return the declaration in the current file
                // if there are multiple ones with the same score
                value = first_function
            } else if d {
                if not dry_run { errors::errorn(id, "Ambiguous reference") }
                return null
            }
        }
        if value and (not check_export or value.share !int & parser::ShareMarker::EXPORT !int) {
            if value.phase == Phase::DEFINED {
                value = typecheck_function(value, id, scope, dry_run, parameter_t)
            } 
            return value 
        }
        if (@scope).parent and not first_value {
            value = get_function((@scope).parent, id, parameter_t, check_export, dry_run)
        }
        if not value {
            value = generate_function(scope, id, parameter_t, dry_run)
        }
        return value
    } else {
        let head = vector::head_vec((@id).value.identifier.path)
        let tail = vector::tail((@id).value.identifier.path)

        let id_head = parser::copy_node(id)
        (@id_head).value.identifier.path = head
        let id_tail = parser::copy_node(id)
        (@id_tail).value.identifier.path = tail

        let s = get(scope, id_head)
        if s {
            if not (@s).scope {
                if not dry_run { errors::errorn(id, "Use of :: on non namespace") }
                return null
            }
            return get_function((@s).scope, id_tail, parameter_t, s.imported, dry_run)
        }
        return null
    }
}

export def get_function(scope: *Scope, id: *parser::Node, parameter_t: *vector::Vector, dry_run: bool) -> *Value {
    return get_function(scope, id, parameter_t, false, dry_run)
}

export def get_function(scope: *Scope, id: *parser::Node, parameter_t: *vector::Vector) -> *Value {
    return get_function(scope, id, parameter_t, false, false)
}

export def get(scope: *Scope, id: *parser::Node, force_compile: bool = true, check_export: bool = false, dry_run: bool = false) -> *Value {
    if not scope { return null }
    assert((@id).kind == parser::NodeKind::IDENTIFIER)
    if vector::length((@id).value.identifier.path) == 1 {
        let name = @(vector::get((@id).value.identifier.path, 0) !*string)
        if name == "_" { 
            return get_underscore(scope) 
        }
        var value = map::get((@scope).fields, name) !*Value
        if value { 
            if id.value.identifier.types {
                var score = 0
                value = find_function(scope, id, value, id.value.identifier.types, *score, true)

                if value and force_compile and value.phase == Phase::DEFINED {
                    value = typecheck_function(value, id, scope, false, id.value.identifier.types)
                }
                if not value {
                    value = generate_function(scope, id, id.value.identifier.types, dry_run)
                }
                return value
            } else if is_function(value.tpe) and id.parent and id.parent.kind == parser::NodeKind::PTR and value.next {
                if not dry_run { errors::errorn(id, "Ambiguous reference") }
                return null
            }

            if value and force_compile and value.phase == Phase::DEFINED {
                typecheck(value)
            }
        } else if scope.imports != null {
            for var i in 0..vector::length((@scope).imports) {
                let module = vector::get((@scope).imports, i) !*toolchain::Module
                let scope2 = (@module).scope
                var value2 = map::get((@scope2).fields, name) !*Value
                
                if value2 and (@value2).share !int & parser::ShareMarker::EXPORT !int {
                    if value {
                        // TODO save location of values to give better error messages
                        if not dry_run { 
                            errors::errorn(id, "Ambiguous reference") 
                        }
                        return null
                    }

                    if id.value.identifier.types {
                        var score = 0
                        value2 = find_function(scope, id, value2, id.value.identifier.types, *score, true)
                        if value2 and force_compile and value2.phase == Phase::DEFINED {
                            value2 = typecheck_function(value2, id, scope, false, id.value.identifier.types)
                        }
                    } else {
                        if force_compile and value2.phase == Phase::DEFINED {
                            typecheck(value2)
                        }
                    }
                    value = value2
                }
            }
        }
        if value and (not check_export or value.share !int & parser::ShareMarker::EXPORT !int) {
            return value
        }
        if (@scope).parent {
            value = get((@scope).parent, id, force_compile, check_export, dry_run)
        }
        if not value and id.value.identifier.types {
            value = generate_function(scope, id, id.value.identifier.types, dry_run)
        }
        return value
    } else {
        let head = vector::head_vec((@id).value.identifier.path)
        let tail = vector::tail((@id).value.identifier.path)

        let id_head = parser::copy_node(id)
        (@id_head).value.identifier.path = head
        let id_tail = parser::copy_node(id)
        (@id_tail).value.identifier.path = tail

        let s = get(scope, id_head, force_compile, false, dry_run)
        if s {
            if not (@s).scope {
                errors::errorn(id, "Use of :: on non namespace")
                return null
            }
            return get((@s).scope, id_tail, force_compile, s.imported, dry_run)
        }
        return null
    }
}

export def get_const_value(scope: *Scope, id: *parser::Node) -> *Value {
    let value = get(scope, id)
    if not value {
        errors::errorn(id, "Unknown identifier `", parser::identifier_to_str(id), "`")
        return null
    }
    assert((@value).modifier == parser::VarDecl::CONST or (@value).modifier == parser::VarDecl::TYPE)
    return value
}

export def get_type(scope: *Scope, id: *parser::Node) -> *typechecking::Type {
    let value = get_const_value(scope, id)
    if not value { return null }
    assert((@value).modifier == parser::VarDecl::TYPE)
    return (@value).value.value_tpe
}

// This function creates the namespaces for identifiers like 
// namespace::path::foo
// beware, this function can return null
def create_path(scope: *Scope, node: *parser::Node) -> *Scope {
    assert((@node).kind == parser::NodeKind::IDENTIFIER)

    let length = vector::length((@node).value.identifier.path)
    for var i in 0..length - 1 {
        let ident = vector::get((@node).value.identifier.path, i) !*string
        let scope_v = map::get((@scope).fields, @ident) !*Value
        if not scope_v {
            let n = parser::copy_node(node)
            let vec = vector::make()
            vector::push(vec, ident)
            (@n).value.identifier.path = vec
            scope = enter_namespace(scope, n)
        } else {
            if not (@scope_v).scope {
                errors::errorn(node, "Illegal declaration of `", parser::identifier_to_str(node), "`")
                return null
            } else {
                scope = (@scope_v).scope
            }
        }
    }
    return scope
}

// Returns the last element in a path, eg Element for path::Element
// TODO Move this elsewhere
export def last_path_element(node: *parser::Node) -> string {
    assert((@node).kind == parser::NodeKind::IDENTIFIER)
    let length = vector::length((@node).value.identifier.path)
    return @(vector::get((@node).value.identifier.path, length - 1) !*string)
}

// TODO These following functions grew organically, they are in need of a rewrite

// TODO Give better error messages, where was the function/variable declared previously?
export def create_function(
    scope: *Scope, name_node: *parser::Node, share: parser::ShareMarker, 
    tpe: *typechecking::Type, phase: Phase, node: *parser::Node,
    state: *typechecking::State) -> *Value {

    assert((@tpe).kind == typechecking::TypeKind::FUNCTION)

    scope = create_path(scope, name_node)
    if not scope { return null }
    let name = last_path_element(name_node)
    
    let v = allocate(Value)
    @v = {
        share = share,
        modifier = parser::VarDecl::CONST,
        name = name,
        assembly_name = name,
        tpe = tpe,
        phase = phase,
        global = is_global(scope),
        node = node,
        state = state
    } !Value

    if map::contains((@scope).fields, name) {
        var val = map::get((@scope).fields, name) !*Value
        if not typechecking::is_function((@val).tpe) {
            errors::errorn(name_node, "Redeclaration of `", name, "`")
        }
        var next = val
        loop {
            if typechecking::overload_score((@next).tpe, (@tpe).parameter_t, scope.module, true) == 0 {
                if phase == Phase::DECLARED { return next }
                if phase == Phase::DEFINED and next.phase != Phase::DECLARED {
                    errors::errorn(name_node, "Function `", name, "` was already declared previously (same arguments)")
                    return null
                } else {
                    // Make sure we keep the chain intact
                    // TODO This is quite dodgy but its apparently needed for some reason
                    next.tpe = v.tpe
                    v.next = next.next
                    @next = @v
                }
                return v
            }
            if (@next).next {
                next = (@next).next
            } else {
                break
            }
        }
        (@next).next = v
    } else {
        map::put((@scope).fields, name, v)
    }
    return v
}

export def create_function(
    scope: *Scope, name_node: *parser::Node, share: parser::ShareMarker, 
    tpe: *typechecking::Type) -> *Value {
    return create_function(scope, name_node, share, tpe, Phase::COMPILED, null, null)
}

def append_scope_count(scope: *Scope, name: string) -> string {
    let scope_count = get_scope_count(scope)
    let buf = buffer::make_buffer()
    buffer::append_str(*buf, name)
    buffer::append_char(*buf, '.')
    buffer::append_str(*buf, util::int_to_str(scope_count))
    return buffer::to_string(*buf)
}

export def create_variable(
    scope: *Scope, name_node: *parser::Node, share: parser::ShareMarker, 
    modifier: parser::VarDecl, tpe: *typechecking::Type, extern: bool, dllimport: bool, value: *compiler::Value, 
    phase: Phase, node: *parser::Node, state: *typechecking::State) -> *Value {
    
    scope = create_path(scope, name_node)
    if not scope { return null }
    let name = last_path_element(name_node)

    let global = is_global(scope)
    let v = allocate(Value)
    @v = {
        dllimport = dllimport,
        extern = extern,
        share = share,
        modifier = modifier,
        name = name,
        tpe = tpe,
        value = value,
        global = global,
        phase = phase,
        node = node,
        state = state
    } !Value

    if extern {
        (@v).assembly_name = name
    } else if global {
        (@v).assembly_name = typechecking::append_module(name, (@name_node).loc.module)
    } else {
        (@v).assembly_name = append_scope_count(scope, name)
    }

    let val = map::get(scope.fields, name) !*Value

    if val {
        if phase == Phase::DEFINED and val.phase != Phase::DECLARED or 
            phase == Phase::COMPILED and val.phase != Phase::DEFINED or 
            typechecking::is_function(val.tpe) or typechecking::is_type(val.tpe) {

            errors::errorn(name_node, "Redeclaration of `", name, "`")
        } else {
            if v.tpe {
                let tpe2 = val.tpe
                @tpe2 = @v.tpe
            }
            v.dllimport = val.dllimport
            @val = @v
        }
    } else {
        map::put((@scope).fields, name, v)
    }

    return v
}

export def create_variable(
    scope: *Scope, name_node: *parser::Node, share: parser::ShareMarker, 
    modifier: parser::VarDecl, tpe: *typechecking::Type, extern: bool, value: *compiler::Value) -> *Value {
    return create_variable(scope, name_node, share, modifier, tpe, extern, false, value, Phase::COMPILED, null, null)
}

export def create_variable(
    scope: *Scope, name_node: *parser::Node, share: parser::ShareMarker, 
    modifier: parser::VarDecl, tpe: *typechecking::Type, value: *compiler::Value) -> *Value {
    return create_variable(scope, name_node, share, modifier, tpe, false, false, value, Phase::COMPILED, null, null)
}

export def create_type(
    scope: *Scope, name_node: *parser::Node, 
    share: parser::ShareMarker, tpe: *typechecking::Type, 
    phase: Phase, node: *parser::Node, state: *typechecking::State) -> *typechecking::Type {
    
    scope = create_path(scope, name_node)
    if not scope { return null }
    let name = last_path_element(name_node)
    
    let value_tpe = allocate(compiler::Value)
    @value_tpe = { kind = compiler::ValueKind::TYPE, tpe = builtins::type_, value_tpe = tpe } !compiler::Value

    let v = allocate(Value)
    @v = {
        share = share,
        modifier = parser::VarDecl::TYPE,
        name = name,
        assembly_name = name,
        tpe = builtins::type_,
        value = value_tpe,
        scope = (@tpe).scope,
        global = is_global(scope),
        phase = phase,
        node = node,
        state = state
    } !Value

    let value = map::get((@scope).fields, name) !*Value
    if value {
        let tpe2 = value.value
        if phase == Phase::DEFINED and value.phase != Phase::DECLARED or 
            phase == Phase::COMPILED and value.phase != Phase::DEFINED and not typechecking::is_stub(tpe2.value_tpe) or 
            value.tpe.kind != typechecking::TypeKind::TYPE {
            
            errors::errorn(node, "Redeclaration of `", name, "`")
            return null
        } 
        if phase != Phase::DECLARED {
            @tpe2.value_tpe = @tpe
            v.value = tpe2
            @value = @v
        }
        
        return tpe2.value_tpe
    } else {
        map::put((@scope).fields, name, v)
    }
    return tpe
}

export def create_type(
    scope: *Scope, name_node: *parser::Node, 
    share: parser::ShareMarker, tpe: *typechecking::Type) -> *typechecking::Type {
    return create_type(scope, name_node, share, tpe, Phase::COMPILED, null, null)
}

export def enter_namespace(scope: *Scope, scope2: *Scope, node: *parser::Node) -> *Value {
    
    scope = create_path(scope, node)
    if not scope { return null }
    let name = last_path_element(node)
    let tpe = typechecking::make_type(typechecking::TypeKind::NAMESPACE, node)

    let v = allocate(Value)
    @v = {
        share = parser::ShareMarker::NONE,
        modifier = parser::VarDecl::CONST,
        name = name,
        assembly_name = name,
        tpe = tpe,
        scope = scope2,
        global = is_global(scope)
    } !Value

    let value = map::get(scope.fields, name) !*Value
    if value and not value.scope {
        errors::errorn(node, "Redeclaration of `", name, "`")
    } else {
        map::put((@scope).fields, name, v)
    }
    return v
}

export def enter_namespace(scope: *Scope, node: *parser::Node) -> *Scope {
    let scope2 = enter_scope(scope)
    enter_namespace(scope, scope2, node)
    return scope2
}

export def insert_module(scope: *Scope, alias: *parser::Node, module: *toolchain::Module) {
    // Don't import the same module twice
    if (@scope).imports {
        for var i in 0..vector::length((@scope).imports) {
            let module2 = vector::get((@scope).imports, i) !*toolchain::Module
            if (@module).filename == (@module2).filename { return }
        }
    }

    let module_scope = allocate(Scope)
    @module_scope = @module.scope
    module_scope.imports = null

    let v = enter_namespace(scope, module_scope, alias)
    v.imported = true

    if not (@scope).imports {
        (@scope).imports = vector::make()
    }
    vector::push((@scope).imports, module)
}