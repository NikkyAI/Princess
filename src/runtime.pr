export type TypeKind = enum {
    BOOL
    WORD
    FLOAT
    STRUCT
    UNION
    ARRAY
    STATIC_ARRAY
    POINTER
    REFERENCE
    FUNCTION
    ENUM
}

// TODO Potentially preserve type names
export type Type = struct {
    kind: TypeKind
    name: string
    unsig: bool
    length: size_t
    tpe: *Type
    size: size_t
    align: size_t
    fields: [Field]
    parameters: [*Type]
    returns: [*Type]
    enum_values: [EnumValue]
}

export type EnumValue = struct {
    name: string
    value: int64
}

export type Field = struct {
    name: string
    offset: size_t
    tpe: *Type
}

export type Ref = struct {
    ref_count: *int64
    value: *
    tpe: *Type
}

export def ref_type(a: Ref) -> *Type {
    return a.tpe
}

export def equals(a: *Type, b: *Type) -> bool {
    if a == b { return true }
    if a.kind != b.kind { return false }
    if a.kind == TypeKind::BOOL { return true }
    if a.kind == TypeKind::WORD {
        return a.size == b.size and a.unsig == b.unsig
    }
    if a.kind == TypeKind::FLOAT {
        return a.size == b.size
    }
    if a.kind == TypeKind::STATIC_ARRAY {
        return a.length == b.length and equals(a.tpe, b.tpe)
    }
    if a.kind == TypeKind::ARRAY or a.kind == TypeKind::POINTER or a.kind == TypeKind::REFERENCE {
        return equals(a.tpe, b.tpe)
    }
    if a.kind == TypeKind::FUNCTION {
        if a.parameters.size != b.parameters.size { return false }
        if a.returns.size != b.returns.size { return false }
        for var i in 0..a.parameters.size {
            if not equals(a.parameters[i].tpe, b.parameters[i].tpe) { return false }
        }
        for var i in 0..a.returns.size {
            if not equals(a.returns[i], b.returns[i]) { return false }
        }
    }

    return a.name == b.name
}