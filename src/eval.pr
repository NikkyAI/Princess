import buffer
import vector
import map
import util
import compiler
import typechecking
import preprocess
import scope
import builtins

export type StackFrame = struct {
    jump_table: *map::Map
    locals: *map::Map
    function_name: string
    ret: compiler::Value
}

export type State = struct {
    cstate: *compiler::State
    // Vector of StackFrame
    stack: *vector::Vector

    next: *compiler::Block
}

type FfiFunction = struct {
    name: string
    ptr: () -> ()
    initialized: bool
    ffi_cif: cstd::ffi_cif
}

type FfiGlobal = struct {
    name: string
    ptr: *
}

// Map of FfiVariable
var FFI_GLOBALS = map::make()
// Map of FfiFunction
var FFI_FUNCTIONS = map::make()
load_ffi(cstd::__DEF_NAMES, cstd::__DEFS, cstd::__VAR_NAMES, cstd::__VARS)

export def load_ffi(def_names: [string], defs: [type () -> ()], var_names: [string], vars: [*]) {
    assert(def_names.size == defs.size)
    for var i in 0..def_names.size {
        let name = def_names[i]
        let value = defs[i]
        let ffi_function = allocate(FfiFunction)
        @ffi_function = {
            name = name,
            ptr = value,
            initialized = false
        } !FfiFunction
        map::put(FFI_FUNCTIONS, name, ffi_function)

        let ffi_global = allocate(FfiGlobal)
        @ffi_global = {
            name = name,
            ptr = value !*
        } !FfiGlobal
        map::put(FFI_GLOBALS, name, ffi_global)
    }

    assert(var_names.size == vars.size)
    for var i in 0..var_names.size {
        let name = var_names[i]
        let value = vars[i]
        let ffi_global = allocate(FfiGlobal)
        @ffi_global = {
            name = name,
            ptr = value
        } !FfiGlobal
        map::put(FFI_GLOBALS, name, ffi_global)
    }
}

export def setup_globals(cstate: *compiler::State) {
    let keys = map::keys(FFI_GLOBALS)
    for var i in 0..keys.size {
        let key = keys[i]
        let global = map::get(FFI_GLOBALS, key) !*FfiGlobal
        map::put(cstate.globals, key, global.ptr)
    }
}

def errorv(msg: string) {
    error("error: [eval] ")
    error(msg)
}

def push_stack_frame(stack_frame: *StackFrame, state: *State) {
    vector::push(state.stack, stack_frame)
}

def pop_stack_frame(state: *State) {
    vector::pop(state.stack)
}

export def get_stack_frame(state: *State) -> *StackFrame {
    return vector::peek(state.stack) !*StackFrame
}

def make_stack_frame(block: *compiler::Block, name: string) -> *StackFrame {
    let stack_frame = allocate(StackFrame)
    @stack_frame = {
        locals = map::make(),
        function_name = name,
        jump_table = map::make()
    } !StackFrame

    while block {
        map::put(stack_frame.jump_table, block.label_, block)
        block = block.next
    }

    return stack_frame
}

def get(mem: *, tpe: *typechecking::Type) -> compiler::Value {
    switch tpe.kind !int {
        case typechecking::TypeKind::WORD:
            let size = tpe.size
            var result: int64 = 0
            for var i in 0..size {
                result |= (@((mem !*uint8) ++ i) !uint64 << (i * 8))
            }
            if not tpe.unsig {
                let sign = (result >> ((size - 1) * 8)) & 0x80
                if sign {
                    for var i in size..(size_of int64) {
                        result |= 0xFF !int64 << (i * 8)
                    }
                }
            }
            return { kind = compiler::ValueKind::INT, tpe = tpe, i = result } !compiler::Value
        case typechecking::TypeKind::FLOAT:
            var result: double
            if tpe.size == (size_of float) {
                result = @(mem !*float) !double
            } else if tpe.size == (size_of double) {
                result = @(mem !*double)
            } else {
                assert(false)
            }
            return { kind = compiler::ValueKind::FLOAT, tpe = tpe, f = result } !compiler::Value
        case typechecking::TypeKind::BOOL:
            return { kind = compiler::ValueKind::BOOL, tpe = tpe, i = (@(mem !*bool)) !int64 } !compiler::Value
        case typechecking::TypeKind::POINTER:
            return { kind = compiler::ValueKind::POINTER, tpe = tpe, i = @(mem !*int64) } !compiler::Value
        case typechecking::TypeKind::STRUCT:
            let field = tpe.biggest_field
            let values = allocate(compiler::Value, 1)
            values[0] = get(mem, field.tpe)
            return { kind = compiler::ValueKind::STRUCT, tpe = tpe, values = values } !compiler::Value
        case typechecking::TypeKind::UNION:
            let values = allocate(compiler::Value, tpe.fields.size)
            for var i in 0..tpe.fields.size {
                let field = tpe.fields[i]
                values[i] = get(mem ++ field.offset, field.tpe)
            }
            return { kind = compiler::ValueKind::STRUCT, tpe = tpe, values = values } !compiler::Value
        case typechecking::TypeKind::STATIC_ARRAY:
            if typechecking::equals(tpe.tpe, builtins::char_) {
                let str = allocate(char, tpe.size)
                memcopy(mem, str.value, tpe.size)
                return { kind = compiler::ValueKind::STRING, tpe = tpe, s = str } !compiler::Value
            } else {
                let values = allocate(compiler::Value, tpe.size / tpe.tpe.size)
                for var i in 0..values.size {
                    values[i] = get(mem, tpe.tpe)
                    mem = mem ++ tpe.tpe.size
                }
                return { kind = compiler::ValueKind::ARRAY, tpe = tpe, values = values } !compiler::Value
            }
        case typechecking::TypeKind::ARRAY:
            let values = allocate(compiler::Value, 2)
            values[0] = { kind = compiler::ValueKind::INT, tpe = builtins::size_t_, i = @(mem !*int64) } !compiler::Value
            values[1] = { kind = compiler::ValueKind::POINTER, tpe = typechecking::pointer(tpe.tpe), i = @((mem ++ (size_of size_t)) !*int64) } !compiler::Value
            return { kind = compiler::ValueKind::STRUCT, tpe = tpe, values = values } !compiler::Value
        case: assert(false)
    }
}

def get_address(loc: compiler::Value, state: *State) -> * {
    if loc.kind == compiler::ValueKind::LOCAL {
        let mem = map::get(get_stack_frame(state).locals, loc.name)
        return mem
    } else if loc.kind == compiler::ValueKind::GLOBAL {
        assert(typechecking::is_pointer(loc.tpe))
        var mem = map::get(state.cstate.globals, loc.name)
        if not mem {
            var global = map::get(state.cstate.result.constants, loc.name) !*compiler::Global
            if not global {
                global = map::get(state.cstate.result.globals, loc.name) !*compiler::Global
            }
            if not global {
                errorv("Global by the name of \"")
                error(loc.name, "\" not found\n")
                return null
            }

            mem = allocate(loc.tpe.tpe.size)
            if global.value {
                let value = @global.value
                set(mem, loc.tpe.tpe, value)
            }
            map::put(state.cstate.globals, loc.name, mem)
        }
        return mem
    }
    return null
}

export def get_value(loc: compiler::Value, state: *State) -> compiler::Value {
    if loc.kind == compiler::ValueKind::LOCAL {
        let mem = get_address(loc, state)
        return get(mem, loc.tpe)
    } else if loc.kind == compiler::ValueKind::GLOBAL {
        let mem = get_address(loc, state)
        return { kind = compiler::ValueKind::POINTER, tpe = loc.tpe, i = mem !int64 }
    } else {
        return loc
    }
}

def set(mem: *, tpe: *typechecking::Type, value: compiler::Value) {
    switch tpe.kind !int {
        case typechecking::TypeKind::WORD:
            var v = value.i
            let size = tpe.size
            for var i in 0..size {
                @(mem !*uint8 ++ i) = (v >> (i * 8)) !uint8
            }
        case typechecking::TypeKind::FLOAT:
            if tpe.size == (size_of float) {
                @(mem !*float) = value.f !float
            } else if tpe.size == (size_of double) {
                @(mem !*double) = value.f
            } else {
                assert(false)
            }
        case typechecking::TypeKind::POINTER:
            (@(mem !*int64)) = value.i
        case typechecking::TypeKind::BOOL:
            (@(mem !*int8)) = value.i !int8
        case typechecking::TypeKind::STRUCT:
            for var i in 0..tpe.fields.size {
                let field = tpe.fields[i]
                mem = mem ++ field.offset
                set(mem, field.tpe, value.values[i])
            }
        case typechecking::TypeKind::UNION:
            let v = value.values[0]
            set(mem, v.tpe, value)
        case typechecking::TypeKind::STATIC_ARRAY:
            if typechecking::equals(tpe.tpe, builtins::char_) {
                memcopy(value.s.value, mem, tpe.length)
            } else {
                for var i in 0..value.values.size {
                    let value = value.values[i]
                    set(mem, tpe.tpe, value)
                    mem = mem ++ tpe.tpe.size
                }
            }
        case typechecking::TypeKind::ARRAY:
            // TODO Implementation specific
            @(mem !*size_t) = value.values[0].i !size_t
            @((mem ++ (size_of size_t)) !*int64) = value.values[1].i
        case: assert(false)
    }
}

export def set_value(loc: compiler::Value, value: compiler::Value, state: *State) {
    if loc.kind == compiler::ValueKind::LOCAL {
        var mem = map::get(get_stack_frame(state).locals, loc.name)
        if not mem {
            mem = allocate(loc.tpe.size)
            map::put(get_stack_frame(state).locals, loc.name, mem)
        }
        set(mem, loc.tpe, value)
    } else {
        assert(false)
    }
}

def eval_InsertValue(insn: *compiler::Insn, state: *State) {
    // We need a deep copy here because we don't want to modify the operand,
    // if we didn't do this, the operation would fail when executed multiple times
    let value = compiler::copy(get_value(insn.value.insert_value.value, state))
    let element = get_value(insn.value.insert_value.element, state)
    let ret = insn.value.insert_value.ret
    let index = insn.value.insert_value.index

    var to_set = *value
    for var i in 0..index.size {
        let j = index[i]
        if typechecking::is_struct(to_set.tpe) or to_set.tpe.kind == typechecking::TypeKind::ARRAY {
            to_set = *value.values[j]
        } else if to_set.tpe.kind == typechecking::TypeKind::STATIC_ARRAY {
            if typechecking::equals(to_set.tpe.tpe, builtins::char_) {
                to_set.s[j] = element.i !char
            } else {
                to_set = *value.values[j]
            }
        } else {
            assert(false)
        }
        
    }
    @to_set = element

    set_value(ret, value, state)
}

def eval_ExtractValue(insn: *compiler::Insn, state: *State) {
    let value = get_value(insn.value.extract_value.value, state)
    let ret = insn.value.extract_value.ret
    let index = insn.value.extract_value.index

    var to_get = value
    for var i in 0..index.size {
        let j = index[i]
        if typechecking::is_struct(to_get.tpe) or to_get.tpe.kind == typechecking::TypeKind::ARRAY {
            to_get = to_get.values[j]
        } else if to_get.tpe.kind == typechecking::TypeKind::STATIC_ARRAY {
            if typechecking::equals(to_get.tpe.tpe, builtins::char_) {
                to_get = { kind = compiler::ValueKind::INT, tpe = builtins::char_, i = to_get.s[j] !int64 } !compiler::Value
            } else {
                to_get = to_get.values[j]
            }
        } else {
            assert(false)
        }
    }

    set_value(ret, to_get, state)
}

def eval_GetElementPtr(insn: *compiler::Insn, state: *State) {
    let ret = insn.value.gep.ret
    let value = insn.value.gep.value
    let index = insn.value.gep.index

    var tpe =  insn.value.gep.tpe
    var addr = get_address(value, state) ++ (index[0].i * tpe.size)
    
    for var i in 1..index.size {
        let index = index[i].i
        if tpe.kind == typechecking::TypeKind::STRUCT {
            assert(index < tpe.fields.size)
            let field = tpe.fields[index]
            addr = addr ++ field.offset
            tpe = field.tpe
        } else if tpe.kind == typechecking::TypeKind::UNION {
            assert(index == 0)
            tpe = tpe.fields[0].tpe
        } else if tpe.kind == typechecking::TypeKind::STATIC_ARRAY {
            assert(index < tpe.length)
            addr = addr ++ tpe.tpe.size * index
            tpe = tpe.tpe
        } else if tpe.kind == typechecking::TypeKind::ARRAY {
            if index == 0 {
                tpe = builtins::size_t_
            } else if index == 1 {
                addr = addr ++ (size_of size_t)
                tpe = tpe.tpe
            } else {
                assert(false)
            }
        } else {
            assert(false)
        }
    }

    set_value(ret, { kind = compiler::ValueKind::POINTER, tpe = typechecking::pointer(tpe), i = addr !int64 } !compiler::Value, state)
}

def eval_Convert(insn: *compiler::Insn, state: *State) {
    // This is basically a noop
    let ret = insn.value.convert.ret
    let value = get_value(insn.value.convert.value, state)
    set_value(ret, value, state)
}

// TODO These functions should be made faster by directly working with the memory
def eval_Load(insn: *compiler::Insn, state: *State) {
    let loc = insn.value.load.loc
    let mem = get_address(loc, state)
    let value = get(mem, loc.tpe.tpe)
    set_value(insn.value.load.value, value, state)
}

def eval_Store(insn: *compiler::Insn, state: *State) {
    let loc = insn.value.store.loc
    let mem = get_address(loc, state)
    let value = get_value(insn.value.store.value, state)
    set(mem, value.tpe, value)
}

def eval_Alloca(insn: *compiler::Insn, state: *State) {
    let ret = insn.value.alloca.ret
    ret.tpe = typechecking::pointer(ret.tpe)
    let mem = allocate(ret.tpe.size)
    let ptr = { kind = compiler::ValueKind::POINTER, tpe = ret.tpe, i = mem !int64 } !compiler::Value
    set_value(ret, ptr, state)
}

def eval_FAdd(insn: *compiler::Insn, state: *State) {
    let left = get_value(insn.value.arith.left, state)
    let right = get_value(insn.value.arith.right, state)
    let ret = insn.value.arith.ret 

    var result = left.f + right.f
    set_value(ret, { kind = ValueKind::FLOAT, tpe = ret.tpe, f = result } !compiler::Value, state)
}

def eval_FSub(insn: *compiler::Insn, state: *State) {
    let left = get_value(insn.value.arith.left, state)
    let right = get_value(insn.value.arith.right, state)
    let ret = insn.value.arith.ret 

    var result = left.f - right.f
    set_value(ret, { kind = ValueKind::FLOAT, tpe = ret.tpe, f = result } !compiler::Value, state)
}

def eval_FMul(insn: *compiler::Insn, state: *State) {
    let left = get_value(insn.value.arith.left, state)
    let right = get_value(insn.value.arith.right, state)
    let ret = insn.value.arith.ret 

    var result = left.f * right.f
    set_value(ret, { kind = ValueKind::FLOAT, tpe = ret.tpe, f = result } !compiler::Value, state)
}

def eval_FRem(insn: *compiler::Insn, state: *State) {
    let left = get_value(insn.value.arith.left, state)
    let right = get_value(insn.value.arith.right, state)
    let ret = insn.value.arith.ret 

    var result = left.f % right.f
    set_value(ret, { kind = ValueKind::FLOAT, tpe = ret.tpe, f = result } !compiler::Value, state)
}

def eval_FDiv(insn: *compiler::Insn, state: *State) {
    let left = get_value(insn.value.arith.left, state)
    let right = get_value(insn.value.arith.right, state)
    let ret = insn.value.arith.ret 

    var result = left.f / right.f
    set_value(ret, { kind = ValueKind::FLOAT, tpe = ret.tpe, f = result } !compiler::Value, state)
}

def eval_FAdd(insn: *compiler::Insn, state: *State) {
    let left = get_value(insn.value.arith.left, state)
    let right = get_value(insn.value.arith.right, state)
    let ret = insn.value.arith.ret 

    var result = left.f + right.f
    set_value(ret, { kind = ValueKind::FLOAT, tpe = ret.tpe, f = result } !compiler::Value, state)
}

def eval_SRem(insn: *compiler::Insn, state: *State) {
    let left = get_value(insn.value.arith.left, state)
    let right = get_value(insn.value.arith.right, state)
    let ret = insn.value.arith.ret

    var result = left.i % right.i
    set_value(ret, { kind = ValueKind::INT, tpe = ret.tpe, i = result } !compiler::Value, state)
}

def eval_URem(insn: *compiler::Insn, state: *State) {
    let left = get_value(insn.value.arith.left, state)
    let right = get_value(insn.value.arith.right, state)
    let ret = insn.value.arith.ret

    var result = (left.i !uint64 % right.i !uint64) !int64
    set_value(ret, { kind = ValueKind::INT, tpe = ret.tpe, i = result } !compiler::Value, state)
}

def eval_Add(insn: *compiler::Insn, state: *State) {
    let left = get_value(insn.value.arith.left, state)
    let right = get_value(insn.value.arith.right, state)
    let ret = insn.value.arith.ret

    var result = left.i + right.i
    set_value(ret, { kind = ValueKind::INT, tpe = ret.tpe, i = result } !compiler::Value, state)
}

def eval_Sub(insn: *compiler::Insn, state: *State) {
    let left = get_value(insn.value.arith.left, state)
    let right = get_value(insn.value.arith.right, state)
    let ret = insn.value.arith.ret

    var result = left.i - right.i
    set_value(ret, { kind = ValueKind::INT, tpe = ret.tpe, i = result } !compiler::Value, state)
}

def eval_And(insn: *compiler::Insn, state: *State) {
    let left = get_value(insn.value.arith.left, state)
    let right = get_value(insn.value.arith.right, state)
    let ret = insn.value.arith.ret

    var result = (left.i !bool and right.i !bool) !int64
    set_value(ret, { kind = ValueKind::BOOL, tpe = ret.tpe, i = result } !compiler::Value, state)
}

def eval_Mul(insn: *compiler::Insn, state: *State) {
    let left = get_value(insn.value.arith.left, state)
    let right = get_value(insn.value.arith.right, state)
    let ret = insn.value.arith.ret

    var result = left.i * right.i
    set_value(ret, { kind = ValueKind::INT, tpe = ret.tpe, i = result } !compiler::Value, state)
}

def eval_SDiv(insn: *compiler::Insn, state: *State) {
    let left = get_value(insn.value.arith.left, state)
    let right = get_value(insn.value.arith.right, state)
    let ret = insn.value.arith.ret

    var result = left.i / right.i
    set_value(ret, { kind = ValueKind::INT, tpe = ret.tpe, i = result } !compiler::Value, state)
}

def eval_UDiv(insn: *compiler::Insn, state: *State) {
    let left = get_value(insn.value.arith.left, state)
    let right = get_value(insn.value.arith.right, state)
    let ret = insn.value.arith.ret

    var result = left.i !uint64 / right.i !uint64
    set_value(ret, { kind = ValueKind::INT, tpe = ret.tpe, i = result } !compiler::Value, state)
}

def eval_Icmp(insn: *compiler::Insn, state: *State) {
    let left = get_value(insn.value.icmp.left, state)
    let right = get_value(insn.value.icmp.right, state)
    let ret = insn.value.icmp.ret
    let op = insn.value.icmp.op

    var result = false
    if op == compiler::CompareInt::eq {
        result = left.i == right.i
    } else if op == compiler::CompareInt::ne {
        result = left.i != right.i
    } else if op == compiler::CompareInt::ugt {
        result = left.i !uint64 > right.i !uint64
    } else if op == compiler::CompareInt::uge {
        result = left.i !uint64 >= right.i !uint64
    } else if op == compiler::CompareInt::ult {
        result = left.i !uint64 < right.i !uint64
    } else if op == compiler::CompareInt::ule {
        result = left.i !uint64 <= right.i !uint64
    } else if op == compiler::CompareInt::sgt {
        result = left.i > right.i
    } else if op == compiler::CompareInt::sge {
        result = left.i >= right.i
    } else if op == compiler::CompareInt::slt {
        result = left.i < right.i
    } else if op == compiler::CompareInt::sle {
        result = left.i <= right.i
    } else {
        assert(false)
    }

    set_value(ret, { kind = ValueKind::BOOL, tpe = ret.tpe, i = result !int64 } !compiler::Value, state)
}

// TODO
def struct_to_ffi(tpe: *typechecking::Type) -> *cstd::ffi_type {
    return null
}

def union_to_ffi(tpe: *typechecking::Type) -> *cstd::ffi_type {
    return null
}

import debug
def type_to_ffi(tpe: *typechecking::Type) -> *cstd::ffi_type {
    if not tpe {
        return *cstd::ffi_type_void
    } else if tpe.kind == typechecking::TypeKind::STRUCT {
        return struct_to_ffi(tpe)
    } else if tpe.kind == typechecking::TypeKind::UNION {
        return union_to_ffi(tpe)
    } else if typechecking::is_enum(tpe) {
        return type_to_ffi(tpe.tpe)
    } else if typechecking::is_pointer(tpe) {
        return *cstd::ffi_type_pointer
    } else if typechecking::equals(tpe, builtins::int8_) {
        return *cstd::ffi_type_sint8
    } else if typechecking::equals(tpe, builtins::uint8_) {
        return *cstd::ffi_type_uint8
    } else if typechecking::equals(tpe, builtins::int16_) {
        return *cstd::ffi_type_sint16
    } else if typechecking::equals(tpe, builtins::uint16_) {
        return *cstd::ffi_type_uint16
    } else if typechecking::equals(tpe, builtins::int32_) {
        return *cstd::ffi_type_sint32
    } else if typechecking::equals(tpe, builtins::uint32_) {
        return *cstd::ffi_type_uint32
    } else if typechecking::equals(tpe, builtins::int64_) {
        return *cstd::ffi_type_sint64
    } else if typechecking::equals(tpe, builtins::uint64_) {
        return *cstd::ffi_type_uint64
    } else if typechecking::equals(tpe, builtins::float_) {
        return *cstd::ffi_type_float
    } else if typechecking::equals(tpe, builtins::double_) {
        return *cstd::ffi_type_double
    }
}

def eval_Call(insn: *compiler::Insn, state: *State) {
    let name = insn.value.call.name.name 
    let args = insn.value.call.args
    let ret = insn.value.call.ret

    if starts_with(name, "llvm.") { return }
    let function = map::get(state.cstate.result.functions, name) !*compiler::Function
    if not function {
        errorv("Function \"")
        error(name, "\" not found\n")
        return
    }

    if function.imported {
        let ffi_function = map::get(FFI_FUNCTIONS, name) !*FfiFunction
        let ffi_cif = *ffi_function.ffi_cif

        let ffi_args = allocate((size_of type *cstd::ffi_type) * args.size) !**cstd::ffi_type
        for var i in 0..args.size {
            ffi_args[i] = type_to_ffi(args[i].tpe)
        }

        var status: cstd::ffi_status
        if function.varargs {
            status = cstd::ffi_prep_cif_var(ffi_cif, cstd::ffi_abi::FFI_UNIX64, (vector::length(function.args) - 1) !uint, args.size !uint, type_to_ffi(function.ret), ffi_args)
        } else if not ffi_function.initialized {
            // TODO Use default abi, at the moment the enum isn't generated right
            status = cstd::ffi_prep_cif(ffi_cif, cstd::ffi_abi::FFI_UNIX64, args.size !uint, type_to_ffi(function.ret), ffi_args)
            ffi_function.initialized = true
        }
        if status != cstd::ffi_status::FFI_OK {
            errorv("Failed to prepare ffi for function \"")
            error(function.name, "\"\n")
            return
        }

        let avalues = allocate((size_of type *) * args.size) !**
        for var i in 0..args.size {
            let arg = args[i]
            var mem: * = null
            if arg.kind == compiler::ValueKind::LOCAL {
                mem = map::get(get_stack_frame(state).locals, arg.name)
            } else if arg.kind == compiler::ValueKind::GLOBAL {
                mem = map::get(state.cstate.globals, arg.name)
            } else {
                // We need to allocate memory for static values
                mem = allocate(arg.tpe.size)
                set(mem, arg.tpe, arg)
            }
            avalues[i] = mem
        }  

        var rvalue: * = null
        if ret.tpe {
            // TODO Define the register size somewhere
            var size = 8 !size_t
            if function.ret.size > size {
                size = function.ret.size
            }
            rvalue = allocate(size)
            map::put(get_stack_frame(state).locals, ret.name, rvalue)
        }
        
        cstd::ffi_call(ffi_cif, ffi_function.ptr, rvalue, avalues)

    } else {
        let stack_frame = make_stack_frame(function.block, name)

        for var i in 0..args.size {
            let arg = args[i]
            let np = vector::get(function.args, i) !*typechecking::NamedParameter
            let arg_value = get_value(arg, state)
            let mem = allocate(arg.tpe.size)
            map::put(stack_frame.locals, np.name, mem)
            set(mem, arg.tpe, arg_value)
        }

        push_stack_frame(stack_frame, state)
        eval(function.block, state)
        let ret_value = get_value(stack_frame.ret, state)
        pop_stack_frame(state)

        set_value(ret, ret_value, state)
    }
}

def eval_Ret(insn: *compiler::Insn, state: *State) {
    let ret = insn.value.ret.value
    get_stack_frame(state).ret = get_value(ret, state)
    state.next = null
}

def eval_BrUnc(insn: *compiler::Insn, state: *State) {
    let label_ = insn.value.br_unc.label_
    state.next = map::get(get_stack_frame(state).jump_table, label_.name) !*compiler::Block
}

def eval_Br(insn: *compiler::Insn, state: *State) {
    let if_true = insn.value.br.if_true
    let if_false = insn.value.br.if_false
    
    let cond = get_value(insn.value.br.cond, state)
    assert(cond.kind == compiler::ValueKind::BOOL)
    
    if cond.i {
        state.next = map::get(get_stack_frame(state).jump_table, if_true.name) !*compiler::Block
    } else {
        state.next = map::get(get_stack_frame(state).jump_table, if_false.name) !*compiler::Block
    }
}

def eval_Fptoui(insn: *compiler::Insn, state: *State) {
    let ret = insn.value.convert.ret
    let value = get_value(insn.value.convert.value, state)
    let result = (value.f !uint64) !int64
    set_value(ret, { kind = ValueKind::INT, tpe = ret.tpe, i = result } !compiler::Value, state)
}

def eval_Fptosi(insn: *compiler::Insn, state: *State) {
    let ret = insn.value.convert.ret
    let value = get_value(insn.value.convert.value, state)
    let result = value.f !int64
    set_value(ret, { kind = ValueKind::INT, tpe = ret.tpe, i = result } !compiler::Value, state)
}

def eval_Uitofp(insn: *compiler::Insn, state: *State) {
    let ret = insn.value.convert.ret
    let value = get_value(insn.value.convert.value, state)
    let result = (value.i !uint64) !double
    set_value(ret, { kind = ValueKind::INT, tpe = ret.tpe, f = result } !compiler::Value, state)
}

def eval_Sitofp(insn: *compiler::Insn, state: *State) {
    let ret = insn.value.convert.ret
    let value = get_value(insn.value.convert.value, state)
    let result = value.i !double
    set_value(ret, { kind = ValueKind::INT, tpe = ret.tpe, f = result } !compiler::Value, state)
}

def eval_Ptrtoint(insn: *compiler::Insn, state: *State) {
    let ret = insn.value.convert.ret
    let value = get_value(insn.value.convert.value, state)
    set_value(ret, { kind = ValueKind::INT, tpe = ret.tpe, i = value.i } !compiler::Value, state) 
}

def eval_Inttoptr(insn: *compiler::Insn, state: *State) {
    let ret = insn.value.convert.ret
    let value = get_value(insn.value.convert.value, state)
    set_value(ret, { kind = ValueKind::POINTER, tpe = ret.tpe, i = value.i } !compiler::Value, state) 
}

def eval_insn(insn: *compiler::Insn, state: *State) {
    switch insn.kind !int {
        case compiler::InsnKind::INSERTVALUE:
            eval_InsertValue(insn, state)
        case compiler::InsnKind::EXTRACTVALUE:
            eval_ExtractValue(insn, state)
        case compiler::InsnKind::GETELEMENTPTR:
            eval_GetElementPtr(insn, state)
        case compiler::InsnKind::PTRTOINT:
            eval_Ptrtoint(insn, state)
        case compiler::InsnKind::INTTOPTR:
            eval_Inttoptr(insn, state)
        case compiler::InsnKind::TRUNC, compiler::InsnKind::SEXT, compiler::InsnKind::FPTRUNC, compiler::InsnKind::FPEXT:
            eval_Convert(insn, state)
        case compiler::InsnKind::FPTOUI:
            eval_Fptoui(insn, state)
        case compiler::InsnKind::FPTOSI:
            eval_Fptosi(insn, state)
        case compiler::InsnKind::UITOFP:
            eval_Uitofp(insn, state)
        case compiler::InsnKind::SITOFP:
            eval_Sitofp(insn, state)
        case compiler::InsnKind::SREM:
            eval_SRem(insn, state)
        case compiler::InsnKind::UREM:
            eval_URem(insn, state)
        case compiler::InsnKind::AND:
            eval_And(insn, state)
        case compiler::InsnKind::ADD:
            eval_Add(insn, state)
        case compiler::InsnKind::SUB:
            eval_Sub(insn, state)
        case compiler::InsnKind::MUL:
            eval_Mul(insn, state)
        case compiler::InsnKind::SDIV:
            eval_SDiv(insn, state)
        case compiler::InsnKind::UDIV:
            eval_UDiv(insn, state)
        case compiler::InsnKind::FADD:
            eval_FAdd(insn, state)
        case compiler::InsnKind::FSUB:
            eval_FSub(insn, state) 
        case compiler::InsnKind::FMUL:
            eval_FMul(insn, state)
        case compiler::InsnKind::FREM:
            eval_FRem(insn, state)
        case compiler::InsnKind::FDIV:
            eval_FDiv(insn, state)
        case compiler::InsnKind::ICMP:
            eval_Icmp(insn, state)
        case compiler::InsnKind::ALLOCA:
            eval_Alloca(insn, state)
        case compiler::InsnKind::STORE:
            eval_Store(insn, state)
        case compiler::InsnKind::LOAD:
            eval_Load(insn, state)
        case compiler::InsnKind::CALL:
            eval_Call(insn, state)
        case compiler::InsnKind::RET:
            eval_Ret(insn, state)
        case compiler::InsnKind::BR_UNC:
            eval_BrUnc(insn, state)
        case compiler::InsnKind::BR:
            eval_Br(insn, state)
        case compiler::InsnKind::UNREACHABLE:
            errorv("Reached unreachable instruction")
        case:
            error(insn.kind, "\n") 
            assert(false)
    }
}

def eval_block(block: *compiler::Block, state: *State) {
    /*for var i in 0..vector::length(block.insn) {
        let insn = vector::get(block.insn, i) !*compiler::Insn
        print(insn.kind, "\n")
    }
    print("\n")*/

    state.next = block.next
    for var i in 0..vector::length(block.insn) {
        let insn = vector::get(block.insn, i) !*compiler::Insn
        eval_insn(insn, state)
    }
}

def eval(block: *compiler::Block, state: *State) {
    while block {
        eval_block(block, state)
        block = state.next
    }
}

export def eval(cstate: *compiler::State) -> *State {
    var block = cstate.current_function.block
    vector::insert(block.insn, 0, cstate.current_function.allocas)

    let stack_frame = make_stack_frame(block, "<inline>")

    let state = allocate(State)
    @state = {
        cstate = cstate,
        stack = vector::make()
    } !State

    vector::push(state.stack, stack_frame)

    eval(block, state)

    let global_keys = map::keys(cstate.globals)
    for var i in 0..global_keys.size {
        let key = global_keys[i]
        let mem = map::get(cstate.globals, key)
        let global = map::get(state.cstate.result.globals, key) !*compiler::Global
        if not global { continue } // Probably a constant
        if typechecking::is_stub(global.tpe) { continue } // Didn't reference
        let valuep = allocate(compiler::Value)
        @valuep = get(mem, global.tpe)
        global.value = valuep
    }

    return state
}