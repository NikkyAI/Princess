import vector
import map
import compiler
import typechecking
import preprocess
import scope

export type StackFrame = struct {
    locals: *map::Map
    function_name: string
}

export type State = struct {
    globals: *map::Map
    // Map of compiler::Block
    jump_table: *map::Map
    // Vector of StackFrame
    stack: *vector::Vector

    next: *compiler::Block
}

def errorv(msg: string) {
    error("error: [eval] ")
    error(msg)
}

export def get_stack_frame(state: *State) -> *StackFrame {
    return vector::peek(state.stack) !*StackFrame
}

def get(mem: *, tpe: *typechecking::Type) -> compiler::Value {
    switch tpe.kind !int {
        case typechecking::TypeKind::WORD:
            let size = tpe.size
            var result: int64 = 0
            for var i in 0..size {
                result |= (@((mem !*uint8) ++ i) !uint64 << (i * 8))
            }
            if tpe.unsig {
                let sign = (result >> (size - 1) * 8) & 0x80
                result &= ~sign
                if sign {
                    result |= 0x80000000
                }
            }
            return { kind = compiler::ValueKind::INT, tpe = tpe, i = result } !compiler::Value
        case typechecking::TypeKind::BOOL:
            return { kind = compiler::ValueKind::BOOL, tpe = tpe, i = (@(mem !*int8)) !int64 } !compiler::Value
        case typechecking::TypeKind::POINTER:
            // TODO We might want a pointer type
            return { kind = compiler::ValueKind::INT, tpe = tpe, i = @(mem !*int64) }
        case: assert(false)
    }
}

export def get_value(loc: compiler::Value, state: *State) -> compiler::Value {
    if loc.kind == compiler::ValueKind::LOCAL {
        let mem = map::get(get_stack_frame(state).locals, loc.name)
        assert(mem != null)
        return get(mem, loc.tpe)
    } else if loc.kind == compiler::ValueKind::GLOBAL {
        assert(typechecking::is_pointer(loc.tpe))
        var mem = map::get(state.globals, loc.name)
        if not mem {
            mem = allocate(loc.tpe.size)
            let global = map::get(preprocess::compiler_state.result.globals, loc.name) !*compiler::Global
            if global.value {
                set(mem, loc.tpe.tpe, @global.value)
            }
            map::put(state.globals, loc.name, mem)
        }
        return { kind = compiler::ValueKind::INT, tpe = loc.tpe, i = mem !int64 }
    } else {
        return loc
    }
}

def set(mem: *, tpe: *typechecking::Type, value: compiler::Value) {
    switch tpe.kind !int {
        case typechecking::TypeKind::WORD:
            var v = value.i
            var sign = false
            if not tpe.unsig and v < 0 {
                v *= -1
                sign = true
            }
            let size = tpe.size
            if sign {
                v |= 0x80 << size - 1
            }
            for var i in 0..size {
                @(mem !*uint8 ++ i) = (v >> (i * 8)) !uint8
            }
        case typechecking::TypeKind::POINTER:
            (@(mem !*int64)) = value.i
        case typechecking::TypeKind::BOOL:
            (@(mem !*int8)) = value.i !int8
        case: assert(false)
    }
}

export def set_value(loc: compiler::Value, value: compiler::Value, state: *State) {
    if loc.kind == compiler::ValueKind::LOCAL {
        var mem = map::get(get_stack_frame(state).locals, loc.name)
        if not mem {
            mem = allocate(loc.tpe.size)
            map::put(get_stack_frame(state).locals, loc.name, mem)
        }
        set(mem, value.tpe, value)
    } else {
        assert(false)
    }
}

def eval_Load(insn: *compiler::Insn, state: *State) {
    let loc = insn.value.load.loc
    let mem = get_value(loc, state).i !*
    set_value(insn.value.load.value, get(mem, loc.tpe), state)
}

def eval_Store(insn: *compiler::Insn, state: *State) {
    let loc = insn.value.store.loc
    let mem = get_value(loc, state).i !*
    let value = get_value(insn.value.store.value, state)
    set(mem, value.tpe, value)
}

def eval_Alloca(insn: *compiler::Insn, state: *State) {
    let ret = insn.value.alloca.ret
    let mem = allocate(ret.tpe.size)
    let ptr = { kind = compiler::ValueKind::INT, tpe = typechecking::pointer(ret.tpe), i = mem !int64 } !compiler::Value
    set_value(ret, ptr, state)
}

def eval_Add(insn: *compiler::Insn, state: *State) {
    let left = get_value(insn.value.arith.left, state)
    let right = get_value(insn.value.arith.right, state)
    let ret = insn.value.arith.ret

    var result = left.i + right.i
    set_value(ret, { kind = ValueKind::INT, tpe = ret.tpe, i = result } !compiler::Value, state)
}

// TODO This is slow af with all the string comparisons
// possibly use an integer value even tho that makes codegen slightly more complicated
def eval_Icmp(insn: *compiler::Insn, state: *State) {
    let left = get_value(insn.value.cmp.left, state)
    let right = get_value(insn.value.cmp.right, state)
    let ret = insn.value.cmp.ret
    let op = insn.value.cmp.op

    var result = false
    if op == compiler::i_eq {
        result = left.i == right.i
    } else if op == compiler::i_ne {
        result = left.i != right.i
    } else if op == compiler::i_ugt {
        result = left.i !uint64 > right.i !uint64
    } else if op == compiler::i_uge {
        result = left.i !uint64 >= right.i !uint64
    } else if op == compiler::i_ult {
        result = left.i !uint64 < right.i !uint64
    } else if op == compiler::i_ule {
        result = left.i !uint64 <= right.i !uint64
    } else if op == compiler::i_sgt {
        result = left.i > right.i
    } else if op == compiler::i_sge {
        result = left.i >= right.i
    } else if op == compiler::i_slt {
        result = left.i < right.i
    } else if op == compiler::i_sle {
        result = left.i <= right.i
    } else {
        assert(false)
    }

    set_value(ret, { kind = ValueKind::BOOL, tpe = ret.tpe, i = result !int64 } !compiler::Value, state)
}

def eval_insn(insn: *compiler::Insn, state: *State) {
    switch insn.kind !int {
        case compiler::InsnKind::ADD:
            eval_Add(insn, state)
        case compiler::InsnKind::ICMP:
            eval_Icmp(insn, state)
        case compiler::InsnKind::ALLOCA:
            eval_Alloca(insn, state)
        case compiler::InsnKind::STORE:
            eval_Store(insn, state)
        case compiler::InsnKind::LOAD:
            eval_Load(insn, state)
        case:
            error(insn.kind, "\n") 
            assert(false)
    }
}

def eval_block(block: *compiler::Block, state: *State) {
    state.next = block.next
    for var i in 0..vector::length(block.insn) {
        let insn = vector::get(block.insn, i) !*compiler::Insn
        eval_insn(insn, state)
    }
}

def eval(block: *compiler::Block, state: *State) {
    while block {
        eval_block(block, state)
        block = state.next
    }
}

export def eval(block: *compiler::Block) -> *State {
    let start = block

    let stack_frame = allocate(StackFrame)
    @stack_frame = {
        locals = map::make(),
        function_name = "<inline>"
    }

    let state = allocate(State)
    @state = {
        globals = map::make(),
        jump_table = map::make(),
        stack = vector::make()
    } !State

    vector::push(state.stack, stack_frame)

    while block {
        map::put(state.jump_table, block.label_, block)
        block = block.next
    }

    eval(start, state)

    let global_keys = map::keys(state.globals)
    for var i in 0..global_keys.size {
        let key = global_keys[i]
        let mem = map::get(state.globals, key)
        let global = map::get(preprocess::compiler_state.result.globals, key) !*compiler::Global
        let valuep = allocate(compiler::Value)
        @valuep = get(mem, global.tpe)
        global.value = valuep
    }

    return state
}