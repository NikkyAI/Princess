import vector
import map
import compiler
import typechecking
import preprocess
import scope

type StackFrame = struct {
    // Map of compiler::Value
    locals: *map::Map
    ret: *compiler::Value
}

type State = struct {
    // Map of compiler::Block
    jump_table: *map::Map
    // Vector of StackFrame
    stack: *vector::Vector

    next: *compiler::Block
}

def errorv(msg: string) {
    error("error: [eval] ")
    error(msg)
}

def get_stack_frame(state: *State) -> *StackFrame {
    return vector::peek(state.stack) !*StackFrame
}

def get_value(value: compiler::Value, state: *State) -> compiler::Value {
    switch value.kind !int {
        case compiler::ValueKind::LOCAL:
            return @(map::get(get_stack_frame(state).locals, value.name) !*compiler::Value)
        case compiler::ValueKind::GLOBAL:
            return @(@(map::get(preprocess::compiler_state.result.constants, value.name) !*compiler::Global)).value
        case: return value
    }
}

def eval_Add(insn: *compiler::Insn, state: *State) {
    let left = get_value(insn.value.arith.left, state)
    let right = get_value(insn.value.arith.right, state)
    let ret = insn.value.arith.ret

    var result = left.i + right.i
    let value = allocate(compiler::Value)
    @value = { kind = ValueKind::INT, tpe = ret.tpe, i = result } !compiler::Value
    map::put(get_stack_frame(state).locals, ret.name, value)
}

def eval_Icmp(insn: *compiler::Insn, state: *State) {
    let left = get_value(insn.value.cmp.left, state)
    let right = get_value(insn.value.cmp.right, state)
    let ret = insn.value.cmp.ret
    let op = insn.value.cmp.op

    var result = false
    if op == compiler::i_eq {
        result = left.i == right.i
    } else if op == compiler::i_ne {
        result = left.i != right.i
    } else {
        assert(false)
    }

    let value = allocate(compiler::Value)
    @value = { kind = ValueKind::BOOL, tpe = ret.tpe, i = result !int64 } !compiler::Value
    map::put(get_stack_frame(state).locals, ret.name, value)
}

def eval_insn(insn: *compiler::Insn, state: *State) {
    switch insn.kind !int {
        case compiler::InsnKind::ADD:
            eval_Add(insn, state)
        case compiler::InsnKind::ICMP:
            eval_Icmp(insn, state)
        case:
            error(insn.kind, "\n") 
            assert(false)
    }
}

def eval_block(block: *compiler::Block, state: *State) {
    state.next = block.next
    for var i in 0..vector::length(block.insn) {
        let insn = vector::get(block.insn, i) !*compiler::Insn
        eval_insn(insn, state)
    }
}

def make_state(block: *compiler::Block) -> State {
    let stack_frame = allocate(StackFrame)
    @stack_frame = {
        locals = map::make()
    }

    let state = {
        jump_table = map::make(),
        stack = vector::make()
    } !State

    vector::push(state.stack, stack_frame)

    while block {
        map::put(state.jump_table, block.label_, block)
        block = block.next
    }
    
    return state
}

def eval(block: *compiler::Block, state: *State) {
    while block {
        eval_block(block, state)
        block = state.next
    }
}

export def eval_expression(block: *compiler::Block, value: compiler::Value) -> compiler::Value {
    let state = make_state(block)
    eval(block, *state)
    return get_value(value, *state)
}

export def eval(block: *compiler::Block) {
    let state = make_state(block)
    eval(block, *state)
}