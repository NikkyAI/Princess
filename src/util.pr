import buffer

export let MAX_UINT8: uint8 = 0xFF
export let MAX_UINT16: uint16 = 0xFFFF
export let MAX_UINT32: uint32 = 0xFFFFFFFF
export let MAX_UINT64: uint64 = 0xFFFFFFFFFFFFFFFF

export let MIN_INT8: int8 = -0x80
export let MIN_INT16: int16 = -0x8000
export let MIN_INT32: int32 = -0x80000000
export let MIN_INT64: int64 = -0x7FFFFFFFFFFFFFFF - 1

export let MAX_INT8: int8 = 0x7F
export let MAX_INT16: int16 = 0x7FFF
export let MAX_INT32: int32 = 0x7FFFFFFF
export let MAX_INT64: int64 = 0x7FFFFFFFFFFFFFFF

// copy string
export def copy_string(str: string) -> *string {
    var res = allocate(string)
    (@res).size = str.size
    (@res).value = allocate((size_of char) * str.size) !*char
    memcopy(str.value, (@res).value, str.size)
    return res
}

export def find_substr(str: string, search: string, start: int) -> int {
    if start >= length(str) {
        return -1
    }
    for var i in start..length(str) {
        if str[i] == search[0] {
            var j = 0
            while j < length(search) {
                if i + j >= length(str) {
                    return -1
                }
                if str[i + j] != search[j] {
                    break
                }
                j += 1
            }
            if j == length(search) {
                return i
            }
            i += j
        }
    }
    return -1
}

export def replace_all(str: string, search: string, replace: string) -> string {
    let buf = buffer::make_buffer()

    var i = 0
    var j = find_substr(str, search, 0)
    while j != -1 {
        var before = zero_allocate(char, j - i + 1)
        memcopy(str.value ++ i, before.value, j - i)
        buffer::append_str(*buf, before)
        buffer::append_str(*buf, replace)
        free(before)

        i = j + (length(search) !int)
        j = find_substr(str, search, i)
    }
    var after = zero_allocate(char, length(str) - i + 1)
    memcopy(str.value ++ i, after.value, length(str) - i)
    buffer::append_str(*buf, after)
    free(after)
    return buffer::to_string(*buf)
}

export def split_lines(s: string) -> [string] {
    let size = length(s)

    var lines = 1
    for var i in 0..size {
        let ch = s[i]
        if ch == '\n' {
            lines += 1
        }
    }
    var result = allocate(string, lines)

    var line = 0
    var j = 0
    var k = 0
    var l = 0
    while j < size {
        let ch = s[j]
        if ch == '\n' {
            if j - 1 >= 0 and s[j - 1] == '\r' {
                l = j - 1
            } else {
                l = j
            }

            result[line] = allocate(char, l - k + 1)
            memcopy(s.value ++ k, result[line].value, l - k)
            result[line][l - k] = '\0'

            k = j + 1
            line += 1
        }
        j += 1
    }

    result[line] = allocate(char, size - k + 1)
    memcopy(s.value ++ k, result[line].value, size - k)
    result[line][size - k] = '\0'

    return result
}

export def dirname(file: string) -> string {
    var last_slash = -1
    for var i in 0..file.size {
        let c = file[i]
        if c == '/' or c == '\\' {
            last_slash = i
        }
    }
    let ret = zero_allocate(char, last_slash + 2)
    memcopy(file.value, ret.value, last_slash + 1)
    return ret
}

export def basename(file: string) -> string {
    var last_slash = 0
    for var i in 0..file.size {
        let c = file[i]
        if c == '/' or c == '\\' {
            last_slash = i
        }
    }
    let ret = zero_allocate(char, file.size - last_slash)
    memcopy(file.value ++ last_slash, ret.value, file.size - last_slash)
    return ret
}

export def exe_folder -> string {
    let exe_file = allocate(char, PATH_MAX)
    executable_file(exe_file.value)
    exe_file.size = strlen(exe_file) + 1
    return dirname(exe_file)
}

export def read_all(fh: File) -> string {
    seek(fh, 0, SEEK_END)
    let filesize = tell(fh)
    rewind(fh)
    let buf = allocate(char, filesize + 1)
    read(fh, buf, filesize)
    buf[filesize] = '\0'

    return buf
}

export def int_to_hex_str(n: uint64) -> string {
    let digits = "0123456789ABCDEF"

    var str: string
    str.value = zero_allocate((size_of char) * 19) !*char
    str[0] = '0'
    str[1] = 'x'
    var i = 2

    if n == 0 {
        str[i] = '0'
        str.size = 4
        return str
    }

    var shifter: uint64 = n
    while shifter {
        i += 1
        shifter /= 16
    }

    str.size = i + 1

    while n {
        i -= 1
        str[i] = digits[n % 16]
        n /= 16
    }
    
    return str
}

export def double_to_hex_str(f: double) -> string {
    var n = @(*f !*uint64)
    return int_to_hex_str(n)
}

export def uint_to_str_sign(sign: int, n: uint64) -> string {
    let digits = "0123456789"

    var str: string
    str.value = zero_allocate((size_of char) * 22) !*char

    if n == 0 {
        str[0] = '0'
        str.size = 2
        return str
    }

    var i: uint64 = 0
    if sign < 0 {
        str[i] = '-'
        i += 1
    }

    var shifter: uint64 = n
    while shifter {
        i += 1
        shifter /= 10
    }

    str.size = i + 1

    while n {
        i -= 1
        str[i] = digits[n % 10]
        n /= 10
    }

    return str
}

export def uint_to_str(i: uint64) -> string {
    return uint_to_str_sign(1, i)
}

export def int_to_str(i: int64) -> string {
    var sign = 1
    if i < 0 {
        i *= -1
        sign = -1
    }
    return uint_to_str_sign(sign, i)
}

export def exists(filename: string) -> bool {
    let fp = open(filename, "r")
    if fp {
        close(fp)
        return true
    }
    return false
}

export def gcd(a: int, b: int) -> int {
    while b != 0 {
        var t = b
        b = a % b
        a = t
    }
    return a
}

export def lcm(a: int, b: int) -> int {
    return (a * b) / gcd(a, b)
}

export def millis -> int64 {
    var now: cstd::s_timespec
    cstd::timespec_get(*now, 1)
    return (now.tv_sec !int64) * 1000 + (now.tv_nsec !int64) / 1000000
}

// TODO Unicode...
export def repr(s: string, zero: bool) -> string {
    let buf = buffer::make_buffer()
    buffer::append_str(*buf, "\"")
    for var i in 0..length(s) {
        let c = s[i] !uint8
        if c < 32 or c > 126 or c == 34 {
            let esc = int_to_hex_str(c)
            esc.value = esc.value ++ 2
            esc.size = strlen(esc) + 1
            buffer::append_char(*buf, '\\')
            if length(esc) == 2 {
                buffer::append_str(*buf, esc)
            } else {
                buffer::append_char(*buf, '0')
                buffer::append_str(*buf, esc)
            }
        } else if c == 92 {
            buffer::append_str(*buf, "\\5C") 
        } else {
            buffer::append_char(*buf, c)
        }
    }
    if zero {
        buffer::append_str(*buf, "\\00")
    }
    buffer::append_char(*buf, '"')
    return buffer::to_string(*buf)
}

export def strip_margin(s: string) -> string {
    let buf = buffer::make_buffer()
    let len = length(s)

    var i = 0
    while i < len {
        var c = s[i]
        if c == '\n' or i == 0 {
            if c == '\n' { 
                buffer::append_char(*buf, '\n')
            }
            i += 1; c = s[i]
            while (c == ' ' or c == '\t') and (i + 1) < len {
                i += 1; c = s[i]
            }
            if c == '|' and (i + 1) < len { 
                i += 1
                continue
            }
        }
        buffer::append_char(*buf, c)
        i += 1
    }
    return buffer::to_string(*buf)
}

const TIOCGWINSZ = 0x5413

export def get_terminal_size -> cstd::s_winsize {
    var winsize: cstd::s_winsize
    cstd::ioctl(1, TIOCGWINSZ, *winsize)
    return winsize
}

// https://stackoverflow.com/a/23457543/3258949
// TODO This algorithm is very inefficient

def match(pattern: string, candidate: string, p: int, c: int) -> bool {
    if pattern[p] == '\0' {
        return candidate[c] == '\0'
    } else if pattern[p] == '*' {
        while candidate[c] != '\0' {
            if match(pattern, candidate, p + 1, c) {
                return true
            }
            c += 1
        }
        return match(pattern, candidate, p + 1, c)
    } else if pattern[p] != '?' and pattern[p] != candidate[c] {
        return false
    } else {
        return match(pattern, candidate, p + 1, c + 1)
    }
}

export def match(pattern: string, candidate: string) -> bool {
    return match(pattern, candidate, 0, 0)
}