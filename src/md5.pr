// https://github.com/pod32g/MD5/blob/master/md5.c

// TODO These two should be constants of the type [?; uint32]
// but that isn't supported right now

let k: [?; int32] = [
    0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee,
    0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501,
    0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be,
    0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821,
    0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa,
    0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8,
    0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed,
    0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a,
    0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c,
    0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70,
    0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05,
    0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665,
    0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039,
    0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1,
    0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1,
    0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391
]

let r: [?; int32] = [
    7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22,
    5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20,
    4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23,
    6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21
]

def left_rotate(x: uint32, c: uint32) -> uint32 {
    return (x << c) | (x >> (32 - c))
}

def to_bytes(val: uint32, bytes: *uint8) {
    bytes[0] = val !uint8
    bytes[1] = (val >> 8 ) !uint8
    bytes[2] = (val >> 16) !uint8
    bytes[3] = (val >> 24) !uint8
}
 
def to_int32(bytes: *uint8) -> uint32  {
    return bytes[0] !uint32 | 
        (bytes[1] !uint32 << 8  !uint32) |
        (bytes[2] !uint32 << 16 !uint32) |
        (bytes[3] !uint32 << 24 !uint32)
}

def md5(initial_msg: string) -> [16; uint8] {

    let initial_len = length(initial_msg) !uint32
 
    // These vars will contain the hash
    var h0: uint32, h1: uint32, h2: uint32, h3: uint32
 
    // Message (to prepare)
    var msg: *uint8 = null
 
    var new_len: size_t, offset: size_t
    var w: [16; uint32]
    var a: uint32, b: uint32, c: uint32, d: uint32, 
        f: uint32, g: uint32, temp: uint32
 
    // Initialize variables - simple count in nibbles:
    h0 = 0x67452301
    h1 = 0xefcdab89
    h2 = 0x98badcfe
    h3 = 0x10325476
 
    //Pre-processing:
    //append "1" bit to message    
    //append "0" bits until message length in bits ≡ 448 (mod 512)
    //append length mod (2^64) to message
    
    new_len = initial_len + 1
    while new_len % (512 / 8) != 448 / 8 {
        new_len += 1
    }
        
    msg = allocate(new_len + 8) !*uint8
    memcopy(initial_msg.value, msg, initial_len)

    msg[initial_len] = 0x80 // append the "1" bit most significant bit is "first"

    offset = initial_len + 1
    while offset < new_len {
        msg[offset] = 0 // append "0" bits
        offset += 1
    } 
        
    // append the len in bits at the end of the buffer.
    to_bytes(initial_len * 8, msg ++ new_len)
    // initial_len>>29 == initial_len*8>>32, but avoids overflow.
    to_bytes(initial_len >> 29, msg ++ (new_len + 4))

    // Process the message in successive 512-bit chunks:
    //for each 512-bit chunk of message:
    offset = 0
    while offset < new_len {
 
        // break chunk into sixteen 32-bit words w[j], 0 ≤ j ≤ 15
        for var i in 0..16 {
            w[i] = to_int32(msg ++ (offset + i * 4))
        }
            
        // Initialize hash value for this chunk:
        a = h0
        b = h1
        c = h2
        d = h3
 
        // Main loop:
        for var i in 0..64 {
            if i < 16 {
                f = (b & c) | ((~b) & d)
                g = i
            } else if i < 32 {
                f = (d & b) | ((~d) & c)
                g = (5 * i + 1) % 16
            } else if i < 48 {
                f = b ^ c ^ d
                g = (3 * i + 5) % 16          
            } else {
                f = c ^ (b | (~d))
                g = (7 * i) % 16
            }
 
            temp = d
            d = c
            c = b
            b = b + left_rotate((a + f + k[i] + w[g]), r[i])
            a = temp 
        }
 
        // Add this chunk's hash to result so far:
        h0 += a
        h1 += b
        h2 += c
        h3 += d

        offset += 512 / 8
    }
 
    // cleanup
    free(msg)
 
    //var char digest[16] := h0 append h1 append h2 append h3 //(Output is in little-endian)
    var digest: [16; uint8]
    to_bytes(h0, *digest[0])
    to_bytes(h1, *digest[4])
    to_bytes(h2, *digest[8])
    to_bytes(h3, *digest[12])

    return digest
}

def high(md5: [16; uint8]) -> int64 {
    var res: int64 = 0
    for var i in 0..8 {
        let j = 15 - i
        res |= md5[j] !uint64 << ((7 - i) * 8)
    }
    return res
}

def low(md5: [16; uint8]) -> int64 {
    var res: int64 = 0
    for var i in 0..8 {
        let j = 7 - i
        res |= md5[j] !uint64 << ((7 - i) * 8)
    }
    return res
}