let INITIAL_SIZE = 16
export let sentinel = 1 !*

type Entry

type Entry = struct {
    key: string
    value: *
    next: *Entry
}

export type Map = struct {
    size: size_t
    entries: [*Entry]
}

def hash(str: string) -> uint32 {
    var r: uint32 = 7
    for var i in 0..length(str) {
        r = r * 31 + str[i]
    }
    return r
}

def do_put(entries: [*Entry], key: string, value: *) -> bool

def maybe_rehash(map: *Map) {
    let allocated = (@map).entries.size
    if (@map).size / (allocated !double) < 0.7 {
        return
    }
    
    let entries = (@map).entries
    let new_entries = zero_allocate(type *Entry, allocated * 2)
    
    for var i in 0..entries.size {
        var entry = entries[i]
        if entry {
            do_put(new_entries, (@entry).key, (@entry).value)
            
            if (@entry).next {
                var entry2 = entry
                while (@entry2).next {
                    var entry3 = entry2
                    entry2 = (@entry2).next

                    do_put(new_entries, (@entry2).key, (@entry2).value)
                    free(entry3)
                }
            } else {
                free(entry)
            }            
        }
    }

    free(entries)
    (@map).entries = new_entries
}

export def make_size(size: size_t) -> *Map {
    var map = allocate(Map)
    (@map).entries = zero_allocate(type *Entry, size)
    (@map).size = 0
    return map
}

export def make -> *Map {
    return make_size(INITIAL_SIZE)
}

export def get(map: *Map, key: string) -> * {
    let h = hash(key)
    let index = h % (@map).entries.size
    var entry = (@map).entries[index]
    if entry {
        if (@entry).key == key {
            return (@entry).value
        }
        while (@entry).next {
            entry = (@entry).next
            if (@entry).key == key {
                return (@entry).value
            }
        }
        return null
    } else {
        return null
    }
}

export def contains(map: *Map, key: string) -> bool {
    let value = get(map, key)
    return value != null
}

// Returns true when a new entry was created, otherwise false
def do_put(entries: [*Entry], key: string, value: *) -> bool {
    let h = hash(key)
    let index = h % entries.size
    var entry = entries[index]

    if entry {
        if (@entry).key == key {
            (@entry).value = value
            return false
        }
        while (@entry).next {
            entry = (@entry).next
            if (@entry).key == key {
                (@entry).value = value
                return false
            }
        }
        var entry2 = allocate(Entry)
        (@entry2).key = key
        (@entry2).value = value
        (@entry2).next = null

        (@entry).next = entry2
    } else {
        entry = allocate(Entry)
        (@entry).key = key
        (@entry).value = value
        (@entry).next = null

        entries[index] = entry
    }
    return true
}

export def put(map: *Map, key: string, value: *) {
    maybe_rehash(map)
    if do_put((@map).entries, key, value) {
        (@map).size += 1
    }
}

export def remove(map: *Map, key: string) {
    let h = hash(key)
    let index = h % (@map).entries.size
    var entry = (@map).entries[index]
    if entry {
        if (@entry).key == key {
            (@map).size -= 1
            if (@entry).next {
                (@map).entries[index] = (@entry).next
            } else {
                (@map).entries[index] = null
            }
        } else {
            var entry2 = (@entry).next
            while entry2 {
                if (@entry2).key == key {
                    (@map).size -= 1
                    if (@entry2).next {
                        (@entry).next = (@entry2).next
                    } else {
                        (@entry).next = null
                    }
                }
                
                let entry3 = entry
                entry = entry2
                entry2 = (@entry3).next
            }
        }
    }
}

export def size(map: *Map) -> size_t {
    return (@map).size
}

export def keys(map: *Map) -> [string] {
    let keys = allocate(string, size(map))
    var index = 0
    for var i in 0..(@map).entries.size {
        var entry = (@map).entries[i]
        if entry {
            keys[index] = (@entry).key
            index += 1
            while (@entry).next {
                keys[index] = (@(@entry).next).key
                index += 1
                entry = (@entry).next
            }
        }
    }
    return keys
}