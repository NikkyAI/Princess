// This file handles all global state related to compiling

import vector
import util
import buffer
import map
import lexer
import compiler
import parser
import typechecking
import scope
import codegen
import debug
import builtins
import preprocess
import errors
import linux

// Contains the scopes for already compiled modules 
// map of Module
export let modules = map::make()
export var include_path = vector::make()
export var time_report = false
export var dependency_graph = false

let include = zero_allocate(char, PATH_MAX)
concat(include, util::exe_folder(), "/../include")
include.size = strlen(include) + 1

let stdlib = zero_allocate(char, PATH_MAX)
concat(stdlib, util::exe_folder(), "/../std")
stdlib.size = strlen(stdlib) + 1

vector::push(include_path, util::copy_string(include))
vector::push(include_path, util::copy_string(stdlib))
vector::push(include_path, util::copy_string("."))
let tmpfolder = "/tmp/princess.XXXXXX"
export var outfolder = make_string(linux::mkdtemp(tmpfolder.value))

export var outfile = "a.out"

def create_version_string -> string {
    let buf = buffer::make_buffer()
    buffer::append_str(*buf, "Princess ")
    let version_file = zero_allocate(char, PATH_MAX)
    concat(version_file, util::exe_folder(), "/../version")
    version_file.size = strlen(version_file) + 1
    let fp = open(version_file, "r")
    let version_str = util::replace_all(util::read_all(fp), "VERSION=", "")
    buffer::append_str(*buf, version_str)
    close(fp)
    return buffer::to_string(*buf)
}

// TODO Make this a constant
export let version = create_version_string()

// Debug stuff 
export var print_ast = false
// This flag controls emitting debug information to llvm
export var debug_sym = false

export def add_define(define: string) {
    let tokens = lexer::lex(define)
    let program = parser::parse(tokens, [define], "<internal>", "<internal>")
    if errors::error_count != 0 {
        error("Error parsing define `", define, "`\n")
        exit(1)
    }
    let body = program.value.body
    if vector::length(body) != 1 {
        error("Too many statements in define `", define, "`\n")
        exit(1)
    }
    let node = vector::peek(body) !*parser::Node
    if node.kind == parser::NodeKind::ASSIGN {
        if vector::length(node.value.assign.left) != vector::length(node.value.assign.right) != 1 {
            error("Invalid define `", define, "`, must be single assignment\n")
            exit(1)
        }
        let identifier = vector::peek(node.value.assign.left) !*parser::Node
        let right = vector::peek(node.value.assign.right) !*parser::Node

        if identifier.kind != parser::NodeKind::IDENTIFIER {
            error("Invalid define `", define, "`, must be single assignment\n")
            exit(1)
        }

        let value = allocate(compiler::Value)

        switch right.kind {
            /*case parser::NodeKind::STRING:
                @value = { 
                    kind = compiler::ValueKind::STRING, 
                    tpe = typechecking::make_static_array(builtins::char_, right.value.str.size), 
                    s = right.value.str 
                } !compiler::Value*/
            case parser::NodeKind::INTEGER:
                @value = { kind = compiler::ValueKind::INT, tpe = builtins::int_, i = right.value.i } !compiler::Value
            case parser::NodeKind::BOOLEAN:
                @value = { kind = compiler::ValueKind::BOOL, tpe = builtins::bool_, i = right.value.i } !compiler::Value
            case parser::NodeKind::CHAR:
                @value = { kind = compiler::ValueKind::INT, tpe = builtins::char_, i = right.value.i } !compiler::Value
            case parser::NodeKind::FLOAT:
                @value = { kind = compiler::ValueKind::FLOAT, tpe = builtins::double_, f = right.value.f } !compiler::Value
            case: error("Invalid define, `", define, "`, must be basic type\n")
        }
        scope::create_variable(builtins::builtins, identifier, parser::ShareMarker::NONE, parser::VarDecl::CONST, value.tpe, value)
    } else if node.kind == parser::NodeKind::IDENTIFIER {
        let value = allocate(compiler::Value)
        @value = { kind = compiler::ValueKind::BOOL, tpe = builtins::bool_, i = true !int64 } !compiler::Value
        scope::create_variable(builtins::builtins, node, parser::ShareMarker::NONE, parser::VarDecl::CONST, builtins::bool_, value)
    } else {
        error("Invalid define `", define, "`, must be an assignment or an identifier\n")
        exit(1)
    }
}

export type Stage = enum {
    PREPROCESS
    TYPECHECKING
    COMPILING
}

export type Module = struct {
    // This is true if the module has been forward declared
    // By use of type module::Type
    forward_declared: bool
    filename: string
    llfile: string
    module: string
    node: *parser::Node
    scope: *scope::Scope
    // This is code that gets inserted by preprocess/eval
    // it must be prepended to the main function 
    code: *compiler::Block
    result: *compiler::Result
    imported: *map::Map
    difile: *compiler::Value
    stage: Stage
    // Vector of Module
    dependants: *vector::Vector
}

export def is_preload(module: *Module) -> bool {
    let mfilename = zero_allocate(char, PATH_MAX)
    defer free(mfilename)
    absolute_path(module.filename.value, mfilename.value)
    mfilename.size = strlen(mfilename) + 1

    let ifilename = zero_allocate(char, PATH_MAX)
    defer free(ifilename)
    absolute_path(include.value, ifilename.value)
    ifilename.size = strlen(ifilename) + 1

    return starts_with(mfilename, ifilename)
}

export def get_forward_declared_scope(ident: *parser::Node) -> *scope::Scope {

    let buf = buffer::make_buffer()
    let len = vector::length((@ident).value.identifier.path) - 1
    for var i in 0..len {
        buffer::append_str(*buf, @(vector::get((@ident).value.identifier.path, i) !*string))
        if i < len - 1 {
            buffer::append_str(*buf, "::")
        }
    }
    let modulename = buffer::to_string(*buf)

    var module = map::get(modules, modulename) !*Module
    if module {
        return (@module).scope
    }
    
    module = allocate(Module)
    @module = {
        forward_declared = true,
        scope = scope::enter_function_scope(builtins::builtins)
    }

    map::put(modules, modulename, module)

    return (@module).scope
}

export def find_module_file(module: *parser::Node) -> string {
    assert((@module).kind == parser::NodeKind::IDENTIFIER)
    let ident = (@module).value.identifier.path
    let path = zero_allocate(char, PATH_MAX)

    let len = vector::length(ident)
    for var i in 0..len {
        var str = @(vector::get(ident, i) !*string)
        concat(path, str)
        if i < len - 1 {
            concat(path, "/")
        }
    }
    for var i in 0..vector::length(include_path) {
        let module_path = zero_allocate(char, PATH_MAX)
        concat(module_path, @(vector::get(include_path, i) !*string))
        concat(module_path, "/", path, ".pr")
        module_path.size = strlen(module_path) + 1
        
        if util::exists(module_path) {
            return module_path
        }
    }
    return ""
}

// name is an identifier
export def typecheck_module(name: *parser::Node) -> *Module {
    let modulename = parser::identifier_to_str(name)
    var module = map::get(modules, modulename) !*Module
    if module and module.stage < Stage::TYPECHECKING {
        module.stage = Stage::TYPECHECKING
        typechecking::typecheck(module)
        return module
    }
    return null
}

export def compile_module(name: *parser::Node) -> *Module {
    let modulename = parser::identifier_to_str(name)
    var module = map::get(modules, modulename) !*Module
    if module and module.stage < Stage::COMPILING {
        module.stage = Stage::COMPILING
        compiler::compile(module)
        return module
    }
    return null
}

export def preprocess_file(filename: string, modulename: string, forward_declared: *Module) -> *Module {
    let fh = open(filename, "rb")
    if not fh {
        error("File \"", filename, "\" doesn't exist\n")
    } else {
        let buf = util::read_all(fh)
        close(fh)
        let lines = util::split_lines(buf)

        let tokens = lexer::lex(buf)
        free(buf)
        let node = parser::parse(tokens, lines, filename, modulename)
        if print_ast {
            debug::print_node(node)
        }
        
        var sc: *scope::Scope
        var module: *Module
        if forward_declared { 
            module = forward_declared 
            sc = (@forward_declared).scope
        } else {
            module = allocate(Module)
            sc = scope::enter_function_scope(builtins::builtins)
        }

        @module = {
            forward_declared = false,
            filename = filename,
            module = modulename,
            node = node,
            scope = sc,
            result = compiler::make_result(),
            code = compiler::make_block(),  
            imported = map::make(),
            dependants = vector::make()
        } !Module

        map::put(modules, modulename, module)

        preprocess::preprocess(module)

        return module
    }
    return null
}

// TODO This is inconsistent with the functions above, as a cached module is returned
// name is an identifier
export def preprocess_module(name: *parser::Node) -> *Module {
    let modulename = parser::identifier_to_str(name)
    var module = map::get(modules, modulename) !*Module
    if not module or (@module).forward_declared {
        let filename = find_module_file(name)
        if length(filename) == 0 {
            return null
        }
        module = preprocess_file(filename, modulename, module)
    }

    return module
}

export def compile_main_file(filename: string) {
    let start_frontend = util::millis()

    var module = preprocess_file(filename, "main", null)
    if not module { exit(1) }

    typechecking::typecheck(module)
    module.stage = Stage::TYPECHECKING
    compiler::compile(module)
    module.stage = Stage::COMPILING

    if dependency_graph {
        print_dependency_graph(module)
        exit(0)
    }

    if time_report {
        print("Frontend: \n")
        print("--------------------------------------\n")
        print("              Lexing: ", lexer::time_spent / 1000.0, "s \n")
        print("             Parsing: ", parser::time_spent / 1000.0, "s \n")
        print("Constant propagation: ", preprocess::time_spent / 1000.0, "s \n")
        print("        Typechecking: ", typechecking::time_spent / 1000.0, "s \n")
        print("           Compiling: ", compiler::time_spent / 1000.0, "s \n")
    }

    let end_frontend = util::millis()

    if errors::error_count == 0 {
        let exe_folder = util::exe_folder()
        let compile_header = buffer::make_buffer()
        buffer::append_str(*compile_header, "clang-12 -S -emit-llvm -o ")
        buffer::append_str(*compile_header, outfolder)
        buffer::append_str(*compile_header, "/princess.ll -x c ")
        buffer::append_str(*compile_header, exe_folder)
        buffer::append_str(*compile_header, "/../princess.h")
        system(buffer::to_string(*compile_header))

        let link_command = buffer::make_buffer()
        buffer::append_str(*link_command, "llvm-link-12 -S -o ")
        buffer::append_str(*link_command, outfolder)
        buffer::append_str(*link_command, "/out.ll ")
        buffer::append_str(*link_command, outfolder)
        buffer::append_str(*link_command, "/princess.ll ")

        let filenames = map::keys(modules)
        for var i in 0..filenames.size {
            let filename = filenames[i]
            let module = map::get(modules, filename) !*Module
            codegen::gen(module)

            buffer::append_str(*link_command, (@module).llfile)
            buffer::append_char(*link_command, ' ')
        }

        if time_report {
            print("             Codegen: ", codegen::time_spent / 1000.0, "s \n")
            print("--------------------------------------\n")
            print("Total time frontend: ", (end_frontend - start_frontend) / 1000.0, "s \n")
            print("======================================\n")
            print("Backend: \n")
        }

        let start_linking = util::millis()
        system(buffer::to_string(*link_command))
        let end_linking = util::millis()

        let start_compiling = util::millis()
        // TODO Add linker flags
        let compile_command = buffer::make_buffer()
        buffer::append_str(*compile_command, "clang-12 -lrt -lm -lpthread -lcrypt -lffi --output ")
        buffer::append_str(*compile_command, outfile)
        buffer::append_char(*compile_command, ' ')
        buffer::append_str(*compile_command, outfolder)
        buffer::append_str(*compile_command, "/out.ll")

        system(buffer::to_string(*compile_command))

        let end_compiling = util::millis()

        if time_report {
            print("--------------------------------------\n")
            print("  Linking: ", (end_linking - start_linking) / 1000.0, "s \n")
            print("Compiling: ", (end_compiling - start_compiling) / 1000.0, "s \n")
            print("======================================\n")
            print("Total time backend: ", (end_compiling - start_linking) / 1000.0, "s \n")
            print("======================================\n")
            print("Total time: ", (end_compiling - start_frontend) / 1000.0, "s \n")
        }
    }
}


def print_dependency_graph(module: *Module, indent: string, last: bool) {
    let branch = "└── " if last else "├── "
    print(indent, branch, module.module, "\n")

    let buf = buffer::make_buffer()
    buffer::append_str(*buf, indent)
    if last {
        buffer::append_str(*buf, "    ")
    } else {
        buffer::append_str(*buf, "│   ")
    }
    indent = buffer::to_string(*buf)
    
    let len = vector::length(module.dependants)
    for var i in 0..len {
        let dependant = vector::get(module.dependants, i) !*Module
        print_dependency_graph(dependant, indent, i == len - 1)
    }
}

def print_dependency_graph(module: *Module) {
    print_dependency_graph(module, "", true)
}