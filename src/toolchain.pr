// This file handles all global state related to compiling

import vector
import util
import map
import set
import lexer
import compiler
import parser
import typechecking
import scope
import codegen
import debug
import builtins
import consteval
import errors

// Contains the scopes for already compiled modules 
// map of Module
export let modules = map::make(type &Module)

export def find_module(name: &string) -> &Module {
    let keys = modules.keys()
    for var i in 0..keys.size {
        let module = modules[keys[i]]
        if module.module == name {
            return module
        }
    }
    return null
}

export def find_module_by_path(path: &string) -> &Module {
    let keys = modules.keys()
    for var i in 0..keys.size {
        let module = modules[keys[i]]
        if module.filename == path {
            return module
        }
    }
    return null
}

export var file_loader: (&string) -> (&string) = *load_file

export var include_path = vector::make(type &string)
export var clang_flags = vector::make(type &string)
export var link_directories = vector::make(type &string)
export var link_libraries = vector::make(type &string)
export var link_flags = vector::make(type &string)

export var time_report = false
export var dependency_graph = false

let include: &string = util::exe_folder() + "/../include"
let stdlib: &string = util::exe_folder() + "/../std"

include_path.push(include + ("/windows" if defined WIN32 else "/linux"))
include_path.push(include)
include_path.push(stdlib)
include_path.push(".")
export var outfolder = util::tmpfolder("princess")

#if defined WIN32 {
    export var outfile: &string = "a.exe"
    let clang = "clang.exe"
} else {
    export var outfile: &string = "a.out"
    let clang = "clang-13"
}

def create_version_string -> string {
    var ret: &string = "Princess "
    let version_file = util::exe_folder() + "/../version"
    let fp = open(@version_file, "r")
    let version_str = util::replace_all(util::read_all(fp), "VERSION=", "")
    ret += version_str
    close(fp)
    return @ret
}

export const version = create_version_string()

// Debug stuff 
export var print_ast = false
// This flag controls emitting debug information to llvm
export var debug_sym = false

var main_module_file: &string

export def add_define(define: &string) {
    let tokens = lexer::lex(define)
    let program = parser::parse(tokens, [define], "<internal>", "<internal>")
    if errors::error_count != 0 {
        error("Error parsing define `", define, "`\n")
        exit(1)
    }
    delete(tokens)
    let body = program.body
    if vector::length(body) != 1 {
        error("Too many statements in define `", define, "`\n")
        exit(1)
    }
    let node = vector::peek(body)
    if node.kind == parser::NodeKind::ASSIGN {
        if vector::length(node.value.assign.left) != vector::length(node.value.assign.right) != 1 {
            error("Invalid define `", define, "`, must be single assignment\n")
            exit(1)
        }
        let identifier = vector::peek(node.value.assign.left)
        let right = vector::peek(node.value.assign.right)

        if identifier.kind != parser::NodeKind::IDENTIFIER {
            error("Invalid define `", define, "`, must be single assignment\n")
            exit(1)
        }

        var value: &compiler::Value

        switch right.kind {
            /*case parser::NodeKind::STRING:
                @value = { 
                    kind = compiler::ValueKind::STRING, 
                    tpe = typechecking::make_static_array(builtins::char_, right.value.str.size), 
                    s = right.value.str 
                } !compiler::Value*/
            case parser::NodeKind::INTEGER:
                value = { kind = compiler::ValueKind::INT, tpe = builtins::int_, i = right.value.i } !&compiler::Value
            case parser::NodeKind::BOOLEAN:
                value = { kind = compiler::ValueKind::BOOL, tpe = builtins::bool_, i = right.value.i } !&compiler::Value
            case parser::NodeKind::CHAR:
                value = { kind = compiler::ValueKind::INT, tpe = builtins::char_, i = right.value.i } !&compiler::Value
            case parser::NodeKind::FLOAT:
                value = { kind = compiler::ValueKind::FLOAT, tpe = builtins::double_, f = right.value.f } !&compiler::Value
            case: error("Invalid define, `", define, "`, must be basic type\n")
        }
        scope::create_variable(builtins::builtins, identifier, parser::ShareMarker::NONE, parser::VarDecl::CONST, value.tpe, value)
    } else if node.kind == parser::NodeKind::IDENTIFIER {
        let value = { kind = compiler::ValueKind::BOOL, tpe = builtins::bool_, i = true !int64 } !&compiler::Value
        scope::create_variable(builtins::builtins, node, parser::ShareMarker::NONE, parser::VarDecl::CONST, builtins::bool_, value)
    } else {
        error("Invalid define `", define, "`, must be an assignment or an identifier\n")
        exit(1)
    }
}

export type Stage = enum {
    PREPROCESS
    TYPECHECKING
    COMPILING
}

export type Module = struct {
    filename: &string
    file: &string
    module: &string
    text: &string
    lines: &[&string]
    node: &parser::Node
    scope: &scope::Scope
    // This is code that gets inserted by consteval/eval
    // it must be prepended to the main function 
    code: &compiler::Block
    result: &compiler::Result
    // TODO This should not be needed
    imported: &SSet
    difile: &compiler::Value
    stage: Stage
    imports: &Set(&string)
    dependants: &Set(weak_ref(Module))
    // List of Type
    // This is a list of functions that are generated for dynamic dispatch
    dyn_dispatch: &Vector(&typechecking::Type)
    // This is needed to generate functions from create_destructor
    compiler_state: &compiler::State
    state: &typechecking::State
    unresolved: &Map(scope::Ident, weak_ref(scope::Value))
}

export def hash(this: &Module) -> uint64 {
    return map::hash(this.filename)
}
export def == (this: &Module, other: &Module) -> bool {
    if not this and not other { return true }
    if not this or not other { return false }
    return this.filename == other.filename
}
export def != (this: &Module, other: &Module) -> bool {
    return not (this == other)
}

export def make_module(
    filename: &string, modulename: &string, 
    node: &parser::Node, scpe: &scope::Scope, 
    text: &string = null, lines: &[&string] = null
) -> &Module {

    let module = {
        text = text,
        lines = lines,
        filename = filename,
        module = modulename,
        node = node,
        scope = scpe,
        result = compiler::make_result(),
        code = compiler::make_block(),  
        imported = set::make(),
        imports = set::make(type &string),
        dependants = set::make(type weak_ref(Module)),
        dyn_dispatch = vector::make(type &typechecking::Type),
        unresolved = map::make(scope::Ident, type weak_ref(scope::Value))
    } !&Module
    module.compiler_state = compiler::make_state(module)
    module.file = util::replace_all(module.module, "::", ".")
    return module
}

export def is_preload(module: &Module) -> bool {
    if module.module == "runtime" { 
        return true 
    } else if module.module == "const" {
        return false
    }

    let mfilename = absolute_path(module.filename)
    let ifilename = absolute_path(include)
    let std_filename = absolute_path(stdlib)

    return starts_with(mfilename, ifilename) or starts_with(mfilename, std_filename)
}

export def identifier_to_path(module: &parser::Node) -> &string {
    assert module.kind == parser::NodeKind::IDENTIFIER
    
    var path: &string = ""
    if module.value.identifier.prefixed {
        path = "/"
    }

    let ident = module.value.identifier.path
    let len = vector::length(ident)
    for var i in 0..len {
        var str = ident[i]
        path += str
        if i < len - 1 {
            path += "/"
        }
    }
    return path
}

export def find_module_file(module: &parser::Node, calling_module: &Module) -> &string {
    return find_module_file(identifier_to_path(module), calling_module)
}

export def find_module_file(path: &string, calling_module: &Module) -> &string {
    if path == "runtime" {
        return "runtime"
    } else if path == "main" {
        return main_module_file
    }

    if not path.starts_with("/") and calling_module.filename {
        let base = util::dirname(calling_module.filename)
        let module_path = absolute_path(base + "/" + path + ".pr")
        if util::exists(module_path) {
            return module_path
        }
    }
    for var i in 0..vector::length(include_path) {
        let module_path = absolute_path(include_path[i] + "/" + path + ".pr")
        if util::exists(module_path) {
            return module_path
        }
    }
    return null
}

// name is an identifier
export def typecheck_module(name: &parser::Node, calling_module: &Module) -> &Module {
    let filename = find_module_file(name, calling_module)
    if not filename { return null }
    var module = modules.get_or_default(filename, null)
    if module and module.stage < Stage::TYPECHECKING {
        module.stage = Stage::TYPECHECKING
        typechecking::typecheck(module)
        return module
    }
    return null
}

export def compile_module(name: &parser::Node, calling_module: &Module) -> &Module {
    let filename = find_module_file(name, calling_module)
    if not filename { return null }
    var module = modules.get_or_default(filename, null)
    if module and module.stage < Stage::COMPILING {
        module.stage = Stage::COMPILING
        compiler::compile(module)
        return module
    }
    return null
}

export def load_file(filename: &string) -> &string {
    let fh = open(@filename, "rb")
    if not fh {
        return null
    }

    let buf = util::read_all(fh)
    close(fh)
    return buf
}

export def consteval_file(filename: &string, modulename: &string) -> &Module {
    if modules.contains(filename) {
        let module = modules[filename]
        return module
    }

    let buf = file_loader(filename)
    if not buf {
        error("File \"", filename, "\" doesn't exist\n")
        return null
    }
    let lines = util::split_lines(buf)

    debug::trace("Lexing ", modulename)
    let tokens = lexer::lex(buf)
    let node = parser::parse(tokens, lines, filename, modulename)
    delete(tokens)
    if print_ast {
        debug::print_node(node)
    }
    
    var sc = scope::enter_function_scope(builtins::builtins, null)
    var module = make_module(filename, modulename, node, sc)
    module.text = buf
    module.lines = lines
    let state = compiler::make_state(module)
    sc.module = module

    module.compiler_state = state
    modules[filename] = module

    consteval::consteval(module)

    return module
}

// TODO This is inconsistent with the functions above, as a cached module is returned
// name is an identifier
export def consteval_module(name: &parser::Node, calling_module: &Module) -> &Module {
    let modulename = parser::identifier_to_str(name)
    if modulename == "runtime" {
        return modules["runtime"] // This module is special
    }

    let filename = find_module_file(name, calling_module)
    if not filename { return null}

    var module = modules.get_or_default(filename, null)
    if not module {
        module = consteval_file(filename, modulename)
    }

    return module
}

def generate_runtime_source -> string {
    let runtime = util::exe_folder() + "/../src/runtime.pr"
    let fp = open(@runtime, "r")
    let source = util::read_all(fp)
    close(fp)
    return @source
}

const runtime_source = generate_runtime_source()

export var runtime_: &Module
export var types: &Module
export var types_state: &compiler::State

def create_runtime_module {
    if runtime_ { return }
    debug::trace("Creating runtime module")

    let lines = util::split_lines(runtime_source)
    let tokens = lexer::lex(runtime_source)
    let node = parser::parse(tokens, lines, "runtime.pr", "runtime")
    delete(tokens)

    let runtime_module = make_module(
        filename = "runtime.pr",
        modulename = "runtime",
        node = node,
        scpe = scope::enter_function_scope(builtins::builtins, null)
    )
    runtime_module.scope.module = runtime_module 

    modules["runtime"] = runtime_module
    runtime_ = runtime_module

    consteval::consteval(runtime_module)
    runtime_module.stage = Stage::TYPECHECKING
    typechecking::typecheck(runtime_module)
    
    builtins::Type_ = scope::get_type(runtime_.scope, make_identifier("Type"))
    builtins::Ref_  = scope::get_type(runtime_.scope, make_identifier("Ref"))
    builtins::Function_  = scope::get_type(runtime_.scope, make_identifier("Function"))
    builtins::Generator_ = scope::get_type(runtime_.scope, make_identifier("Generator"))
}

def create_types_module {
    if types { return }
    debug::trace("Creating types module")
    types = make_module(
        filename = null,
        modulename = "type",
        node = null,
        scpe = scope::enter_scope(null, types)
    )
    modules["type"] = types

    types_state = compiler::make_state(types)
    types_state.consteval = true
    types_state.scope = builtins::builtins
    types_state.current_block = types.code
}

export def prepare_preload {
    create_runtime_module()
    create_types_module()

    let keys = map::keys(runtime_.scope.fields)
    for var i in 0..keys.size {
        let name = keys[i]
        let value = runtime_.scope.fields[name]
        if typechecking::equals(value.tpe, builtins::type_) {
            let tpe = value.value.value_tpe
            types.result.structures[tpe.type_name] = tpe
        }
    }
}

export def create_types_main {
    let types = types 

    let types_main_ident = parser::make_identifier("__main__")
    types_main_ident.loc.module = types.module

    let args = vector::make(typechecking::NamedParameter)
    args.push({
        name = "args",
        tpe = typechecking::array(builtins::string_)
    } !typechecking::NamedParameter)

    let main_tpe = typechecking::make_function_type_n(types_main_ident, args, vector::make(type &typechecking::Type), types)
    let value = scope::create_function(types.scope, types_main_ident, parser::ShareMarker::EXPORT, main_tpe)
    value.identifier = types_main_ident

    let types_main = compiler::predeclare_function(main_tpe, types)
    types_main.block = types.code
    types_main.forward_declare = false
    
    types.imported.add(main_tpe.type_name)
}

export def load_file_type {
    let std_module = find_module("std")
    builtins::File_ = scope::get_type(std_module.scope, parser::make_identifier("File"))
}

export def reset_types {
    types.scope = scope::enter_scope(null, null)
    types.code = compiler::make_block()
    types_state.current_block = types.code
    types_state.consteval = false
    types_state.module.result = compiler::make_result()
    create_types_main()
}

export def extract_module_name(filename: &string) -> &string {
    // TODO Path manipulation should be made easier
    var folder_sep = filename.last_index_of("/")
    if folder_sep == -1 {
        folder_sep = filename.last_index_of("\\")
    }
    if folder_sep == -1 {
        folder_sep = 0
    }
    return filename.substring(folder_sep + 1 if folder_sep > 0 else 0, filename.length() - 4)
}

export def compile_main_file(filename: &string) {
    if not filename.ends_with(".pr") {
        error("File ", filename, " is not a Princess source file\n")
        exit(1)
    }
    include_path.push(absolute_path(util::dirname(filename)))

    let start_frontend = util::millis()

    prepare_preload()
    create_types_main()

    main_module_file = filename
    var module = consteval_file(filename, "main") 
    if not module { exit(1) }

    module.stage = Stage::TYPECHECKING
    typechecking::typecheck(module)

    load_file_type()

    module.stage = Stage::COMPILING
    reset_types()
    compiler::compile(module)

    debug::trace("Resolving types")
    compiler::resolve_types()
    debug::trace("Creating builtin functions")
    compiler::create_builtin_functions()

    let ret = compiler::make_insn(compiler::InsnKind::RET)
    ret.value.ret.value = compiler::NO_VALUE
    types.code.insn.push(ret)

    if dependency_graph {
        print_dependency_graph(module)
        exit(0)
    }

    if time_report {
        print("Frontend: \n")
        print("--------------------------------------\n")
        print("              Lexing: ", lexer::time_spent / 1000.0, "s \n")
        print("             Parsing: ", parser::time_spent / 1000.0, "s \n")
        print("Constant propagation: ", consteval::time_spent / 1000.0, "s \n")
        print("        Typechecking: ", typechecking::time_spent / 1000.0, "s \n")
        print("           Compiling: ", compiler::time_spent / 1000.0, "s \n")
    }

    let end_frontend = util::millis()

    if errors::error_count == 0 {

        let start_compiling = util::millis()

        #if defined WIN32 {
            let compile_cstd = clang + " -S -emit-llvm -o " + outfolder + "/cstd_include.ll " + include + "/cstd.c"
            system(@compile_cstd)
        }

        var build_command: &string = clang + " -c "
        for var i in 0..clang_flags.length {
            build_command += clang_flags[i] + " "
        }

        if debug::verbose { 
            build_command += "-v "
        }

        #if defined WIN32 {
            build_command += outfolder + "/cstd_include.ll "
        }

        for var filename in @modules.keys() {
            let module = modules[filename] 
            codegen::gen(module)

            build_command += module.file + ".ll "
        }
        
        if time_report {
            print("             Codegen: ", codegen::time_spent / 1000.0, "s \n")
            print("--------------------------------------\n")
            print("Total time frontend: ", (end_frontend - start_frontend) / 1000.0, "s \n")
            print("======================================\n")
            print("Backend: \n")
        }

        debug::trace("Compiling with clang...")
        debug::trace(build_command)

        build_command = "cd " + outfolder + " && " + build_command
        system(@build_command)

        var link_command: &string = clang
        #if defined WIN32 {
            link_command += " -lUser32 -lKernel32 "
        } else {
            link_command += " -lrt -lm -lpthread -lcrypt -ldl -lffi "
        }

        for var i in 0..link_directories.length {
            link_command += "--library-directory=\"" + link_directories[i].replace_all("\\", "\\\\") + "\" "
        }
        for var i in 0..link_libraries.length {
            link_command += "-l" + link_libraries[i] + " "
        }
        for var i in 0..link_flags.length {
            link_command += "--for-linker=\"" + link_flags[i] + "\" "
        }

        if debug::verbose { 
            link_command += "-v "
        }
        
        for var filename in @modules.keys() {
            let module = modules[filename] 
            link_command += outfolder + "/" + module.file + ".o "
        }

        #if defined WIN32 {
            link_command += outfolder + "/cstd_include.o "
        }

        link_command += "--output "
        link_command += outfile

        debug::trace("Linking with clang...")
        debug::trace(link_command)
        system(@link_command)

        let end_compiling = util::millis()

        if time_report {
            print("--------------------------------------\n")
            print("Compiling: ", (end_compiling - start_compiling) / 1000.0, "s \n")
            print("======================================\n")
            print("Total time: ", (end_compiling - start_frontend) / 1000.0, "s \n")
        }
    }
}


def print_dependency_graph(module: &Module, indent: &string, last: bool) {
    let branch = "└── " if last else "├── "
    print(indent, branch, module.module, "\n")

    if last {
        indent += "    "
    } else {
        indent += "│   "
    }
        
    let keys = module.dependants.keys()
    for var i in 0..keys.size {
        let dependant = keys[i]
        print_dependency_graph(dependant, indent, i == keys.size - 1)
    }
}

def print_dependency_graph(module: &Module) {
    print_dependency_graph(module, "", true)
}