import parser
import lexer
import vector
import util
import debug

export var print_ast = false

def parse(s: string) -> *parser::Node {
    let tokens = lexer::lex(s)
    let lines = util::split_lines(s)
    let node = parser::parse(tokens, lines, "main", "main")
    
    if print_ast {
        print("\n")
        print(s)
        print("\n")
        debug::print_node(node)
    }
    
    return node
}

def test_operators {
    print(">Test operators... ")
    var str = "1 + 2"
    var res = parse(str)
    assert((@res).kind == parser::NodeKind::PROGRAM)
    var val = @(vector::get((@res).value.body, 0) !*parser::Node)
    assert(val.kind == parser::NodeKind::ADD)
    var left = @val.value.bin_op.left
    var right = @val.value.bin_op.right
    assert(left.kind == parser::NodeKind::INTEGER)
    assert(right.kind == parser::NodeKind::INTEGER)
    assert(left.value.i == 1)
    assert(right.value.i == 2)

    str = "1 + 2 * 3 - 5"
    res = parse(str)

    str = "1 << 5 + 0xFF >> 1"
    res = parse(str)

    str = "0 and 2 or 5"
    res = parse(str)

    str = "a == 5 and b != 6 or c <= 10 and d >= 5"
    res = parse(str)

    str = "10 > a > 5"
    res = parse(str)

    str = "not true"
    res = parse(str)

    str = "not not true"
    res = parse(str)

    str = "*foo and @bar and ~foo"
    res = parse(str)

    str = "+foo and -foo"
    res = parse(str)

    str = "5 !int"
    res = parse(str)

    str = "5 * 5 !int"
    res = parse(str)

    str = "foo[1 + 5][1]"
    res = parse(str)

    str = "foo.bar.baz"
    res = parse(str)

    str = "a..b"
    res = parse(str)
    
    str = "a..=b..c"
    res = parse(str)

    str = "size_of foo"
    res = parse(str)

    str = "size_of type *Foo"
    res = parse(str)

    str = "align_of foo"
    res = parse(str)

    str = "align_of type *Foo"
    res = parse(str)

    print("OK\n")
}

def test_vardecl {
    print(">Test vardecl... ")

    var str = "var foo = 5"
    var res = parse(str)

    str = "const foo = 5"
    res = parse(str)

    str = "var foo, bar = 1, 2"
    res = parse(str)

    str = "let foo, (bar) = 1, 2"
    res = parse(str)

    str = "export var foo"
    res = parse(str)

    str = "export import var bar"
    res = parse(str)

    str = "var foo: int, bar: int"
    res = parse(str)

    str = "export let foo: int = 5"
    res = parse(str)
    
    print("OK\n")
}

def test_typedecl {
    print(">Test typedecl... ")

    var str = "type A"
    var res = parse(str)

    str = "export type A, B"
    res = parse(str)

    str = "type A = Foo"
    res = parse(str)

    str = "type A = unsigned word(16)"
    res = parse(str)

    str = "type A, B = int, float"
    res = parse(str)

    print("OK\n")
}

def test_simple_types {
    print(">Test simple types... ")

    var str = "(type int)"
    var res = parse(str)

    str = "(type word(16))"
    res = parse(str)

    str = "(type unsigned word(32))"
    res = parse(str)

    print("OK\n")
}

def test_function_types {
    print(">Test function types... ")

    var str = "(type T -> F)"
    var res = parse(str)

    str = "(type ->)"
    res = parse(str)

    str = "(type (->))"
    res = parse(str)

    str = "(type A -> B -> C)"
    res = parse(str)

    str = "(type () -> ())"
    res = parse(str)

    str = "(type (A, B) -> (C, D))"
    res = parse(str)

    print("OK\n")
}

def test_pointer_types {
    print(">Test pointer types... ")

    var str = "(type *A)"
    var res = parse(str)

    str = "(type **A)"
    res = parse(str)

    str = "(type &A)"
    res = parse(str)

    str = "(type &&**A)"
    res = parse(str)

    str = "(type *)"
    res = parse(str)

    str = "(type &*)"
    res = parse(str)

    str = "(type *let A)"
    res = parse(str)

    str = "(type *var A)"
    res = parse(str)

    str = "(type &let A)"
    res = parse(str)

    str = "(type &var A)"
    res = parse(str)

    print("OK\n")
}

def test_array_types {
    print(">Test array types... ")

    var str = "(type [T])"
    var res = parse(str)

    str = "(type [5; T])"
    res = parse(str)

    str = "(type [?; T])"
    res = parse(str)

    str = "(type [let T])"
    res = parse(str)

    str = "(type [5; var T])"
    res = parse(str)

    str = "(type [5; [T]])"
    res = parse(str)

    str = "(type [5; var [let T]])"
    res = parse(str)

    print("OK\n")
}

def test_func_call {
    print(">Test function call... ")

    var str = "really::long::path::foo()"
    var res = parse(str)

    str = "foo(bar, baz)"
    res = parse(str)

    str = "foo(bar, baz = 20)"
    res = parse(str)

    str = "foo(0)(1)"
    res = parse(str)

    print("OK\n")
}

def test_assign_op {
    print(">Test assign op... ")

    var str = "a = b"
    var res = parse(str)

    str = "a, b = c, d"
    res = parse(str)

    str = "a, b = c, d = e, f"
    res = parse(str)

    str = "a += 2"
    res = parse(str)

    str = "a *= 2 %= 3"
    res = parse(str)

    str = "a ++= 2 = b += 2"
    res = parse(str)

    print("OK\n")
}

def test_statements {
    print(">Test statements... ")

    var str = "
        var foo = 20
        foo += 10
        print(foo)
    "
    var res = parse(str)

    str = "
        #if foo {
            // Do something
        } else if bar {
            // Do something else
        } else {
            // Do more
        }
    "
    res = parse(str)

    str = "
        if foo == null {
            print(\"Hello World\")
        }
        end
    "
    res = parse(str)

    str = "
        if true {
            // Do something
        } else {
            // Do something else
        }
        end
    "
    res = parse(str)

    str = "
        if true {
            print(0)
        } else if false {
            print(0)
            print(1)
        } else if true {
            // Do more
        } else {
            // Or else...!
        }
        end
    "
    res = parse(str)

    str = "
        if true {
            print(0)
        } else if false {
            print(1)
        }
        end
    "
    res = parse(str)

    str = "
        if must {
            if go {
                if deeper {

                }
            }
        }
        end
    "
    res = parse(str)

    str = "
        if false
        {
            // on new line
        }
        else
        {
            // Very ugly
        }
        end
    "
    res = parse(str)

    str = "
        loop {
            nop()
            break
            continue
        }
        end
    "
    res = parse(str)

    str = "
        for var i in 0..10 {
            nop()
        }
        end
    "
    res = parse(str)

    str = "
        var i = 0
        for i in 0..10 {
            nop()
        }
        end
    "
    res = parse(str)

    str = "
        while true {
            nop()
        }
        end
    "
    res = parse(str)

    str = "return"
    res = parse(str)

    str = "
        return 1, 2, 3
    "
    res = parse(str)

    str = "
        return 1,
            2
    "
    res = parse(str)

    print("OK\n")
}

def test_struct {
    print(">Test struct... ")

    var str = "
        type T = struct {
            a: int
        }
    "
    var res = parse(str)

    str = "
        type T = struct {
            a: int
            b: struct {
                a: int
            }
        }
    "
    res = parse(str)

    str = "
        type T = struct #union {
            a: int
            b: long
        }
    "
    res = parse(str)

    str = "
        type T = struct {
            a: int
            struct #union {
                a: int
                b: long
            }
        }
    "
    res = parse(str)

    print("OK\n")
}

def test_import {
    print(">Test import... ")

    var str = "import module"
    var res = parse(str)

    str = "import module as mod"
    res = parse(str)

    str = "import a as foo, bar"
    res = parse(str)

    str = "
        import 
            Module as mod,
            foo,
            bar as baz
    "
    res = parse(str)

    print("OK\n")
}

def test_enum {
    print(">Test enum... ")

    var str = "
        type T = enum {
            FOO
            BAR
            BAZ
        }
    "
    var res = parse(str)

    str = "
        type T = enum {
            FOO = 10
            BAR
        }
    "
    res = parse(str)

    str = "
        type T = enum: long {
            FOO; BAR
        }
    "
    res = parse(str)

    print("OK\n")
}

def test_switch_stmt {
    print(">Test switch statement... ")

    var str = "
        switch value {}
    "
    var res = parse(str)

    str = "
        switch value {
            case 1: one
            case 2: two
            case: default
        }
    "
    res = parse(str)

    str = "
        switch value {
            case 1:
                print(foo)
                print(bar)
            case 2:
                print(bar)
                print(foo)
        }
    "
    res = parse(str)

    str = "
        switch value {
            case 1..10:
                print(foo)
            case 11..20:
                print(bar)
        }
    "
    res = parse(str)

    str = "
        switch value {
            case 10, 20:
                one
            case 20..30, 30..40:
                two
        }
    "
    res = parse(str)

    print("OK\n")
}

def test_def {
    print(">Test def... ")

    var str = "
        def test
    "
    var res = parse(str)

    str = "
        def test(a: int)
    "
    res = parse(str)

    str = "
        def test(type T, var a: int, let b: int)
    "
    res = parse(str)

    str = "
        def test -> int, float
    "
    res = parse(str)

    str = "
        def test() {
            return
        }
    "
    res = parse(str)

    str = "
        def test(var a: int) -> int {
            return a
        }
    "
    res = parse(str)

    str = "
        def test(type T = *int, a: int = 0)
    "
    res = parse(str)

    print("OK\n")
}

def test_array_literal {
    print(">Test array literal... ")

    var str = "
        [1, 2, 3]
    "
    var res = parse(str)

    str = "
        [
            1,
            2,
            3
        ]
    "
    res = parse(str)


    print("OK\n")
}

def test_struct_literal {
    print(">Test struct literal... ")

    var str = "
        {foo, bar} !Struct
    "
    var res = parse(str)

    str = "
        {foo, bar = 20, baz = 40} !Struct
    "
    res = parse(str)

    str = "
        {
            foo,
            bar = 20,
            baz = 40
        } !Struct
    "
    res = parse(str)

    print("OK\n")
}

def test_if_expression {
    print(">Test if epxression... ")

    var str = "
        let a = 10 if 10 > 20 else 20
    "
    var res = parse(str)

    str = "
        let a = 10 if 10 > 20 else 20 if 20 > 30 else 40
    "
    res = parse(str)

    str = "
        foo(10 if true else 20)
    "
    res = parse(str)

    print("OK\n")
}

def test_bug_1 {
    print(">Test bug 1... ")

    var str = "
        type T = struct {
            a: int
            // New line here
        }
        type E = struct { }
    "
    var res = parse(str)

    print("OK\n")
}

def test_bug_2 {
    print(">Test bug 2... ")

    var str = "
        var a = 20; a += 10
    "
    var res = parse(str)

    print("OK\n")
}

export def test {
    print("Running tests on Parser...\n")
    test_operators()
    test_simple_types()
    test_function_types()
    test_pointer_types()
    test_array_types()
    test_vardecl()
    test_typedecl()
    test_func_call()
    test_assign_op()
    test_statements()
    test_struct()
    test_import()
    test_enum()
    test_switch_stmt()
    test_def()
    test_array_literal()
    test_struct_literal()
    test_if_expression()
    test_bug_1()
    test_bug_2()
}