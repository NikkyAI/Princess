import test::testsuite
import json
import optional
import util

def test_numbers {
    let data = """
    {
        "key_a": 10,
        "key_b": -10,
        "key_c": 10.5,
        "key_d": 10E2,
        "key_e": 10e2,
        "key_f": 10e+2,
        "key_g": 10e-2,
        "key_h": 0
    }
    """
    let obj = json::parse(data)
    tassert(obj["key_a"].as_double() == 10)
    tassert(obj["key_b"].as_double() == -10)
    tassert(obj["key_c"].as_double() == 10.5)
    tassert(obj["key_d"].as_double() == 10E2)
    tassert(obj["key_e"].as_double() == 10e2)
    tassert(obj["key_f"].as_double() == 10e+2)
    tassert(obj["key_g"].as_double() == 10e-2)
    tassert(obj["key_h"].as_double() == 0)
}

def test_arrays {
    let data = """
    {
        "key_a": [1, 2, 3],
        "key_b": ["a", "b", "c"],
        "key_c": [
            {"1": 1},
            {"2": 2},
            {"3": 3}
        ]
    }
    """
    let obj = json::parse(data)
    let key_a = obj["key_a"]
    tassert(key_a[0].as_double() == 1 and key_a[1].as_double() == 2 and key_a[2].as_double() == 3)
    let key_b = obj["key_b"]
    tassert(key_b[0].as_string() == "a" and key_b[1].as_string() == "b" and key_b[2].as_string() == "c")
    let key_c = obj["key_c"]
    tassert(key_c[0]["1"].as_double() == 1 and key_c[1]["2"].as_double() == 2 and key_c[2]["3"].as_double() == 3)
}

def test_objects {
    let data = """
    {
        "key_a": {
            "1": 1,
            "2": 2
        },
        "key_b": {
            "1": 1,
            "2": 2
        }
    }
    """
    let obj = json::parse(data)
    let key_a = obj["key_a"]
    tassert(key_a["1"].as_double() == 1 and key_a["2"].as_double() == 2)
    let key_b = obj["key_b"]
    tassert(key_b["1"].as_double() == 1 and key_b["2"].as_double() == 2)
}

def test_values {
    let data = """
    {
        "key_a": null,
        "key_b": true,
        "key_c": false
    }
    """
    let obj = json::parse(data)
    tassert(obj["key_a"].is_null())
    tassert(obj["key_b"].as_bool() == true)
    tassert(obj["key_c"].as_bool() == false)
}

def test_strings {
    let data = """
    {
        "key_a": "some string",
        "key_b": "\\" \\\\ \\b \\f \\n \\r \\t",
        "key_c": "\\uAABB"
    }
    """
    let obj = json::parse(data)
    tassert(obj["key_a"].as_string() == "some string")
    tassert(obj["key_b"].as_string() == "\" \\ \b \f \n \r \t")
    tassert(obj["key_c"].as_string() == "\uAABB")
}

type A = struct {
    a: int
    b: double
    c: B
    d: [5; int]
}
type B = struct {
    a: int
    s: &string
}

def test_serialization {
    let value = { a = 10, b = 20.5, c = { a = 20, s = "some string" } !B, d = [1, 2, 3, 4, 5] } !A
    let obj = json::serialize(*value)
    print(obj)

    let value2 = json::deserialize(obj, A).get()
    tassert(value2.a == value.a)
    tassert(value2.b == value.b)
    tassert(value2.c.a == value.c.a)
    for var i in 0..value2.d.size {
        tassert(value2.d[i] == value.d[i])
    }
}

def test_equality {
    let data1 = """
    {
        "key_1": 0,
        "key_2": 1
    }
    """
    let data2 = """
    {
        "key_2": 1,
        "key_1": 0
    }
    """
    let data3 = """
    {
        "key_1": 0
    }
    """

    tassert(json::parse(data1) == json::parse(data2))
    tassert(json::parse(data1) != json::parse(data3))
}

def test_generation {
    let data = """
        {
            "key_1": 0,
            "key_2": true,
            "key_3": "some_string",
            "key_4": null,
            "key_5": {
                "foo": 10,
                "bar": 20
            },
            "key_6": [
                10, 20, 30, 40
            ]
        }
    """
    let obj = json::parse(data)
    let obj2 = json::make_object()
    obj2["key_1"] = 0
    obj2["key_2"] = true
    obj2["key_3"] = "some_string"
    obj2["key_4"] = json::make_null()
    let obj3 = json::make_object()
    obj3["foo"] = 10
    obj3["bar"] = 20
    obj2["key_5"] = obj3
    let array = json::make_array()
    array.push(10)
    array.push(20)
    array.push(30)
    array.push(40)
    obj2["key_6"] = array

    tassert(obj == obj2)
}

export def run_tests {
    print("Running json tests... \n")
    run_test("test_numbers", *test_numbers)
    run_test("test_arrays", *test_arrays)
    run_test("test_objects", *test_objects)
    run_test("test_values", *test_values)
    run_test("test_strings", *test_strings)
    run_test("test_serialization", *test_serialization, util::strip_margin("""\
        |{
        |  "a": 10.00000,
        |  "b": 20.50000,
        |  "c": {
        |    "a": 20.00000,
        |    "s": "some string"
        |  },
        |  "d": [
        |    1.00000,
        |    2.00000,
        |    3.00000,
        |    4.00000,
        |    5.00000
        |  ]
        |}"""), "")
    run_test("test_equality", *test_equality)
    run_test("test_generation", *test_generation)
}