import test::testsuite

def test_constants {
    // We can't use pointers here
    const c = 4
    tassert(c == 4)
}

def sum(a: int, b: int) -> int {
    return a + b
}

def test_func_call {
    // TODO Varargs don't work for some reason
    const sum = sum(10, 20)
    tassert(sum == 30)
}

def test_static_if {
    const s = sum(10, 20)
    #if s > 10 {
        var a: int = 10
    } else {
        var a: int = 20
    }
    tassert(a == 10)
}

def return_random_number -> long {
    cstd::srand(100)
    return cstd::rand()
}

def test_c_functions {
    const ac = return_random_number()
    let al = return_random_number()

    tassert(ac == al)
}

def append_str(a: string, b: string) -> string {
    let buf = buffer::make_buffer()
    buffer::append_str(*buf, a)
    buffer::append_str(*buf, b)
    return buffer::to_string(*buf)
}

const hello_world = append_str("Hello ", "World!")

def test_strings {
    tassert(hello_world == "Hello World!")
}

def test_bug_1_ -> bool {
    return true == (true == true)
}

def test_bug_1 {
    const ac = test_bug_1_()
    let al = test_bug_1_()
    tassert(ac == al == true)
}

export def run_tests {
    print("Running tests on compile time functions... \n")
    run_test("test_constants", *test_constants)
    run_test("test_func_call", *test_func_call)
    run_test("test_static_if", *test_static_if)
    run_test("test_c_functions", *test_c_functions)
    run_test("test_strings", *test_strings)
    run_test("test_bug_1", *test_bug_1)
}