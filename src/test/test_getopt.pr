import getopt
import util

import test::testsuite

def test_positional {
    let args = ["test", "some", "arg", "more"]
    let options = [
        option("arg1"),
        option("arg2", 2)
    ]
    let parser = *getopt::make_parser(options, "-")
    tassert(parser.parse(args))

    print("arg1: ", parser.get_value("arg1").str, "\n")
    
    print("arg2: ")
    let arg2 = parser.get_value("arg2").arr
    for var i in 0..arg2.size {
        print(arg2[i], " ")
    }
    print("\n")
}

def test_longopts {
    let args = [
        "test",
        "--arg1", 
        "--arg2=test", 
        "--arg3", "test", 
        "--arg4", "foo", "bar"
    ]
    let options = [
        option("--arg1", false),
        option("--arg2"),
        option("--arg3"),
        option("--arg4", 2),
        option("--arg5", "default")
    ]
    let parser = *getopt::make_parser(options, "-")
    tassert(parser.parse(args))

    print("arg1: ", parser.get_value("--arg1").b, "\n")
    print("arg2: ", parser.get_value("--arg2").str, "\n")
    print("arg3: ", parser.get_value("--arg3").str, "\n")
    let arg4 = parser.get_value("--arg4").arr 
    print("arg4: ", arg4[0], " ", arg4[1], "\n")
    print("arg5: ", parser.get_value("--arg5").str, "\n")
}

def test_shortopts {
    let args = [
        "test",
        "-ab",
        "-cFoo",
        "-d", "test",
        "-e", "foo", "bar"
    ]
    let options = [
        option('a', "--arg1", false),
        option('b', "--arg2", true),
        option('c', "--arg3"),
        option('d', "--arg4"),
        option('e', "--arg5", 2)
    ]
    let parser = *getopt::make_parser(options, "-")
    tassert(parser.parse(args))

    print("a: ", parser.get_value("--arg1").b, "\n")
    print("b: ", parser.get_value("--arg2").b, "\n")
    print("c: ", parser.get_value("--arg3").str, "\n")
    print("d: ", parser.get_value("--arg4").str, "\n")
    let arg5 = parser.get_value("--arg5").arr 
    print("e: ", arg5[0], " ", arg5[1], "\n")
}

export def run_tests {
    print("Running tests on getopt... \n")
    run_test("test_positional", *test_positional, util::strip_margin("\
        |arg1: some
        |arg2: arg more \n"), "")
    run_test("test_longopts", *test_longopts, util::strip_margin("\
        |arg1: true
        |arg2: test
        |arg3: test
        |arg4: foo bar
        |arg5: default\n"), "")
    run_test("test_shortopts", *test_shortopts, util::strip_margin("\
        |a: true
        |b: false
        |c: Foo
        |d: test
        |e: foo bar\n"), "")
}
