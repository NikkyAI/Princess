import util
import test::testsuite

def test_loop {
    var cnt = 0
    while cnt < 10 {
        print(cnt)
        cnt += 1
    }
    print("\n")

    for var i in 0..10 {
        print(i)
    }
    print("\n")

    let foo: *int = null
    while foo != null {
        @foo = 10
    }

    for var i in 0..10 {
        if i == 5 { continue }
        print(i)
    }
    print("\n")
}

type Point = struct {
    x: int
    y: int
}

def test_print {
    let a = 20
    let b = 0xDEADBABE !*
    print("Hello World ", 1, " ", 'x', " ", 10.5, " ", b, "\n")
    error("Hello World ", 1, " ", 'x', " ", 10.5, " ", b, "\n")

    let point: Point = {10, 20}
    print(point, "\n")

    let array = [1, 2, 3, 4]
    print(array, "\n")
}

def pass_dynamic_array(a: string) {
    print(a)
}

def function(a: int, b: double) -> double { return a * b }
def function(b: double, a: int) -> double { return a * b }
def function -> int { return 10 }

def test_function_calls {
    pass_dynamic_array("Some string\n")
    pass_dynamic_array(a = "Named parameter\n")

    function(2, 1.5)
    function(1.5, 2)
    function(2, b = 1.5)
    function(1.5, a = 2)
    // function(a = 1, b = 1.5) # Ambiguous reference

    tassert(function == 10)
}

def test_length {
    let a = "Some string"
    tassert(length(a) == 11)
}

def test_allocate {
    let a = allocate(size_of int) !*int
    @a = 10
    tassert(@a == 10)
    free(a)

    let b = allocate(int)
    @b = 20
    tassert(@b == 20)
    free(b)

    let c = allocate(int, 10)
    c[0] = 10
    c[9] = 20
    tassert(c[0] == 10)
    tassert(c[9] == 20)
    free(c)
}

def test_file_binary {
    let fp = open("tmp/test_file_io_binary", "wb+")
    
    let str = "Some text"
    write(fp, str)
    let i = 10
    write(fp, *i)

    rewind(fp)

    var str2: [10; char]
    read(fp, str2)
    print(str2, "\n")

    var i2: int
    read(fp, *i2)
    print(i2, "\n")

    close(fp)
}

def test_file_text {
    let fp = open("tmp/test_file_io_text", "w+")

    write_string(fp, "This is a test\n", 10)

    seek(fp, 0, SEEK_SET) // Same as rewind

    var buffer: [20; char]
    read_line(fp, buffer)
    print(buffer)
    var num: int
    cstd::fscanf(fp, "%d".value, *num)
    print(num, "\n")

    close(fp)
}

def test_operators {

    let g = true and false
    let h = true and true
    let i = false and true
    tassert(not g)
    tassert(h)
    tassert(not i)
}

type Enum = enum {
    A = 10;
    B; C; D
}

type Enum2 = enum {
    A = 10
    B = A
    C
}

def pass_enum(a: Enum) {}

def test_enum {
    tassert(Enum::A == 10)
    tassert(Enum::B == 11)
    pass_enum(Enum::A)
    let a = Enum::A !int
    let b = 10 !Enum
    pass_enum(b)

    print(to_string(Enum::A), "\n")
    print(Enum::B, "\n")
}

def some_function {
    print("Hello\n")
}

def test_function_pointers {
    let function = *some_function
    function()
}

type Struct = struct {
    a: string
    b: int
    c: char
}

def test_structs {
    let s = {
        c = 10
    } !Struct
}

type Union = struct #union {
    a: string
    b: long
    c: int
}

def test_unions {
    let u = {
        "some string"
    } !Union
    print(u, "\n")

    let u2 = {
        b = 20
    } !Union
    u2.b = 120
    print(u2.c, "\n")

    let u3 = {} !Union
}

def test_strings {
    let stra = "Some value"
    tassert(stra == "Some value")
    tassert(stra != "Other value")
}

def test_if_stmts {
    if false {
        print("false\n")
    } else if starts_with("foo", "f") {
        print("true\n")
    } else {
        print("false\n")
    }
}

def fact(n: int) -> int {
    if n <= 1 { return 1 }
    else {
        return n * fact(n - 1)
    }
}

def test_recursion {
    tassert(fact(10) == 3628800)
}

def test_scoping {
    var a = 10
    if true {
        a = 10
        var a = 20
    }
}

def pass_array(a: [int]) {
    for var i in 0..a.size {
        print(a[i], " ")
    }
    print("\n")
}

def test_arrays {
    let a = [10, 20, 30]
    let b = [] ![int]
    pass_array(a)
    pass_array(b)
}

type Struct2 = struct {
    a: int
    t: *Struct2
}

def test_deref {
    let s = allocate(Struct2)
    s.a = 10
    s.t = allocate(Struct2)
    s.t.a = 20
    print(s.a, " ", s.t.a, "\n")
}

def function(s: Struct2) -> int { return s.a }
def function(s: Struct2, a: int) -> int { return s.a + a }
def inc(a: int) -> int { return a + 1}

def test_ucs {
    let s: Struct2 = { 10, null }
    
    tassert(s.function() == 10)
    tassert(s.function.inc == 11)
    tassert(s.function(10).inc() == 21)
}

type Struct3 = struct {
    a: int
    b: struct {
        c: int
        d: int
    }
    struct #union {
        e: int64
        f: double
    }
}

def test_anonymous {
    var s: Struct3
    s = {10, {20, 30}}
    s.a = 10
    s.b = {20, 30}
    s.e = 0x4034800000000000

    print(s.f, "\n")
}

def sum(args: int...) -> int {
    var sum = 0
    for var i in 0..args.size {
        sum += args[i]
    }
    return sum
}

def my_print(args: string...) {
    for var i in 0..args.size {
        print(args[i], " ")
    }
    print("\n")
}

def test_varargs {
    tassert(sum(1, 2, 3) == 6)
    tassert(sum([1, 2, 3]) == 6)
    my_print("foo", "bar", "baz")
}

def test_if_expression {
    // TODO I've seen these fail but I can't quite pin down what's wrong with them
    var a = 10 if 10 > 20 else 20
    tassert(a == 20)
    var b: int
    @(*a if 10 > 20 else *b) = 30
    tassert(b == 30)

    let c = { c = 10 } !Struct
    let d = { c = 0 } !Struct if 10 > 20 else c
    tassert(d.c == 10)
}

import test::a as A
import test::b

def test_imports {
    tassert(A::multiply_by_2(10) == 20)
    let a, b = return_multiple()
    tassert(a == 10)
    tassert(b == 20)
    print(A::Enum::SOME_ENUM_VALUE, "\n")

    let c = {10, 10} !A::Point
    let d = test::b::some_value
}

def takes_default_param(a: int = 0, b: string = "some value") {
    print(a, " ", b, "\n")
}

def test_default_parameters {
    takes_default_param()
    takes_default_param(10)
    takes_default_param(20, "Hello world!")
}

def test_function_overloads {
    let f1 = *function::()
    let f2 = *function::(int, double)
    let f3 = *function::(double, int)

    tassert(f1() == 10)
    tassert(f2(10, 10.5) == 105)
    tassert(f3(10.5, 10) == 105)
}

def test_underscore {
    let _, _ = 10, 20
    tassert(_ == 20)
    _ = "Hello World!"
    tassert(_ == "Hello World!")
}

def function(type T) -> size_t {
    return T.size
}

def add(a: type T, b: T) -> T {
    return a + b
}

def test_def_polymorph {
    tassert(function(int) == 4)
    tassert(function(Struct) == 24)

    tassert(add(10, 10) == 20)
    tassert(add(10.5, 20.5) == 31.0)
}

def test_type_of {
    let a = 20
    let b: (type_of a) = 30
    type T = type_of a

    tassert(T == int)
    tassert((type_of b) == int)
}

export def run_tests {
    print("Running tests on runtime... \n")
    run_test("test_imports", *test_imports, "0\n", "")
    run_test("test_loop", *test_loop, util::strip_margin("\
        |0123456789
        |0123456789
        |012346789\n"), "")
    run_test("test_print", *test_print, util::strip_margin("\
        |Hello World 1 x 10.500000 0xdeadbabe
        |{x = 10, y = 20} !test::test_runtime::Point
        |[1, 2, 3, 4]\n"),
        util::strip_margin("\
        |Hello World 1 x 10.500000 0xdeadbabe\n"))
    run_test("test_function_calls", *test_function_calls, util::strip_margin("\
        |Some string
        |Named parameter\n"), "")
    run_test("test_length", *test_length)
    run_test("test_allocate", *test_allocate)
    run_test("test_file_binary", *test_file_binary, util::strip_margin("\
        |Some text
        |10\n"), "")
    run_test("test_file_text", *test_file_text, util::strip_margin("\
        |This is a test
        |10\n"), "")
    run_test("test_operators", *test_operators)
    run_test("test_enum", *test_enum, util::strip_margin("\
        |A
        |11\n"), "")
    run_test("test_function_pointers", *test_function_pointers, "Hello\n", "")
    run_test("test_structs", *test_structs)
    run_test("test_unions", *test_unions, util::strip_margin("\
        |{a = some string, b = 12, c = 12} !test::test_runtime::Union
        |120\n"), "")
    run_test("test_strings", *test_strings)
    run_test("test_if_stmts", *test_if_stmts, "true\n", "")
    run_test("test_recursion", *test_recursion)
    run_test("test_scoping", *test_scoping)
    run_test("test_arrays", *test_arrays, "10 20 30 \n\n", "")
    run_test("test_deref", *test_deref, "10 20\n", "")
    run_test("test_ucs", *test_ucs)
    run_test("test_anonymous", *test_anonymous, "20.500000\n", "")
    run_test("test_varargs", *test_varargs, "foo bar baz \n", "")
    run_test("test_if_expression", *test_if_expression)
    run_test("test_default_parameters", *test_default_parameters, util::strip_margin("\
        |0 some value
        |10 some value
        |20 Hello world!\n"), "")
    run_test("test_function_overloads", *test_function_overloads)
    run_test("test_underscore", *test_underscore)
    run_test("test_def_polymorph", *test_def_polymorph)
    run_test("test_type_of", *test_type_of)
}
