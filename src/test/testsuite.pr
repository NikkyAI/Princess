import buffer
import util
import parser
import vector
import map
import debug
import linux

import test::test_getopt
import test::test_lexer
import test::test_parser
import test::test_typechecking
import test::test_compiler
import test::test_runtime
import test::test_ctfe
import test::test_vector
import test::test_expr_eval

export var match_string = "*"

def print_divider(c: char) {
    let termsize = util::get_terminal_size()
    for var i in 0..termsize.col {
        print(c)
    }
    print("\n")
}

let stdout_file = "tmp/stdout.txt"
let stderr_file = "tmp/stderr.txt"

var test_count = 0
var failed_test_count = 0
// Shared memory
var asserts: *int

export def tassert(cond: bool) {
    asserts[0] += 1
    if not cond {
        cstd::fprintf(debug::stdout_orig, "x".value)
        asserts[1] += 1
    } else {
        cstd::fprintf(debug::stdout_orig, ".".value)
    }
    cstd::fflush(debug::stdout_orig)
}

export def run_test(desc: string, function: () -> (), expected_out: string, expected_err: string) {
    if not util::match(match_string, desc) {
        return
    }

    test_count += 1

    var num_printed = print(">", desc, " ")
    cstd::fflush(std::stdout())

    debug::redirect_stdout_to_file(stdout_file)
    debug::redirect_stderr_to_file(stderr_file)

    asserts = linux::mmap(null, (size_of int) * 2, 3 /*PROT_READ | PROT_WRITE*/, 33 /*MAP_SHARED | MAP_ANONYMOUS*/, -1, 0) !*int
    asserts[0] = asserts[1] = 0

    let pid = linux::fork()
    if pid == 0 {
        function()
        exit(0)
    }
    var segfault = false
    var status: int
    linux::waitpid(pid, *status, 0)
    if status & 0x7f == 11 /*SIGSEGV*/{
        segfault = true
    }
    
    debug::restore_stdout()
    debug::restore_stderr()
    
    let stdout_fh = open(stdout_file, "rb")
    let out = util::read_all(stdout_fh)
    close(stdout_fh)

    let stderr_fh = open(stderr_file, "rb")
    let err = util::read_all(stderr_fh)
    close(stderr_fh)

    let out_ok = out == expected_out
    let err_ok = err == expected_err
    tassert(out_ok)
    tassert(err_ok)

    let assert_count = asserts[0]
    let failed_assert_count = asserts[1]
    linux::munmap(asserts, (size_of int) * 2)

    num_printed += assert_count 
    let termsize = util::get_terminal_size()
    let spacing = termsize.col - num_printed - 13
    
    if spacing > 0 {
        for var i in 0..spacing {
            print(" ")
        }
    } else {
        print("\n")
    }

    if segfault {
        print("[  \x1B[31mSEGFAULT\x1B[0m ]\n")
    } else {
        print("[")
        cstd::printf("%2d/%-2d".value, assert_count - failed_assert_count, assert_count)
        if failed_assert_count == 0 {
            print("  \x1B[32mOK\x1B[0m  ")
        } else {
            print(" \x1B[31mERROR\x1B[0m")
        }
        print("]\n")
    }
    
    if not out_ok {
        print_divider('-')
        print("Expected standard out:\n")
        print(expected_out, "\n")
        print("Actual standard out:\n")
        print(out, "\n")
        print_divider('-')
    }

    if not err_ok {
        print_divider('-')
        print("Expected standard error:\n")
        print(expected_err, "\n")
        print("Actual standard error:\n")
        print(err, "\n")
        print_divider('-')
    }

    if failed_assert_count > 0 or segfault {
        failed_test_count += 1
    }
}

export def run_test(desc: string, function: () -> ()) {
    run_test(desc, function, "", "")
}

def test_buffer {
    var str = "this is a test"
    var buf = buffer::make_buffer()
    buffer::append_str(*buf, str)
    var res = buffer::to_string(*buf)
    tassert(res == str)
    buffer::append_char(*buf, 't')
    res = buffer::to_string(*buf)
    tassert(res == "this is a testt")
    buffer::insert(*buf, 10, "big ")
    res = buffer::to_string(*buf)
    tassert(res == "this is a big testt")

    buf = buffer::make_buffer()
    buffer::insert(*buf, 0, "this is a test")
    res = buffer::to_string(*buf)
    tassert(res == "this is a test")

    res = buffer::to_string(*buf)
    buffer::remove_char(*buf, 8)
    tassert(res == "this is  test")
}

def test_vector {
    var vec = vector::make()
    let i1 = allocate(int); @i1 = 0
    vector::push(vec, i1)
    let i2 = allocate(int); @i2 = 1
    vector::push(vec, i2)
    let i3 = allocate(int); @i3 = 2
    vector::push(vec, i3)

    tassert(@(vector::get(vec, 0) !*int) == 0)
    tassert(@(vector::get(vec, 1) !*int) == 1)
    tassert(@(vector::get(vec, 2) !*int) == 2)

    let i4 = allocate(int); @i4 = 3
    vector::set(vec, 0, i4)

    tassert(@(vector::get(vec, 0) !*int) == 3)

    vec = vector::make()
    var vec2 = vector::make()

    for var i in 0..5 {
        let i1 = allocate(int); @i1 = i
        vector::push(vec, i1)
        vector::push(vec2, i1)
    }
    
    let i5 = allocate(int); @i5 = 10
    vector::insert(vec, 2, i5)
    vector::insert(vec, 2, vec2)

    // TODO actually verify this
}

def test_split_lines {
    var str = "this\nis\na\ntest"
    var res = util::split_lines(str)

    tassert(res.size == 4)
    tassert(res[0] == "this")
    tassert(res[1] == "is")
    tassert(res[2] == "a")
    tassert(res[3] == "test")

    str = "this is a test"
    res = util::split_lines(str)

    tassert(res.size == 1)
    tassert(res[0] == "this is a test")

    str = "this\r\nis\r\na\r\ntest"
    res = util::split_lines(str)
    
    tassert(res.size == 4)
    tassert(res[0] == "this")
    tassert(res[1] == "is")
    tassert(res[2] == "a")
    tassert(res[3] == "test")
}

def test_int_to_str {
    tassert(util::int_to_str(0) == "0")
    tassert(util::int_to_str(-55) == "-55")
    tassert(util::int_to_str(125) == "125")
    tassert(util::int_to_str(2147483647) == "2147483647")
}

def test_find_substr {
    var str = "foo%%bar%%baz"
    tassert(util::find_substr(str, "banana", 0) == -1)
    tassert(util::find_substr(str, "%%", 0) == 3)
    tassert(util::find_substr(str, "%%", 4) == 8)
}

def test_replace_all {
    var str = "foo%%bar%%baz"
    tassert(util::replace_all(str, "%%", ", ") == "foo, bar, baz")

    str = "%%"
    tassert(util::replace_all(str, "%%", "") == "")
}

def test_util {
    print("Running tests on Util...\n")
    run_test("test_split_lines", *test_split_lines)
    run_test("test_int_to_str", *test_int_to_str)
    run_test("test_find_substr", *test_find_substr)
    run_test("test_replace_all", *test_replace_all)
}

def allocate_int(a: int) -> *int {
    var i = allocate(int)
    @i = a
    return i
}

def test_map_simple {
    let m = map::make()
    map::put(m, "foo", allocate_int(20))
    map::put(m, "bar", allocate_int(50))

    tassert(map::size(m) == 2)
    var val = map::get(m, "foo") !*int
    tassert(@val == 20)
    val = map::get(m, "bar") !*int
    tassert(@val == 50)
    
    map::remove(m, "foo")
    tassert(map::size(m) == 1)
    tassert(map::get(m, "foo") == null)
}

def test_map_collision {
    let m = map::make()
    map::put(m, "JUvEoj", allocate_int(20))
    map::put(m, "JVVdoj", allocate_int(50))

    tassert(map::size(m) == 2)
    var val = map::get(m, "JUvEoj") !*int
    tassert(@val == 20)
    val = map::get(m, "JVVdoj") !*int
    tassert(@val == 50)

    map::remove(m, "JVVdoj")
    tassert(map::size(m) == 1)
    tassert(map::get(m, "JVVdoj") == null)
}

def test_map_resize {
    let m = map::make_size(2)
    map::put(m, "1", allocate_int(1))
    map::put(m, "2", allocate_int(2))
    map::put(m, "3", allocate_int(3))
    map::put(m, "4", allocate_int(4))

    tassert(map::size(m) == 4)

    var val = map::get(m, "1") !*int
    tassert(@val == 1)
    val = map::get(m, "2") !*int
    tassert(@val == 2)
    val = map::get(m, "3") !*int
    tassert(@val == 3)
    val = map::get(m, "4") !*int
    tassert(@val == 4)
}

def is_in(array: [string], key: string) -> bool {
    for var i in 0..array.size {
        let value = array[i]
        if value == key {
            return true
        }
    }
    return false
}

def test_map_keys {
    let m = map::make()
    map::put(m, "JUvEoj", allocate_int(20))
    map::put(m, "JVVdoj", allocate_int(50))
    map::put(m, "foo", allocate_int(0))
    map::put(m, "bar", allocate_int(1))

    let keys = map::keys(m)
    tassert(keys.size == 4)
    tassert(is_in(keys, "JUvEoj"))
    tassert(is_in(keys, "JVVdoj"))
    tassert(is_in(keys, "foo"))
    tassert(is_in(keys, "bar"))
}

def test_map {
    print("Running tests on Map...\n")
    run_test("test_map_simple", *test_map_simple)
    run_test("test_map_collision", *test_map_collision)
    run_test("test_map_resize", *test_map_resize)
    run_test("test_map_keys", *test_map_keys)
}

export def run_test_suite {
    linux::mkdir("tmp".value, 0o777)

    run_test("test_buffer", *test_buffer)
    run_test("test_vector", *test_vector)

    test_util()
    test_map()

    test::test_getopt::run_tests()
    test::test_lexer::run_tests()
    test::test_parser::run_tests()
    test::test_typechecking::run_tests()
    test::test_compiler::run_tests()
    test::test_runtime::run_tests()
    test::test_ctfe::run_tests()
    test::test_vector::run_tests()
    test::test_expr_eval::run_tests()

    print_divider('=')
    print("Finished. Succeeded: ", test_count - failed_test_count, "/", test_count, "\n")
    if failed_test_count > 0 {
        exit(1)
    }
}