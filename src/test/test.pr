def test_loop {
    print(">Test loops... \n")

    var cnt = 0
    while cnt < 10 {
        print(cnt)
        cnt += 1
    }
    print("\n")

    for var i in 0..10 {
        print(i)
    }
    print("\n")

    let foo: *int = null
    while foo != null {
        @foo = 10
    }

    for var i in 0..10 {
        if i == 5 { continue }
        print(i)
    }
    print("\n")

    print("OK\n")
}

type Point = struct {
    x: int
    y: int
}

def test_print {
    let a = 20
    print(">Test print... \n")
    print("Hello World ", 1, " ", 'x', " ", 10.5, " ", *a, "\n")
    error("Hello World ", 1, " ", 'x', " ", 10.5, " ", *a, "\n")

    let point: Point = {10, 20}
    print(point, "\n")

    let array = [1, 2, 3, 4]
    print(array, "\n")

    print("OK\n")
}

def pass_dynamic_array(a: string) {
    print(a)
}

def function(a: int, b: double) -> double { return a * b }
def function(b: double, a: int) -> double { return a * b }
def function -> int { return 10 }

def test_function_calls {
    print(">Test function calls... \n")

    pass_dynamic_array("Some string\n")
    pass_dynamic_array(a = "Named parameter\n")

    function(2, 1.5)
    function(1.5, 2)
    function(2, b = 1.5)
    function(1.5, a = 2)
    // function(a = 1, b = 1.5) # Ambiguous reference

    assert(function == 10)

    print("OK\n")
}

def test_length {
    print(">Test length... ")
    let a = "Some string"
    assert(length(a) == 11)
    print("OK\n")
}

def test_allocate {
    print(">Test allocate... ")
    let a = allocate(size_of int) !*int
    @a = 10
    assert(@a == 10)
    free(a)

    let b = allocate(int)
    @b = 20
    assert(@b == 20)
    free(b)

    let c = allocate(int, 10)
    c[0] = 10
    c[9] = 20
    assert(c[0] == 10)
    assert(c[9] == 20)
    free(c)

    print("OK\n")
}

def test_file_binary {
    print(">Test binary file functions... \n")
    let fp = open("build/test_file_io_binary", "wb+")
    
    let str = "Some text"
    write(fp, str)
    let i = 10
    write(fp, *i)

    rewind(fp)

    var str2: [10; char]
    read(fp, str2)
    print(str2, "\n")

    var i2: int
    read(fp, *i2)
    print(i2, "\n")

    close(fp)
    print("OK\n")
}

def test_file_text {
    print(">Test textual file functions... \n")
    let fp = open("build/test_file_io_text", "w+")

    write_string(fp, "This is a test\n", 10)

    seek(fp, 0, SEEK_SET) // Same as rewind

    var buffer: [20; char]
    read_line(fp, buffer)
    print(buffer)
    var num: int
    scanf(fp, "%d", *num)
    print(num, "\n")

    close(fp)
    print("OK\n")
}

def test_operators {
    print(">Test operators... ")

    let g = true and false
    let h = true and true
    let i = false and true
    assert(not g)
    assert(h)
    assert(not i)
    print("OK\n")
}

type Enum = enum {
    A = 10;
    B; C; D
}

def pass_enum(a: Enum) {}

def test_enum {
    print(">Test enum... \n")
    assert(Enum::A == 10)
    assert(Enum::B == 11)
    pass_enum(Enum::A)
    let a = Enum::A !int
    let b = 10 !Enum
    pass_enum(b)

    print(to_string(Enum::A), "\n")
    print(Enum::B, "\n")

    print("OK\n")
}

def some_function {
    print("Hello\n")
}

def test_function_pointers {
    print(">Test function pointers... \n")
    let function = *some_function
    function()
    print("OK\n")
}

type Struct = struct {
    a: string
    b: int
    c: char
}

def test_structs {
    print(">Test structs...")
    let s = {
        c = 10
    } !Struct
    print("OK\n")
}

type Union = struct #union {
    a: string
    b: int
    c: char
}

def test_unions {
    print(">Test unions...\n")
    let u = {
        "some string"
    } !Union
    print(u, "\n")

    let u2 = {
        b = 20
    } !Union
    u2.b = 120
    print(u2.c, "\n")

    let u3 = {} !Union
    print("OK\n")
}

def test_strings {
    print(">Test strings... ")

    let stra = "Some value"
    assert(stra == "Some value")
    assert(stra != "Other value")

    print("OK\n")
}

def test_if_stmts {
    print(">Test if statement... \n")
    if false {
        print("false\n")
    } else if starts_with("foo", "f") {
        print("true\n")
    } else {
        print("false\n")
    }
    print("OK\n")
}

def fact(n: int) -> int {
    if n <= 1 { return 1 }
    else {
        return n * fact(n - 1)
    }
}

def test_recursion {
    print(">Test recursion... ")
    assert(fact(10) == 3628800)
    print("OK\n")
}

def test_scoping {
    var a = 10
    if true {
        a = 10
        var a = 20
    }
}

def pass_array(a: [int]) {
    for var i in 0..a.size {
        print(a[i], " ")
    }
    print("\n")
}

def test_arrays {
    print(">Test arrays... \n")
    let a = [10, 20, 30]
    let b = [] ![int]
    pass_array(a)
    pass_array(b)
    
    print("OK\n")
}

type Struct2 = struct {
    a: int
    t: *Struct2
}

def test_deref {
    print(">Test automatic deref... \n")
    let s = allocate(Struct2)
    s.a = 10
    s.t = allocate(Struct2)
    s.t.a = 20
    print(s.a, " ", s.t.a, "\n")

    print("OK\n")
}

def function(s: Struct2) -> int { return s.a }
def function(s: Struct2, a: int) -> int { return s.a + a }
def inc(a: int) -> int { return a + 1}

def test_ucs {
    print(">Test uniform call syntax... ")
    let s: Struct2 = { 10, null }
    
    assert(s.function() == 10)
    assert(s.function.inc == 11)
    assert(s.function(10).inc() == 21)

    print("OK\n")
}

type Struct3 = struct {
    a: int
    b: struct {
        c: int
        d: int
    }
    struct #union {
        e: int64
        f: double
    }
}

def test_anonymous {
    print(">Test anonymous struct... \n")

    var s: Struct3
    //s = {10, {20, 30}} // TODO Allow this
    s.a = 10
    s.b = {20, 30}
    s.e = 0x4034800000000000

    print(s.f, "\n")

    print("OK\n")
}

def sum(args: int...) -> int {
    var sum = 0
    for var i in 0..args.size {
        sum += args[i]
    }
    return sum
}

def test_varargs {
    print(">Test varargs... ")
    assert(sum(1, 2, 3) == 6)
    //assert(sum([1, 2, 3]) == 6)
    print("OK\n")
}

print(">Test imports... \n")

import test::a as A
import test::b

assert(A::multiply_by_2(10) == 20)
let a, b = return_multiple()
assert(a == 10)
assert(b == 20)
print(A::Enum::SOME_ENUM_VALUE, "\n")

let c = {10, 10} !A::Point
let d = test::b::some_value

print("OK\n")

print(">Test args... \n")
for var i in 0..args.size {
    print(args[i], " ")
}
print("\n")
print("OK\n")

test_loop()
test_print()
test_function_calls()
test_length()
test_allocate()
test_file_binary()
test_file_text()
test_operators()
test_enum()
test_function_pointers()
test_structs()
test_unions()
test_strings()
test_if_stmts()
test_recursion()
test_scoping()
test_arrays()
test_deref()
test_ucs()
test_anonymous()
test_varargs()

import test::test_getopt