import vector
import map
import util
import lexer
import parser
import typechecking
import compiler
import scope
import builtins
import debug
import codegen
import toolchain
import consteval
import errors

import test::testsuite

type Result = struct {
    scope: *scope::Scope
    node: *parser::Node
}

def typecheck(s: string) -> Result {
    toolchain::outfolder = "./build"
    errors::error_count = 0

    vector::push(toolchain::include_path, util::copy_string("src"))
    
    let main = "main"
    let tokens = lexer::lex(s)
    let lines = util::split_lines(s)
    let node = parser::parse(tokens, lines, main, main)
    let module = toolchain::make_module(
        filename = main,
        modulename = main,
        node = node,
        scpe = scope::enter_function_scope(builtins::builtins, null)
    )
    module.scope.module = module
    consteval::consteval(module)
    typechecking::typecheck(module)

    toolchain::load_file_type()
    // TODO This is a bit besides the point of testing typechecking seperately
    compiler::compile(module)
    
    return { module.scope, node } !Result
}

def test_vardecl {
    var str = "
        var foo: byte = 5
    "
    var res = typecheck(str)
    let v1 = (@scope::get(res.scope, parser::make_identifier(["foo"]))).tpe
    tassert(v1 == builtins::byte_)

    str = "
        var bar: long
        let foo, (bar) = 0, 1
    "
    res = typecheck(str)
    let v2 = (@scope::get(res.scope, parser::make_identifier(["bar"]))).tpe
    let v3 = (@scope::get(res.scope, parser::make_identifier(["foo"]))).tpe
    tassert(v2 == builtins::long_)
    tassert(v3 == builtins::int_)
}

def test_vardecl_fail {
    var str = "
        const a, b = 20
        var c, d = 10, 20, 30
        var c = 10
        var e, (c) = 10
        var f: int = \"string\"
    "
    var res = typecheck(str)
}

def test_var_let {
    var str = "
        let a: *let int = null
        a = null
        @a = 20
    "
    var res = typecheck(str)

    str = "
        var a: [let int]
        a[0] = 20
    "
    res = typecheck(str)

    str = "
        var a: [4; let int]
        a[0] = 20
    "
    res = typecheck(str)
}

def test_literals {
    var str = "
        let v1 = \"string\"
        let v2 = 'c'
        let v3 = 0.0
        let v4 = 0xFF
        let v5 = false
    "

    var res = typecheck(str)
    let v1 = (@scope::get(res.scope, parser::make_identifier(["v1"]))).tpe
    let v2 = (@scope::get(res.scope, parser::make_identifier(["v2"]))).tpe 
    let v3 = (@scope::get(res.scope, parser::make_identifier(["v3"]))).tpe 
    let v4 = (@scope::get(res.scope, parser::make_identifier(["v4"]))).tpe
    let v5 = (@scope::get(res.scope, parser::make_identifier(["v5"]))).tpe

    tassert((@v1).kind == typechecking::TypeKind::ARRAY)
    tassert((@v1).tpe == builtins::char_)
    tassert(v2 == builtins::char_)
    tassert(v3 == builtins::double_)
    tassert(v4 == builtins::int_)
    tassert(v5 == builtins::bool_)
}

def test_assign {    
    var str = "
        var foo = 5
        var bar = 10

        foo, bar = 10, 20

        def function -> int, int {
            return 0, 0
        }
        foo, bar = function()
    "
    typecheck(str)
}

def test_assign_fail {
    var str = "
        var v
        let foo = 20
        foo = 40
        var bar: int
        bar = \"string\"
    "
    var res = typecheck(str)
}

def test_operators {
    var str = "
        let foo = 0
        let bar = -foo
        let baz = +50
    "

    // TODO This doesnt really test anything, we need to inspect the nodes
    var res = typecheck(str)
    let v1 = (@scope::get(res.scope, parser::make_identifier(["foo"]))).tpe
    let v2 = (@scope::get(res.scope, parser::make_identifier(["baz"]))).tpe
    tassert(v1 == builtins::int_)
    tassert(v2 == builtins::int_)

    str = "
        let v3 = 10 + 20
        let v4 = v3 + 0 !short
        let v5 = 0 !long - 0 !int
        let v6 = 0 !long & 0 !int
    "
    res = typecheck(str)
    let v3 = (@scope::get(res.scope, parser::make_identifier(["v3"]))).tpe
    let v4 = (@scope::get(res.scope, parser::make_identifier(["v4"]))).tpe
    let v5 = (@scope::get(res.scope, parser::make_identifier(["v5"]))).tpe
    let v6 = (@scope::get(res.scope, parser::make_identifier(["v6"]))).tpe
    tassert(v3 == builtins::int_)
    tassert(v4 == builtins::int_)
    tassert(v5 == builtins::long_)
    tassert(v6 == builtins::long_)
}

def test_operators_fail {
    var str = "
        var a = 0 !float
        var b = 1
        var c = a & b
        var d = \"string\"
        var e = not d
    "
    var res = typecheck(str)
}

def test_def {
    var str = "
        def foo {}
    "
    var res = typecheck(str)

    str = "
        def foo
        def foo {}
    "
    res = typecheck(str)

    str = "
        def foo {}
        def foo(a: float) {}
    "
    res = typecheck(str)
}

def test_def_fail {
    var str = "
        def foo {}
        def foo {}
    "
    var res = typecheck(str)

    str = "
        def foo {
            export var foo: int
            export def nested_function {}
        }
    "
    res = typecheck(str)
}

def test_def_polymorph {
    var str = "
        def function(type T) -> T {
            var t: T
            return t
        }
        function(int)
    "
    var res = typecheck(str)

    str = "
        def function(a: type T) -> T {
            return a
        }
        function(10)
    "
    res = typecheck(str)
}

def test_typedecl {
    var str = "
        type A = int
        type B = A

        var a: B = 0
    "
    var res = typecheck(str)

    str = "
        type A
        type A = int
        type module::A
        //type module::A = int // No longer allowed
    "
    res = typecheck(str)
}

def test_typedecl_fail {
    var str = "
        type A = int
        type A = float
        var B = 0
        type B = int
    "
    var res = typecheck(str)
}

def test_struct {
    var str = "
        type A = struct {
            a: int32
            b: int64
            c: int16
            d: int8
        }
        type B = struct {
            a: int8
            b: int16
        }
        type C = struct {
            a: int16
            b: int8
            c: int32
        }
    "
    var res = typecheck(str)
    var s1 = scope::get_type(res.scope, parser::make_identifier(["A"]))
    tassert((@s1).size == 24)
    tassert((@s1).align == 8)
    var s2 = scope::get_type(res.scope, parser::make_identifier(["B"]))
    tassert((@s2).size == 4)
    tassert((@s2).align == 2)
    var s3 = scope::get_type(res.scope, parser::make_identifier(["C"]))
    tassert((@s3).size == 8)
    tassert((@s3).align == 4)

    str = "
        type A = struct #union {
            a: int8
            b: int32
            c: int64
        }
    "
    res = typecheck(str)
    var s4 = scope::get_type(res.scope, parser::make_identifier(["A"]))
    tassert((@s4).size == 8)
    tassert((@s4).align == 8)
}

def test_import {
    var str = "
        import test::a
        test::a::multiply_by_2(4)
        multiply_by_2(10)
        multiply_by_2(10.5)
    "
    var res = typecheck(str)

    str = "
        import test::a
        def multiply_by_2(a: int) -> int {
            return a * 2
        }
        multiply_by_2(10)
        test::a::multiply_by_2(10)
        multiply_by_2(10.5) // test::a
    "
    res = typecheck(str)
}

def test_import_fail {
    // TODO Fix this
    // We print too many errors
    /*var str = "
        import test::a
        import test::b
        multiply_by_2(10)
        multiply_by_2(10.5)
    "
    var res = typecheck(str)*/
}

def test_return {
    var str = "
        def foo -> int {
            return 0
        }
    "
    var res = typecheck(str)

    str = "
        def foo -> int, bool {
            return 0, true
        }
        def bar -> int, bool {
            return foo()
        }
    "
    res = typecheck(str)
}

def test_return_fail {
    var str = "
        def foo -> int, bool {
            return false, 'c'
        }
    "
    var res = typecheck(str)
}

def test_pointers {
    var str = "
        let a = 10
        let b = *a
        let c = @b
    "
    var res = typecheck(str)
    let a = (@scope::get(res.scope, parser::make_identifier(["a"]))).tpe
    let b = (@scope::get(res.scope, parser::make_identifier(["b"]))).tpe
    let c = (@scope::get(res.scope, parser::make_identifier(["c"]))).tpe
    tassert(a == builtins::int_)
    tassert(typechecking::equals(b, typechecking::pointer(builtins::int_)))
    tassert(c == builtins::int_)
}

def test_pointers_fail {
    var str = "
        let a = 10
        let b = @a
    "
    var res = typecheck(str)
}

def test_member_access {
    var str = "
        type T = struct {
            a: int
            b: double
        }
        var foo: T
        let a = foo.a
        let b = foo.b
    "
    var res = typecheck(str)
    let a = (@scope::get(res.scope, parser::make_identifier(["a"]))).tpe
    let b = (@scope::get(res.scope, parser::make_identifier(["b"]))).tpe
    tassert(a == builtins::int_)
    tassert(b == builtins::double_)

    // TODO Test error messages
}

def test_array_subscript {
    var str = "
        var a: [4; int]
        let b = a[2]

        var c = 10
        var d = *c
        let e = d[2]
    "
    var res = typecheck(str)
    let b = (@scope::get(res.scope, parser::make_identifier(["b"]))).tpe
    let e = (@scope::get(res.scope, parser::make_identifier(["e"]))).tpe
    tassert(b == builtins::int_)
    tassert(e == builtins::int_)
}

def test_array_lit {
    var str = "
        let a = [1, 2, 3, 4]
        let b: [int] = a
    "
    var res = typecheck(str)
    let a = (@scope::get(res.scope, parser::make_identifier(["a"]))).tpe
    let b = (@scope::get(res.scope, parser::make_identifier(["b"]))).tpe
    tassert((@a).kind == typechecking::TypeKind::STATIC_ARRAY)
    tassert((@a).tpe == builtins::int_)
    tassert((@a).length == 4)
    tassert((@b).kind == typechecking::TypeKind::ARRAY)
    tassert((@b).tpe == builtins::int_)
}

def test_array_inference {
    var str = "
        let a: [?; int] = [1, 2, 3, 4]
        let b: [int] = [1, 2, 3, 4]
    "
    var res = typecheck(str)
}

def test_array_inference_fail {
    var str = "
        let a: [?; float] = [1, 2, 3, 4]
    "
    var res = typecheck(str)
}

def test_array_size_and_value {
    var str = "
        let a = [1, 2, 3, 4]
        let b: [int] = a
        let c = a.size
        let d = a.value
        let e = b.size
        let f = b.value 
    "
    var res = typecheck(str)
    let c = (@scope::get(res.scope, parser::make_identifier(["c"]))).tpe
    let d = (@scope::get(res.scope, parser::make_identifier(["d"]))).tpe
    let e = (@scope::get(res.scope, parser::make_identifier(["e"]))).tpe
    let f = (@scope::get(res.scope, parser::make_identifier(["f"]))).tpe
    tassert(c == builtins::size_t_ and e == builtins::size_t_)
    tassert(typechecking::is_pointer(d) and typechecking::is_pointer(f))
    tassert((@d).tpe == builtins::int_ and (@f).tpe == builtins::int_)
}

def test_call {
    var str = "
        def demo_function_1
        def demo_function_2(a: int)
        demo_function_1() // empty function
        demo_function_2(42) // function with unnamed parameter
        demo_function_2(a=42) // function with named parameter
    "
    var res = typecheck(str)
}

def test_call_fail {
    var str = "
        def demo_function_2(a: int)
        demo_function_2(a=42, a=11) // function with named parameter twice
    "
    var res = typecheck(str)
    
    str = "
        def no_return
        var a: int
        a = no_return()
    "
    res = typecheck(str)
}

export def run_tests {
    toolchain::prepare_preload()
    toolchain::create_types_main()

    print("Running tests on Typechecking...\n")
    run_test("test_vardecl", *test_vardecl)
    run_test("test_vardecl_fail", *test_vardecl_fail, "", util::strip_margin("
        |main@2:9
        |        const a, b = 20
        |        ^~~~~~~~~~~~~~~
        |Unbalanced assignment
        |
        |main@4:13
        |        var c = 10
        |            ^~
        |Redeclaration of `c`
        |
        |main@5:16
        |        var e, (c) = 10
        |               ^~~~
        |Must assign a value
        |
        |main@6:14
        |        var f: int = \"string\"
        |             ^~~~~~
        |Incompatible types [char] and int\n"))
    run_test("test_var_let", *test_var_let, "", util::strip_margin("
        |main@3:9
        |        a = null
        |        ^~
        |Assignment to non var
        |
        |main@4:9
        |        @a = 20
        |        ^~~
        |Assignment to non var
        |
        |main@3:9
        |        a[0] = 20
        |        ^~~
        |Assignment to non var
        |
        |main@3:9
        |        a[0] = 20
        |        ^~~
        |Assignment to non var\n"))
    run_test("test_literals", *test_literals)
    run_test("test_assign", *test_assign)
    run_test("test_assign_fail", *test_assign_fail, "", util::strip_margin("
        |main@4:9
        |        foo = 40
        |        ^~~~
        |Assignment to non var
        |
        |main@6:9
        |        bar = \"string\"
        |        ^~~~
        |Incompatible types [char] and int
        |
        |main@2:14
        |        var v
        |             ^
        |Need to specify a type\n"))
    run_test("test_operators", *test_operators)
    run_test("test_operators_fail", *test_operators_fail, "", util::strip_margin("
        |main@4:17
        |        var c = a & b
        |                ^~~~~
        |Invalid operands of type float and int to bitwise operator
        |
        |main@6:17
        |        var e = not d
        |                ^~~~~
        |Incompatible type [char], must be boolean type\n"))
    run_test("test_def", *test_def)
    run_test("test_def_fail", *test_def_fail, "", util::strip_margin("
        |main@3:13
        |        def foo {}
        |            ^~~~
        |Function `foo` was already declared previously (same arguments)
        |
        |main@3:20
        |            export var foo: int
        |                   ^~~~~~~~~~~~
        |Can't share non top level variable
        |
        |main@4:20
        |            export def nested_function {}
        |                   ^~~~~~~~~~~~~~~~~~~~~~
        |Can't share non top level function\n"))
    run_test("test_def_polymorph", *test_def_polymorph)
    run_test("test_typedecl", *test_typedecl)
    run_test("test_typedecl_fail", *test_typedecl_fail, "", util::strip_margin("
        |main@3:9
        |        type A = float
        |        ^~~~~~~~~~~~~~
        |Redeclaration of `A`
        |
        |main@5:9
        |        type B = int
        |        ^~~~~~~~~~~~
        |Redeclaration of `B`\n"))
    run_test("test_struct", *test_struct)
    run_test("test_import", *test_import)
    run_test("test_import_fail", *test_import_fail)
    run_test("test_return", *test_return)
    run_test("test_return_fail", *test_return_fail, "", util::strip_margin("
        |main@3:13
        |            return false, 'c'
        |            ^~~~~~~~~~~~~~~~~
        |Wrong type of return argument, got bool, expected int
        |
        |main@3:13
        |            return false, 'c'
        |            ^~~~~~~~~~~~~~~~~
        |Wrong type of return argument, got char, expected bool\n"))
    run_test("test_pointers", *test_pointers)
    run_test("test_pointers_fail", *test_pointers_fail, "", util::strip_margin("
        |main@3:17
        |        let b = @a
        |                ^~
        |Needs to be a pointer or reference type, got int
        |
        |main@3:9
        |        let b = @a
        |        ^~~~~~~~~~
        |Unbalanced assignment\n"))
    run_test("test_member_access", *test_member_access)
    run_test("test_array_subscript", *test_array_subscript)
    run_test("test_array_lit", *test_array_lit)
    run_test("test_array_inference", *test_array_inference)
    run_test("test_array_inference_fail", *test_array_inference_fail, "", util::strip_margin("
        |main@2:14
        |        let a: [?; float] = [1, 2, 3, 4]
        |             ^~~~~~~~~~~~~
        |Incompatible types [4; int] and [?; float]\n"))
    run_test("test_array_size_and_value", *test_array_size_and_value)
    run_test("test_call", *test_call)
    run_test("test_call_fail", *test_call_fail, "", util::strip_margin("
        |main@3:31
        |        demo_function_2(a=42, a=11) // function with named parameter twice
        |                              ^~~~
        |Cannot have the same parameter name multiple times in a function call. Parameter name was `a`.
        |
        |main@4:9
        |        a = no_return()
        |        ^~~~~~~~~~~~~~~
        |Unbalanced assignment\n"))
}