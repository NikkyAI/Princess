import vector
import buffer
import map
import codegen
import lexer
import util
import parser
import scope
import typechecking
import compiler
import toolchain
import builtins
import consteval
import errors

import test::testsuite

export var print_ll = false

def compile(s: string) -> string {
    toolchain::outfolder = "./build"
    errors::error_count = 0
    
    vector::push(toolchain::include_path, util::copy_string("src"))
    
    let main = "main"
    let tokens = lexer::lex(s)
    let lines = util::split_lines(s)
    let node = parser::parse(tokens, lines, main, main)
    let module = toolchain::make_module(
        filename = main,
        modulename = main,
        node = node,
        scpe = scope::enter_function_scope(builtins::builtins, null)
    )
    module.scope.module = module

    consteval::consteval(module)
    typechecking::typecheck(module)
    
    toolchain::load_file_type()
    compiler::compile(module)
    codegen::gen(module)
    
    let fh = open("./build/main.ll", "r")
    let buf = util::read_all(fh)
    close(fh)

    let llc = system("llc-13 build/main.ll")
    if llc {
        error("LLC compilation failed!\n")
    }

    if print_ll or llc {
        print("\n")
        print(s)
        print("\n")
        print(buf)
    }

    if llc {
        exit(1)
    }

    return buf
}

def test_arithmetic {
    var str = "
        10 + 10 + 10
    "
    var res = compile(str)

    str = "
        10 * 2 + 5 / 4 - 5 % 3
    "
    res = compile(str)

    str = "
        10.5 / 4.0
    "
    res = compile(str)

    str = "
        10 << 1 + 10 >> 2
    "
    res = compile(str)

    str = "
        -10
        -10.5
    "
    res = compile(str)
}

def test_call {
    var str = "
        def add(a: int, b: int) -> int {
            return a + b
        }
        add(10, 10)
    "
    var res = compile(str)

    // Overloaded function
    str = "
        def add(a: int, b: int) -> int {
            return a + b
        }
        def add(a: double, b: double) -> double {
            return a + b
        }
        add(10, 10)
        add(10.0, 10.5)
    "
    res = compile(str)
}

def test_if {
    var str = "
        def foo {}
        if true {
            foo()
        }
        foo()
    "
    var res = compile(str)

    str = "
        def foo -> int { return 0 }
        if true {
            let x = foo()
        } else if false {
            let x = foo()
        } else if true {
            let x = foo()
        }
        let x = foo()
    "
    res = compile(str)

    str = "
        def foo
        if true {
            foo()
        } else {
            foo()
        }
        foo()
    "
    res = compile(str)

    // Nested
    str = "
        def foo
        if true {
            foo()
            if true {
                foo()
            } else {
                foo()
            }
        } else {
            foo()
            if true {
                foo()
            } else if true {
                foo()
            } else {
                foo()
            }
        }
        foo()
    "
    res = compile(str)
}

def test_loop {
    var str = "
        def foo
        loop {
            foo()
            continue
            foo()
            break
            foo()
        }
    "
    var res = compile(str)

    str = "
        loop {
            if true {
                break
            } else {
                continue
            }
            break
        }
    "
    res = compile(str)
    
    str = "
        loop {
            continue
            loop {
                continue
                break
            }
            break
        }
    "
    res = compile(str)
}

def test_while {
    var str = "
        var i = 0
        while i < 10 {
            i += 1
        }
    "
    var res = compile(str)
}

def test_for {
    var str = "
        for var i in 0..10 {
            print(i)
        }
    "
    var res = compile(str)

    str = "
        var i = 0
        for i in 0..=10 {
            print(i)
        }
    "
    res = compile(str)
}

def test_vardecl {
    var str = "
        def foo {
            var a: int, b: int
        }
    "
    var res = compile(str)

    // Test scoping
    str = "
        def foo {
            var a: int
            if false {
                var a: int
            }
        }
    "
    res = compile(str)
}

def test_globals {
    var str = "
        var global: int
    "
    var res = compile(str)

    str = "
        let global = 20
    "
    res = compile(str)

    str = "
        let a, b = 10, 20
    "
    res = compile(str)

    str = "
        def foo -> int, int {
            return 10, 20
        }
        let a, b = foo()
    "
    res = compile(str)

    str = "
        def foo -> int, int {
            return 10, 20
        }
        var a: int
        let (a), b = foo()
    "
    res = compile(str)

    str = "
        def foo -> int {
            return 10
        }
        var a: int
        var b: int
        a = b = foo()
    "
    res = compile(str)
}

def test_ptr {    
    var str = "
        let a = 20
        let pa = *a
        @pa = 40
    "
    var res = compile(str)

    str = "
        let a = 20
        let pa = *a
        let ppa = *pa
        @@ppa = 40
        let b = @@ppa
    "
    res = compile(str)
}

def test_ref {
    var str = "
        var a: &int
        var b: &
        b = a
    "
    var res = compile(str)

    str = "
        var a: &int = 20
        var b = a
    "
    res = compile(str)

    str = "
        var a: &int = 20
        var b = @a
    "
    res = compile(str)

    str = "
        var a: &int = 20
        var b = a !&float
        var c = a !*int
    "
    res = compile(str)
}

def test_convert {
    var str = "
        let a = 10 !float
        let b = a !int
    "
    var res = compile(str)

    str = "
        let a = 10!float + 20
        let b = 10!uint + 20
    "
    res = compile(str)

    str = "
        let a = 200!bool
        let b = 1.5!bool
        let c: *int = null
        let d = c!bool
    "
    res = compile(str)

    str = "
        let a: int64 = 20
        let b: int16 = 20

        def foo(a: int64)
        foo(10)
    "
    res = compile(str)
}

def test_member_access {
    var str = "
        type S = struct {
            value: int
        }
        type T = struct {
            a: int
            b: S
        }

        var t: T
        let a = t.a
        let b = t.b.value

        t.b.value = 20
        t.a = 40
    "
    var res = compile(str)
}

def test_array_subscript {
    var str = "
        var a: [int]
        var b: *int
        var c: [3; int]

        let d = a[2]
        let e = b[2]
        let f = c[2]

        a[2] = 5
        b[2] = 10
        c[2] = 15
    "
    var res = compile(str)
}

def test_struct_lit {
    var str = "
        type T = struct {
            a: int
            b: int
        }
        let a = {10, 20} !T
    "
    var res = compile(str)

    str = "
        type T = struct {
            a: int
            b: int
        }
        let a = 20
        let b = 50
        let c = {a = a, b = b} !T
    "
    res = compile(str)

    str = "
        type A = struct {
            a: int
        }
        type B = struct {
            b: A
            c: int
        }
        let a = 20
        let b = 50
        let v = {{a} !A, b} !B
    "
    res = compile(str)

    str = "
        type A = struct {
            value: int
        }

        def ret_a -> A {
            return {10}
        }

        let a: A = {10}
        var b: A
        b = {10}
    "
    res = compile(str)

    str = "
        type A = struct {
            a: int
            b: int
            c: int
        }
        let a = {a = 10} !A
    "
    res = compile(str)
}

def test_size_of {
    var str = "
        type T = struct {
            a: int
            b: int
        }

        let a = size_of T
        let b = size_of int
        let c = size_of type *
        let d = size_of type_of a
        let e = size_of type_of a + b
    "
    var res = compile(str)
}

def test_align_of {
    var str = "
        type T = struct {
            a: int
            b: int
        }

        let a = align_of T
        let b = align_of int
        let c = align_of type *
        let d = align_of type_of a
        let e = align_of type_of a + b
    "
    var res = compile(str)
}

def test_type_of {
    var str = "
        let a = 20
        let b: (type_of a) = 30

        def some_function(type T) {}

        some_function(type_of a)
    "
    var res = compile(str)
}

def test_array_lit {
    var str = "
        let a = [1, 2, 3, 4]
    "
    var res = compile(str)
    
    str = "
        let a: [int] = [1, 2, 3, 4]
        let b: [?; int] = [1, 2, 3, 4]
    "
    res = compile(str)

    str = "
        let a = 10
        let b = [a, 20]
        let c: [int] = b
    "
    res = compile(str)
}

def test_compare {
    var str = "
        let a = 10 == 20
        let b = 10 > 20
        let c = 10 < 20
        
        let d = 5
        let e = 1 < d < 10
    "
    var res = compile(str)
}

def test_pointer_arithmetic {
    var str = "
        let a = 20
        let b = *a
        let c = b ++ 20 -- 5
    "
    var res = compile(str)

    str = "
        var a: *int
        @(a ++ 10) = 20
    "
    res = compile(str)
}

def test_assign_eq {
    var str = "
        var a = 10
        a += 20
        a <<= 1
        a >>= 2
        a *= 5
        a /= 10
    "
    var res = compile(str)
}

def test_import {
    var str = "
        import test::a
        import test::b

        let a, b = return_multiple()
    "
    var res = compile(str)
}

def test_array_size_and_value {
    var str = "
        var a: [4; int]
        var b: [int]

        let c = a.size
        let d = a.value
        let e = b.size
        let f = b.value

        b.size = 20
        b.value = null
    "
    var res = compile(str)
}

def test_string_literal {
    // Conversion between static and dynamic arrays
    var str = "
        def function -> [4; char] {}

        var a: [char] = \"abc\"
        var b: [char] = function()

        def two_returns -> [4; char], [5; char] {}
        var c: [char], d: [char] = two_returns()
    "
    var res = compile(str)
}

def test_boolean_op {
    var str = "
        let a = true
        let b = false
        let c = a and b
        let d = a or b
        let e = not d
    "
    var res = compile(str)
}

def test_builtins {
    var str = "
        var a = 10
        assert(a == 15)
        print(a, 10, 10.5, \"string\")
        let b = allocate(int)
        let c = allocate(size_of int) !*int
        reallocate(c, 10 * (size_of int))
        let d = allocate(int, 10)
        free(b)
        free(c)
        free(d)
    "
    var res = compile(str)

    str = "
        let fp: File = open(\"build/test\", \"wb+\")
        
        write(fp, \"some string\")
        let i = 20
        write(fp, *i)

        rewind(fp)

        var str: [12; char]
        read(fp, str)
        
        var i2: int
        read(fp, *i2)
        
        close(fp)
    "
    res = compile(str)

    str = "
        let fp: File = open(\"build/test_file_io_text\", \"w+\")

        write_string(fp, \"This is a test\\n\", 10)

        seek(fp, 0, SEEK_SET) // Same as rewind

        var buffer: [20; char]
        read_line(fp, buffer)
        var num: int
        cstd::fscanf(fp, \"%d\".value, *num)

        close(fp)

    "
    res = compile(str)
}

def test_switch {
    var str = "
        let a = 20
        switch a {
            case 10: print(1)
            case 11..=19: print(2)
            case 20, 25: print(3)
            case: print(4)
        }
    "
    var res = compile(str)

    str = "
        let a = 20
        switch a {
            case 0..=100: print(1)
            case 101, 102, 103: print(2)
            case 104..200, 205: print(3)
            case: print(4)
        }
    "
    res = compile(str)
}

def test_function_pointers {    
    var str = "
        def some_function -> int { return 20 }
        let a = *some_function
        let b = a()
    "
    var res = compile(str)
}

def test_if_expression {
    var str = "
        let a = 10 if 10 > 20 else 5
        var b: int
        var c: int
        @(*b if 10 > 20 else *c) = 10
    "
    var res = compile(str)
}

def test_return_multiple {
    var str = "
        type T = struct {
            a: int
            b: int
        }

        def return_multiple -> T, T {
            let a = { 0, 0 } !T
            let b = { 1, 1 } !T
            return a, b
        }
    "
    var res = compile(str)
}

def test_assert {
    var str = "
        assert
        assert 1 == 2
        assert 1 == 2, \"What is this\"
    "
    var res = compile(str)
}

export def run_tests {
    toolchain::prepare_preload()
    toolchain::create_types_main()
    
    print("Running tests on Compiler...\n")
    run_test("test_arithmetic", *test_arithmetic)
    run_test("test_call", *test_call)
    run_test("test_if", *test_if)
    run_test("test_loop", *test_loop)
    run_test("test_while", *test_while)
    run_test("test_for", *test_for)
    run_test("test_vardecl", *test_vardecl)
    run_test("test_globals", *test_globals)
    run_test("test_ptr", *test_ptr)
    run_test("test_ref", *test_ref)
    run_test("test_convert", *test_convert)
    run_test("test_member_access", *test_member_access)
    run_test("test_array_subscript", *test_array_subscript)
    run_test("test_struct_lit", *test_struct_lit)
    run_test("test_size_of", *test_size_of)
    run_test("test_align_of", *test_align_of)
    run_test("test_type_of", *test_type_of)
    run_test("test_array_lit", *test_array_lit)
    run_test("test_compare", *test_compare)
    run_test("test_pointer_arithmetic", *test_pointer_arithmetic)
    run_test("test_assign_eq", *test_assign_eq)
    run_test("test_import", *test_import)
    run_test("test_array_size_and_value", *test_array_size_and_value)
    run_test("test_string_literal", *test_string_literal)
    run_test("test_builtins", *test_builtins)
    run_test("test_switch", *test_switch)
    run_test("test_function_pointers", *test_function_pointers)
    run_test("test_if_expression", *test_if_expression)
    run_test("test_return_multiple", *test_return_multiple)
    run_test("test_assert", *test_assert)
}