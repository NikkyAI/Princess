import json
import common

def parse(str: &string) -> &Json {
    return json::parse(common::run_compiler(str, "--ast"))
}

def program(jsn: &Json) -> &Json {
    let obj = json::make_object()
    obj["kind"] = "Program"
    let body = json::make_array()
    body.push(jsn)
    obj["body"] = body
    return obj
}

def #test test_identifiers {
    assert parse("foo") == program(json::parse("""{\
        "kind": "Identifier", "path": ["foo"],
        "prefixed": false, "args": null
    }"""))

    assert parse("foo::bar::baz") == program(json::parse("""{\
        "kind": "Identifier", "path": ["foo", "bar", "baz"],
        "prefixed": false, "args": null
    }"""))

    assert parse("::foo::bar::baz") == program(json::parse("""{\
        "kind": "Identifier", "path": ["foo", "bar", "baz"],
        "prefixed": true, "args": null
    }"""))

    assert parse("foo::bar::") == program(json::parse("""{\
        "kind": "Identifier", "path": ["foo", "bar", "baz"],
        "prefixed": false, "args": []
    }"""))

    assert parse("foo::bar::(int)") == program(json::parse("""{\
        "kind": "Identifier", "path": ["foo", "bar"],
        "prefixed": false,
        "args": [{
            "kind": "Identifier", "path": ["int"],
            "prefixed": false, "args": null
        }]
    }"""))

    assert parse("foo::bar::(int, () -> ())") == program(json::parse("""{\
        "kind": "Identifier", "path": ["foo", "bar"],
        "prefixed": false, 
        "args": [{
            "kind": "Identifier", "path": ["int"],
            "prefixed": false, "args": null
        }, {
            "kind": "FunctionT", "args": [], "ret": []
        }]
    }"""))
}

def #test test_binary_operators {
    assert parse("1 + 2 * 3 - 5") == program(json::parse("""{\
        "kind": "Sub",
        "left": {
            "kind": "Add",
            "left": { "kind": "Integer", "value": 1 },
            "right": {
                "kind": "Mul",
                "left": { "kind": "Integer", "value": 2 },
                "right": { "kind": "Integer", "value": 3 }
            }
        },
        "right": { "kind": "Integer", "value": 5 }
    }"""))

    assert parse("1 << 5 + 0xFF >> 1") == program(json::parse("""{\
        "kind": "Add",
        "left": {
            "kind": "Shl",
            "left": { "kind": "Integer", "value": 1 },
            "right": { "kind": "Integer", "value": 5 }
        },
        "right": {
            "kind": "Shr",
            "left": { "kind": "Integer", "value": 255 },
            "right": { "kind": "Integer", "value": 1}
        }
    }"""))

    assert parse("0 and 2 or 5") == program(json::parse("""{\
        "kind": "Or",
        "left": {
            "kind": "And",
            "left": { "kind": "Integer", "value": 0 },
            "right": { "kind": "Integer", "value": 2 }
        },
        "right": { "kind": "Integer", "value": 5 }
    }"""))
}

def #test test_comparison_operators {
    
}