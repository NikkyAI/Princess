import io
import process

#if defined WIN32 {
    // TODO Somehow on windows the dll doesn't inherit the mode
    cstd::_setmode(1, 0x8000)
    cstd::_setmode(2, 0x8000)
}

export let tmpfolder = tmpfolder("princess")

export def run_compiler_on_source(str: &string, args: [&string]) -> &string {
    let file = tmpfolder + "/main.pr"
    let fh = open(file, "w")
    fprint(fh, str)
    fh.close()

    return run_compiler(file, args)
}

export def run_compiler(file: &string, args: [&string]) -> &string {
    let r, w = io::pipe()

    var compiler: &string = runtime::executable
    let env = cstd::getenv("PRINCESS_COMPILER".value)
    if env { compiler = make_string(env) }

    let res = allocate_ref(type &string, args.size + 2)
    res[0] = file
    res[1] = "--no-incremental" // TODO Enable incremental compilation
    for var i in 0..args.size {
        res[i + 2] = args[i]
    }

    let proc = *process::spawn(
        compiler,
        res,
        stdout = w
    )
    proc.wait()
    proc.dispose()

    if proc.exit_code {
        close(w)
        close(r)
        return null
    }

    fflush(w)
    close(w)
    let ast = r.read_all_pipe()
    close(r)
    return ast
}

export def test_file(name: &string) -> &string {
    return dirname(__file__) + "/runtime/" + name
}

export def executable(name: &string) -> &string {
    #if defined WIN32 {
        return name + ".exe"
    }
    return name
}

export def compile_source(src: &string) -> int {
    return run_source(src, run = false)
}

export def run_source(src: &string, run: bool = true) -> int {
    let file = tmpfolder + "/main"
    let fh = open(file + ".pr", "w")
    fprint(fh, src)
    fh.close()
    return run_file(file, run)
}

export def compile_file(name: &string) -> int {
    return run_file(name, run = false)
}

export def run_file(name: &string, run: bool = true) -> int {
    let src = name + ".pr"
    let exe = executable(name)

    let res = run_compiler(src, ["-o"! &string, exe])
    if not res { return 1 }

    if run {
        let proc = *process::spawn(exe, [] ![&string])
        proc.wait()
        proc.dispose()
        return proc.exit_code
    }
    return 0
}