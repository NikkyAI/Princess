import io
import process

#if defined WIN32 {
    // TODO Somehow on windows the dll doesn't inherit the mode
    cstd::_setmode(1, 0x8000)
    cstd::_setmode(2, 0x8000)
}

export def run_compiler(file: &string, str: &string, args: &string) -> &string {
    let fh = open(file, "w")
    fprint(fh, str)
    fh.close()

    return run_compiler(file, args)
}

export def run_compiler(file: &string, args: &string) -> &string {
    let r, w = io::pipe()

    var compiler: &string = runtime::executable
    let env = cstd::getenv("PRINCESS_COMPILER".value)
    if env { compiler = make_string(env) }

    let proc = *process::spawn(
        compiler, 
        [file, args] ![&string],
        stdout = w
    )
    proc.wait()
    proc.dispose()

    if proc.exit_code {
        close(w)
        close(r)
        return null
    }

    fflush(w)
    close(w)
    let ast = r.read_all_pipe()
    close(r)
    return ast
}